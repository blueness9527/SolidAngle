// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "HeadMountedDisplay.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1HeadMountedDisplay() {}
	void UMotionControllerComponent::StaticRegisterNativesUMotionControllerComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMotionControllerComponent::StaticClass(), "IsTracked",(Native)&UMotionControllerComponent::execIsTracked);
	}
	IMPLEMENT_CLASS(UMotionControllerComponent, 1062733078);
	void UVRNotificationsComponent::StaticRegisterNativesUVRNotificationsComponent()
	{
	}
	IMPLEMENT_CLASS(UVRNotificationsComponent, 2410403789);
static class UEnum* ETrackingStatus_StaticEnum()
{
	extern HEADMOUNTEDDISPLAY_API class UPackage* Z_Construct_UPackage__Script_HeadMountedDisplay();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern HEADMOUNTEDDISPLAY_API class UEnum* Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus();
		Singleton = GetStaticEnum(Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus, Z_Construct_UPackage__Script_HeadMountedDisplay(), TEXT("ETrackingStatus"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETrackingStatus(ETrackingStatus_StaticEnum, TEXT("/Script/HeadMountedDisplay"), TEXT("ETrackingStatus"), false, nullptr, nullptr);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();

	HEADMOUNTEDDISPLAY_API class UFunction* Z_Construct_UFunction_UMotionControllerComponent_IsTracked();
	HEADMOUNTEDDISPLAY_API class UClass* Z_Construct_UClass_UMotionControllerComponent_NoRegister();
	HEADMOUNTEDDISPLAY_API class UClass* Z_Construct_UClass_UMotionControllerComponent();
	HEADMOUNTEDDISPLAY_API class UFunction* Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature();
	HEADMOUNTEDDISPLAY_API class UClass* Z_Construct_UClass_UVRNotificationsComponent_NoRegister();
	HEADMOUNTEDDISPLAY_API class UClass* Z_Construct_UClass_UVRNotificationsComponent();
	HEADMOUNTEDDISPLAY_API class UEnum* Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus();
	HEADMOUNTEDDISPLAY_API class UPackage* Z_Construct_UPackage__Script_HeadMountedDisplay();
	UFunction* Z_Construct_UFunction_UMotionControllerComponent_IsTracked()
	{
		struct MotionControllerComponent_eventIsTracked_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsTracked"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MotionControllerComponent_eventIsTracked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MotionControllerComponent_eventIsTracked_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MotionControllerComponent_eventIsTracked_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MotionControllerComponent_eventIsTracked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Whether or not this component had a valid tracked device this frame"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMotionControllerComponent_NoRegister()
	{
		return UMotionControllerComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UMotionControllerComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage__Script_HeadMountedDisplay();
			OuterClass = UMotionControllerComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMotionControllerComponent_IsTracked());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurrentTrackingStatus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentTrackingStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(CurrentTrackingStatus, UMotionControllerComponent), 0x0010000000000014, Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus());
				UProperty* NewProp_CurrentTrackingStatus_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_CurrentTrackingStatus, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableLowLatencyUpdate, UMotionControllerComponent, uint8);
				UProperty* NewProp_bDisableLowLatencyUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableLowLatencyUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableLowLatencyUpdate, UMotionControllerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDisableLowLatencyUpdate, UMotionControllerComponent), sizeof(uint8), false);
				UProperty* NewProp_Hand = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Hand"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Hand, UMotionControllerComponent), 0x0010000000000005, Z_Construct_UEnum_InputCore_EControllerHand());
				UProperty* NewProp_Hand_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Hand, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, UMotionControllerComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMotionControllerComponent_IsTracked(), "IsTracked"); // 858284947
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("MotionController"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MotionControllerComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("ToolTip"), TEXT("The tracking status for the device (e.g. full tracking, inertial tracking only, no tracking)"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("ToolTip"), TEXT("If false, render transforms within the motion controller hierarchy will be updated a second time immediately before rendering."));
				MetaData->SetValue(NewProp_Hand, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_Hand, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
				MetaData->SetValue(NewProp_Hand, TEXT("ToolTip"), TEXT("Which hand this component should automatically follow"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("ModuleRelativePath"), TEXT("Public/MotionControllerComponent.h"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("ToolTip"), TEXT("Which player index this motion controller should automatically follow"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMotionControllerComponent(Z_Construct_UClass_UMotionControllerComponent, &UMotionControllerComponent::StaticClass, TEXT("UMotionControllerComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMotionControllerComponent);
	UFunction* Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_UVRNotificationsComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VRNotificationsDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVRNotificationsComponent_NoRegister()
	{
		return UVRNotificationsComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UVRNotificationsComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_HeadMountedDisplay();
			OuterClass = UVRNotificationsComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HMDRemovedFromHeadDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDRemovedFromHeadDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDRemovedFromHeadDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDPutOnHeadDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDPutOnHeadDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDPutOnHeadDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDConnectCanceledDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDConnectCanceledDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDConnectCanceledDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDReconnectedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDReconnectedDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDReconnectedDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDLostDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDLostDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDLostDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDRecenteredDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDRecenteredDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDRecenteredDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDTrackingInitializedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDTrackingInitializedDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDTrackingInitializedDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
				UProperty* NewProp_HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, UVRNotificationsComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature(), "VRNotificationsDelegate__DelegateSignature"); // 826297385
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("HeadMountedDisplay"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VRNotificationsComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDRemovedFromHeadDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDRemovedFromHeadDelegate, TEXT("ToolTip"), TEXT("This will be called when the HMD detects that it has been taken off by a player (disconnecting the hmd also causes it to register as taken off)."));
				MetaData->SetValue(NewProp_HMDPutOnHeadDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDPutOnHeadDelegate, TEXT("ToolTip"), TEXT("This will be called when the HMD detects that it has been put on by a player."));
				MetaData->SetValue(NewProp_HMDConnectCanceledDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDConnectCanceledDelegate, TEXT("ToolTip"), TEXT("This will be called when the user declines to connect the HMD when prompted to do so by a system dialog. (PS4 Only)"));
				MetaData->SetValue(NewProp_HMDReconnectedDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDReconnectedDelegate, TEXT("ToolTip"), TEXT("This will be called when connection to HMD is restored."));
				MetaData->SetValue(NewProp_HMDLostDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDLostDelegate, TEXT("ToolTip"), TEXT("This will be called when connection to HMD is lost."));
				MetaData->SetValue(NewProp_HMDRecenteredDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDRecenteredDelegate, TEXT("ToolTip"), TEXT("This will be called when the application is asked for VR headset recenter."));
				MetaData->SetValue(NewProp_HMDTrackingInitializedDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDTrackingInitializedDelegate, TEXT("ToolTip"), TEXT("This will be called on Morpheus when the HMD is done initializing and therefore\nreprojection will start functioning.\nThe app can continue now. (PS4 Only)"));
				MetaData->SetValue(NewProp_HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, TEXT("ModuleRelativePath"), TEXT("Public/VRNotificationsComponent.h"));
				MetaData->SetValue(NewProp_HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, TEXT("ToolTip"), TEXT("This will be called on Morpheus if the HMD starts up and is not fully initialized (in NOT_STARTED or CALIBRATING states).\nThe HMD will stay in NOT_STARTED until it is successfully position tracked.  Until it exits NOT_STARTED orientation\nbased reprojection does not happen.  Therefore we do not update rotation at all to avoid user discomfort.\nInstructions to get the hmd tracked should be shown to the user.\nSony may fix this eventually. (PS4 Only)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVRNotificationsComponent(Z_Construct_UClass_UVRNotificationsComponent, &UVRNotificationsComponent::StaticClass, TEXT("UVRNotificationsComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVRNotificationsComponent);
	UEnum* Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_HeadMountedDisplay();
		extern uint32 Get_Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETrackingStatus"), 0, Get_Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrackingStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETrackingStatus::NotTracked")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETrackingStatus::InertialOnly")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETrackingStatus::Tracked")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETrackingStatus::ETrackingStatus_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ETrackingStatus");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/IMotionController.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus_CRC() { return 3779010768U; }
	UPackage* Z_Construct_UPackage__Script_HeadMountedDisplay()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/HeadMountedDisplay")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x961D3704;
			Guid.B = 0xF9AE5673;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_UVRNotificationsComponent_VRNotificationsDelegate__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
