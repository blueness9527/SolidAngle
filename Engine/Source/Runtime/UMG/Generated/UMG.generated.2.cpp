// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "UMG.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode2UMG() {}
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	MOVIESCENETRACKS_API class UClass* Z_Construct_UClass_UMovieScenePropertyTrack();
	MOVIESCENETRACKS_API class UClass* Z_Construct_UClass_UMovieSceneMaterialTrack();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ECheckBoxState();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateColor();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeometry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFocusEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMotionEvent();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchors();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMargin();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EHorizontalAlignment();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EVerticalAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESelectInfo();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateFontInfo();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextFlowDirection();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ETextShapingMethod();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextWrappingPolicy();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextJustify();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ETextCommit();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpandableAreaStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EMenuPlacement();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretch();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretchDirection();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EConsumeMouseWheel();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EOrientation();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EProgressBarFillType();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSliderStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ESelectionMode();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSequence();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationEvent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMouseLockMode();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigationRule();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneEvalTemplate();
	MOVIESCENE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieScenePropertySectionData();
	MOVIESCENETRACKS_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneParameterSectionTemplate();

	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UAsyncTaskDownloadImage_DownloadImage();
	UMG_API class UClass* Z_Construct_UClass_UAsyncTaskDownloadImage_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UAsyncTaskDownloadImage();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EDragPivot();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_DragCancelled();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_Dragged();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_Drop();
	UMG_API class UClass* Z_Construct_UClass_UDragDropOperation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UDragDropOperation();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetTransform();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformSection_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformSection();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformTrack_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformTrack();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginSection_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginSection();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginTrack_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginTrack();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneWidgetMaterialTrack_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneWidgetMaterialTrack();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlotInterface_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlotInterface();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicPropertyPath();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPropertyPathSegment();
	UMG_API class UClass* Z_Construct_UClass_UPropertyBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPropertyBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UBoolBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UBoolBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBoolBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UBrushBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UBrushBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBrushBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckedStateBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UCheckedStateBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCheckedStateBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UColorBinding_GetLinearValue();
	UMG_API class UFunction* Z_Construct_UFunction_UColorBinding_GetSlateValue();
	UMG_API class UClass* Z_Construct_UClass_UColorBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UColorBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UFloatBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UFloatBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UFloatBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UInt32Binding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UInt32Binding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UInt32Binding();
	UMG_API class UFunction* Z_Construct_UFunction_UMouseCursorBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UMouseCursorBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMouseCursorBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBinding_GetStringValue();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBinding_GetTextValue();
	UMG_API class UClass* Z_Construct_UClass_UTextBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTextBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UVisibilityBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UVisibilityBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVisibilityBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBinding();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlockDecorator_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlockDecorator();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToLocal();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_EqualEqual_SlateBrush();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_GetLocalSize();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_IsUnderLocation();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToAbsolute();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_ScreenToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_ScreenToWidgetAbsolute();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_ScreenToWidgetLocal();
	UMG_API class UClass* Z_Construct_UClass_USlateBlueprintLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlateBlueprintLibrary();
	UMG_API class UClass* Z_Construct_UClass_USlateDataSheet_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlateDataSheet();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateMeshVertex();
	UMG_API class UClass* Z_Construct_UClass_USlateVectorArtData_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlateVectorArtData();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EVirtualKeyboardType();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateSizeRule();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateVisibility();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateChildSize();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FEventReply();
	UMG_API class UClass* Z_Construct_UClass_UVisual_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVisual();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetDesignFlags();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ForceLayoutPrepass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ForceVolatile();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetCachedGeometry();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetDesiredSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetIsEnabled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetOwningPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetParent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetVisibility();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasAnyUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasFocusedDescendants();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasKeyboardFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasMouseCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasUserFocusedDescendants();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_InvalidateLayoutAndVolatility();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_IsHovered();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_IsVisible();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_RemoveFromParent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ResetCursor();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetCursor();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetIsEnabled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetKeyboardFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderAngle();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderScale();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderShear();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTransform();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTransformPivot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTranslation();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetToolTip();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetToolTipText();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetVisibility();
	UMG_API class UClass* Z_Construct_UClass_UWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidget();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnInputAction__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnConstructEvent__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EDesignPreviewSizeMode();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EUMGSequencePlayMode();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedSlotBinding();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintContext();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_AddToPlayerScreen();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_AddToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Construct();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Destruct();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetAnimationCurrentTime();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetIsVisible();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningLocalPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayerPawn();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsAnimationPlaying();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsAnyAnimationPlaying();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsInteractable();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsListeningForInputAction();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsPlayingAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_ListenForInputAction();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnalogValueChanged();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationFinished();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationStarted();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerAnalogValueChanged();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonReleased();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragCancelled();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragDetected();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragEnter();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragLeave();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragOver();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnFocusLost();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnFocusReceived();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyChar();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyUp();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMotionDetected();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDoubleClick();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonUp();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseEnter();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseLeave();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseMove();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseWheel();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPaint();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewKeyDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewMouseButtonDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchEnded();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchGesture();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchMoved();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchStarted();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PauseAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PlayAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PlayAnimationTo();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PlaySound();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_RegisterInputComponent();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_RemoveFromViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_ReverseAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetAlignmentInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetAnchorsInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetDesiredSizeInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetForegroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetInputActionBlocking();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetInputActionPriority();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetNumLoopsToPlay();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetOwningLocalPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetOwningPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetPlaybackSpeed();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetPositionInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_StopAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_StopListeningForAllInputActions();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_StopListeningForInputAction();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Tick();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_UnregisterInputComponent();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget();
	UMG_API class UClass* Z_Construct_UClass_UUMGSequencePlayer_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUMGSequencePlayer();
	UMG_API class UClass* Z_Construct_UClass_UPanelSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPanelSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBackgroundBlurSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBackgroundBlurSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBorderSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBorderSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UButtonSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UButtonSlot();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchorData();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetLayout();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetLayout();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanelSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanelSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetColumn();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetColumnSpan();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetLayer();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetRow();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetRowSpan();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UGridSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UOverlaySlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UOverlaySlot();
	UMG_API class UClass* Z_Construct_UClass_USafeZoneSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USafeZoneSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UScaleBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScaleBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetPadding();
	UMG_API class UClass* Z_Construct_UClass_UScrollBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_USizeBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USizeBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetColumn();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetRow();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcherSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcherSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_AddChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_ClearChildren();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildAt();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildrenCount();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_HasAnyChildren();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_HasChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChildAt();
	UMG_API class UClass* Z_Construct_UClass_UPanelWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPanelWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UContentWidget_GetContentSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UContentWidget_SetContent();
	UMG_API class UClass* Z_Construct_UClass_UContentWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UContentWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWindowTitleBarArea_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWindowTitleBarArea();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWindowTitleBarAreaSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWindowTitleBarAreaSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWrapBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWrapBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetPeriod();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetRadius();
	UMG_API class UClass* Z_Construct_UClass_UCircularThrobber_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCircularThrobber();
	UMG_API class UClass* Z_Construct_UClass_UComboBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UComboBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_AddOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_ClearOptions();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_ClearSelection();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_FindOptionIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionCount();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetSelectedOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_RefreshOptions();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_RemoveOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_SetSelectedOption();
	UMG_API class UClass* Z_Construct_UClass_UComboBoxString_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UComboBoxString();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FShapedTextOptions();
	UMG_API class UClass* Z_Construct_UClass_UTextLayoutWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTextLayoutWidget();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetHintText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetIsPassword();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetIsReadOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetText();
	UMG_API class UClass* Z_Construct_UClass_UEditableText_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UEditableText();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_ClearError();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_HasError();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_SetError();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_SetText();
	UMG_API class UClass* Z_Construct_UClass_UEditableTextBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UEditableTextBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UExpandableArea_GetIsExpanded();
	UMG_API class UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded();
	UMG_API class UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded_Animated();
	UMG_API class UClass* Z_Construct_UClass_UExpandableArea_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UExpandableArea();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromTextureDynamic();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetOpacity();
	UMG_API class UClass* Z_Construct_UClass_UImage_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UImage();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UInputKeySelector_GetIsSelectingKey();
	UMG_API class UFunction* Z_Construct_UFunction_UInputKeySelector_SetAllowModifierKeys();
	UMG_API class UFunction* Z_Construct_UFunction_UInputKeySelector_SetKeySelectionText();
	UMG_API class UFunction* Z_Construct_UFunction_UInputKeySelector_SetSelectedKey();
	UMG_API class UClass* Z_Construct_UClass_UInputKeySelector_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UInputKeySelector();
	UMG_API class UClass* Z_Construct_UClass_UNativeWidgetHost_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNativeWidgetHost();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetApplyAlphaToBlur();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetBlurRadius();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetBlurStrength();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetLowQualityFallbackBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBackgroundBlur_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBackgroundBlur_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBackgroundBlur();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushColor();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetContentColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetDesiredSizeScale();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBorder_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBorder();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_IsPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_SetBackgroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_SetStyle();
	UMG_API class UClass* Z_Construct_UClass_UButton_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UButton();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_GetCheckedState();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_IsChecked();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_IsPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_SetCheckedState();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_SetIsChecked();
	UMG_API class UClass* Z_Construct_UClass_UCheckBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCheckBox();
	UMG_API class UFunction* Z_Construct_UFunction_UInvalidationBox_GetCanCache();
	UMG_API class UFunction* Z_Construct_UFunction_UInvalidationBox_InvalidateCache();
	UMG_API class UFunction* Z_Construct_UFunction_UInvalidationBox_SetCanCache();
	UMG_API class UClass* Z_Construct_UClass_UInvalidationBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UInvalidationBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_Close();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_GetMenuPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_IsOpen();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_Open();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_ToggleOpen();
	UMG_API class UClass* Z_Construct_UClass_UMenuAnchor_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMenuAnchor();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlot();
	UMG_API class UFunction* Z_Construct_UFunction_URetainerBox_GetEffectMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_URetainerBox_SetEffectMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_URetainerBox_SetTextureParameter();
	UMG_API class UClass* Z_Construct_UClass_URetainerBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_URetainerBox();
	UMG_API class UClass* Z_Construct_UClass_USafeZone_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USafeZone();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBox_SetIgnoreInheritedScale();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBox_SetStretch();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBox_SetStretchDirection();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBox_SetUserSpecifiedScale();
	UMG_API class UClass* Z_Construct_UClass_UScaleBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScaleBox();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearHeightOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMaxAspectRatio();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearWidthOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetHeightOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMaxAspectRatio();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetWidthOverride();
	UMG_API class UClass* Z_Construct_UClass_USizeBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USizeBox();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewLocation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewportWorld();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewRotation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_SetViewLocation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_SetViewRotation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_Spawn();
	UMG_API class UClass* Z_Construct_UClass_UViewport_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UGridPanel_AddChildToGrid();
	UMG_API class UClass* Z_Construct_UClass_UGridPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UGridPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBox();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlay_AddChildToOverlay();
	UMG_API class UClass* Z_Construct_UClass_UOverlay_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UOverlay();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_GetScrollOffset();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollToEnd();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollToStart();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_SetScrollOffset();
	UMG_API class UClass* Z_Construct_UClass_UScrollBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBox();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcher_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcher();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBox_AddChildWrapBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding();
	UMG_API class UClass* Z_Construct_UClass_UWrapBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWrapBox();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetIsMarquee();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetPercent();
	UMG_API class UClass* Z_Construct_UClass_UProgressBar_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UProgressBar();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBar_SetState();
	UMG_API class UClass* Z_Construct_UClass_UScrollBar_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBar();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnControllerCaptureEndEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnControllerCaptureBeginEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_GetValue();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetIndentHandle();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetLocked();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetSliderBarColor();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetSliderHandleColor();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetStepSize();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetValue();
	UMG_API class UClass* Z_Construct_UClass_USlider_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlider();
	UMG_API class UFunction* Z_Construct_UFunction_USpacer_SetSize();
	UMG_API class UClass* Z_Construct_UClass_USpacer_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USpacer();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetForegroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetValue();
	UMG_API class UClass* Z_Construct_UClass_USpinBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USpinBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature();
	UMG_API class UClass* Z_Construct_UClass_UTableViewBase_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTableViewBase();
	UMG_API class UClass* Z_Construct_UClass_UListView_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UListView();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_RequestListRefresh();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_SetItemHeight();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_SetItemWidth();
	UMG_API class UClass* Z_Construct_UClass_UTileView_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTileView();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableText_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableText_SetText();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableText_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableText();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetError();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetText();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableTextBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableTextBox();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlock_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlock();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetFont();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetJustification();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetMinDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetShadowOffset();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetText();
	UMG_API class UClass* Z_Construct_UClass_UTextBlock_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTextBlock();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateHorizontally();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateVertically();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetNumberOfPieces();
	UMG_API class UClass* Z_Construct_UClass_UThrobber_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UThrobber();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetAnimationBinding();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetAnimation_GetEndTime();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetAnimation_GetStartTime();
	UMG_API class UClass* Z_Construct_UClass_UWidgetAnimation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetAnimation();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EBindingKind();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateRuntimeBinding();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Create();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetSafeZonePadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUIEx();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnlyEx();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintLibrary();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetGeometryMode();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetBlendMode();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetSpace();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetDrawSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetMaterialInstance();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetRenderTarget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_RequestRedraw();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetBackgroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetDrawSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetWidget();
	UMG_API class UClass* Z_Construct_UClass_UWidgetComponent_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetComponent();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnHoveredWidgetChanged__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetInteractionSource();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_Get2DHitLocation();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_GetHoveredWidgetComponent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_GetLastHitResult();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverFocusableWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverHitTestVisibleWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverInteractableWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressAndReleaseKey();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressKey();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressPointerKey();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ReleaseKey();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ReleasePointerKey();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ScrollWheel();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_SendKeyChar();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_SetCustomHitResult();
	UMG_API class UClass* Z_Construct_UClass_UWidgetInteractionComponent_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetInteractionComponent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsBorderSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot();
	UMG_API class UClass* Z_Construct_UClass_UWidgetLayoutLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetLayoutLibrary();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetNavigationData();
	UMG_API class UClass* Z_Construct_UClass_UWidgetNavigation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetNavigation();
	UMG_API class UClass* Z_Construct_UClass_UWidgetTree_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetTree();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieScene2DTransformSectionTemplate();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneMarginSectionTemplate();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneWidgetMaterialSectionTemplate();
	UMG_API class UPackage* Z_Construct_UPackage__Script_UMG();
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserWidget);
	UClass* Z_Construct_UClass_UUMGSequencePlayer_NoRegister()
	{
		return UUMGSequencePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UUMGSequencePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UUMGSequencePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Animation"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Animation, UUMGSequencePlayer), 0x0040000000000000, Z_Construct_UClass_UWidgetAnimation_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(NewProp_Animation, TEXT("ModuleRelativePath"), TEXT("Public/Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(NewProp_Animation, TEXT("ToolTip"), TEXT("Animation being played"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUMGSequencePlayer(Z_Construct_UClass_UUMGSequencePlayer, &UUMGSequencePlayer::StaticClass, TEXT("UUMGSequencePlayer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUMGSequencePlayer);
	UClass* Z_Construct_UClass_UPanelSlot_NoRegister()
	{
		return UPanelSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UPanelSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVisual();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UPanelSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, UPanelSlot), 0x0010000000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, UPanelSlot), 0x0010000000000000, Z_Construct_UClass_UPanelWidget_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/PanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all Slots in UMG."));
				MetaData->SetValue(NewProp_Content, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPanelSlot(Z_Construct_UClass_UPanelSlot, &UPanelSlot::StaticClass, TEXT("UPanelSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPanelSlot);
	UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetHorizontalAlignment()
	{
		struct BackgroundBlurSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlurSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlurSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, BackgroundBlurSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetPadding()
	{
		struct BackgroundBlurSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlurSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlurSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, BackgroundBlurSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlurSlot_SetVerticalAlignment()
	{
		struct BackgroundBlurSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlurSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlurSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, BackgroundBlurSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBackgroundBlurSlot_NoRegister()
	{
		return UBackgroundBlurSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UBackgroundBlurSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UBackgroundBlurSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlurSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlurSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlurSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBackgroundBlurSlot), 0x0020080000000001, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBackgroundBlurSlot), 0x0020080000000001, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UBackgroundBlurSlot), 0x0020080000000001, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlurSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 3402350807
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlurSlot_SetPadding(), "SetPadding"); // 2767855979
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlurSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 64062947
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/BackgroundBlurSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UBackgroundBlurSlot, contains the widget displayed in a BackgroundBlur's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Background Blur Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlurSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBackgroundBlurSlot(Z_Construct_UClass_UBackgroundBlurSlot, &UBackgroundBlurSlot::StaticClass, TEXT("UBackgroundBlurSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBackgroundBlurSlot);
	UFunction* Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment()
	{
		struct BorderSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, BorderSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorderSlot_SetPadding()
	{
		struct BorderSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, BorderSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment()
	{
		struct BorderSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, BorderSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBorderSlot_NoRegister()
	{
		return UBorderSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UBorderSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UBorderSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBorderSlot), 0x0020080000000001, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBorderSlot), 0x0020080000000001, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UBorderSlot), 0x0020080000000001, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 1619496985
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorderSlot_SetPadding(), "SetPadding"); // 3440842265
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 2839741224
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/BorderSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UBorderSlot, contains the widget displayed in a border's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBorderSlot(Z_Construct_UClass_UBorderSlot, &UBorderSlot::StaticClass, TEXT("UBorderSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBorderSlot);
	UFunction* Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment()
	{
		struct ButtonSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ButtonSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButtonSlot_SetPadding()
	{
		struct ButtonSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, ButtonSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment()
	{
		struct ButtonSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, ButtonSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UButtonSlot_NoRegister()
	{
		return UButtonSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UButtonSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UButtonSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UButtonSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UButtonSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UButtonSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 545271693
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButtonSlot_SetPadding(), "SetPadding"); // 465587200
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 901061006
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ButtonSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UButtonSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButtonSlot(Z_Construct_UClass_UButtonSlot, &UButtonSlot::StaticClass, TEXT("UButtonSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButtonSlot);
	UScriptStruct* Z_Construct_UScriptStruct_FAnchorData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnchorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnchorData"), sizeof(FAnchorData), Get_Z_Construct_UScriptStruct_FAnchorData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnchorData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnchorData>, EStructFlags(0x00000001));
			UProperty* NewProp_Alignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alignment"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Alignment, FAnchorData), 0x0010000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Anchors = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Anchors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Anchors, FAnchorData), 0x0010000000000005, Z_Construct_UScriptStruct_FAnchors());
			UProperty* NewProp_Offsets = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offsets"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offsets, FAnchorData), 0x0010000000000005, Z_Construct_UScriptStruct_FMargin());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Alignment, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Alignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Alignment, TEXT("ToolTip"), TEXT("Alignment is the pivot point of the widget.  Starting in the upper left at (0,0),\nending in the lower right at (1,1).  Moving the alignment point allows you to move\nthe origin of the widget."));
			MetaData->SetValue(NewProp_Anchors, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Anchors, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Anchors, TEXT("ToolTip"), TEXT("Anchors."));
			MetaData->SetValue(NewProp_Offsets, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Offsets, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Offsets, TEXT("ToolTip"), TEXT("Offset."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnchorData_CRC() { return 1252191480U; }
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment()
	{
		struct CanvasPanelSlot_eventGetAlignment_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetAlignment_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetAlignment_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the alignment on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors()
	{
		struct CanvasPanelSlot_eventGetAnchors_Parms
		{
			FAnchors ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnchors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetAnchors_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetAnchors_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FAnchors());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize()
	{
		struct CanvasPanelSlot_eventGetAutoSize_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAutoSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetAutoSize_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets if the slot to be auto-sized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetLayout()
	{
		struct CanvasPanelSlot_eventGetLayout_Parms
		{
			FAnchorData ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLayout"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetLayout_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetLayout_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FAnchorData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the layout data of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets()
	{
		struct CanvasPanelSlot_eventGetOffsets_Parms
		{
			FMargin ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetOffsets_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetOffsets_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the offset data of the slot, which could be position and size, or margins depending on the anchor points"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetPosition()
	{
		struct CanvasPanelSlot_eventGetPosition_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetPosition_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the position of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetSize()
	{
		struct CanvasPanelSlot_eventGetSize_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetSize_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the size of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder()
	{
		struct CanvasPanelSlot_eventGetZOrder_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetZOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetZOrder_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetZOrder_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the z-order on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment()
	{
		struct CanvasPanelSlot_eventSetAlignment_Parms
		{
			FVector2D InAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetAlignment_Parms));
			UProperty* NewProp_InAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAlignment, CanvasPanelSlot_eventSetAlignment_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the alignment on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors()
	{
		struct CanvasPanelSlot_eventSetAnchors_Parms
		{
			FAnchors InAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnchors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetAnchors_Parms));
			UProperty* NewProp_InAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnchors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAnchors, CanvasPanelSlot_eventSetAnchors_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FAnchors());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize()
	{
		struct CanvasPanelSlot_eventSetAutoSize_Parms
		{
			bool InbAutoSize;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAutoSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetAutoSize_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms, bool);
			UProperty* NewProp_InbAutoSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbAutoSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets if the slot to be auto-sized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetLayout()
	{
		struct CanvasPanelSlot_eventSetLayout_Parms
		{
			FAnchorData InLayoutData;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLayout"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(CanvasPanelSlot_eventSetLayout_Parms));
			UProperty* NewProp_InLayoutData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLayoutData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InLayoutData, CanvasPanelSlot_eventSetLayout_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FAnchorData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the layout data of the slot"));
			MetaData->SetValue(NewProp_InLayoutData, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum()
	{
		struct CanvasPanelSlot_eventSetMaximum_Parms
		{
			FVector2D InMaximumAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaximum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00820401, 65535, sizeof(CanvasPanelSlot_eventSetMaximum_Parms));
			UProperty* NewProp_InMaximumAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaximumAnchors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InMaximumAnchors, CanvasPanelSlot_eventSetMaximum_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum()
	{
		struct CanvasPanelSlot_eventSetMinimum_Parms
		{
			FVector2D InMinimumAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinimum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00820401, 65535, sizeof(CanvasPanelSlot_eventSetMinimum_Parms));
			UProperty* NewProp_InMinimumAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinimumAnchors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InMinimumAnchors, CanvasPanelSlot_eventSetMinimum_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets()
	{
		struct CanvasPanelSlot_eventSetOffsets_Parms
		{
			FMargin InOffset;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetOffsets_Parms));
			UProperty* NewProp_InOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InOffset, CanvasPanelSlot_eventSetOffsets_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the offset data of the slot, which could be position and size, or margins depending on the anchor points"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetPosition()
	{
		struct CanvasPanelSlot_eventSetPosition_Parms
		{
			FVector2D InPosition;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetPosition_Parms));
			UProperty* NewProp_InPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPosition, CanvasPanelSlot_eventSetPosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the position of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetSize()
	{
		struct CanvasPanelSlot_eventSetSize_Parms
		{
			FVector2D InSize;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSize, CanvasPanelSlot_eventSetSize_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the size of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder()
	{
		struct CanvasPanelSlot_eventSetZOrder_Parms
		{
			int32 InZOrder;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetZOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetZOrder_Parms));
			UProperty* NewProp_InZOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InZOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InZOrder, CanvasPanelSlot_eventSetZOrder_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the z-order on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasPanelSlot_NoRegister()
	{
		return UCanvasPanelSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasPanelSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UCanvasPanelSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetLayout());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetLayout());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ZOrder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ZOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ZOrder, UCanvasPanelSlot), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoSize, UCanvasPanelSlot, bool);
				UProperty* NewProp_bAutoSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoSize, UCanvasPanelSlot), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bAutoSize, UCanvasPanelSlot), sizeof(bool), true);
				UProperty* NewProp_LayoutData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayoutData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LayoutData, UCanvasPanelSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FAnchorData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment(), "GetAlignment"); // 3262149195
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors(), "GetAnchors"); // 1555786997
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize(), "GetAutoSize"); // 3782008724
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetLayout(), "GetLayout"); // 644836464
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets(), "GetOffsets"); // 4024424274
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetPosition(), "GetPosition"); // 36182635
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetSize(), "GetSize"); // 334725770
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder(), "GetZOrder"); // 1802371301
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment(), "SetAlignment"); // 633541869
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors(), "SetAnchors"); // 1218096822
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize(), "SetAutoSize"); // 2836010474
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetLayout(), "SetLayout"); // 1253628191
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum(), "SetMaximum"); // 1802162672
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum(), "SetMinimum"); // 390707645
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets(), "SetOffsets"); // 2481975473
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetPosition(), "SetPosition"); // 144099635
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetSize(), "SetSize"); // 3794117378
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder(), "SetZOrder"); // 865101890
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CanvasPanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("ToolTip"), TEXT("The order priority this widget is rendered in.  Higher values are rendered last (and so they will appear to be on top)."));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("DisplayName"), TEXT("Size To Content"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("ToolTip"), TEXT("When AutoSize is true we use the widget's desired size"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("ToolTip"), TEXT("The anchoring information for the slot"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasPanelSlot(Z_Construct_UClass_UCanvasPanelSlot, &UCanvasPanelSlot::StaticClass, TEXT("UCanvasPanelSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasPanelSlot);
	UFunction* Z_Construct_UFunction_UGridSlot_SetColumn()
	{
		struct GridSlot_eventSetColumn_Parms
		{
			int32 InColumn;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumn"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetColumn_Parms));
			UProperty* NewProp_InColumn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumn"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InColumn, GridSlot_eventSetColumn_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the column index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetColumnSpan()
	{
		struct GridSlot_eventSetColumnSpan_Parms
		{
			int32 InColumnSpan;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumnSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetColumnSpan_Parms));
			UProperty* NewProp_InColumnSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumnSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InColumnSpan, GridSlot_eventSetColumnSpan_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("How many columns this slot spans over"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment()
	{
		struct GridSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, GridSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetLayer()
	{
		struct GridSlot_eventSetLayer_Parms
		{
			int32 InLayer;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetLayer_Parms));
			UProperty* NewProp_InLayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InLayer, GridSlot_eventSetLayer_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets positive values offset this cell to be hit-tested and drawn on top of others."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetPadding()
	{
		struct GridSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, GridSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetRow()
	{
		struct GridSlot_eventSetRow_Parms
		{
			int32 InRow;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRow"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetRow_Parms));
			UProperty* NewProp_InRow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRow"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InRow, GridSlot_eventSetRow_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the row index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetRowSpan()
	{
		struct GridSlot_eventSetRowSpan_Parms
		{
			int32 InRowSpan;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRowSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetRowSpan_Parms));
			UProperty* NewProp_InRowSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRowSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InRowSpan, GridSlot_eventSetRowSpan_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("How many rows this this slot spans over"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetVerticalAlignment()
	{
		struct GridSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, GridSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGridSlot_NoRegister()
	{
		return UGridSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UGridSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UGridSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetColumn());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetColumnSpan());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetLayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetRow());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetRowSpan());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Nudge = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nudge"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Nudge, UGridSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Layer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Layer, UGridSlot), 0x0010000000000015);
				UProperty* NewProp_ColumnSpan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColumnSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ColumnSpan, UGridSlot), 0x0010000000000015);
				UProperty* NewProp_Column = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Column"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Column, UGridSlot), 0x0010000000000015);
				UProperty* NewProp_RowSpan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowSpan"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RowSpan, UGridSlot), 0x0010000000000015);
				UProperty* NewProp_Row = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Row"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Row, UGridSlot), 0x0010000000000015);
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UGridSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UGridSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UGridSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetColumn(), "SetColumn"); // 2035346894
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetColumnSpan(), "SetColumnSpan"); // 3057493306
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 3606846198
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetLayer(), "SetLayer"); // 2751579464
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetPadding(), "SetPadding"); // 892633840
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetRow(), "SetRow"); // 694551315
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetRowSpan(), "SetRowSpan"); // 1400947668
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 3008656581
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/GridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A slot for UGridPanel, these slots all share the same size as the largest slot\nin the grid."));
				MetaData->SetValue(NewProp_Nudge, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Nudge, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Nudge, TEXT("ToolTip"), TEXT("Offset this slot's content by some amount; positive values offset to lower right"));
				MetaData->SetValue(NewProp_Layer, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Layer, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Layer, TEXT("ToolTip"), TEXT("Positive values offset this cell to be hit-tested and drawn on top of others. Default is 0; i.e. no offset."));
				MetaData->SetValue(NewProp_ColumnSpan, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_ColumnSpan, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Column, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("ToolTip"), TEXT("The column index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Column, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RowSpan, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_RowSpan, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Row, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("ToolTip"), TEXT("The row index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Row, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGridSlot(Z_Construct_UClass_UGridSlot, &UGridSlot::StaticClass, TEXT("UGridSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGridSlot);
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment()
	{
		struct HorizontalBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, HorizontalBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding()
	{
		struct HorizontalBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, HorizontalBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetSize()
	{
		struct HorizontalBoxSlot_eventSetSize_Parms
		{
			FSlateChildSize InSize;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSize, HorizontalBoxSlot_eventSetSize_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSlateChildSize());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment()
	{
		struct HorizontalBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, HorizontalBoxSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHorizontalBoxSlot_NoRegister()
	{
		return UHorizontalBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UHorizontalBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UHorizontalBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UHorizontalBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UHorizontalBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Size, UHorizontalBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateChildSize());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UHorizontalBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 472135810
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding(), "SetPadding"); // 1982689602
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHorizontalBoxSlot_SetSize(), "SetSize"); // 3638161627
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 1722414654
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("How much space this slot should occupy in the direction of the panel."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The amount of padding between the slots parent and the content."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHorizontalBoxSlot(Z_Construct_UClass_UHorizontalBoxSlot, &UHorizontalBoxSlot::StaticClass, TEXT("UHorizontalBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHorizontalBoxSlot);
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment()
	{
		struct OverlaySlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, OverlaySlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetPadding()
	{
		struct OverlaySlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, OverlaySlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment()
	{
		struct OverlaySlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, OverlaySlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOverlaySlot_NoRegister()
	{
		return UOverlaySlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UOverlaySlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UOverlaySlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UOverlaySlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UOverlaySlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UOverlaySlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 1177210501
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOverlaySlot_SetPadding(), "SetPadding"); // 2596203870
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 571581366
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/OverlaySlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Slot for the UOverlay panel.  Allows content to be hover above other content."));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOverlaySlot(Z_Construct_UClass_UOverlaySlot, &UOverlaySlot::StaticClass, TEXT("UOverlaySlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOverlaySlot);
	UClass* Z_Construct_UClass_USafeZoneSlot_NoRegister()
	{
		return USafeZoneSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_USafeZoneSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USafeZoneSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, USafeZoneSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_VAlign = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VAlign"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VAlign, USafeZoneSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HAlign = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HAlign"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HAlign, USafeZoneSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_SafeAreaScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SafeAreaScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SafeAreaScale, USafeZoneSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTitleSafe, USafeZoneSlot, bool);
				UProperty* NewProp_bIsTitleSafe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTitleSafe"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTitleSafe, USafeZoneSlot), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsTitleSafe, USafeZoneSlot), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SafeZoneSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_VAlign, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_VAlign, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_HAlign, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_HAlign, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_SafeAreaScale, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_SafeAreaScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_bIsTitleSafe, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_bIsTitleSafe, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USafeZoneSlot(Z_Construct_UClass_USafeZoneSlot, &USafeZoneSlot::StaticClass, TEXT("USafeZoneSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USafeZoneSlot);
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment()
	{
		struct ScaleBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ScaleBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetPadding()
	{
		struct ScaleBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, ScaleBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment()
	{
		struct ScaleBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, ScaleBoxSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScaleBoxSlot_NoRegister()
	{
		return UScaleBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UScaleBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UScaleBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UScaleBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UScaleBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UScaleBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 2856400806
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBoxSlot_SetPadding(), "SetPadding"); // 1795776154
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 1704778000
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScaleBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UScaleBoxSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScaleBoxSlot(Z_Construct_UClass_UScaleBoxSlot, &UScaleBoxSlot::StaticClass, TEXT("UScaleBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScaleBoxSlot);
	UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment()
	{
		struct ScrollBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ScrollBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetPadding()
	{
		struct ScrollBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, ScrollBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBoxSlot_NoRegister()
	{
		return UScrollBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UScrollBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBoxSlot_SetPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UScrollBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UScrollBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 2323716160
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBoxSlot_SetPadding(), "SetPadding"); // 3469180357
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UScrollBox, contains the widget that are scrollable"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBoxSlot(Z_Construct_UClass_UScrollBoxSlot, &UScrollBoxSlot::StaticClass, TEXT("UScrollBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBoxSlot);
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment()
	{
		struct SizeBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, SizeBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetPadding()
	{
		struct SizeBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, SizeBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment()
	{
		struct SizeBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, SizeBoxSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USizeBoxSlot_NoRegister()
	{
		return USizeBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_USizeBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USizeBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, USizeBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, USizeBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, USizeBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 720748174
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBoxSlot_SetPadding(), "SetPadding"); // 1939485176
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 2950887830
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SizeBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the USizeBoxSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USizeBoxSlot(Z_Construct_UClass_USizeBoxSlot, &USizeBoxSlot::StaticClass, TEXT("USizeBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USizeBoxSlot);
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetColumn()
	{
		struct UniformGridSlot_eventSetColumn_Parms
		{
			int32 InColumn;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumn"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetColumn_Parms));
			UProperty* NewProp_InColumn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumn"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InColumn, UniformGridSlot_eventSetColumn_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the column index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment()
	{
		struct UniformGridSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, UniformGridSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetRow()
	{
		struct UniformGridSlot_eventSetRow_Parms
		{
			int32 InRow;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRow"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetRow_Parms));
			UProperty* NewProp_InRow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRow"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InRow, UniformGridSlot_eventSetRow_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the row index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment()
	{
		struct UniformGridSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, UniformGridSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UUniformGridSlot_NoRegister()
	{
		return UUniformGridSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UUniformGridSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UUniformGridSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetColumn());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetRow());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Column = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Column"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Column, UUniformGridSlot), 0x0010000000000015);
				UProperty* NewProp_Row = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Row"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Row, UUniformGridSlot), 0x0010000000000015);
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UUniformGridSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UUniformGridSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridSlot_SetColumn(), "SetColumn"); // 615678558
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 586140689
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridSlot_SetRow(), "SetRow"); // 2488697489
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 3237105303
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/UniformGridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A slot for UUniformGridPanel, these slots all share the same size as the largest slot\nin the grid."));
				MetaData->SetValue(NewProp_Column, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_Column, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("ToolTip"), TEXT("The column index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Column, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Row, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_Row, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("ToolTip"), TEXT("The row index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Row, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUniformGridSlot(Z_Construct_UClass_UUniformGridSlot, &UUniformGridSlot::StaticClass, TEXT("UUniformGridSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUniformGridSlot);
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment()
	{
		struct VerticalBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, VerticalBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetPadding()
	{
		struct VerticalBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, VerticalBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetSize()
	{
		struct VerticalBoxSlot_eventSetSize_Parms
		{
			FSlateChildSize InSize;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSize, VerticalBoxSlot_eventSetSize_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSlateChildSize());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment()
	{
		struct VerticalBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, VerticalBoxSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVerticalBoxSlot_NoRegister()
	{
		return UVerticalBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UVerticalBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UVerticalBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UVerticalBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UVerticalBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Size, UVerticalBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateChildSize());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UVerticalBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 726889028
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVerticalBoxSlot_SetPadding(), "SetPadding"); // 1199822535
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVerticalBoxSlot_SetSize(), "SetSize"); // 2139733606
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 1291998621
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/VerticalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UVerticalBox, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("How much space this slot should occupy in the direction of the panel."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVerticalBoxSlot(Z_Construct_UClass_UVerticalBoxSlot, &UVerticalBoxSlot::StaticClass, TEXT("UVerticalBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVerticalBoxSlot);
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment()
	{
		struct WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding()
	{
		struct WidgetSwitcherSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, WidgetSwitcherSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment()
	{
		struct WidgetSwitcherSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WidgetSwitcherSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetSwitcherSlot_NoRegister()
	{
		return UWidgetSwitcherSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetSwitcherSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetSwitcherSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UWidgetSwitcherSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UWidgetSwitcherSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UWidgetSwitcherSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 4181099054
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding(), "SetPadding"); // 381218207
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 3272596891
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UWidgetSwitcher, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetSwitcherSlot(Z_Construct_UClass_UWidgetSwitcherSlot, &UWidgetSwitcherSlot::StaticClass, TEXT("UWidgetSwitcherSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetSwitcherSlot);
	UFunction* Z_Construct_UFunction_UPanelWidget_AddChild()
	{
		struct PanelWidget_eventAddChild_Parms
		{
			UWidget* Content;
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChild"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventAddChild_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventAddChild_Parms), 0x0010000000000580, Z_Construct_UClass_UPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventAddChild_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds a new child widget to the container.  Returns the base slot type,\nrequires casting to turn it into the type specific to the container."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_ClearChildren()
	{
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearChildren"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Remove all child widgets from the panel widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildAt()
	{
		struct PanelWidget_eventGetChildAt_Parms
		{
			int32 Index;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildAt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildAt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildAt_Parms), 0x0010000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, PanelWidget_eventGetChildAt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget at an index.\n@param Index The index of the widget.\n@return The widget at the given index, or nothing if there is no widget there."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildIndex()
	{
		struct PanelWidget_eventGetChildIndex_Parms
		{
			UWidget* Content;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventGetChildIndex_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the index of a specific child widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildrenCount()
	{
		struct PanelWidget_eventGetChildrenCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildrenCount"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildrenCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildrenCount_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets number of child widgets in the container."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_HasAnyChildren()
	{
		struct PanelWidget_eventHasAnyChildren_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAnyChildren"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventHasAnyChildren_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventHasAnyChildren_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventHasAnyChildren_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventHasAnyChildren_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if there are any child widgets in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_HasChild()
	{
		struct PanelWidget_eventHasChild_Parms
		{
			UWidget* Content;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasChild"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventHasChild_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventHasChild_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventHasChild_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventHasChild_Parms), sizeof(bool), true);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventHasChild_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if panel contains this widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChild()
	{
		struct PanelWidget_eventRemoveChild_Parms
		{
			UWidget* Content;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveChild"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventRemoveChild_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventRemoveChild_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventRemoveChild_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventRemoveChild_Parms), sizeof(bool), true);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventRemoveChild_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes a specific widget from the container.\n@return true if the widget was found and removed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChildAt()
	{
		struct PanelWidget_eventRemoveChildAt_Parms
		{
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveChildAt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventRemoveChildAt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventRemoveChildAt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventRemoveChildAt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventRemoveChildAt_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, PanelWidget_eventRemoveChildAt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes a child by it's index."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPanelWidget_NoRegister()
	{
		return UPanelWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UPanelWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UPanelWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_AddChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_ClearChildren());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildAt());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildrenCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_HasAnyChildren());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_HasChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_RemoveChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_RemoveChildAt());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Slots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Slots"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Slots, UPanelWidget), 0x0020080000000000);
				UProperty* NewProp_Slots_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Slots, TEXT("Slots"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPanelSlot_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_AddChild(), "AddChild"); // 987102277
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_ClearChildren(), "ClearChildren"); // 1906791776
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_GetChildAt(), "GetChildAt"); // 3841153506
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_GetChildIndex(), "GetChildIndex"); // 2903322826
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_GetChildrenCount(), "GetChildrenCount"); // 1281974289
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_HasAnyChildren(), "HasAnyChildren"); // 1326168035
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_HasChild(), "HasChild"); // 3521050958
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_RemoveChild(), "RemoveChild"); // 2868584336
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPanelWidget_RemoveChildAt(), "RemoveChildAt"); // 2079441159
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/PanelWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all UMG panel widgets.  Panel widgets layout a collection of child widgets."));
				MetaData->SetValue(NewProp_Slots, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
				MetaData->SetValue(NewProp_Slots, TEXT("ToolTip"), TEXT("The slots in the widget holding the child widgets of this panel."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPanelWidget(Z_Construct_UClass_UPanelWidget, &UPanelWidget::StaticClass, TEXT("UPanelWidget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPanelWidget);
	UFunction* Z_Construct_UFunction_UContentWidget_GetContentSlot()
	{
		struct ContentWidget_eventGetContentSlot_Parms
		{
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UContentWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetContentSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ContentWidget_eventGetContentSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, ContentWidget_eventGetContentSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UPanelSlot_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ContentWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UContentWidget_SetContent()
	{
		struct ContentWidget_eventSetContent_Parms
		{
			UWidget* Content;
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UContentWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetContent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ContentWidget_eventSetContent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, ContentWidget_eventSetContent_Parms), 0x0010000000000580, Z_Construct_UClass_UPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, ContentWidget_eventSetContent_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ContentWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UContentWidget_NoRegister()
	{
		return UContentWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UContentWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UContentWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UFunction_UContentWidget_GetContentSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UContentWidget_SetContent());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UContentWidget_GetContentSlot(), "GetContentSlot"); // 3103978597
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UContentWidget_SetContent(), "SetContent"); // 1282267447
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ContentWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ContentWidget.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UContentWidget(Z_Construct_UClass_UContentWidget, &UContentWidget::StaticClass, TEXT("UContentWidget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UContentWidget);
	UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetHorizontalAlignment()
	{
		struct WindowTitleBarArea_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarArea_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WindowTitleBarArea_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetPadding()
	{
		struct WindowTitleBarArea_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarArea_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, WindowTitleBarArea_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWindowTitleBarArea_SetVerticalAlignment()
	{
		struct WindowTitleBarArea_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarArea_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WindowTitleBarArea_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWindowTitleBarArea_NoRegister()
	{
		return UWindowTitleBarArea::StaticClass();
	}
	UClass* Z_Construct_UClass_UWindowTitleBarArea()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWindowTitleBarArea::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarArea_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarArea_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarArea_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoubleClickTogglesFullscreen, UWindowTitleBarArea, bool);
				UProperty* NewProp_bDoubleClickTogglesFullscreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDoubleClickTogglesFullscreen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoubleClickTogglesFullscreen, UWindowTitleBarArea), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bDoubleClickTogglesFullscreen, UWindowTitleBarArea), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarArea_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 3418065180
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarArea_SetPadding(), "SetPadding"); // 772782880
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarArea_SetVerticalAlignment(), "SetVerticalAlignment"); // 4051432237
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WindowTitleBarArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A panel for defining a region of the UI that should allow users to drag the window on desktop platforms."));
				MetaData->SetValue(NewProp_bDoubleClickTogglesFullscreen, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bDoubleClickTogglesFullscreen, TEXT("DisplayName"), TEXT("Toggle Fullscreen"));
				MetaData->SetValue(NewProp_bDoubleClickTogglesFullscreen, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarArea.h"));
				MetaData->SetValue(NewProp_bDoubleClickTogglesFullscreen, TEXT("ToolTip"), TEXT("Should double clicking the title bar area toggle fullscreen instead of maximizing the window."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWindowTitleBarArea(Z_Construct_UClass_UWindowTitleBarArea, &UWindowTitleBarArea::StaticClass, TEXT("UWindowTitleBarArea"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWindowTitleBarArea);
	UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetHorizontalAlignment()
	{
		struct WindowTitleBarAreaSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarAreaSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarAreaSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WindowTitleBarAreaSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetPadding()
	{
		struct WindowTitleBarAreaSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarAreaSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarAreaSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, WindowTitleBarAreaSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetVerticalAlignment()
	{
		struct WindowTitleBarAreaSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWindowTitleBarAreaSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WindowTitleBarAreaSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WindowTitleBarAreaSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWindowTitleBarAreaSlot_NoRegister()
	{
		return UWindowTitleBarAreaSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UWindowTitleBarAreaSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWindowTitleBarAreaSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UWindowTitleBarAreaSlot), 0x0020080000000001, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UWindowTitleBarAreaSlot), 0x0020080000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UWindowTitleBarAreaSlot), 0x0020080000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 1208285544
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetPadding(), "SetPadding"); // 996274827
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWindowTitleBarAreaSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 1999042322
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WindowTitleBarAreaSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UWindowTitleBarArea"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|WindowTitleBarArea Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WindowTitleBarAreaSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWindowTitleBarAreaSlot(Z_Construct_UClass_UWindowTitleBarAreaSlot, &UWindowTitleBarAreaSlot::StaticClass, TEXT("UWindowTitleBarAreaSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWindowTitleBarAreaSlot);
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace()
	{
		struct WrapBoxSlot_eventSetFillEmptySpace_Parms
		{
			bool InbFillEmptySpace;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillEmptySpace"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetFillEmptySpace_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms, bool);
			UProperty* NewProp_InbFillEmptySpace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbFillEmptySpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan()
	{
		struct WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms
		{
			float InFillSpanWhenLessThan;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillSpanWhenLessThan"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms));
			UProperty* NewProp_InFillSpanWhenLessThan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFillSpanWhenLessThan"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InFillSpanWhenLessThan, WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment()
	{
		struct WrapBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WrapBoxSlot_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetPadding()
	{
		struct WrapBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, WrapBoxSlot_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment()
	{
		struct WrapBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WrapBoxSlot_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWrapBoxSlot_NoRegister()
	{
		return UWrapBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UWrapBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWrapBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UWrapBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UWrapBoxSlot), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_FillSpanWhenLessThan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillSpanWhenLessThan"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FillSpanWhenLessThan, UWrapBoxSlot), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFillEmptySpace, UWrapBoxSlot, bool);
				UProperty* NewProp_bFillEmptySpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFillEmptySpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFillEmptySpace, UWrapBoxSlot), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bFillEmptySpace, UWrapBoxSlot), sizeof(bool), true);
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UWrapBoxSlot), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace(), "SetFillEmptySpace"); // 3123922396
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan(), "SetFillSpanWhenLessThan"); // 1971114845
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 2664028638
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBoxSlot_SetPadding(), "SetPadding"); // 404947411
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment(), "SetVerticalAlignment"); // 592339246
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WrapBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UWrapBox, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("ToolTip"), TEXT("If the total available space in the wrap panel drops below this threshold, this slot will attempt to fill an entire line.\nNOTE: A value of 0, denotes no filling will occur."));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("ToolTip"), TEXT("Should this slot fill the remaining space on the line?"));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWrapBoxSlot(Z_Construct_UClass_UWrapBoxSlot, &UWrapBoxSlot::StaticClass, TEXT("UWrapBoxSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWrapBoxSlot);
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces()
	{
		struct CircularThrobber_eventSetNumberOfPieces_Parms
		{
			int32 InNumberOfPieces;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetNumberOfPieces_Parms));
			UProperty* NewProp_InNumberOfPieces = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InNumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InNumberOfPieces, CircularThrobber_eventSetNumberOfPieces_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets how many pieces there are."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetPeriod()
	{
		struct CircularThrobber_eventSetPeriod_Parms
		{
			float InPeriod;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPeriod"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetPeriod_Parms));
			UProperty* NewProp_InPeriod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPeriod"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InPeriod, CircularThrobber_eventSetPeriod_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the amount of time for a full circle (in seconds)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetRadius()
	{
		struct CircularThrobber_eventSetRadius_Parms
		{
			float InRadius;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetRadius_Parms));
			UProperty* NewProp_InRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InRadius, CircularThrobber_eventSetRadius_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the radius of the circle."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCircularThrobber_NoRegister()
	{
		return UCircularThrobber::StaticClass();
	}
	UClass* Z_Construct_UClass_UCircularThrobber()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UCircularThrobber::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces());
				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetPeriod());
				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetRadius());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRadius, UCircularThrobber, bool);
				UProperty* NewProp_bEnableRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRadius, UCircularThrobber), 0x0040000000002001, CPP_BOOL_PROPERTY_BITMASK(bEnableRadius, UCircularThrobber), sizeof(bool), true);
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Image, UCircularThrobber), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_PieceImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PieceImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PieceImage_DEPRECATED, UCircularThrobber), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, UCircularThrobber), 0x0010000000000015);
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UCircularThrobber), 0x0010000000000015);
				UProperty* NewProp_NumberOfPieces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfPieces, UCircularThrobber), 0x0010000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces(), "SetNumberOfPieces"); // 3463611098
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCircularThrobber_SetPeriod(), "SetPeriod"); // 993953879
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCircularThrobber_SetRadius(), "SetRadius"); // 2447479825
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CircularThrobber.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A throbber widget that orients images in a spinning circle.\n\n* No Children\n* Spinner Progress"));
				MetaData->SetValue(NewProp_bEnableRadius, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bEnableRadius, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bEnableRadius, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_Image, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ToolTip"), TEXT("Image to use for each segment of the throbber"));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Radius, TEXT("EditCondition"), TEXT("bEnableRadius"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("The radius of the circle. If the throbber is a child of Canvas Panel, the 'Size to Content' option must be enabled in order to set Radius."));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Period, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("The amount of time for a full circle (in seconds)"));
				MetaData->SetValue(NewProp_Period, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ToolTip"), TEXT("How many pieces there are"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCircularThrobber(Z_Construct_UClass_UCircularThrobber, &UCircularThrobber::StaticClass, TEXT("UCircularThrobber"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCircularThrobber);
	UClass* Z_Construct_UClass_UComboBox_NoRegister()
	{
		return UComboBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UComboBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFocusable, UComboBox, bool);
				UProperty* NewProp_bIsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFocusable, UComboBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsFocusable, UComboBox), sizeof(bool), true);
				UProperty* NewProp_OnGenerateWidgetEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateWidgetEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateWidgetEvent, UComboBox), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Items, UComboBox), 0x0010000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("ComboBox (Object)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ComboBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The combobox allows you to display a list of options to the user in a dropdown menu for them to select one."));
				MetaData->SetValue(NewProp_bIsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bIsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ToolTip"), TEXT("Called when the widget is needed for the item."));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(NewProp_Items, TEXT("ToolTip"), TEXT("The list of items to be displayed on the combobox."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboBox(Z_Construct_UClass_UComboBox, &UComboBox::StaticClass, TEXT("UComboBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboBox);
	UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOpeningEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature()
	{
		struct ComboBoxString_eventOnSelectionChangedEvent_Parms
		{
			FString SelectedItem;
			TEnumAsByte<ESelectInfo::Type> SelectionType;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSelectionChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(ComboBoxString_eventOnSelectionChangedEvent_Parms));
			UProperty* NewProp_SelectionType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectionType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionType, ComboBoxString_eventOnSelectionChangedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ESelectInfo());
			UProperty* NewProp_SelectedItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectedItem"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SelectedItem, ComboBoxString_eventOnSelectionChangedEvent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_AddOption()
	{
		struct ComboBoxString_eventAddOption_Parms
		{
			FString Option;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddOption"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventAddOption_Parms));
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventAddOption_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(NewProp_Option, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_ClearOptions()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_ClearSelection()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearSelection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_FindOptionIndex()
	{
		struct ComboBoxString_eventFindOptionIndex_Parms
		{
			FString Option;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindOptionIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventFindOptionIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventFindOptionIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventFindOptionIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(NewProp_Option, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex()
	{
		struct ComboBoxString_eventGetOptionAtIndex_Parms
		{
			int32 Index;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOptionAtIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetOptionAtIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetOptionAtIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, ComboBoxString_eventGetOptionAtIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionCount()
	{
		struct ComboBoxString_eventGetOptionCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOptionCount"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetOptionCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetOptionCount_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The number of options"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetSelectedOption()
	{
		struct ComboBoxString_eventGetSelectedOption_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSelectedOption"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetSelectedOption_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetSelectedOption_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_RefreshOptions()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RefreshOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Refreshes the list of options.  If you added new ones, and want to update the list even if it's\ncurrently being displayed use this."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_RemoveOption()
	{
		struct ComboBoxString_eventRemoveOption_Parms
		{
			FString Option;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveOption"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventRemoveOption_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ComboBoxString_eventRemoveOption_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ComboBoxString_eventRemoveOption_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ComboBoxString_eventRemoveOption_Parms), sizeof(bool), true);
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventRemoveOption_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(NewProp_Option, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_SetSelectedOption()
	{
		struct ComboBoxString_eventSetSelectedOption_Parms
		{
			FString Option;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSelectedOption"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventSetSelectedOption_Parms));
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventSetSelectedOption_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UComboBoxString_NoRegister()
	{
		return UComboBoxString::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboBoxString()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UComboBoxString::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_AddOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_ClearOptions());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_ClearSelection());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_FindOptionIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetOptionCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetSelectedOption());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_RefreshOptions());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_RemoveOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_SetSelectedOption());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnOpening = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnOpening"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnOpening, UComboBoxString), 0x0010000010080000, Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature());
				UProperty* NewProp_OnSelectionChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnSelectionChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnSelectionChanged, UComboBoxString), 0x0010000010080000, Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature());
				UProperty* NewProp_OnGenerateWidgetEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateWidgetEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateWidgetEvent, UComboBoxString), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFocusable, UComboBoxString, bool);
				UProperty* NewProp_bIsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFocusable, UComboBoxString), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsFocusable, UComboBoxString), sizeof(bool), true);
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, UComboBoxString), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font, UComboBoxString), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableGamepadNavigationMode, UComboBoxString, bool);
				UProperty* NewProp_EnableGamepadNavigationMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableGamepadNavigationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableGamepadNavigationMode, UComboBoxString), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(EnableGamepadNavigationMode, UComboBoxString), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(HasDownArrow, UComboBoxString, bool);
				UProperty* NewProp_HasDownArrow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HasDownArrow"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(HasDownArrow, UComboBoxString), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(HasDownArrow, UComboBoxString), sizeof(bool), true);
				UProperty* NewProp_MaxListHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxListHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxListHeight, UComboBoxString), 0x0010040000000015);
				UProperty* NewProp_ContentPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ContentPadding, UComboBoxString), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_ItemStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ItemStyle, UComboBoxString), 0x0010000000000005, Z_Construct_UScriptStruct_FTableRowStyle());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UComboBoxString), 0x0010000000000005, Z_Construct_UScriptStruct_FComboBoxStyle());
				UProperty* NewProp_SelectedOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedOption"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SelectedOption, UComboBoxString), 0x0040000000000001);
				UProperty* NewProp_DefaultOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DefaultOptions, UComboBoxString), 0x0040000000000001);
				UProperty* NewProp_DefaultOptions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultOptions, TEXT("DefaultOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_AddOption(), "AddOption"); // 2099045701
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_ClearOptions(), "ClearOptions"); // 3916601393
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_ClearSelection(), "ClearSelection"); // 3971773098
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_FindOptionIndex(), "FindOptionIndex"); // 4236974293
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex(), "GetOptionAtIndex"); // 15705792
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_GetOptionCount(), "GetOptionCount"); // 694499446
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_GetSelectedOption(), "GetSelectedOption"); // 3528151146
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature(), "OnOpeningEvent__DelegateSignature"); // 1039387960
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature(), "OnSelectionChangedEvent__DelegateSignature"); // 2190917743
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_RefreshOptions(), "RefreshOptions"); // 3494350955
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_RemoveOption(), "RemoveOption"); // 2443305214
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UComboBoxString_SetSelectedOption(), "SetSelectedOption"); // 3720832052
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("ComboBox (String)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ComboBoxString.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The combobox allows you to display a list of options to the user in a dropdown menu for them to select one."));
				MetaData->SetValue(NewProp_OnOpening, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnOpening, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnOpening, TEXT("ToolTip"), TEXT("Called when the combobox is opening"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("ToolTip"), TEXT("Called when a new item is selected in the combobox."));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ToolTip"), TEXT("Called when the widget is needed for the item."));
				MetaData->SetValue(NewProp_bIsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bIsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("DesignerRebuild"), TEXT(""));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("The foreground color to pass through the hierarchy."));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The default font to use in the combobox, only applies if you're not implementing OnGenerateWidgetEvent\nto factory each new entry."));
				MetaData->SetValue(NewProp_EnableGamepadNavigationMode, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_EnableGamepadNavigationMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_EnableGamepadNavigationMode, TEXT("ToolTip"), TEXT("When false, directional keys will change the selection. When true, ComboBox\nmust be activated and will only capture arrow input while activated."));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("ToolTip"), TEXT("When false, the down arrow is not generated and it is up to the API consumer\nto make their own visual hint that this is a drop down."));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("ToolTip"), TEXT("The max height of the combobox list that opens"));
				MetaData->SetValue(NewProp_ContentPadding, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ContentPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_ItemStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_ItemStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_ItemStyle, TEXT("ToolTip"), TEXT("The item row style."));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style."));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("ToolTip"), TEXT("The item in the combobox to select by default"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("ToolTip"), TEXT("The default list of items to be displayed on the combobox."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboBoxString(Z_Construct_UClass_UComboBoxString, &UComboBoxString::StaticClass, TEXT("UComboBoxString"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboBoxString);
	UScriptStruct* Z_Construct_UScriptStruct_FShapedTextOptions()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FShapedTextOptions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ShapedTextOptions"), sizeof(FShapedTextOptions), Get_Z_Construct_UScriptStruct_FShapedTextOptions_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShapedTextOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FShapedTextOptions>, EStructFlags(0x00000201));
			UProperty* NewProp_TextFlowDirection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextFlowDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TextFlowDirection, FShapedTextOptions), 0x0010040000000015, Z_Construct_UEnum_Slate_ETextFlowDirection());
			UProperty* NewProp_TextFlowDirection_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TextFlowDirection, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TextShapingMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextShapingMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TextShapingMethod, FShapedTextOptions), 0x0010040000000015, Z_Construct_UEnum_SlateCore_ETextShapingMethod());
			UProperty* NewProp_TextShapingMethod_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TextShapingMethod, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_TextFlowDirection, FShapedTextOptions, uint8);
			UProperty* NewProp_bOverride_TextFlowDirection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_TextFlowDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_TextFlowDirection, FShapedTextOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_TextFlowDirection, FShapedTextOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_TextShapingMethod, FShapedTextOptions, uint8);
			UProperty* NewProp_bOverride_TextShapingMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_TextShapingMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_TextShapingMethod, FShapedTextOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_TextShapingMethod, FShapedTextOptions), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Common data for all widgets that use shaped text.\nContains the common options that should be exposed for the underlying Slate widget."));
			MetaData->SetValue(NewProp_TextFlowDirection, TEXT("Category"), TEXT("Localization"));
			MetaData->SetValue(NewProp_TextFlowDirection, TEXT("EditCondition"), TEXT("bOverride_TextFlowDirection"));
			MetaData->SetValue(NewProp_TextFlowDirection, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
			MetaData->SetValue(NewProp_TextFlowDirection, TEXT("ToolTip"), TEXT("Which text flow direction should the text within this widget use? (unset to use the default returned by GetDefaultTextFlowDirection)"));
			MetaData->SetValue(NewProp_TextShapingMethod, TEXT("Category"), TEXT("Localization"));
			MetaData->SetValue(NewProp_TextShapingMethod, TEXT("EditCondition"), TEXT("bOverride_TextShapingMethod"));
			MetaData->SetValue(NewProp_TextShapingMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
			MetaData->SetValue(NewProp_TextShapingMethod, TEXT("ToolTip"), TEXT("Which text shaping method should the text within this widget use? (unset to use the default returned by GetDefaultTextShapingMethod)"));
			MetaData->SetValue(NewProp_bOverride_TextFlowDirection, TEXT("Category"), TEXT("Localization"));
			MetaData->SetValue(NewProp_bOverride_TextFlowDirection, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_TextFlowDirection, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
			MetaData->SetValue(NewProp_bOverride_TextShapingMethod, TEXT("Category"), TEXT("Localization"));
			MetaData->SetValue(NewProp_bOverride_TextShapingMethod, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_TextShapingMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShapedTextOptions_CRC() { return 2589089959U; }
	UClass* Z_Construct_UClass_UTextLayoutWidget_NoRegister()
	{
		return UTextLayoutWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextLayoutWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UTextLayoutWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LineHeightPercentage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LineHeightPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LineHeightPercentage, UTextLayoutWidget), 0x00200c0000000015);
				UProperty* NewProp_Margin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Margin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Margin, UTextLayoutWidget), 0x00200c0000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_WrappingPolicy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrappingPolicy"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(WrappingPolicy, UTextLayoutWidget), 0x00200c0000000015, Z_Construct_UEnum_Slate_ETextWrappingPolicy());
				UProperty* NewProp_WrappingPolicy_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_WrappingPolicy, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_WrapTextAt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapTextAt"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WrapTextAt, UTextLayoutWidget), 0x0020080000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AutoWrapText, UTextLayoutWidget, bool);
				UProperty* NewProp_AutoWrapText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoWrapText"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AutoWrapText, UTextLayoutWidget), 0x0020080000000015, CPP_BOOL_PROPERTY_BITMASK(AutoWrapText, UTextLayoutWidget), sizeof(bool), true);
				UProperty* NewProp_Justification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Justification"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Justification, UTextLayoutWidget), 0x0020080000000015, Z_Construct_UEnum_Slate_ETextJustify());
				UProperty* NewProp_ShapedTextOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShapedTextOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShapedTextOptions, UTextLayoutWidget), 0x00200c0000000015, Z_Construct_UScriptStruct_FShapedTextOptions());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TextWidgetTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for all widgets that use a text layout.\nContains the common options that should be exposed for the underlying Slate widget."));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ToolTip"), TEXT("The amount to scale each lines height by."));
				MetaData->SetValue(NewProp_Margin, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Margin, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_Margin, TEXT("ToolTip"), TEXT("The amount of blank space left around the edges of text area."));
				MetaData->SetValue(NewProp_WrappingPolicy, TEXT("Category"), TEXT("Wrapping"));
				MetaData->SetValue(NewProp_WrappingPolicy, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_WrappingPolicy, TEXT("ToolTip"), TEXT("The wrapping policy to use."));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("Category"), TEXT("Wrapping"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ToolTip"), TEXT("Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs."));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("Category"), TEXT("Wrapping"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ToolTip"), TEXT("True if we're wrapping text automatically based on the computed horizontal space for this widget."));
				MetaData->SetValue(NewProp_Justification, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Justification, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_Justification, TEXT("ToolTip"), TEXT("How the text should be aligned with the margin."));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("Category"), TEXT("Localization"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextWidgetTypes.h"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ToolTip"), TEXT("Controls how the text within this widget should be shaped."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextLayoutWidget(Z_Construct_UClass_UTextLayoutWidget, &UTextLayoutWidget::StaticClass, TEXT("UTextLayoutWidget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextLayoutWidget);
	UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature()
	{
		struct EditableText_eventOnEditableTextCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableText_eventOnEditableTextCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, EditableText_eventOnEditableTextCommittedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, EditableText_eventOnEditableTextCommittedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature()
	{
		struct EditableText_eventOnEditableTextChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableText_eventOnEditableTextChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, EditableText_eventOnEditableTextChangedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_GetText()
	{
		struct EditableText_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EditableText_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, EditableText_eventGetText_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget text\n@return The widget text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetHintText()
	{
		struct EditableText_eventSetHintText_Parms
		{
			FText InHintText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHintText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetHintText_Parms));
			UProperty* NewProp_InHintText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHintText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InHintText, EditableText_eventSetHintText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetIsPassword()
	{
		struct EditableText_eventSetIsPassword_Parms
		{
			bool InbIsPassword;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsPassword"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetIsPassword_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsPassword, EditableText_eventSetIsPassword_Parms, bool);
			UProperty* NewProp_InbIsPassword = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsPassword"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsPassword, EditableText_eventSetIsPassword_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsPassword, EditableText_eventSetIsPassword_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetIsReadOnly()
	{
		struct EditableText_eventSetIsReadOnly_Parms
		{
			bool InbIsReadyOnly;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsReadOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetIsReadOnly_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms, bool);
			UProperty* NewProp_InbIsReadyOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsReadyOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetText()
	{
		struct EditableText_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InText, EditableText_eventSetText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Directly sets the widget text.\nWarning: This will wipe any binding created for the Text property!\n@param InText The text to assign to the widget"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEditableText_NoRegister()
	{
		return UEditableText::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableText()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UEditableText::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetHintText());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetIsPassword());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetIsReadOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UEditableText), 0x0010000010080000, Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UEditableText), 0x0010000010080000, Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature());
				UProperty* NewProp_ShapedTextOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShapedTextOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShapedTextOptions, UEditableText), 0x0010040000000015, Z_Construct_UScriptStruct_FShapedTextOptions());
				UProperty* NewProp_KeyboardType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyboardType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(KeyboardType, UEditableText), 0x0010040000000001, Z_Construct_UEnum_UMG_EVirtualKeyboardType());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowContextMenu, UEditableText, bool);
				UProperty* NewProp_AllowContextMenu = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowContextMenu"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowContextMenu, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(AllowContextMenu, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, UEditableText, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, UEditableText, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RevertTextOnEscape, UEditableText, bool);
				UProperty* NewProp_RevertTextOnEscape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RevertTextOnEscape"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RevertTextOnEscape, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(RevertTextOnEscape, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextWhenFocused, UEditableText, bool);
				UProperty* NewProp_SelectAllTextWhenFocused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextWhenFocused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextWhenFocused, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextWhenFocused, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsCaretMovedWhenGainFocus, UEditableText, bool);
				UProperty* NewProp_IsCaretMovedWhenGainFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsCaretMovedWhenGainFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsCaretMovedWhenGainFocus, UEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(IsCaretMovedWhenGainFocus, UEditableText), sizeof(bool), true);
				UProperty* NewProp_MinimumDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinimumDesiredWidth, UEditableText), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsPassword, UEditableText, bool);
				UProperty* NewProp_IsPassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsPassword"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsPassword, UEditableText), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(IsPassword, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsReadOnly, UEditableText, bool);
				UProperty* NewProp_IsReadOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsReadOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsReadOnly, UEditableText), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(IsReadOnly, UEditableText), sizeof(bool), true);
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_CaretImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaretImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CaretImage_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImageComposing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImageComposing"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImageComposing_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImageSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImageSelected"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImageSelected_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UEditableText), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UEditableText), 0x0010000000000005, Z_Construct_UScriptStruct_FEditableTextStyle());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UEditableText), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(HintText, UEditableText), 0x0010000000000015);
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UEditableText), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, UEditableText), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableText_GetText(), "GetText"); // 690451463
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature(), "OnEditableTextChangedEvent__DelegateSignature"); // 1095228658
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature(), "OnEditableTextCommittedEvent__DelegateSignature"); // 1627104378
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableText_SetHintText(), "SetHintText"); // 1135752486
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableText_SetIsPassword(), "SetIsPassword"); // 1816568872
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableText_SetIsReadOnly(), "SetIsReadOnly"); // 3621867064
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableText_SetText(), "SetText"); // 429807536
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/EditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Editable text box widget"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Editable Text)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Editable Text)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("Category"), TEXT("Localization"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ToolTip"), TEXT("Controls how the text within this widget should be shaped."));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("ToolTip"), TEXT("If we're on a platform that requires a virtual keyboard, what kind of keyboard should this widget use?"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ToolTip"), TEXT("Whether the context menu can be opened"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select all text when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to clear keyboard focus when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ToolTip"), TEXT("Whether to allow the user to back out of changes when they press the escape key"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ToolTip"), TEXT("Whether to select all text when the user clicks to give focus on the widget"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ToolTip"), TEXT("Workaround as we lose focus when the auto completion closes."));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ToolTip"), TEXT("Minimum width that a text block should be"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ToolTip"), TEXT("Sets whether this text box is for storing a password"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ToolTip"), TEXT("Sets whether this text box can actually be modified interactively by the user"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_CaretImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_CaretImage, TEXT("ToolTip"), TEXT("Image brush used for the caret (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ToolTip"), TEXT("Background image for the composing text (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ToolTip"), TEXT("Background image for the selected text (overrides Style)"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Text style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableText(Z_Construct_UClass_UEditableText, &UEditableText::StaticClass, TEXT("UEditableText"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableText);
	UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature()
	{
		struct EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextBoxCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature()
	{
		struct EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextBoxChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_ClearError()
	{
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearError"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_GetText()
	{
		struct EditableTextBox_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EditableTextBox_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, EditableTextBox_eventGetText_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_HasError()
	{
		struct EditableTextBox_eventHasError_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasError"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EditableTextBox_eventHasError_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, EditableTextBox_eventHasError_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, EditableTextBox_eventHasError_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, EditableTextBox_eventHasError_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_SetError()
	{
		struct EditableTextBox_eventSetError_Parms
		{
			FText InError;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetError"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableTextBox_eventSetError_Parms));
			UProperty* NewProp_InError = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InError"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InError, EditableTextBox_eventSetError_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetError (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_SetText()
	{
		struct EditableTextBox_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableTextBox_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InText, EditableTextBox_eventSetText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEditableTextBox_NoRegister()
	{
		return UEditableTextBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableTextBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UEditableTextBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_ClearError());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_GetText());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_HasError());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_SetError());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UEditableTextBox), 0x0010000010080000, Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UEditableTextBox), 0x0010000010080000, Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature());
				UProperty* NewProp_ShapedTextOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShapedTextOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShapedTextOptions, UEditableTextBox), 0x0010040000000015, Z_Construct_UScriptStruct_FShapedTextOptions());
				UProperty* NewProp_KeyboardType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyboardType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(KeyboardType, UEditableTextBox), 0x0010040000000001, Z_Construct_UEnum_UMG_EVirtualKeyboardType());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowContextMenu, UEditableTextBox, bool);
				UProperty* NewProp_AllowContextMenu = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowContextMenu"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowContextMenu, UEditableTextBox), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(AllowContextMenu, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, UEditableTextBox, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, UEditableTextBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, UEditableTextBox, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, UEditableTextBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RevertTextOnEscape, UEditableTextBox, bool);
				UProperty* NewProp_RevertTextOnEscape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RevertTextOnEscape"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RevertTextOnEscape, UEditableTextBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(RevertTextOnEscape, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextWhenFocused, UEditableTextBox, bool);
				UProperty* NewProp_SelectAllTextWhenFocused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextWhenFocused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextWhenFocused, UEditableTextBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextWhenFocused, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsCaretMovedWhenGainFocus, UEditableTextBox, bool);
				UProperty* NewProp_IsCaretMovedWhenGainFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsCaretMovedWhenGainFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsCaretMovedWhenGainFocus, UEditableTextBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(IsCaretMovedWhenGainFocus, UEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_MinimumDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinimumDesiredWidth, UEditableTextBox), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsPassword, UEditableTextBox, bool);
				UProperty* NewProp_IsPassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsPassword"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsPassword, UEditableTextBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsPassword, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsReadOnly, UEditableTextBox, bool);
				UProperty* NewProp_IsReadOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsReadOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsReadOnly, UEditableTextBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsReadOnly, UEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_ReadOnlyForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReadOnlyForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReadOnlyForegroundColor_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UEditableTextBox), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(HintText, UEditableTextBox), 0x0010000000000015);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UEditableTextBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UEditableTextBox), 0x0010000000000005, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UEditableTextBox), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, UEditableTextBox), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableTextBox_ClearError(), "ClearError"); // 3138849189
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableTextBox_GetText(), "GetText"); // 1539759256
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableTextBox_HasError(), "HasError"); // 3075966561
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature(), "OnEditableTextBoxChangedEvent__DelegateSignature"); // 3272802706
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature(), "OnEditableTextBoxCommittedEvent__DelegateSignature"); // 3059028018
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableTextBox_SetError(), "SetError"); // 1319839193
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEditableTextBox_SetText(), "SetText"); // 3678045516
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text Box"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/EditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows the user to type in custom text.  Only permits a single line of text to be entered.\n\n* No Children\n* Text Entry"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("TextBox|Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("TextBox|Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("Category"), TEXT("Localization"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ShapedTextOptions, TEXT("ToolTip"), TEXT("Controls how the text within this widget should be shaped."));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_KeyboardType, TEXT("ToolTip"), TEXT("If we're on a platform that requires a virtual keyboard, what kind of keyboard should this widget use?"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ToolTip"), TEXT("Whether the context menu can be opened"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select all text when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to clear keyboard focus when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ToolTip"), TEXT("Whether to allow the user to back out of changes when they press the escape key"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ToolTip"), TEXT("Whether to select all text when the user clicks to give focus on the widget"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ToolTip"), TEXT("Workaround as we lose focus when the auto completion closes."));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Padding between the box/border and the text widget inside (overrides Style)"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ToolTip"), TEXT("Minimum width that a text block should be"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ToolTip"), TEXT("Sets whether this text box is for storing a password"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ToolTip"), TEXT("Sets whether this text box can actually be modified interactively by the user"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity when read-only (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color of the background/border around the editable text (overrides Style)"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style used for the text box"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableTextBox(Z_Construct_UClass_UEditableTextBox, &UEditableTextBox::StaticClass, TEXT("UEditableTextBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableTextBox);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature()
	{
		struct _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms
		{
			UExpandableArea* Area;
			bool bIsExpanded;
		};
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnExpandableAreaExpansionChanged__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnExpandableAreaExpansionChanged_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms, bool);
			UProperty* NewProp_bIsExpanded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms), sizeof(bool), true);
			UProperty* NewProp_Area = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Area"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Area, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms), 0x0010000000000080, Z_Construct_UClass_UExpandableArea_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UExpandableArea_GetIsExpanded()
	{
		struct ExpandableArea_eventGetIsExpanded_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UExpandableArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ExpandableArea_eventGetIsExpanded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Expansion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded()
	{
		struct ExpandableArea_eventSetIsExpanded_Parms
		{
			bool IsExpanded;
		};
		UObject* Outer=Z_Construct_UClass_UExpandableArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ExpandableArea_eventSetIsExpanded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms, bool);
			UProperty* NewProp_IsExpanded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Expansion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded_Animated()
	{
		struct ExpandableArea_eventSetIsExpanded_Animated_Parms
		{
			bool IsExpanded;
		};
		UObject* Outer=Z_Construct_UClass_UExpandableArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsExpanded_Animated"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ExpandableArea_eventSetIsExpanded_Animated_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsExpanded, ExpandableArea_eventSetIsExpanded_Animated_Parms, bool);
			UProperty* NewProp_IsExpanded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsExpanded, ExpandableArea_eventSetIsExpanded_Animated_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(IsExpanded, ExpandableArea_eventSetIsExpanded_Animated_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Expansion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UExpandableArea_NoRegister()
	{
		return UExpandableArea::StaticClass();
	}
	UClass* Z_Construct_UClass_UExpandableArea()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UExpandableArea::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UExpandableArea_GetIsExpanded());
				OuterClass->LinkChild(Z_Construct_UFunction_UExpandableArea_SetIsExpanded());
				OuterClass->LinkChild(Z_Construct_UFunction_UExpandableArea_SetIsExpanded_Animated());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BodyContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodyContent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BodyContent, UExpandableArea), 0x0020080000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_HeaderContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeaderContent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(HeaderContent, UExpandableArea), 0x0020080000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_OnExpansionChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnExpansionChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnExpansionChanged, UExpandableArea), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature());
				UProperty* NewProp_AreaPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AreaPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AreaPadding, UExpandableArea), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_HeaderPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeaderPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HeaderPadding, UExpandableArea), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_MaxHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxHeight, UExpandableArea), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExpanded, UExpandableArea, bool);
				UProperty* NewProp_bIsExpanded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsExpanded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExpanded, UExpandableArea), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsExpanded, UExpandableArea), sizeof(bool), true);
				UProperty* NewProp_BorderColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BorderColor, UExpandableArea), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_BorderBrush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BorderBrush, UExpandableArea), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Style, UExpandableArea), 0x0010000000000015, Z_Construct_UScriptStruct_FExpandableAreaStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UExpandableArea_GetIsExpanded(), "GetIsExpanded"); // 2636051539
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UExpandableArea_SetIsExpanded(), "SetIsExpanded"); // 2852470495
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UExpandableArea_SetIsExpanded_Animated(), "SetIsExpanded_Animated"); // 3740529593
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UNamedSlotInterface_NoRegister(), VTABLE_OFFSET(UExpandableArea, INamedSlotInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ExpandableArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_BodyContent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_HeaderContent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("Category"), TEXT("ExpandableArea|Event"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("ToolTip"), TEXT("A bindable delegate for the IsChecked."));
				MetaData->SetValue(NewProp_AreaPadding, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_AreaPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_HeaderPadding, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_HeaderPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("ToolTip"), TEXT("The maximum height of the area"));
				MetaData->SetValue(NewProp_bIsExpanded, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_bIsExpanded, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_BorderColor, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_BorderColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_BorderBrush, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_BorderBrush, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_Style, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UExpandableArea(Z_Construct_UClass_UExpandableArea, &UExpandableArea::StaticClass, TEXT("UExpandableArea"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UExpandableArea);
	UFunction* Z_Construct_UFunction_UImage_GetDynamicMaterial()
	{
		struct Image_eventGetDynamicMaterial_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Image_eventGetDynamicMaterial_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrush()
	{
		struct Image_eventSetBrush_Parms
		{
			FSlateBrush InBrush;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Image_eventSetBrush_Parms));
			UProperty* NewProp_InBrush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBrush, Image_eventSetBrush_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
			MetaData->SetValue(NewProp_InBrush, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromAsset()
	{
		struct Image_eventSetBrushFromAsset_Parms
		{
			USlateBrushAsset* Asset;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromAsset_Parms));
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Asset, Image_eventSetBrushFromAsset_Parms), 0x0010000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromMaterial()
	{
		struct Image_eventSetBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, Image_eventSetBrushFromMaterial_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromTexture()
	{
		struct Image_eventSetBrushFromTexture_Parms
		{
			UTexture2D* Texture;
			bool bMatchSize;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromTexture_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMatchSize, Image_eventSetBrushFromTexture_Parms, bool);
			UProperty* NewProp_bMatchSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMatchSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMatchSize, Image_eventSetBrushFromTexture_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bMatchSize, Image_eventSetBrushFromTexture_Parms), sizeof(bool), true);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, Image_eventSetBrushFromTexture_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bMatchSize"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromTextureDynamic()
	{
		struct Image_eventSetBrushFromTextureDynamic_Parms
		{
			UTexture2DDynamic* Texture;
			bool bMatchSize;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromTextureDynamic"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromTextureDynamic_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMatchSize, Image_eventSetBrushFromTextureDynamic_Parms, bool);
			UProperty* NewProp_bMatchSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMatchSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMatchSize, Image_eventSetBrushFromTextureDynamic_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bMatchSize, Image_eventSetBrushFromTextureDynamic_Parms), sizeof(bool), true);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, Image_eventSetBrushFromTextureDynamic_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2DDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bMatchSize"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetColorAndOpacity()
	{
		struct Image_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Image_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, Image_eventSetColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetOpacity()
	{
		struct Image_eventSetOpacity_Parms
		{
			float InOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetOpacity_Parms));
			UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InOpacity, Image_eventSetOpacity_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UImage_NoRegister()
	{
		return UImage::StaticClass();
	}
	UClass* Z_Construct_UClass_UImage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UImage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UImage_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromTextureDynamic());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetOpacity());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnMouseButtonDownEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonDownEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonDownEvent, UImage), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_ColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ColorAndOpacityDelegate, UImage), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UImage), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BrushDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(BrushDelegate, UImage), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature());
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, UImage), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Image_DEPRECATED, UImage), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_GetDynamicMaterial(), "GetDynamicMaterial"); // 783298213
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetBrush(), "SetBrush"); // 1943863852
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetBrushFromAsset(), "SetBrushFromAsset"); // 100682889
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetBrushFromMaterial(), "SetBrushFromMaterial"); // 2773431893
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetBrushFromTexture(), "SetBrushFromTexture"); // 1080978862
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetBrushFromTextureDynamic(), "SetBrushFromTextureDynamic"); // 1259644112
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetColorAndOpacity(), "SetColorAndOpacity"); // 2975933399
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UImage_SetOpacity(), "SetOpacity"); // 3018222342
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Image.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The image widget allows you to display a Slate Brush, or texture or material in the UI.\n\n* No Children"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ColorAndOpacity."));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("Color and opacity"));
				MetaData->SetValue(NewProp_BrushDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_BrushDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the Image."));
				MetaData->SetValue(NewProp_Brush, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("Image to draw"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_Image, TEXT("ToolTip"), TEXT("Image to draw"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UImage(Z_Construct_UClass_UImage, &UImage::StaticClass, TEXT("UImage"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UImage);
	UFunction* Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnIsSelectingKeyChanged__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature()
	{
		struct InputKeySelector_eventOnKeySelected_Parms
		{
			FInputChord SelectedKey;
		};
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnKeySelected__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(InputKeySelector_eventOnKeySelected_Parms));
			UProperty* NewProp_SelectedKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectedKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SelectedKey, InputKeySelector_eventOnKeySelected_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FInputChord());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInputKeySelector_GetIsSelectingKey()
	{
		struct InputKeySelector_eventGetIsSelectingKey_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsSelectingKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(InputKeySelector_eventGetIsSelectingKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, InputKeySelector_eventGetIsSelectingKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, InputKeySelector_eventGetIsSelectingKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, InputKeySelector_eventGetIsSelectingKey_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the widget is currently selecting a key, otherwise returns false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInputKeySelector_SetAllowModifierKeys()
	{
		struct InputKeySelector_eventSetAllowModifierKeys_Parms
		{
			bool bInAllowModifierKeys;
		};
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAllowModifierKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(InputKeySelector_eventSetAllowModifierKeys_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllowModifierKeys, InputKeySelector_eventSetAllowModifierKeys_Parms, bool);
			UProperty* NewProp_bInAllowModifierKeys = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllowModifierKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllowModifierKeys, InputKeySelector_eventSetAllowModifierKeys_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllowModifierKeys, InputKeySelector_eventSetAllowModifierKeys_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether or not modifier keys are allowed in the selected key."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInputKeySelector_SetKeySelectionText()
	{
		struct InputKeySelector_eventSetKeySelectionText_Parms
		{
			FText InKeySelectionText;
		};
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetKeySelectionText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(InputKeySelector_eventSetKeySelectionText_Parms));
			UProperty* NewProp_InKeySelectionText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKeySelectionText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InKeySelectionText, InputKeySelector_eventSetKeySelectionText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the text which is displayed while selecting keys."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInputKeySelector_SetSelectedKey()
	{
		struct InputKeySelector_eventSetSelectedKey_Parms
		{
			FInputChord InSelectedKey;
		};
		UObject* Outer=Z_Construct_UClass_UInputKeySelector();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSelectedKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(InputKeySelector_eventSetSelectedKey_Parms));
			UProperty* NewProp_InSelectedKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSelectedKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSelectedKey, InputKeySelector_eventSetSelectedKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FInputChord());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the currently selected key."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInputKeySelector_NoRegister()
	{
		return UInputKeySelector::StaticClass();
	}
	UClass* Z_Construct_UClass_UInputKeySelector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UInputKeySelector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UInputKeySelector_GetIsSelectingKey());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UInputKeySelector_SetAllowModifierKeys());
				OuterClass->LinkChild(Z_Construct_UFunction_UInputKeySelector_SetKeySelectionText());
				OuterClass->LinkChild(Z_Construct_UFunction_UInputKeySelector_SetSelectedKey());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnIsSelectingKeyChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnIsSelectingKeyChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnIsSelectingKeyChanged, UInputKeySelector), 0x0010000010080000, Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature());
				UProperty* NewProp_OnKeySelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnKeySelected"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnKeySelected, UInputKeySelector), 0x0010000010080000, Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowModifierKeys, UInputKeySelector, bool);
				UProperty* NewProp_bAllowModifierKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowModifierKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowModifierKeys, UInputKeySelector), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bAllowModifierKeys, UInputKeySelector), sizeof(bool), true);
				UProperty* NewProp_KeySelectionText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeySelectionText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(KeySelectionText, UInputKeySelector), 0x0010000000000015);
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UInputKeySelector), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Margin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Margin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Margin, UInputKeySelector), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font, UInputKeySelector), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_SelectedKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SelectedKey, UInputKeySelector), 0x0010000000000014, Z_Construct_UScriptStruct_FInputChord());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInputKeySelector_GetIsSelectingKey(), "GetIsSelectingKey"); // 252908124
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature(), "OnIsSelectingKeyChanged__DelegateSignature"); // 1912255208
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature(), "OnKeySelected__DelegateSignature"); // 3306655802
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInputKeySelector_SetAllowModifierKeys(), "SetAllowModifierKeys"); // 3959842150
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInputKeySelector_SetKeySelectionText(), "SetKeySelectionText"); // 915472885
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInputKeySelector_SetSelectedKey(), "SetSelectedKey"); // 1354159495
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/InputKeySelector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A widget for selecting a single key or a single key with a modifier."));
				MetaData->SetValue(NewProp_OnIsSelectingKeyChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnIsSelectingKeyChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_OnIsSelectingKeyChanged, TEXT("ToolTip"), TEXT("Called whenever the key selection mode starts or stops."));
				MetaData->SetValue(NewProp_OnKeySelected, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnKeySelected, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_OnKeySelected, TEXT("ToolTip"), TEXT("Called whenever a new key is selected by the user."));
				MetaData->SetValue(NewProp_bAllowModifierKeys, TEXT("Category"), TEXT("Key Selection"));
				MetaData->SetValue(NewProp_bAllowModifierKeys, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_bAllowModifierKeys, TEXT("ToolTip"), TEXT("input chord representing the selected key, if false modifier keys are ignored."));
				MetaData->SetValue(NewProp_KeySelectionText, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_KeySelectionText, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_KeySelectionText, TEXT("ToolTip"), TEXT("Sets the text which is displayed while selecting keys."));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color of the text used to display the currently selected key."));
				MetaData->SetValue(NewProp_Margin, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Margin, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_Margin, TEXT("ToolTip"), TEXT("The amount of blank space around the text used to display the currently selected key."));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The font used to display the currently selected key."));
				MetaData->SetValue(NewProp_SelectedKey, TEXT("Category"), TEXT("Key Selection"));
				MetaData->SetValue(NewProp_SelectedKey, TEXT("ModuleRelativePath"), TEXT("Public/Components/InputKeySelector.h"));
				MetaData->SetValue(NewProp_SelectedKey, TEXT("ToolTip"), TEXT("The currently selected key chord."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInputKeySelector(Z_Construct_UClass_UInputKeySelector, &UInputKeySelector::StaticClass, TEXT("UInputKeySelector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInputKeySelector);
	UClass* Z_Construct_UClass_UNativeWidgetHost_NoRegister()
	{
		return UNativeWidgetHost::StaticClass();
	}
	UClass* Z_Construct_UClass_UNativeWidgetHost()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UNativeWidgetHost::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/NativeWidgetHost.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/NativeWidgetHost.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A NativeWidgetHost is a container widget that can contain one child slate widget.  This should\nbe used when all you need is to nest a native widget inside a UMG widget."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNativeWidgetHost(Z_Construct_UClass_UNativeWidgetHost, &UNativeWidgetHost::StaticClass, TEXT("UNativeWidgetHost"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNativeWidgetHost);
	UFunction* Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas()
	{
		struct CanvasPanel_eventAddChildToCanvas_Parms
		{
			UWidget* Content;
			UCanvasPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToCanvas"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanel_eventAddChildToCanvas_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanel_eventAddChildToCanvas_Parms), 0x0010000000000580, Z_Construct_UClass_UCanvasPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, CanvasPanel_eventAddChildToCanvas_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasPanel_NoRegister()
	{
		return UCanvasPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UCanvasPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas(), "AddChildToCanvas"); // 1086892237
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CanvasPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The canvas panel is a designer friendly panel that allows widgets to be laid out at arbitrary\nlocations, anchored and z-ordered with other children of the canvas.  The canvas is a great widget\nfor manual layout, but bad when you want to procedurally just generate widgets and place them in a\ncontainer (unless you want absolute layout).\n\n* Many Children\n* Absolute Layout\n* Anchors"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasPanel(Z_Construct_UClass_UCanvasPanel, &UCanvasPanel::StaticClass, TEXT("UCanvasPanel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasPanel);
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetApplyAlphaToBlur()
	{
		struct BackgroundBlur_eventSetApplyAlphaToBlur_Parms
		{
			bool bInApplyAlphaToBlur;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetApplyAlphaToBlur"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlur_eventSetApplyAlphaToBlur_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInApplyAlphaToBlur, BackgroundBlur_eventSetApplyAlphaToBlur_Parms, bool);
			UProperty* NewProp_bInApplyAlphaToBlur = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInApplyAlphaToBlur"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInApplyAlphaToBlur, BackgroundBlur_eventSetApplyAlphaToBlur_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInApplyAlphaToBlur, BackgroundBlur_eventSetApplyAlphaToBlur_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetBlurRadius()
	{
		struct BackgroundBlur_eventSetBlurRadius_Parms
		{
			int32 InBlurRadius;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlurRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlur_eventSetBlurRadius_Parms));
			UProperty* NewProp_InBlurRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBlurRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InBlurRadius, BackgroundBlur_eventSetBlurRadius_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetBlurStrength()
	{
		struct BackgroundBlur_eventSetBlurStrength_Parms
		{
			float InStrength;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlurStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(BackgroundBlur_eventSetBlurStrength_Parms));
			UProperty* NewProp_InStrength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InStrength, BackgroundBlur_eventSetBlurStrength_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetHorizontalAlignment()
	{
		struct BackgroundBlur_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlur_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, BackgroundBlur_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetLowQualityFallbackBrush()
	{
		struct BackgroundBlur_eventSetLowQualityFallbackBrush_Parms
		{
			FSlateBrush InBrush;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLowQualityFallbackBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BackgroundBlur_eventSetLowQualityFallbackBrush_Parms));
			UProperty* NewProp_InBrush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBrush, BackgroundBlur_eventSetLowQualityFallbackBrush_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
			MetaData->SetValue(NewProp_InBrush, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetPadding()
	{
		struct BackgroundBlur_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlur_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, BackgroundBlur_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBackgroundBlur_SetVerticalAlignment()
	{
		struct BackgroundBlur_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBackgroundBlur();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BackgroundBlur_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, BackgroundBlur_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBackgroundBlur_NoRegister()
	{
		return UBackgroundBlur::StaticClass();
	}
	UClass* Z_Construct_UClass_UBackgroundBlur()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UBackgroundBlur::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetApplyAlphaToBlur());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetBlurRadius());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetBlurStrength());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetLowQualityFallbackBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBackgroundBlur_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LowQualityFallbackBrush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowQualityFallbackBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LowQualityFallbackBrush, UBackgroundBlur), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_BlurRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlurRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BlurRadius, UBackgroundBlur), 0x0010040000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAutoRadiusCalculation, UBackgroundBlur, bool);
				UProperty* NewProp_bOverrideAutoRadiusCalculation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAutoRadiusCalculation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAutoRadiusCalculation, UBackgroundBlur), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverrideAutoRadiusCalculation, UBackgroundBlur), sizeof(bool), true);
				UProperty* NewProp_BlurStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlurStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BlurStrength, UBackgroundBlur), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyAlphaToBlur, UBackgroundBlur, bool);
				UProperty* NewProp_bApplyAlphaToBlur = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyAlphaToBlur"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyAlphaToBlur, UBackgroundBlur), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bApplyAlphaToBlur, UBackgroundBlur), sizeof(bool), true);
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBackgroundBlur), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBackgroundBlur), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UBackgroundBlur), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetApplyAlphaToBlur(), "SetApplyAlphaToBlur"); // 3304348676
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetBlurRadius(), "SetBlurRadius"); // 3239600667
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetBlurStrength(), "SetBlurStrength"); // 3102847544
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 2217233315
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetLowQualityFallbackBrush(), "SetLowQualityFallbackBrush"); // 4239555940
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetPadding(), "SetPadding"); // 2726836300
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBackgroundBlur_SetVerticalAlignment(), "SetVerticalAlignment"); // 2154473853
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/BackgroundBlur.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A background blur is a container widget that can contain one child widget, providing an opportunity\nto surround it with adjustable padding and apply a post-process Gaussian blur to all content beneath the widget.\n\n* Single Child\n* Blur Effect"));
				MetaData->SetValue(NewProp_LowQualityFallbackBrush, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_LowQualityFallbackBrush, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_LowQualityFallbackBrush, TEXT("ToolTip"), TEXT("An image to draw instead of applying a blur when low quality override mode is enabled.\nYou can enable low quality mode for background blurs by setting the cvar Slate.ForceBackgroundBlurLowQualityOverride to 1.\nThis is usually done in the project's scalability settings"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("ClampMax"), TEXT("255"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("EditCondition"), TEXT("bOverrideAutoRadiusCalculation"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_BlurRadius, TEXT("ToolTip"), TEXT("This is the number of pixels which will be weighted in each direction from any given pixel when computing the blur\nA larger value is more costly but allows for stronger blurs."));
				MetaData->SetValue(NewProp_bOverrideAutoRadiusCalculation, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_bOverrideAutoRadiusCalculation, TEXT("ToolTip"), TEXT("Whether or not the radius should be computed automatically or if it should use the radius"));
				MetaData->SetValue(NewProp_BlurStrength, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BlurStrength, TEXT("ClampMax"), TEXT("100"));
				MetaData->SetValue(NewProp_BlurStrength, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_BlurStrength, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_BlurStrength, TEXT("ToolTip"), TEXT("How blurry the background is.  Larger numbers mean more blurry but will result in larger runtime cost on the gpu."));
				MetaData->SetValue(NewProp_bApplyAlphaToBlur, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bApplyAlphaToBlur, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_bApplyAlphaToBlur, TEXT("ToolTip"), TEXT("True to modulate the strength of the blur based on the widget alpha."));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/BackgroundBlur.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBackgroundBlur(Z_Construct_UClass_UBackgroundBlur, &UBackgroundBlur::StaticClass, TEXT("UBackgroundBlur"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBackgroundBlur);
	UFunction* Z_Construct_UFunction_UBorder_GetDynamicMaterial()
	{
		struct Border_eventGetDynamicMaterial_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Border_eventGetDynamicMaterial_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrush()
	{
		struct Border_eventSetBrush_Parms
		{
			FSlateBrush InBrush;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Border_eventSetBrush_Parms));
			UProperty* NewProp_InBrush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBrush, Border_eventSetBrush_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
			MetaData->SetValue(NewProp_InBrush, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushColor()
	{
		struct Border_eventSetBrushColor_Parms
		{
			FLinearColor InBrushColor;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Border_eventSetBrushColor_Parms));
			UProperty* NewProp_InBrushColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrushColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBrushColor, Border_eventSetBrushColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromAsset()
	{
		struct Border_eventSetBrushFromAsset_Parms
		{
			USlateBrushAsset* Asset;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromAsset_Parms));
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Asset, Border_eventSetBrushFromAsset_Parms), 0x0010000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromMaterial()
	{
		struct Border_eventSetBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, Border_eventSetBrushFromMaterial_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromTexture()
	{
		struct Border_eventSetBrushFromTexture_Parms
		{
			UTexture2D* Texture;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromTexture_Parms));
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, Border_eventSetBrushFromTexture_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetContentColorAndOpacity()
	{
		struct Border_eventSetContentColorAndOpacity_Parms
		{
			FLinearColor InContentColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetContentColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Border_eventSetContentColorAndOpacity_Parms));
			UProperty* NewProp_InContentColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InContentColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InContentColorAndOpacity, Border_eventSetContentColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetDesiredSizeScale()
	{
		struct Border_eventSetDesiredSizeScale_Parms
		{
			FVector2D InScale;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDesiredSizeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Border_eventSetDesiredSizeScale_Parms));
			UProperty* NewProp_InScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InScale, Border_eventSetDesiredSizeScale_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the DesireSizeScale of this border.\n\n@param InScale    The X and Y multipliers for the desired size"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetHorizontalAlignment()
	{
		struct Border_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, Border_eventSetHorizontalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetPadding()
	{
		struct Border_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, Border_eventSetPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetVerticalAlignment()
	{
		struct Border_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, Border_eventSetVerticalAlignment_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBorder_NoRegister()
	{
		return UBorder::StaticClass();
	}
	UClass* Z_Construct_UClass_UBorder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UBorder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetContentColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetDesiredSizeScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Brush_DEPRECATED, UBorder), 0x0020080020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_OnMouseDoubleClickEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseDoubleClickEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseDoubleClickEvent, UBorder), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseMoveEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseMoveEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseMoveEvent, UBorder), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseButtonUpEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonUpEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonUpEvent, UBorder), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseButtonDownEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonDownEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonDownEvent, UBorder), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowEffectWhenDisabled, UBorder, bool);
				UProperty* NewProp_bShowEffectWhenDisabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowEffectWhenDisabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowEffectWhenDisabled, UBorder), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bShowEffectWhenDisabled, UBorder), sizeof(bool), true);
				UProperty* NewProp_DesiredSizeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesiredSizeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DesiredSizeScale, UBorder), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_BrushColorDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushColorDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(BrushColorDelegate, UBorder), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_BrushColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BrushColor, UBorder), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(BackgroundDelegate, UBorder), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature());
				UProperty* NewProp_Background = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Background"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Background, UBorder), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBorder), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBorder), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding, UBorder), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_ContentColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ContentColorAndOpacityDelegate, UBorder), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ContentColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ContentColorAndOpacity, UBorder), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_GetDynamicMaterial(), "GetDynamicMaterial"); // 3086897238
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetBrush(), "SetBrush"); // 2932662737
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetBrushColor(), "SetBrushColor"); // 3730155023
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetBrushFromAsset(), "SetBrushFromAsset"); // 2897290121
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetBrushFromMaterial(), "SetBrushFromMaterial"); // 3929887950
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetBrushFromTexture(), "SetBrushFromTexture"); // 4056242283
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetContentColorAndOpacity(), "SetContentColorAndOpacity"); // 1304137729
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetDesiredSizeScale(), "SetDesiredSizeScale"); // 1338420453
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetHorizontalAlignment(), "SetHorizontalAlignment"); // 221336555
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetPadding(), "SetPadding"); // 2631882118
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBorder_SetVerticalAlignment(), "SetVerticalAlignment"); // 4226924168
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Border.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A border is a container widget that can contain one child widget, providing an opportunity\nto surround it with a background image and adjustable padding.\n\n* Single Child\n* Image"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("Image to use for the border"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("ToolTip"), TEXT("Whether or not to show the disabled effect when this border is disabled"));
				MetaData->SetValue(NewProp_DesiredSizeScale, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_DesiredSizeScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_DesiredSizeScale, TEXT("ToolTip"), TEXT("Scales the computed desired size of this border and its contents. Useful\nfor making things that slide open without having to hard-code their size.\nNote: if the parent widget is set up to ignore this widget's desired size,\nthen changing this value will have no effect."));
				MetaData->SetValue(NewProp_BrushColorDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BrushColorDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the BrushColor."));
				MetaData->SetValue(NewProp_BrushColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("ToolTip"), TEXT("Color and opacity of the actual border image"));
				MetaData->SetValue(NewProp_BackgroundDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BackgroundDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the Brush."));
				MetaData->SetValue(NewProp_Background, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Background, TEXT("DisplayName"), TEXT("Brush"));
				MetaData->SetValue(NewProp_Background, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Background, TEXT("ToolTip"), TEXT("Brush to drag as the background"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
				MetaData->SetValue(NewProp_ContentColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_ContentColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ContentColorAndOpacity."));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("ToolTip"), TEXT("Color and opacity multiplier of content in the border"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBorder(Z_Construct_UClass_UBorder, &UBorder::StaticClass, TEXT("UBorder"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBorder);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonHoverEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonReleasedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonPressedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonClickedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_IsPressed()
	{
		struct Button_eventIsPressed_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Button_eventIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Button_eventIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Button_eventIsPressed_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Button_eventIsPressed_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the user is actively pressing the button.  Do not use this for detecting 'Clicks', use the OnClicked event instead.\n\n@return true if the user is actively pressing the button otherwise false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_SetBackgroundColor()
	{
		struct Button_eventSetBackgroundColor_Parms
		{
			FLinearColor InBackgroundColor;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Button_eventSetBackgroundColor_Parms));
			UProperty* NewProp_InBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBackgroundColor, Button_eventSetBackgroundColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button background"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_SetColorAndOpacity()
	{
		struct Button_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Button_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, Button_eventSetColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button content"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_SetStyle()
	{
		struct Button_eventSetStyle_Parms
		{
			FButtonStyle InStyle;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Button_eventSetStyle_Parms));
			UProperty* NewProp_InStyle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InStyle, Button_eventSetStyle_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button background"));
			MetaData->SetValue(NewProp_InStyle, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UButton_NoRegister()
	{
		return UButton::StaticClass();
	}
	UClass* Z_Construct_UClass_UButton()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UButton::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UButton_IsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UButton_SetBackgroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UButton_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UButton_SetStyle());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnUnhovered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnUnhovered"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnUnhovered, UButton), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature());
				UProperty* NewProp_OnHovered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnHovered"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnHovered, UButton), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature());
				UProperty* NewProp_OnReleased = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnReleased"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnReleased, UButton), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature());
				UProperty* NewProp_OnPressed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnPressed, UButton), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature());
				UProperty* NewProp_OnClicked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnClicked"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnClicked, UButton), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFocusable, UButton, bool);
				UProperty* NewProp_IsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFocusable, UButton), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFocusable, UButton), sizeof(bool), true);
				UProperty* NewProp_TouchMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TouchMethod, UButton), 0x0010040000000015, Z_Construct_UEnum_SlateCore_EButtonTouchMethod());
				UProperty* NewProp_ClickMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClickMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClickMethod, UButton), 0x0010040000000015, Z_Construct_UEnum_SlateCore_EButtonClickMethod());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UButton), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UButton), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UButton), 0x0010000000000005, Z_Construct_UScriptStruct_FButtonStyle());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UButton), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButton_IsPressed(), "IsPressed"); // 2548139451
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButton_SetBackgroundColor(), "SetBackgroundColor"); // 4117800245
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButton_SetColorAndOpacity(), "SetColorAndOpacity"); // 377059882
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UButton_SetStyle(), "SetStyle"); // 916178100
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Button.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The button is a click-able primitive widget to enable basic interaction, you\ncan place any other widget inside a button to make a more complex and\ninteresting click-able element in your UI.\n\n* Single Child\n* Clickable"));
				MetaData->SetValue(NewProp_OnUnhovered, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnUnhovered, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnHovered, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnHovered, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ToolTip"), TEXT("Called when the button is released"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ToolTip"), TEXT("Called when the button is pressed"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ToolTip"), TEXT("Called when the button is clicked"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ToolTip"), TEXT("Sometimes a button should only be mouse-clickable and never keyboard focusable."));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ToolTip"), TEXT("The type of touch action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ToolTip"), TEXT("The type of mouse action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color multiplier for the button background"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color multiplier for the button content"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The button style used at runtime"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("The template style asset, used to seed the mutable instance of the style."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButton(Z_Construct_UClass_UButton, &UButton::StaticClass, TEXT("UButton"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButton);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature()
	{
		struct _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms
		{
			bool bIsChecked;
		};
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCheckBoxComponentStateChanged__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnCheckBoxComponentStateChanged_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms, bool);
			UProperty* NewProp_bIsChecked = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsChecked"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_GetCheckedState()
	{
		struct CheckBox_eventGetCheckedState_Parms
		{
			ECheckBoxState ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCheckedState"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventGetCheckedState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ReturnValue, CheckBox_eventGetCheckedState_Parms), 0x0010000000000580, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			UProperty* NewProp_ReturnValue_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the full current checked state."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_IsChecked()
	{
		struct CheckBox_eventIsChecked_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsChecked"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventIsChecked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CheckBox_eventIsChecked_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CheckBox_eventIsChecked_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CheckBox_eventIsChecked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the checkbox is currently checked"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_IsPressed()
	{
		struct CheckBox_eventIsPressed_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CheckBox_eventIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CheckBox_eventIsPressed_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CheckBox_eventIsPressed_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if this button is currently pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_SetCheckedState()
	{
		struct CheckBox_eventSetCheckedState_Parms
		{
			ECheckBoxState InCheckedState;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCheckedState"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CheckBox_eventSetCheckedState_Parms));
			UProperty* NewProp_InCheckedState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCheckedState"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(InCheckedState, CheckBox_eventSetCheckedState_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			UProperty* NewProp_InCheckedState_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_InCheckedState, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the checked state."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_SetIsChecked()
	{
		struct CheckBox_eventSetIsChecked_Parms
		{
			bool InIsChecked;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsChecked"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CheckBox_eventSetIsChecked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InIsChecked, CheckBox_eventSetIsChecked_Parms, bool);
			UProperty* NewProp_InIsChecked = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InIsChecked"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InIsChecked, CheckBox_eventSetIsChecked_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InIsChecked, CheckBox_eventSetIsChecked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the checked state."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCheckBox_NoRegister()
	{
		return UCheckBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheckBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UCheckBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_GetCheckedState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_IsChecked());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_IsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_SetCheckedState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_SetIsChecked());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCheckStateChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCheckStateChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCheckStateChanged, UCheckBox), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFocusable, UCheckBox, bool);
				UProperty* NewProp_IsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFocusable, UCheckBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFocusable, UCheckBox), sizeof(bool), true);
				UProperty* NewProp_BorderBackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BorderBackgroundColor_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Padding_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UCheckBox), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_UndeterminedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedPressedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedPressedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UndeterminedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedHoveredImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedHoveredImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UndeterminedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedPressedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CheckedPressedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedHoveredImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CheckedHoveredImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CheckedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedPressedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UncheckedPressedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedHoveredImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UncheckedHoveredImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UncheckedImage_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UCheckBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UCheckBox), 0x0010000000000005, Z_Construct_UScriptStruct_FCheckBoxStyle());
				UProperty* NewProp_CheckedStateDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedStateDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(CheckedStateDelegate, UCheckBox), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature());
				UProperty* NewProp_CheckedState = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedState"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(CheckedState, UCheckBox), 0x0010000000000001, Z_Construct_UEnum_SlateCore_ECheckBoxState());
				UProperty* NewProp_CheckedState_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_CheckedState, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCheckBox_GetCheckedState(), "GetCheckedState"); // 3682834231
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCheckBox_IsChecked(), "IsChecked"); // 1947014211
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCheckBox_IsPressed(), "IsPressed"); // 2109505536
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCheckBox_SetCheckedState(), "SetCheckedState"); // 3515206735
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCheckBox_SetIsChecked(), "SetIsChecked"); // 1772584554
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CheckBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The checkbox widget allows you to display a toggled state of 'unchecked', 'checked' and\n'indeterminable.  You can use the checkbox for a classic checkbox, or as a toggle button,\nor as radio buttons.\n\n* Single Child\n* Toggle"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("Category"), TEXT("CheckBox|Event"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("ToolTip"), TEXT("Called when the checked state has changed"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ToolTip"), TEXT("Sometimes a button should only be mouse-clickable and never keyboard focusable."));
				MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ToolTip"), TEXT("The color of the background border"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Spacing between the check box image and its content"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("How the content of the toggle button should align within the given space"));
				MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is in an ambiguous state and pressed"));
				MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and hovered"));
				MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is in an ambiguous state and hovered"));
				MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and pressed"));
				MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and hovered"));
				MetaData->SetValue(NewProp_CheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked"));
				MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked and pressed"));
				MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked and hovered"));
				MetaData->SetValue(NewProp_UncheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style of the check box"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The checkbox bar style"));
				MetaData->SetValue(NewProp_CheckedStateDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedStateDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the IsChecked."));
				MetaData->SetValue(NewProp_CheckedState, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_CheckedState, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedState, TEXT("ToolTip"), TEXT("Whether the check box is currently in a checked state"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheckBox(Z_Construct_UClass_UCheckBox, &UCheckBox::StaticClass, TEXT("UCheckBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheckBox);
	UFunction* Z_Construct_UFunction_UInvalidationBox_GetCanCache()
	{
		struct InvalidationBox_eventGetCanCache_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UInvalidationBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCanCache"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(InvalidationBox_eventGetCanCache_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, InvalidationBox_eventGetCanCache_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, InvalidationBox_eventGetCanCache_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, InvalidationBox_eventGetCanCache_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Invalidation Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInvalidationBox_InvalidateCache()
	{
		UObject* Outer=Z_Construct_UClass_UInvalidationBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvalidateCache"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Invalidation Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UInvalidationBox_SetCanCache()
	{
		struct InvalidationBox_eventSetCanCache_Parms
		{
			bool CanCache;
		};
		UObject* Outer=Z_Construct_UClass_UInvalidationBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCanCache"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(InvalidationBox_eventSetCanCache_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(CanCache, InvalidationBox_eventSetCanCache_Parms, bool);
			UProperty* NewProp_CanCache = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CanCache"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CanCache, InvalidationBox_eventSetCanCache_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(CanCache, InvalidationBox_eventSetCanCache_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Invalidation Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInvalidationBox_NoRegister()
	{
		return UInvalidationBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UInvalidationBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UInvalidationBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UInvalidationBox_GetCanCache());
				OuterClass->LinkChild(Z_Construct_UFunction_UInvalidationBox_InvalidateCache());
				OuterClass->LinkChild(Z_Construct_UFunction_UInvalidationBox_SetCanCache());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CacheRelativeTransforms, UInvalidationBox, bool);
				UProperty* NewProp_CacheRelativeTransforms = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CacheRelativeTransforms"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CacheRelativeTransforms, UInvalidationBox), 0x0020080000000015, CPP_BOOL_PROPERTY_BITMASK(CacheRelativeTransforms, UInvalidationBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanCache, UInvalidationBox, bool);
				UProperty* NewProp_bCanCache = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanCache"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanCache, UInvalidationBox), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bCanCache, UInvalidationBox), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInvalidationBox_GetCanCache(), "GetCanCache"); // 3444963381
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInvalidationBox_InvalidateCache(), "InvalidateCache"); // 1357471884
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UInvalidationBox_SetCanCache(), "SetCanCache"); // 667820471
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/InvalidationBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Invalidate\n* Single Child\n* Caching / Performance"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("Category"), TEXT("Caching"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("ToolTip"), TEXT("Caches the locations for child draw elements relative to the invalidation box,\nthis adds extra overhead to drawing them every frame.  However, in cases where\nthe position of the invalidation boxes changes every frame this can be a big savings."));
				MetaData->SetValue(NewProp_bCanCache, TEXT("Category"), TEXT("Caching"));
				MetaData->SetValue(NewProp_bCanCache, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
				MetaData->SetValue(NewProp_bCanCache, TEXT("ToolTip"), TEXT("Should the invalidation panel cache the widgets?  Making this false makes it so the invalidation\npanel stops acting like an invalidation panel, just becomes a simple container widget."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInvalidationBox(Z_Construct_UClass_UInvalidationBox, &UInvalidationBox::StaticClass, TEXT("UInvalidationBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInvalidationBox);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature()
	{
		struct _Script_UMG_eventOnMenuOpenChangedEvent_Parms
		{
			bool bIsOpen;
		};
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMenuOpenChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnMenuOpenChangedEvent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms, bool);
			UProperty* NewProp_bIsOpen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_Close()
	{
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Close"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Closes the menu if it is currently open."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_GetMenuPosition()
	{
		struct MenuAnchor_eventGetMenuPosition_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMenuPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(MenuAnchor_eventGetMenuPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MenuAnchor_eventGetMenuPosition_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The current menu position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus()
	{
		struct MenuAnchor_eventHasOpenSubMenus_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasOpenSubMenus"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventHasOpenSubMenus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Whether this menu has open submenus"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_IsOpen()
	{
		struct MenuAnchor_eventIsOpen_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventIsOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventIsOpen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventIsOpen_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventIsOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the popup is open; false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_Open()
	{
		struct MenuAnchor_eventOpen_Parms
		{
			bool bFocusMenu;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Open"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MenuAnchor_eventOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFocusMenu, MenuAnchor_eventOpen_Parms, bool);
			UProperty* NewProp_bFocusMenu = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFocusMenu"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFocusMenu, MenuAnchor_eventOpen_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bFocusMenu, MenuAnchor_eventOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Opens the menu if it is not already open"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick()
	{
		struct MenuAnchor_eventShouldOpenDueToClick_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShouldOpenDueToClick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventShouldOpenDueToClick_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if we should open the menu due to a click. Sometimes we should not, if\nthe same MouseDownEvent that just closed the menu is about to re-open it because it\nhappens to land on the button."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_ToggleOpen()
	{
		struct MenuAnchor_eventToggleOpen_Parms
		{
			bool bFocusOnOpen;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MenuAnchor_eventToggleOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms, bool);
			UProperty* NewProp_bFocusOnOpen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFocusOnOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggles the menus open state.\n\n@param bFocusOnOpen  Should we focus the popup as soon as it opens?"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMenuAnchor_NoRegister()
	{
		return UMenuAnchor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMenuAnchor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UMenuAnchor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_Close());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_GetMenuPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_IsOpen());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_Open());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_ToggleOpen());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnMenuOpenChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMenuOpenChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMenuOpenChanged, UMenuAnchor), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseApplicationMenuStack, UMenuAnchor, bool);
				UProperty* NewProp_UseApplicationMenuStack = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseApplicationMenuStack"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseApplicationMenuStack, UMenuAnchor), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(UseApplicationMenuStack, UMenuAnchor), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShouldDeferPaintingAfterWindowContent, UMenuAnchor, bool);
				UProperty* NewProp_ShouldDeferPaintingAfterWindowContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShouldDeferPaintingAfterWindowContent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShouldDeferPaintingAfterWindowContent, UMenuAnchor), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(ShouldDeferPaintingAfterWindowContent, UMenuAnchor), sizeof(bool), true);
				UProperty* NewProp_Placement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Placement"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Placement, UMenuAnchor), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EMenuPlacement());
				UProperty* NewProp_OnGetMenuContentEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGetMenuContentEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnGetMenuContentEvent, UMenuAnchor), 0x0010000000080001, Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature());
				UProperty* NewProp_MenuClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(MenuClass, UMenuAnchor), 0x0014000000000015, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_Close(), "Close"); // 2724144762
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_GetMenuPosition(), "GetMenuPosition"); // 3751991679
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus(), "HasOpenSubMenus"); // 3358597561
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_IsOpen(), "IsOpen"); // 888467589
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_Open(), "Open"); // 3293379176
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick(), "ShouldOpenDueToClick"); // 703795361
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMenuAnchor_ToggleOpen(), "ToggleOpen"); // 4252418352
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MenuAnchor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Menu Anchor allows you to specify an location that a popup menu should be anchored to,\nand should be summoned from.\n* Single Child\n* Popup"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("Category"), TEXT("Menu Anchor|Event"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("ToolTip"), TEXT("Called when the opened state of the menu changes"));
				MetaData->SetValue(NewProp_UseApplicationMenuStack, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_UseApplicationMenuStack, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_UseApplicationMenuStack, TEXT("ToolTip"), TEXT("Does this menu behave like a normal stacked menu? Set it to false to control the menu's lifetime yourself."));
				MetaData->SetValue(NewProp_ShouldDeferPaintingAfterWindowContent, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_ShouldDeferPaintingAfterWindowContent, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_Placement, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_Placement, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_Placement, TEXT("ToolTip"), TEXT("The placement location of the summoned widget."));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("ToolTip"), TEXT("Called when the menu content is requested to allow a more customized handling over what to display"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("ToolTip"), TEXT("The widget class to spawn when the menu is required.  Creates the widget freshly each time.\nIf you want to customize the creation of the popup, you should bind a function to OnGetMenuContentEvent\ninstead."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMenuAnchor(Z_Construct_UClass_UMenuAnchor, &UMenuAnchor::StaticClass, TEXT("UMenuAnchor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMenuAnchor);
	UClass* Z_Construct_UClass_UNamedSlot_NoRegister()
	{
		return UNamedSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UNamedSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UNamedSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/NamedSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/NamedSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows you to expose an external slot for your user widget.  When others reuse your user control,\nthey can put whatever they want in this named slot."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNamedSlot(Z_Construct_UClass_UNamedSlot, &UNamedSlot::StaticClass, TEXT("UNamedSlot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNamedSlot);
	UFunction* Z_Construct_UFunction_URetainerBox_GetEffectMaterial()
	{
		struct RetainerBox_eventGetEffectMaterial_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_URetainerBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEffectMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(RetainerBox_eventGetEffectMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, RetainerBox_eventGetEffectMaterial_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Retainer|Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current dynamic effect material applied to the retainer box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_URetainerBox_SetEffectMaterial()
	{
		struct RetainerBox_eventSetEffectMaterial_Parms
		{
			UMaterialInterface* EffectMaterial;
		};
		UObject* Outer=Z_Construct_UClass_URetainerBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEffectMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(RetainerBox_eventSetEffectMaterial_Parms));
			UProperty* NewProp_EffectMaterial = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EffectMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EffectMaterial, RetainerBox_eventSetEffectMaterial_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Retainer|Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a new effect material to the retainer widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_URetainerBox_SetTextureParameter()
	{
		struct RetainerBox_eventSetTextureParameter_Parms
		{
			FName TextureParameter;
		};
		UObject* Outer=Z_Construct_UClass_URetainerBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextureParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(RetainerBox_eventSetTextureParameter_Parms));
			UProperty* NewProp_TextureParameter = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TextureParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TextureParameter, RetainerBox_eventSetTextureParameter_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Retainer|Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the name of the texture parameter to set the render target to on the material."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_URetainerBox_NoRegister()
	{
		return URetainerBox::StaticClass();
	}
	UClass* Z_Construct_UClass_URetainerBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = URetainerBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_URetainerBox_GetEffectMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_URetainerBox_SetEffectMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_URetainerBox_SetTextureParameter());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextureParameter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TextureParameter, URetainerBox), 0x0020080000000015);
				UProperty* NewProp_EffectMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EffectMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EffectMaterial, URetainerBox), 0x0020080000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_PhaseCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhaseCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PhaseCount, URetainerBox), 0x0010000000000001);
				UProperty* NewProp_Phase = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Phase"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Phase, URetainerBox), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_URetainerBox_GetEffectMaterial(), "GetEffectMaterial"); // 3551482835
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_URetainerBox_SetEffectMaterial(), "SetEffectMaterial"); // 2006348602
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_URetainerBox_SetTextureParameter(), "SetTextureParameter"); // 2572241643
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/RetainerBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Retainer Box renders children widgets to a render target first before\nlater rendering that render target to the screen.  This allows both frequency\nand phase to be controlled so that the UI can actually render less often than the\nfrequency of the main game render.  It also has the side benefit of allow materials\nto be applied to the render target after drawing the widgets to apply a simple post process.\n\n* Single Child\n* Caching / Performance"));
				MetaData->SetValue(NewProp_TextureParameter, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_TextureParameter, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
				MetaData->SetValue(NewProp_TextureParameter, TEXT("ToolTip"), TEXT("The texture sampler parameter of the @EffectMaterial, that we'll set to the render target."));
				MetaData->SetValue(NewProp_EffectMaterial, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_EffectMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
				MetaData->SetValue(NewProp_EffectMaterial, TEXT("ToolTip"), TEXT("The effect to optionally apply to the render target.  We will set the texture sampler based on the name\nset in the @TextureParameter property.\n\nIf you want to adjust transparency of the final image, make sure you set Blend Mode to AlphaComposite (Pre-Multiplied Alpha)\nand make sure to multiply the alpha you're apply across the surface to the color and the alpha of the render target, otherwise\nyou won't see the expected color."));
				MetaData->SetValue(NewProp_PhaseCount, TEXT("Category"), TEXT("Phasing"));
				MetaData->SetValue(NewProp_PhaseCount, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_PhaseCount, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
				MetaData->SetValue(NewProp_PhaseCount, TEXT("ToolTip"), TEXT("The PhaseCount controls how many phases are possible know what to modulus the current frame\ncount by to determine if this is the current frame to draw the widget on.\n\nIf the Phase is 0, and the PhaseCount is 1, the widget will be drawn fresh every frame.\nIf the Phase were 0, and the PhaseCount were 2, this retainer would draw a fresh frame every\nother frame.  So in a 60Hz game, the UI would render at 30Hz."));
				MetaData->SetValue(NewProp_PhaseCount, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_Phase, TEXT("Category"), TEXT("Phasing"));
				MetaData->SetValue(NewProp_Phase, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Phase, TEXT("ModuleRelativePath"), TEXT("Public/Components/RetainerBox.h"));
				MetaData->SetValue(NewProp_Phase, TEXT("ToolTip"), TEXT("The Phase this widget will draw on.\n\nIf the Phase is 0, and the PhaseCount is 1, the widget will be drawn fresh every frame.\nIf the Phase were 0, and the PhaseCount were 2, this retainer would draw a fresh frame every\nother frame.  So in a 60Hz game, the UI would render at 30Hz."));
				MetaData->SetValue(NewProp_Phase, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URetainerBox(Z_Construct_UClass_URetainerBox, &URetainerBox::StaticClass, TEXT("URetainerBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(URetainerBox);
	UClass* Z_Construct_UClass_USafeZone_NoRegister()
	{
		return USafeZone::StaticClass();
	}
	UClass* Z_Construct_UClass_USafeZone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USafeZone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PadBottom, USafeZone, bool);
				UProperty* NewProp_PadBottom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PadBottom"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PadBottom, USafeZone), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(PadBottom, USafeZone), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PadTop, USafeZone, bool);
				UProperty* NewProp_PadTop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PadTop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PadTop, USafeZone), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(PadTop, USafeZone), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PadRight, USafeZone, bool);
				UProperty* NewProp_PadRight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PadRight"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PadRight, USafeZone), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(PadRight, USafeZone), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(PadLeft, USafeZone, bool);
				UProperty* NewProp_PadLeft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PadLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(PadLeft, USafeZone), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(PadLeft, USafeZone), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SafeZone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
				MetaData->SetValue(NewProp_PadBottom, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_PadBottom, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
				MetaData->SetValue(NewProp_PadBottom, TEXT("ToolTip"), TEXT("If this safe zone should pad for the bottom side of the screen's safe zone"));
				MetaData->SetValue(NewProp_PadTop, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_PadTop, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
				MetaData->SetValue(NewProp_PadTop, TEXT("ToolTip"), TEXT("If this safe zone should pad for the top side of the screen's safe zone"));
				MetaData->SetValue(NewProp_PadRight, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_PadRight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
				MetaData->SetValue(NewProp_PadRight, TEXT("ToolTip"), TEXT("If this safe zone should pad for the right side of the screen's safe zone"));
				MetaData->SetValue(NewProp_PadLeft, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_PadLeft, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
				MetaData->SetValue(NewProp_PadLeft, TEXT("ToolTip"), TEXT("If this safe zone should pad for the left side of the screen's safe zone"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USafeZone(Z_Construct_UClass_USafeZone, &USafeZone::StaticClass, TEXT("USafeZone"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USafeZone);
	UFunction* Z_Construct_UFunction_UScaleBox_SetIgnoreInheritedScale()
	{
		struct ScaleBox_eventSetIgnoreInheritedScale_Parms
		{
			bool bInIgnoreInheritedScale;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIgnoreInheritedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBox_eventSetIgnoreInheritedScale_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInIgnoreInheritedScale, ScaleBox_eventSetIgnoreInheritedScale_Parms, bool);
			UProperty* NewProp_bInIgnoreInheritedScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInIgnoreInheritedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInIgnoreInheritedScale, ScaleBox_eventSetIgnoreInheritedScale_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInIgnoreInheritedScale, ScaleBox_eventSetIgnoreInheritedScale_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBox_SetStretch()
	{
		struct ScaleBox_eventSetStretch_Parms
		{
			TEnumAsByte<EStretch::Type> InStretch;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStretch"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBox_eventSetStretch_Parms));
			UProperty* NewProp_InStretch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStretch"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InStretch, ScaleBox_eventSetStretch_Parms), 0x0010000000000080, Z_Construct_UEnum_Slate_EStretch());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBox_SetStretchDirection()
	{
		struct ScaleBox_eventSetStretchDirection_Parms
		{
			TEnumAsByte<EStretchDirection::Type> InStretchDirection;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStretchDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBox_eventSetStretchDirection_Parms));
			UProperty* NewProp_InStretchDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStretchDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InStretchDirection, ScaleBox_eventSetStretchDirection_Parms), 0x0010000000000080, Z_Construct_UEnum_Slate_EStretchDirection());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBox_SetUserSpecifiedScale()
	{
		struct ScaleBox_eventSetUserSpecifiedScale_Parms
		{
			float InUserSpecifiedScale;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUserSpecifiedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBox_eventSetUserSpecifiedScale_Parms));
			UProperty* NewProp_InUserSpecifiedScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InUserSpecifiedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InUserSpecifiedScale, ScaleBox_eventSetUserSpecifiedScale_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScaleBox_NoRegister()
	{
		return UScaleBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UScaleBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UScaleBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBox_SetIgnoreInheritedScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBox_SetStretch());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBox_SetStretchDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBox_SetUserSpecifiedScale());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IgnoreInheritedScale, UScaleBox, bool);
				UProperty* NewProp_IgnoreInheritedScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IgnoreInheritedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IgnoreInheritedScale, UScaleBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IgnoreInheritedScale, UScaleBox), sizeof(bool), true);
				UProperty* NewProp_UserSpecifiedScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UserSpecifiedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UserSpecifiedScale, UScaleBox), 0x0010000000000015);
				UProperty* NewProp_StretchDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StretchDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(StretchDirection, UScaleBox), 0x0010000000000015, Z_Construct_UEnum_Slate_EStretchDirection());
				UProperty* NewProp_Stretch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Stretch"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Stretch, UScaleBox), 0x0010000000000015, Z_Construct_UEnum_Slate_EStretch());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBox_SetIgnoreInheritedScale(), "SetIgnoreInheritedScale"); // 1254903397
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBox_SetStretch(), "SetStretch"); // 3354947623
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBox_SetStretchDirection(), "SetStretchDirection"); // 1973862924
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScaleBox_SetUserSpecifiedScale(), "SetUserSpecifiedScale"); // 3367360068
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScaleBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows you to place content with a desired size and have it scale to meet the constraints placed on this box's alloted area.  If\nyou needed to have a background image scale to fill an area but not become distorted with different aspect ratios, or if you need\nto auto fit some text to an area, this is the control for you.\n\n* Single Child\n* Aspect Ratio"));
				MetaData->SetValue(NewProp_IgnoreInheritedScale, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_IgnoreInheritedScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_IgnoreInheritedScale, TEXT("ToolTip"), TEXT("Optional bool to ignore the inherited scale. Applies inverse scaling to counteract parents before applying the local scale operation."));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("ToolTip"), TEXT("Optional scale that can be specified by the User. Used only for UserSpecified stretching."));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("ToolTip"), TEXT("Controls in what direction content can be scaled"));
				MetaData->SetValue(NewProp_Stretch, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_Stretch, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_Stretch, TEXT("ToolTip"), TEXT("The stretching rule to apply when content is stretched"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScaleBox(Z_Construct_UClass_UScaleBox, &UScaleBox::StaticClass, TEXT("UScaleBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScaleBox);
	UFunction* Z_Construct_UFunction_USizeBox_ClearHeightOverride()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearHeightOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMaxAspectRatio()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxAspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearWidthOverride()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearWidthOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetHeightOverride()
	{
		struct SizeBox_eventSetHeightOverride_Parms
		{
			float InHeightOverride;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHeightOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetHeightOverride_Parms));
			UProperty* NewProp_InHeightOverride = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHeightOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InHeightOverride, SizeBox_eventSetHeightOverride_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMaxAspectRatio()
	{
		struct SizeBox_eventSetMaxAspectRatio_Parms
		{
			float InMaxAspectRatio;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxAspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMaxAspectRatio_Parms));
			UProperty* NewProp_InMaxAspectRatio = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxAspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMaxAspectRatio, SizeBox_eventSetMaxAspectRatio_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight()
	{
		struct SizeBox_eventSetMaxDesiredHeight_Parms
		{
			float InMaxDesiredHeight;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMaxDesiredHeight_Parms));
			UProperty* NewProp_InMaxDesiredHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMaxDesiredHeight, SizeBox_eventSetMaxDesiredHeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredHeight if smaller than the content's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth()
	{
		struct SizeBox_eventSetMaxDesiredWidth_Parms
		{
			float InMaxDesiredWidth;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMaxDesiredWidth_Parms));
			UProperty* NewProp_InMaxDesiredWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMaxDesiredWidth, SizeBox_eventSetMaxDesiredWidth_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredWidth if smaller than the content's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredHeight()
	{
		struct SizeBox_eventSetMinDesiredHeight_Parms
		{
			float InMinDesiredHeight;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMinDesiredHeight_Parms));
			UProperty* NewProp_InMinDesiredHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredHeight, SizeBox_eventSetMinDesiredHeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredHeight if larger than the content's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredWidth()
	{
		struct SizeBox_eventSetMinDesiredWidth_Parms
		{
			float InMinDesiredWidth;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMinDesiredWidth_Parms));
			UProperty* NewProp_InMinDesiredWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredWidth, SizeBox_eventSetMinDesiredWidth_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredWidth if larger than the content's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetWidthOverride()
	{
		struct SizeBox_eventSetWidthOverride_Parms
		{
			float InWidthOverride;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWidthOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetWidthOverride_Parms));
			UProperty* NewProp_InWidthOverride = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidthOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InWidthOverride, SizeBox_eventSetWidthOverride_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USizeBox_NoRegister()
	{
		return USizeBox::StaticClass();
	}
	UClass* Z_Construct_UClass_USizeBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USizeBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearHeightOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMaxAspectRatio());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearWidthOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetHeightOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMaxAspectRatio());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMinDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMinDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetWidthOverride());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxAspectRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxAspectRatio, USizeBox), 0x0010000000000015);
				UProperty* NewProp_MaxDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredHeight, USizeBox), 0x0010000000000015);
				UProperty* NewProp_MaxDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredWidth, USizeBox), 0x0010000000000015);
				UProperty* NewProp_MinDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredHeight, USizeBox), 0x0010000000000015);
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, USizeBox), 0x0010000000000015);
				UProperty* NewProp_HeightOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HeightOverride, USizeBox), 0x0010000000000015);
				UProperty* NewProp_WidthOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthOverride, USizeBox), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxAspectRatio, USizeBox, uint8);
				UProperty* NewProp_bOverride_MaxAspectRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxAspectRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxAspectRatio, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxAspectRatio, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxDesiredHeight, USizeBox, uint8);
				UProperty* NewProp_bOverride_MaxDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxDesiredHeight, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxDesiredHeight, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxDesiredWidth, USizeBox, uint8);
				UProperty* NewProp_bOverride_MaxDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxDesiredWidth, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxDesiredWidth, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinDesiredHeight, USizeBox, uint8);
				UProperty* NewProp_bOverride_MinDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinDesiredHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinDesiredHeight, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinDesiredHeight, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinDesiredWidth, USizeBox, uint8);
				UProperty* NewProp_bOverride_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinDesiredWidth, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinDesiredWidth, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_HeightOverride, USizeBox, uint8);
				UProperty* NewProp_bOverride_HeightOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_HeightOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_HeightOverride, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_HeightOverride, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_WidthOverride, USizeBox, uint8);
				UProperty* NewProp_bOverride_WidthOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_WidthOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_WidthOverride, USizeBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_WidthOverride, USizeBox), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearHeightOverride(), "ClearHeightOverride"); // 111528140
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearMaxAspectRatio(), "ClearMaxAspectRatio"); // 1390195434
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight(), "ClearMaxDesiredHeight"); // 2037352672
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth(), "ClearMaxDesiredWidth"); // 3452326086
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight(), "ClearMinDesiredHeight"); // 2096999185
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth(), "ClearMinDesiredWidth"); // 762145373
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_ClearWidthOverride(), "ClearWidthOverride"); // 4095046309
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetHeightOverride(), "SetHeightOverride"); // 26797377
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetMaxAspectRatio(), "SetMaxAspectRatio"); // 3222039732
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight(), "SetMaxDesiredHeight"); // 263950960
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth(), "SetMaxDesiredWidth"); // 4010509330
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetMinDesiredHeight(), "SetMinDesiredHeight"); // 3850298169
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetMinDesiredWidth(), "SetMinDesiredWidth"); // 356305976
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USizeBox_SetWidthOverride(), "SetWidthOverride"); // 3539655101
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SizeBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A widget that allows you to specify the size it reports to have and desire.  Not all widgets report a desired size\nthat you actually desire.  Wrapping them in a SizeBox lets you have the Size Box force them to be a particular size.\n\n* Single Child\n* Fixed Size"));
				MetaData->SetValue(NewProp_MaxAspectRatio, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MaxAspectRatio, TEXT("editcondition"), TEXT("bOverride_MaxAspectRatio"));
				MetaData->SetValue(NewProp_MaxAspectRatio, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("editcondition"), TEXT("bOverride_MaxDesiredHeight"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredHeight if smaller than the content's desired height."));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("editcondition"), TEXT("bOverride_MaxDesiredWidth"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredWidth if smaller than the content's desired width."));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("editcondition"), TEXT("bOverride_MinDesiredHeight"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredHeight if larger than the content's desired height."));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("editcondition"), TEXT("bOverride_MinDesiredWidth"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredWidth if larger than the content's desired width."));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("editcondition"), TEXT("bOverride_HeightOverride"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height."));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("editcondition"), TEXT("bOverride_WidthOverride"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width."));
				MetaData->SetValue(NewProp_bOverride_MaxAspectRatio, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_MaxAspectRatio, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MaxAspectRatio, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredHeight, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredWidth, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredHeight, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MinDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredWidth, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_HeightOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_HeightOverride, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_HeightOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_WidthOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_bOverride_WidthOverride, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_WidthOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USizeBox(Z_Construct_UClass_USizeBox, &USizeBox::StaticClass, TEXT("USizeBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USizeBox);
	UFunction* Z_Construct_UFunction_UViewport_GetViewLocation()
	{
		struct Viewport_eventGetViewLocation_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(Viewport_eventGetViewLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_GetViewportWorld()
	{
		struct Viewport_eventGetViewportWorld_Parms
		{
			UWorld* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Viewport_eventGetViewportWorld_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewportWorld_Parms), 0x0010000000000580, Z_Construct_UClass_UWorld_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_GetViewRotation()
	{
		struct Viewport_eventGetViewRotation_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(Viewport_eventGetViewRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_SetViewLocation()
	{
		struct Viewport_eventSetViewLocation_Parms
		{
			FVector Location;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Viewport_eventSetViewLocation_Parms));
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, Viewport_eventSetViewLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_SetViewRotation()
	{
		struct Viewport_eventSetViewRotation_Parms
		{
			FRotator Rotation;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Viewport_eventSetViewRotation_Parms));
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, Viewport_eventSetViewRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_Spawn()
	{
		struct Viewport_eventSpawn_Parms
		{
			TSubclassOf<AActor>  ActorClass;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Spawn"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Viewport_eventSpawn_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventSpawn_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActorClass, Viewport_eventSpawn_Parms), 0x0014000000000080, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UViewport_NoRegister()
	{
		return UViewport::StaticClass();
	}
	UClass* Z_Construct_UClass_UViewport()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UViewport::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewportWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_SetViewLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_SetViewRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_Spawn());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UViewport), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_GetViewLocation(), "GetViewLocation"); // 2770341747
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_GetViewportWorld(), "GetViewportWorld"); // 908093821
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_GetViewRotation(), "GetViewRotation"); // 216282089
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_SetViewLocation(), "SetViewLocation"); // 3774136025
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_SetViewRotation(), "SetViewRotation"); // 2071569340
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UViewport_Spawn(), "Spawn"); // 1965750921
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Viewport.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UViewport(Z_Construct_UClass_UViewport, &UViewport::StaticClass, TEXT("UViewport"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UViewport);
	UFunction* Z_Construct_UFunction_UGridPanel_AddChildToGrid()
	{
		struct GridPanel_eventAddChildToGrid_Parms
		{
			UWidget* Content;
			UGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToGrid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridPanel_eventAddChildToGrid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GridPanel_eventAddChildToGrid_Parms), 0x0010000000000580, Z_Construct_UClass_UGridSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, GridPanel_eventAddChildToGrid_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGridPanel_NoRegister()
	{
		return UGridPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UGridPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UGridPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGridPanel_AddChildToGrid());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RowFill = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowFill"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RowFill, UGridPanel), 0x0010000000000015);
				UProperty* NewProp_RowFill_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RowFill, TEXT("RowFill"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ColumnFill = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColumnFill"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ColumnFill, UGridPanel), 0x0010000000000015);
				UProperty* NewProp_ColumnFill_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ColumnFill, TEXT("ColumnFill"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGridPanel_AddChildToGrid(), "AddChildToGrid"); // 1285772950
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/GridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A panel that evenly divides up available space between all of its children.\n\n* Many Children"));
				MetaData->SetValue(NewProp_RowFill, TEXT("Category"), TEXT("Fill Rules"));
				MetaData->SetValue(NewProp_RowFill, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(NewProp_RowFill, TEXT("ToolTip"), TEXT("The row fill rules"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("Category"), TEXT("Fill Rules"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("ToolTip"), TEXT("The column fill rules"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGridPanel(Z_Construct_UClass_UGridPanel, &UGridPanel::StaticClass, TEXT("UGridPanel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGridPanel);
	UFunction* Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox()
	{
		struct HorizontalBox_eventAddChildToHorizontalBox_Parms
		{
			UWidget* Content;
			UHorizontalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToHorizontalBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBox_eventAddChildToHorizontalBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, HorizontalBox_eventAddChildToHorizontalBox_Parms), 0x0010000000000580, Z_Construct_UClass_UHorizontalBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, HorizontalBox_eventAddChildToHorizontalBox_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHorizontalBox_NoRegister()
	{
		return UHorizontalBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UHorizontalBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UHorizontalBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox(), "AddChildToHorizontalBox"); // 778306510
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/HorizontalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows widgets to be laid out in a flow horizontally.\n\n* Many Children\n* Flow Horizontal"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHorizontalBox(Z_Construct_UClass_UHorizontalBox, &UHorizontalBox::StaticClass, TEXT("UHorizontalBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHorizontalBox);
	UFunction* Z_Construct_UFunction_UOverlay_AddChildToOverlay()
	{
		struct Overlay_eventAddChildToOverlay_Parms
		{
			UWidget* Content;
			UOverlaySlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UOverlay();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToOverlay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Overlay_eventAddChildToOverlay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Overlay_eventAddChildToOverlay_Parms), 0x0010000000000580, Z_Construct_UClass_UOverlaySlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, Overlay_eventAddChildToOverlay_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Overlay.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOverlay_NoRegister()
	{
		return UOverlay::StaticClass();
	}
	UClass* Z_Construct_UClass_UOverlay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UOverlay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOverlay_AddChildToOverlay());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOverlay_AddChildToOverlay(), "AddChildToOverlay"); // 1425594901
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Overlay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Overlay.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows widgets to be stacked on top of each other, uses simple flow layout for content on each layer."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOverlay(Z_Construct_UClass_UOverlay, &UOverlay::StaticClass, TEXT("UOverlay"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOverlay);
	UFunction* Z_Construct_UFunction_UScrollBox_GetScrollOffset()
	{
		struct ScrollBox_eventGetScrollOffset_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetScrollOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ScrollBox_eventGetScrollOffset_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, ScrollBox_eventGetScrollOffset_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the scroll offset of the scrollbox in Slate Units."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollToEnd()
	{
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollToEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the bottom instantly during the next layout pass."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollToStart()
	{
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollToStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the top instantly"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView()
	{
		struct ScrollBox_eventScrollWidgetIntoView_Parms
		{
			UWidget* WidgetToFind;
			bool AnimateScroll;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollWidgetIntoView"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBox_eventScrollWidgetIntoView_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms, bool);
			UProperty* NewProp_AnimateScroll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimateScroll"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetToFind = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetToFind"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidgetToFind, ScrollBox_eventScrollWidgetIntoView_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AnimateScroll"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the widget during the next layout pass."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_SetScrollOffset()
	{
		struct ScrollBox_eventSetScrollOffset_Parms
		{
			float NewScrollOffset;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScrollOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBox_eventSetScrollOffset_Parms));
			UProperty* NewProp_NewScrollOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewScrollOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewScrollOffset, ScrollBox_eventSetScrollOffset_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Updates the scroll offset of the scrollbox.\n@param NewScrollOffset is in Slate Units."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBox_NoRegister()
	{
		return UScrollBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UScrollBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_GetScrollOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollToEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollToStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_SetScrollOffset());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AlwaysShowScrollbar, UScrollBox, bool);
				UProperty* NewProp_AlwaysShowScrollbar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlwaysShowScrollbar"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AlwaysShowScrollbar, UScrollBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(AlwaysShowScrollbar, UScrollBox), sizeof(bool), true);
				UProperty* NewProp_ScrollbarThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollbarThickness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScrollbarThickness, UScrollBox), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_ConsumeMouseWheel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsumeMouseWheel"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ConsumeMouseWheel, UScrollBox), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EConsumeMouseWheel());
				UProperty* NewProp_ConsumeMouseWheel_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ConsumeMouseWheel, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ScrollBarVisibility = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollBarVisibility"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ScrollBarVisibility, UScrollBox), 0x0010000000000015, Z_Construct_UEnum_UMG_ESlateVisibility());
				UProperty* NewProp_ScrollBarVisibility_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ScrollBarVisibility, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Orientation, UScrollBox), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EOrientation());
				UProperty* NewProp_BarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BarStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BarStyle_DEPRECATED, UScrollBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UScrollBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetBarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetBarStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetBarStyle, UScrollBox), 0x0010000000000005, Z_Construct_UScriptStruct_FScrollBarStyle());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UScrollBox), 0x0010000000000005, Z_Construct_UScriptStruct_FScrollBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBox_GetScrollOffset(), "GetScrollOffset"); // 1078686744
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBox_ScrollToEnd(), "ScrollToEnd"); // 4123085616
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBox_ScrollToStart(), "ScrollToStart"); // 1611164398
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView(), "ScrollWidgetIntoView"); // 1910219009
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBox_SetScrollOffset(), "SetScrollOffset"); // 3778771293
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An arbitrary scrollable collection of widgets.  Great for presenting 10-100 widgets in a list.  Doesn't support virtualization."));
				MetaData->SetValue(NewProp_AlwaysShowScrollbar, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_AlwaysShowScrollbar, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ScrollbarThickness, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ScrollbarThickness, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("ToolTip"), TEXT("Enable to always consume mouse wheel event, even when scrolling is not possible"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("ToolTip"), TEXT("Visibility"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("The orientation of the scrolling and stacking in the box."));
				MetaData->SetValue(NewProp_BarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("DisplayName"), TEXT("Bar Style"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("ToolTip"), TEXT("The bar style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBox(Z_Construct_UClass_UScrollBox, &UScrollBox::StaticClass, TEXT("UScrollBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBox);
	UFunction* Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid()
	{
		struct UniformGridPanel_eventAddChildToUniformGrid_Parms
		{
			UWidget* Content;
			UUniformGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToUniformGrid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventAddChildToUniformGrid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, UniformGridPanel_eventAddChildToUniformGrid_Parms), 0x0010000000000580, Z_Construct_UClass_UUniformGridSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, UniformGridPanel_eventAddChildToUniformGrid_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight()
	{
		struct UniformGridPanel_eventSetMinDesiredSlotHeight_Parms
		{
			float InMinDesiredSlotHeight;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredSlotHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetMinDesiredSlotHeight_Parms));
			UProperty* NewProp_InMinDesiredSlotHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredSlotHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredSlotHeight, UniformGridPanel_eventSetMinDesiredSlotHeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth()
	{
		struct UniformGridPanel_eventSetMinDesiredSlotWidth_Parms
		{
			float InMinDesiredSlotWidth;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredSlotWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetMinDesiredSlotWidth_Parms));
			UProperty* NewProp_InMinDesiredSlotWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredSlotWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredSlotWidth, UniformGridPanel_eventSetMinDesiredSlotWidth_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding()
	{
		struct UniformGridPanel_eventSetSlotPadding_Parms
		{
			FMargin InSlotPadding;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSlotPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetSlotPadding_Parms));
			UProperty* NewProp_InSlotPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSlotPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSlotPadding, UniformGridPanel_eventSetSlotPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UUniformGridPanel_NoRegister()
	{
		return UUniformGridPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UUniformGridPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UUniformGridPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MinDesiredSlotHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredSlotHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredSlotHeight, UUniformGridPanel), 0x0010000000000015);
				UProperty* NewProp_MinDesiredSlotWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredSlotWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredSlotWidth, UUniformGridPanel), 0x0010000000000015);
				UProperty* NewProp_SlotPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlotPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SlotPadding, UUniformGridPanel), 0x0010000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid(), "AddChildToUniformGrid"); // 688790751
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight(), "SetMinDesiredSlotHeight"); // 2858888298
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth(), "SetMinDesiredSlotWidth"); // 4151466818
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding(), "SetSlotPadding"); // 4253099750
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/UniformGridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A panel that evenly divides up available space between all of its children."));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("ToolTip"), TEXT("The minimum desired height of the slots"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("ToolTip"), TEXT("The minimum desired width of the slots"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("ToolTip"), TEXT("Padding given to each slot"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUniformGridPanel(Z_Construct_UClass_UUniformGridPanel, &UUniformGridPanel::StaticClass, TEXT("UUniformGridPanel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUniformGridPanel);
	UFunction* Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox()
	{
		struct VerticalBox_eventAddChildToVerticalBox_Parms
		{
			UWidget* Content;
			UVerticalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToVerticalBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBox_eventAddChildToVerticalBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VerticalBox_eventAddChildToVerticalBox_Parms), 0x0010000000000580, Z_Construct_UClass_UVerticalBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, VerticalBox_eventAddChildToVerticalBox_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVerticalBox_NoRegister()
	{
		return UVerticalBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UVerticalBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UVerticalBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox(), "AddChildToVerticalBox"); // 148903586
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/VerticalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A vertical box widget is a layout panel allowing child widgets to be automatically laid out\nvertically.\n\n* Many Children\n* Flows Vertical"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVerticalBox(Z_Construct_UClass_UVerticalBox, &UVerticalBox::StaticClass, TEXT("UVerticalBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVerticalBox);
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex()
	{
		struct WidgetSwitcher_eventGetActiveWidgetIndex_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActiveWidgetIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetActiveWidgetIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetActiveWidgetIndex_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot index of the currently active widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets()
	{
		struct WidgetSwitcher_eventGetNumWidgets_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetNumWidgets_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetNumWidgets_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the number of widgets that this switcher manages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex()
	{
		struct WidgetSwitcher_eventGetWidgetAtIndex_Parms
		{
			int32 Index;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWidgetAtIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetWidgetAtIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetWidgetAtIndex_Parms), 0x0010000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, WidgetSwitcher_eventGetWidgetAtIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get a widget at the provided index"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget()
	{
		struct WidgetSwitcher_eventSetActiveWidget_Parms
		{
			UWidget* Widget;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetActiveWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetSwitcher_eventSetActiveWidget_Parms));
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetSwitcher_eventSetActiveWidget_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Activates the widget and makes it the active index."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex()
	{
		struct WidgetSwitcher_eventSetActiveWidgetIndex_Parms
		{
			int32 Index;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetActiveWidgetIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetSwitcher_eventSetActiveWidgetIndex_Parms));
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, WidgetSwitcher_eventSetActiveWidgetIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Activates the widget at the specified index."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetSwitcher_NoRegister()
	{
		return UWidgetSwitcher::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetSwitcher()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetSwitcher::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActiveWidgetIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveWidgetIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ActiveWidgetIndex, UWidgetSwitcher), 0x0010000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex(), "GetActiveWidgetIndex"); // 380769394
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets(), "GetNumWidgets"); // 1570260308
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex(), "GetWidgetAtIndex"); // 4249209657
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget(), "SetActiveWidget"); // 2887003155
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex(), "SetActiveWidgetIndex"); // 1901175188
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetSwitcher.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A widget switcher is like a tab control, but without tabs. At most one widget is visible at time."));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("Category"), TEXT("Switcher"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ToolTip"), TEXT("The slot index to display"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetSwitcher(Z_Construct_UClass_UWidgetSwitcher, &UWidgetSwitcher::StaticClass, TEXT("UWidgetSwitcher"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetSwitcher);
	UFunction* Z_Construct_UFunction_UWrapBox_AddChildWrapBox()
	{
		struct WrapBox_eventAddChildWrapBox_Parms
		{
			UWidget* Content;
			UWrapBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildWrapBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBox_eventAddChildWrapBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WrapBox_eventAddChildWrapBox_Parms), 0x0010000000000580, Z_Construct_UClass_UWrapBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Content, WrapBox_eventAddChildWrapBox_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding()
	{
		struct WrapBox_eventSetInnerSlotPadding_Parms
		{
			FVector2D InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInnerSlotPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(WrapBox_eventSetInnerSlotPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPadding, WrapBox_eventSetInnerSlotPadding_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Content Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the inner slot padding goes between slots sharing borders"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWrapBox_NoRegister()
	{
		return UWrapBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UWrapBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWrapBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBox_AddChildWrapBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExplicitWrapWidth, UWrapBox, bool);
				UProperty* NewProp_bExplicitWrapWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExplicitWrapWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExplicitWrapWidth, UWrapBox), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bExplicitWrapWidth, UWrapBox), sizeof(bool), true);
				UProperty* NewProp_WrapWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WrapWidth, UWrapBox), 0x0010000000000015);
				UProperty* NewProp_InnerSlotPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InnerSlotPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InnerSlotPadding, UWrapBox), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBox_AddChildWrapBox(), "AddChildWrapBox"); // 1937622382
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding(), "SetInnerSlotPadding"); // 336920019
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WrapBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Arranges widgets left-to-right.  When the widgets exceed the Width it will place widgets on the next line.\n\n* Many Children\n* Flows\n* Wraps"));
				MetaData->SetValue(NewProp_bExplicitWrapWidth, TEXT("Category"), TEXT("Content Layout"));
				MetaData->SetValue(NewProp_bExplicitWrapWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(NewProp_bExplicitWrapWidth, TEXT("ToolTip"), TEXT("Use explicit wrap width whenever possible. It greatly simplifies layout calculations and reduces likelihood of \"wiggling UI\""));
				MetaData->SetValue(NewProp_WrapWidth, TEXT("Category"), TEXT("Content Layout"));
				MetaData->SetValue(NewProp_WrapWidth, TEXT("EditCondition"), TEXT("bExplicitWrapWidth"));
				MetaData->SetValue(NewProp_WrapWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(NewProp_WrapWidth, TEXT("ToolTip"), TEXT("When this width is exceeded, elements will start appearing on the next line."));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("Category"), TEXT("Content Layout"));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("ToolTip"), TEXT("The inner slot padding goes between slots sharing borders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWrapBox(Z_Construct_UClass_UWrapBox, &UWrapBox::StaticClass, TEXT("UWrapBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWrapBox);
	UFunction* Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity()
	{
		struct ProgressBar_eventSetFillColorAndOpacity_Parms
		{
			FLinearColor InColor;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(ProgressBar_eventSetFillColorAndOpacity_Parms));
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InColor, ProgressBar_eventSetFillColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the fill color of the progress bar."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UProgressBar_SetIsMarquee()
	{
		struct ProgressBar_eventSetIsMarquee_Parms
		{
			bool InbIsMarquee;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsMarquee"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ProgressBar_eventSetIsMarquee_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms, bool);
			UProperty* NewProp_InbIsMarquee = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsMarquee"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the progress bar to show as a marquee."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UProgressBar_SetPercent()
	{
		struct ProgressBar_eventSetPercent_Parms
		{
			float InPercent;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPercent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ProgressBar_eventSetPercent_Parms));
			UProperty* NewProp_InPercent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPercent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InPercent, ProgressBar_eventSetPercent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the current value of the ProgressBar."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UProgressBar_NoRegister()
	{
		return UProgressBar::StaticClass();
	}
	UClass* Z_Construct_UClass_UProgressBar()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UProgressBar::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetIsMarquee());
				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetPercent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FillColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(FillColorAndOpacityDelegate, UProgressBar), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_FillColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FillColorAndOpacity, UProgressBar), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_PercentDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PercentDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(PercentDelegate, UProgressBar), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMarquee, UProgressBar, bool);
				UProperty* NewProp_bIsMarquee = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMarquee"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMarquee, UProgressBar), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsMarquee, UProgressBar), sizeof(bool), true);
				UProperty* NewProp_BarFillType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BarFillType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BarFillType, UProgressBar), 0x0010000000000015, Z_Construct_UEnum_Slate_EProgressBarFillType());
				UProperty* NewProp_Percent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Percent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Percent, UProgressBar), 0x0010000000000015);
				UProperty* NewProp_MarqueeImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MarqueeImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MarqueeImage_DEPRECATED, UProgressBar), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_FillImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FillImage_DEPRECATED, UProgressBar), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImage_DEPRECATED, UProgressBar), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UProgressBar), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UProgressBar), 0x0010000000000005, Z_Construct_UScriptStruct_FProgressBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity(), "SetFillColorAndOpacity"); // 2246118439
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UProgressBar_SetIsMarquee(), "SetIsMarquee"); // 3129368138
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UProgressBar_SetPercent(), "SetPercent"); // 418116761
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ProgressBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The progress bar widget is a simple bar that fills up that can be restyled to fit any number of uses.\n\n* No Children"));
				MetaData->SetValue(NewProp_FillColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("ToolTip"), TEXT("Fill Color and Opacity"));
				MetaData->SetValue(NewProp_PercentDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_PercentDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_bIsMarquee, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_bIsMarquee, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("ToolTip"), TEXT("Defines if this progress bar fills Left to right or right to left"));
				MetaData->SetValue(NewProp_Percent, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_Percent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_Percent, TEXT("ToolTip"), TEXT("Used to determine the fill position of the progress bar ranging 0..1"));
				MetaData->SetValue(NewProp_Percent, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Percent, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MarqueeImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_MarqueeImage, TEXT("ToolTip"), TEXT("The brush to use as the marquee image"));
				MetaData->SetValue(NewProp_FillImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillImage, TEXT("ToolTip"), TEXT("The brush to use as the fill image"));
				MetaData->SetValue(NewProp_BackgroundImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BackgroundImage, TEXT("ToolTip"), TEXT("The brush to use as the background of the progress bar"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style used for the progress bar"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The progress bar style"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UProgressBar(Z_Construct_UClass_UProgressBar, &UProgressBar::StaticClass, TEXT("UProgressBar"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UProgressBar);
	UFunction* Z_Construct_UFunction_UScrollBar_SetState()
	{
		struct ScrollBar_eventSetState_Parms
		{
			float InOffsetFraction;
			float InThumbSizeFraction;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetState"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBar_eventSetState_Parms));
			UProperty* NewProp_InThumbSizeFraction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InThumbSizeFraction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InThumbSizeFraction, ScrollBar_eventSetState_Parms), 0x0010000000000080);
			UProperty* NewProp_InOffsetFraction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOffsetFraction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InOffsetFraction, ScrollBar_eventSetState_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scrolling"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the offset and size of the track's thumb.\nNote that the maximum offset is 1.0-ThumbSizeFraction.\nIf the user can view 1/3 of the items in a single page, the maximum offset will be ~0.667f\n\n@param InOffsetFraction     Offset of the thumbnail from the top as a fraction of the total available scroll space.\n@param InThumbSizeFraction  Size of thumbnail as a fraction of the total available scroll space."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBar_NoRegister()
	{
		return UScrollBar::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBar()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UScrollBar::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBar_SetState());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Thickness, UScrollBar), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Orientation, UScrollBar), 0x0010000000000001, Z_Construct_UEnum_SlateCore_EOrientation());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysShowScrollbar, UScrollBar, bool);
				UProperty* NewProp_bAlwaysShowScrollbar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysShowScrollbar"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysShowScrollbar, UScrollBar), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysShowScrollbar, UScrollBar), sizeof(bool), true);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UScrollBar), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UScrollBar), 0x0010000000000005, Z_Construct_UScriptStruct_FScrollBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UScrollBar_SetState(), "SetState"); // 178120094
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ToolTip"), TEXT("The thickness of the scrollbar thumb"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_bAlwaysShowScrollbar, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_bAlwaysShowScrollbar, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("Style of the scrollbar"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBar(Z_Construct_UClass_UScrollBar, &UScrollBar::StaticClass, TEXT("UScrollBar"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBar);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature()
	{
		struct _Script_UMG_eventOnFloatValueChangedEvent_Parms
		{
			float Value;
		};
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnFloatValueChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnFloatValueChangedEvent_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, _Script_UMG_eventOnFloatValueChangedEvent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnControllerCaptureEndEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnControllerCaptureEndEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnControllerCaptureBeginEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnControllerCaptureBeginEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseCaptureEndEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseCaptureBeginEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_GetValue()
	{
		struct Slider_eventGetValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Slider_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Slider_eventGetValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current value of the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetIndentHandle()
	{
		struct Slider_eventSetIndentHandle_Parms
		{
			bool InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIndentHandle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetIndentHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InValue, Slider_eventSetIndentHandle_Parms, bool);
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InValue, Slider_eventSetIndentHandle_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InValue, Slider_eventSetIndentHandle_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets if the slidable area should be indented to fit the handle"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetLocked()
	{
		struct Slider_eventSetLocked_Parms
		{
			bool InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLocked"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetLocked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InValue, Slider_eventSetLocked_Parms, bool);
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InValue, Slider_eventSetLocked_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InValue, Slider_eventSetLocked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the handle to be interactive or fixed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetSliderBarColor()
	{
		struct Slider_eventSetSliderBarColor_Parms
		{
			FLinearColor InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSliderBarColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Slider_eventSetSliderBarColor_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InValue, Slider_eventSetSliderBarColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color of the slider bar"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetSliderHandleColor()
	{
		struct Slider_eventSetSliderHandleColor_Parms
		{
			FLinearColor InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSliderHandleColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Slider_eventSetSliderHandleColor_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InValue, Slider_eventSetSliderHandleColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color of the handle bar"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetStepSize()
	{
		struct Slider_eventSetStepSize_Parms
		{
			float InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetStepSize_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InValue, Slider_eventSetStepSize_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the amount to adjust the value by, when using a controller or keyboard"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetValue()
	{
		struct Slider_eventSetValue_Parms
		{
			float InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetValue_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InValue, Slider_eventSetValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the current value of the slider."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USlider_NoRegister()
	{
		return USlider::StaticClass();
	}
	UClass* Z_Construct_UClass_USlider()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USlider::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USlider_GetValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetIndentHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetLocked());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetSliderBarColor());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetSliderHandleColor());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetStepSize());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnValueChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueChanged, USlider), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature());
				UProperty* NewProp_OnControllerCaptureEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnControllerCaptureEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnControllerCaptureEnd, USlider), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnControllerCaptureEndEvent__DelegateSignature());
				UProperty* NewProp_OnControllerCaptureBegin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnControllerCaptureBegin"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnControllerCaptureBegin, USlider), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnControllerCaptureBeginEvent__DelegateSignature());
				UProperty* NewProp_OnMouseCaptureEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseCaptureEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMouseCaptureEnd, USlider), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature());
				UProperty* NewProp_OnMouseCaptureBegin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseCaptureBegin"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMouseCaptureBegin, USlider), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFocusable, USlider, bool);
				UProperty* NewProp_IsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFocusable, USlider), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFocusable, USlider), sizeof(bool), true);
				UProperty* NewProp_StepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StepSize, USlider), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Locked, USlider, bool);
				UProperty* NewProp_Locked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Locked"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Locked, USlider), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(Locked, USlider), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IndentHandle, USlider, bool);
				UProperty* NewProp_IndentHandle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IndentHandle"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IndentHandle, USlider), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(IndentHandle, USlider), sizeof(bool), true);
				UProperty* NewProp_SliderHandleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderHandleColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SliderHandleColor, USlider), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SliderBarColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderBarColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SliderBarColor, USlider), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Orientation, USlider), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EOrientation());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, USlider), 0x0010000000000005, Z_Construct_UScriptStruct_FSliderStyle());
				UProperty* NewProp_ValueDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValueDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ValueDelegate, USlider), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, USlider), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_GetValue(), "GetValue"); // 4202270503
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetIndentHandle(), "SetIndentHandle"); // 3040942562
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetLocked(), "SetLocked"); // 3492090896
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetSliderBarColor(), "SetSliderBarColor"); // 272002770
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetSliderHandleColor(), "SetSliderHandleColor"); // 3121018826
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetStepSize(), "SetStepSize"); // 4083120427
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USlider_SetValue(), "SetValue"); // 3887157949
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Slider.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A simple widget that shows a sliding bar with a handle that allows you to control the value between 0..1.\n\n* No Children"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ToolTip"), TEXT("Called when the value is changed by slider or typing."));
				MetaData->SetValue(NewProp_OnControllerCaptureEnd, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnControllerCaptureEnd, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnControllerCaptureEnd, TEXT("ToolTip"), TEXT("Invoked when the controller capture ends."));
				MetaData->SetValue(NewProp_OnControllerCaptureBegin, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnControllerCaptureBegin, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnControllerCaptureBegin, TEXT("ToolTip"), TEXT("Invoked when the controller capture begins."));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("ToolTip"), TEXT("Invoked when the mouse is released and a capture ends."));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("ToolTip"), TEXT("Invoked when the mouse is pressed and a capture begins."));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ToolTip"), TEXT("Should the slider be focusable?"));
				MetaData->SetValue(NewProp_StepSize, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_StepSize, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StepSize, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StepSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_StepSize, TEXT("ToolTip"), TEXT("The amount to adjust the value by, when using a controller or keyboard"));
				MetaData->SetValue(NewProp_StepSize, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StepSize, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Locked, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Locked, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Locked, TEXT("ToolTip"), TEXT("Whether the handle is interactive or fixed."));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("ToolTip"), TEXT("Whether the slidable area should be indented to fit the handle."));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("ToolTip"), TEXT("The color to draw the slider handle in."));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("ToolTip"), TEXT("The color to draw the slider bar in."));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("The slider's orientation."));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The progress bar style"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the value of the widget"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Value, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Value, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The volume value to display."));
				MetaData->SetValue(NewProp_Value, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Value, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlider(Z_Construct_UClass_USlider, &USlider::StaticClass, TEXT("USlider"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlider);
	UFunction* Z_Construct_UFunction_USpacer_SetSize()
	{
		struct Spacer_eventSetSize_Parms
		{
			FVector2D InSize;
		};
		UObject* Outer=Z_Construct_UClass_USpacer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Spacer_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InSize, Spacer_eventSetSize_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the size of the spacer"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpacer_NoRegister()
	{
		return USpacer::StaticClass();
	}
	UClass* Z_Construct_UClass_USpacer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USpacer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpacer_SetSize());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Size, USpacer), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpacer_SetSize(), "SetSize"); // 67968009
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Spacer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A spacer widget; it does not have a visual representation, and just provides padding between other widgets.\n\n* No Children"));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("The size of the spacer"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpacer(Z_Construct_UClass_USpacer, &USpacer::StaticClass, TEXT("USpacer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpacer);
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxBeginSliderMovement__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature()
	{
		struct SpinBox_eventOnSpinBoxValueCommittedEvent_Parms
		{
			float InValue;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxValueCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(SpinBox_eventOnSpinBoxValueCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, SpinBox_eventOnSpinBoxValueCommittedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InValue, SpinBox_eventOnSpinBoxValueCommittedEvent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature()
	{
		struct SpinBox_eventOnSpinBoxValueChangedEvent_Parms
		{
			float InValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxValueChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(SpinBox_eventOnSpinBoxValueChangedEvent_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InValue, SpinBox_eventOnSpinBoxValueChangedEvent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMaxSliderValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMaxValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMinSliderValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMinValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMaxSliderValue()
	{
		struct SpinBox_eventGetMaxSliderValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMaxSliderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMaxSliderValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMaxValue()
	{
		struct SpinBox_eventGetMaxValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMaxValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMaxValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMinSliderValue()
	{
		struct SpinBox_eventGetMinSliderValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMinSliderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMinSliderValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMinValue()
	{
		struct SpinBox_eventGetMinValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMinValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMinValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetValue()
	{
		struct SpinBox_eventGetValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetValue_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current value of the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetForegroundColor()
	{
		struct SpinBox_eventSetForegroundColor_Parms
		{
			FSlateColor InForegroundColor;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetForegroundColor_Parms));
			UProperty* NewProp_InForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InForegroundColor, SpinBox_eventSetForegroundColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMaxSliderValue()
	{
		struct SpinBox_eventSetMaxSliderValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMaxSliderValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMaxSliderValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMaxValue()
	{
		struct SpinBox_eventSetMaxValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMaxValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMaxValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMinSliderValue()
	{
		struct SpinBox_eventSetMinSliderValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMinSliderValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMinSliderValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMinValue()
	{
		struct SpinBox_eventSetMinValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMinValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMinValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetValue()
	{
		struct SpinBox_eventSetValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpinBox_NoRegister()
	{
		return USpinBox::StaticClass();
	}
	UClass* Z_Construct_UClass_USpinBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = USpinBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetValue());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetForegroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxSliderValue, USpinBox), 0x0020080000000001);
				UProperty* NewProp_MinSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinSliderValue, USpinBox), 0x0020080000000001);
				UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, USpinBox), 0x0020080000000001);
				UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinValue, USpinBox), 0x0020080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxSliderValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MaxSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxSliderValue, USpinBox), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxSliderValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinSliderValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MinSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinSliderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinSliderValue, USpinBox), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinSliderValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MaxValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxValue, USpinBox), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MinValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinValue, USpinBox), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinValue, USpinBox), sizeof(uint8), false);
				UProperty* NewProp_OnEndSliderMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnEndSliderMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnEndSliderMovement, USpinBox), 0x0010000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				UProperty* NewProp_OnBeginSliderMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnBeginSliderMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnBeginSliderMovement, USpinBox), 0x0010000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature());
				UProperty* NewProp_OnValueCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueCommitted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueCommitted, USpinBox), 0x0010000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnValueChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueChanged, USpinBox), 0x0010000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, USpinBox), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, USpinBox, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, USpinBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, USpinBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, USpinBox, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, USpinBox), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, USpinBox), sizeof(bool), true);
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, USpinBox), 0x0010040000000015);
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font, USpinBox), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_SliderExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SliderExponent, USpinBox), 0x0010000000000015);
				UProperty* NewProp_Delta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Delta"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Delta, USpinBox), 0x0010000000000015);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, USpinBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, USpinBox), 0x0010000000000005, Z_Construct_UScriptStruct_FSpinBoxStyle());
				UProperty* NewProp_ValueDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValueDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ValueDelegate, USpinBox), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, USpinBox), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_ClearMaxSliderValue(), "ClearMaxSliderValue"); // 2416174224
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_ClearMaxValue(), "ClearMaxValue"); // 2505249900
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_ClearMinSliderValue(), "ClearMinSliderValue"); // 1056556269
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_ClearMinValue(), "ClearMinValue"); // 1051484188
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_GetMaxSliderValue(), "GetMaxSliderValue"); // 516489275
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_GetMaxValue(), "GetMaxValue"); // 220786294
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_GetMinSliderValue(), "GetMinSliderValue"); // 2562626297
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_GetMinValue(), "GetMinValue"); // 2847896630
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_GetValue(), "GetValue"); // 967929506
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature(), "OnSpinBoxBeginSliderMovement__DelegateSignature"); // 2452821454
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature(), "OnSpinBoxValueChangedEvent__DelegateSignature"); // 1628397182
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature(), "OnSpinBoxValueCommittedEvent__DelegateSignature"); // 1946739556
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetForegroundColor(), "SetForegroundColor"); // 265375256
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetMaxSliderValue(), "SetMaxSliderValue"); // 4111533544
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetMaxValue(), "SetMaxValue"); // 2797187274
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetMinSliderValue(), "SetMinSliderValue"); // 2092924353
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetMinValue(), "SetMinValue"); // 513865556
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpinBox_SetValue(), "SetValue"); // 1033086584
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SpinBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A numerical entry box that allows for direct entry of the number or allows the user to click and slide the number."));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("DisplayName"), TEXT("Maximum Slider Value"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("editcondition"), TEXT("bOverride_MaxSliderValue"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("ToolTip"), TEXT("The maximum allowable value that can be specified using the slider"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("DisplayName"), TEXT("Minimum Slider Value"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("editcondition"), TEXT("bOverride_MinSliderValue"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("ToolTip"), TEXT("The minimum allowable value that can be specified using the slider"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("DisplayName"), TEXT("Maximum Value"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("editcondition"), TEXT("bOverride_MaxValue"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("ToolTip"), TEXT("The maximum allowable value that can be manually entered into the spin box"));
				MetaData->SetValue(NewProp_MinValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MinValue, TEXT("DisplayName"), TEXT("Minimum Value"));
				MetaData->SetValue(NewProp_MinValue, TEXT("editcondition"), TEXT("bOverride_MinValue"));
				MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinValue, TEXT("ToolTip"), TEXT("The minimum allowable value that can be manually entered into the spin box"));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("ToolTip"), TEXT("Whether the optional MaxSliderValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("ToolTip"), TEXT("Whether the optional MinSliderValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("ToolTip"), TEXT("Whether the optional MaxValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("ToolTip"), TEXT("Whether the optional MinValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("ToolTip"), TEXT("Called right after the slider handle is released by the user"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("ToolTip"), TEXT("Called right before the slider begins to move"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("ToolTip"), TEXT("Called when the value is committed. Occurs when the user presses Enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ToolTip"), TEXT("Called when the value is changed interactively by the user"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Input"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select the text in the spin box when the value is committed"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Input"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to remove the keyboard focus from the spin box when the value is committed"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("DisplayName"), TEXT("Minimum Desired Width"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("The minimum width of the spin box"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides style)"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("Category"), TEXT("Slider"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("ToolTip"), TEXT("The exponent by which to increase the delta as the mouse moves. 1 is constant (never increases the delta)."));
				MetaData->SetValue(NewProp_Delta, TEXT("Category"), TEXT("Slider"));
				MetaData->SetValue(NewProp_Delta, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Delta, TEXT("ToolTip"), TEXT("The amount by which to change the spin box value as the slider moves."));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The Style"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the value of the widget"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Value stored in this spin box"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpinBox(Z_Construct_UClass_USpinBox, &USpinBox::StaticClass, TEXT("USpinBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpinBox);
	UFunction* Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature()
	{
		struct TableViewBase_eventOnGenerateRowUObject_Parms
		{
			UObject* Item;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTableViewBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnGenerateRowUObject__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(TableViewBase_eventOnGenerateRowUObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, TableViewBase_eventOnGenerateRowUObject_Parms), 0x0010000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Item, TableViewBase_eventOnGenerateRowUObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TableViewBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate for constructing a UWidget based on a UObject"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTableViewBase_NoRegister()
	{
		return UTableViewBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UTableViewBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UTableViewBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature(), "OnGenerateRowUObject__DelegateSignature"); // 2990606491
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TableViewBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TableViewBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all wrapped table views"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTableViewBase(Z_Construct_UClass_UTableViewBase, &UTableViewBase::StaticClass, TEXT("UTableViewBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTableViewBase);
	UClass* Z_Construct_UClass_UListView_NoRegister()
	{
		return UListView::StaticClass();
	}
	UClass* Z_Construct_UClass_UListView()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTableViewBase();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UListView::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnGenerateRowEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateRowEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateRowEvent, UListView), 0x0010000000080001, Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());
				UProperty* NewProp_SelectionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMode, UListView), 0x0010000000000001, Z_Construct_UEnum_Slate_ESelectionMode());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Items, UListView), 0x0010000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ItemHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ItemHeight, UListView), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ListView.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows thousands of items to be displayed in a list.  Generates widgets dynamically for each item."));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("ToolTip"), TEXT("Called when a widget needs to be generated"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ToolTip"), TEXT("The selection method for the list"));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_Items, TEXT("ToolTip"), TEXT("The list of items to generate widgets for"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ToolTip"), TEXT("The height of each widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UListView(Z_Construct_UClass_UListView, &UListView::StaticClass, TEXT("UListView"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UListView);
	UFunction* Z_Construct_UFunction_UTileView_RequestListRefresh()
	{
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestListRefresh"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Refreshes the list"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTileView_SetItemHeight()
	{
		struct TileView_eventSetItemHeight_Parms
		{
			float Height;
		};
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetItemHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TileView_eventSetItemHeight_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Height, TileView_eventSetItemHeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set item height"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTileView_SetItemWidth()
	{
		struct TileView_eventSetItemWidth_Parms
		{
			float Width;
		};
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetItemWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TileView_eventSetItemWidth_Parms));
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Width, TileView_eventSetItemWidth_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set item width"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTileView_NoRegister()
	{
		return UTileView::StaticClass();
	}
	UClass* Z_Construct_UClass_UTileView()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTableViewBase();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UTileView::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_RequestListRefresh());
				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_SetItemHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_SetItemWidth());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnGenerateTileEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateTileEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateTileEvent, UTileView), 0x0010000000080001, Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());
				UProperty* NewProp_SelectionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMode, UTileView), 0x0010000000000001, Z_Construct_UEnum_Slate_ESelectionMode());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Items, UTileView), 0x0010000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ItemHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ItemHeight, UTileView), 0x0010000000000001);
				UProperty* NewProp_ItemWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ItemWidth, UTileView), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTileView_RequestListRefresh(), "RequestListRefresh"); // 2216366213
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTileView_SetItemHeight(), "SetItemHeight"); // 3745495833
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTileView_SetItemWidth(), "SetItemWidth"); // 1482580223
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TileView.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A flow panel that presents the contents as a set of tiles all uniformly sized."));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_ItemWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ItemWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTileView(Z_Construct_UClass_UTileView, &UTileView::StaticClass, TEXT("UTileView"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTileView);
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature()
	{
		struct MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature()
	{
		struct MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableText_GetText()
	{
		struct MultiLineEditableText_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MultiLineEditableText_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, MultiLineEditableText_eventGetText_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Multi-Line Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableText_SetText()
	{
		struct MultiLineEditableText_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableText_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InText, MultiLineEditableText_eventSetText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Multi-Line Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMultiLineEditableText_NoRegister()
	{
		return UMultiLineEditableText::StaticClass();
	}
	UClass* Z_Construct_UClass_UMultiLineEditableText()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextLayoutWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UMultiLineEditableText::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableText_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableText_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UMultiLineEditableText), 0x0010000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UMultiLineEditableText), 0x0010000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowContextMenu, UMultiLineEditableText, bool);
				UProperty* NewProp_AllowContextMenu = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowContextMenu"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowContextMenu, UMultiLineEditableText), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(AllowContextMenu, UMultiLineEditableText), sizeof(bool), true);
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UMultiLineEditableText), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UMultiLineEditableText), 0x0010000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UMultiLineEditableText), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(HintText, UMultiLineEditableText), 0x0010000000000001);
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, UMultiLineEditableText), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMultiLineEditableText_GetText(), "GetText"); // 3247455609
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature(), "OnMultiLineEditableTextChangedEvent__DelegateSignature"); // 2229242035
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature(), "OnMultiLineEditableTextCommittedEvent__DelegateSignature"); // 1746952471
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMultiLineEditableText_SetText(), "SetText"); // 4111614400
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Editable Text (Multi-Line)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MultiLineEditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Editable text box widget"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Multi-Line Editable Text)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Multi-Line Editable Text)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ToolTip"), TEXT("Whether the context menu can be opened"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMultiLineEditableText(Z_Construct_UClass_UMultiLineEditableText, &UMultiLineEditableText::StaticClass, TEXT("UMultiLineEditableText"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMultiLineEditableText);
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature()
	{
		struct MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms), 0x0010000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature()
	{
		struct MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextBoxChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_GetText()
	{
		struct MultiLineEditableTextBox_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MultiLineEditableTextBox_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, MultiLineEditableTextBox_eventGetText_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetError()
	{
		struct MultiLineEditableTextBox_eventSetError_Parms
		{
			FText InError;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetError"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableTextBox_eventSetError_Parms));
			UProperty* NewProp_InError = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InError"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InError, MultiLineEditableTextBox_eventSetError_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetError (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetText()
	{
		struct MultiLineEditableTextBox_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableTextBox_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InText, MultiLineEditableTextBox_eventSetText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMultiLineEditableTextBox_NoRegister()
	{
		return UMultiLineEditableTextBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UMultiLineEditableTextBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextLayoutWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UMultiLineEditableTextBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_SetError());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UMultiLineEditableTextBox), 0x0010000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UMultiLineEditableTextBox), 0x0010000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature());
				UProperty* NewProp_ReadOnlyForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReadOnlyForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReadOnlyForegroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UMultiLineEditableTextBox), 0x0010000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UMultiLineEditableTextBox), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowContextMenu, UMultiLineEditableTextBox, bool);
				UProperty* NewProp_AllowContextMenu = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowContextMenu"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowContextMenu, UMultiLineEditableTextBox), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(AllowContextMenu, UMultiLineEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_TextStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TextStyle, UMultiLineEditableTextBox), 0x0010000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UMultiLineEditableTextBox), 0x0010000000000005, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UMultiLineEditableTextBox), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(HintText, UMultiLineEditableTextBox), 0x0010000000000001);
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, UMultiLineEditableTextBox), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMultiLineEditableTextBox_GetText(), "GetText"); // 1517260196
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(), "OnMultiLineEditableTextBoxChangedEvent__DelegateSignature"); // 2324567031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(), "OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature"); // 464420104
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMultiLineEditableTextBox_SetError(), "SetError"); // 4096912810
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMultiLineEditableTextBox_SetText(), "SetText"); // 2020404989
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text Box (Multi-Line)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows a user to enter multiple lines of text"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Multi-Line Text Box)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Multi-Line Text Box)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity when read-only (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color of the background/border around the editable text (overrides Style)"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_AllowContextMenu, TEXT("ToolTip"), TEXT("Whether the context menu can be opened"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("DisplayName"), TEXT("Text Style"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("ToolTip"), TEXT("The text style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMultiLineEditableTextBox(Z_Construct_UClass_UMultiLineEditableTextBox, &UMultiLineEditableTextBox::StaticClass, TEXT("UMultiLineEditableTextBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMultiLineEditableTextBox);
	UClass* Z_Construct_UClass_URichTextBlock_NoRegister()
	{
		return URichTextBlock::StaticClass();
	}
	UClass* Z_Construct_UClass_URichTextBlock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextLayoutWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = URichTextBlock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Decorators = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Decorators"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Decorators, URichTextBlock), 0x0020088000000009);
				UProperty* NewProp_Decorators_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Decorators, TEXT("Decorators"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_URichTextBlockDecorator_NoRegister());
				UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Color"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Color, URichTextBlock), 0x0020080000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font, URichTextBlock), 0x0020080000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, URichTextBlock), 0x0020080000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, URichTextBlock), 0x0020080000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/RichTextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The rich text block\n\n* Fancy Text\n* No Children"));
				MetaData->SetValue(NewProp_Decorators, TEXT("Category"), TEXT("Decorators"));
				MetaData->SetValue(NewProp_Decorators, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Decorators, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("Category"), TEXT("Decorators"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Color, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Color, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Color, TEXT("ToolTip"), TEXT("The default color for the text."));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The default font for the text."));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text to display"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URichTextBlock(Z_Construct_UClass_URichTextBlock, &URichTextBlock::StaticClass, TEXT("URichTextBlock"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(URichTextBlock);
	UFunction* Z_Construct_UFunction_UTextBlock_GetText()
	{
		struct TextBlock_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(TextBlock_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, TextBlock_eventGetText_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget text\n@return The widget text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetColorAndOpacity()
	{
		struct TextBlock_eventSetColorAndOpacity_Parms
		{
			FSlateColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, TextBlock_eventSetColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color and opacity of the text in this text block\n\n@param InColorAndOpacity             The new text color and opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetFont()
	{
		struct TextBlock_eventSetFont_Parms
		{
			FSlateFontInfo InFontInfo;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFont"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetFont_Parms));
			UProperty* NewProp_InFontInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFontInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InFontInfo, TextBlock_eventSetFont_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSlateFontInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Dynamically set the font info for this text block\n\n@param InFontInfo THe new font info"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetJustification()
	{
		struct TextBlock_eventSetJustification_Parms
		{
			TEnumAsByte<ETextJustify::Type> InJustification;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetJustification"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetJustification_Parms));
			UProperty* NewProp_InJustification = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InJustification"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InJustification, TextBlock_eventSetJustification_Parms), 0x0010000000000080, Z_Construct_UEnum_Slate_ETextJustify());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the text justification for this text block\n\n@param InJustification new justification"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetMinDesiredWidth()
	{
		struct TextBlock_eventSetMinDesiredWidth_Parms
		{
			float InMinDesiredWidth;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetMinDesiredWidth_Parms));
			UProperty* NewProp_InMinDesiredWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredWidth, TextBlock_eventSetMinDesiredWidth_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the minimum desired width for this text block\n\n@param InMinDesiredWidth new minimum desired width"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetOpacity()
	{
		struct TextBlock_eventSetOpacity_Parms
		{
			float InOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetOpacity_Parms));
			UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InOpacity, TextBlock_eventSetOpacity_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the opacity of the text in this text block\n\n@param InOpacity              The new text opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity()
	{
		struct TextBlock_eventSetShadowColorAndOpacity_Parms
		{
			FLinearColor InShadowColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(TextBlock_eventSetShadowColorAndOpacity_Parms));
			UProperty* NewProp_InShadowColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InShadowColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InShadowColorAndOpacity, TextBlock_eventSetShadowColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color and opacity of the text drop shadow\nNote: if opacity is zero no shadow will be drawn\n\n@param InShadowColorAndOpacity               The new drop shadow color and opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetShadowOffset()
	{
		struct TextBlock_eventSetShadowOffset_Parms
		{
			FVector2D InShadowOffset;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(TextBlock_eventSetShadowOffset_Parms));
			UProperty* NewProp_InShadowOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InShadowOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InShadowOffset, TextBlock_eventSetShadowOffset_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the offset that the text drop shadow should be drawn at\n\n@param InShadowOffset                The new offset"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetText()
	{
		struct TextBlock_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(TextBlock_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(InText, TextBlock_eventSetText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Directly sets the widget text.\nWarning: This will wipe any binding created for the Text property!\n@param InText The text to assign to the widget"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTextBlock_NoRegister()
	{
		return UTextBlock::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextBlock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextLayoutWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UTextBlock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_GetText());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetFont());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetJustification());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetMinDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetShadowOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWrapWithInvalidationPanel, UTextBlock, bool);
				UProperty* NewProp_bWrapWithInvalidationPanel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWrapWithInvalidationPanel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWrapWithInvalidationPanel, UTextBlock), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bWrapWithInvalidationPanel, UTextBlock), sizeof(bool), true);
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, UTextBlock), 0x0010000000000015);
				UProperty* NewProp_ShadowColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ShadowColorAndOpacityDelegate, UTextBlock), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ShadowColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShadowColorAndOpacity, UTextBlock), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ShadowOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShadowOffset, UTextBlock), 0x0010000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Font, UTextBlock), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_ColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(ColorAndOpacityDelegate, UTextBlock), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UTextBlock), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UTextBlock), 0x0010000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, UTextBlock), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_GetText(), "GetText"); // 3835697015
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetColorAndOpacity(), "SetColorAndOpacity"); // 2718314679
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetFont(), "SetFont"); // 2137061859
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetJustification(), "SetJustification"); // 2488169401
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetMinDesiredWidth(), "SetMinDesiredWidth"); // 1626176267
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetOpacity(), "SetOpacity"); // 4039798782
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity(), "SetShadowColorAndOpacity"); // 510080768
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetShadowOffset(), "SetShadowOffset"); // 1520827640
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTextBlock_SetText(), "SetText"); // 988154817
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A simple static text widget.\n\n* No Children\n* Text"));
				MetaData->SetValue(NewProp_bWrapWithInvalidationPanel, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bWrapWithInvalidationPanel, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_bWrapWithInvalidationPanel, TEXT("ToolTip"), TEXT("If true, it will automatically wrap this text widget with an invalidation panel"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("The minimum desired size for the text"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ShadowColorAndOpacity."));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("DisplayName"), TEXT("Shadow Color"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ToolTip"), TEXT("The color of the shadow"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("ToolTip"), TEXT("The direction the shadow is cast"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The font to render the text with"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ColorAndOpacity."));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color of the text"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text to display"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextBlock(Z_Construct_UClass_UTextBlock, &UTextBlock::StaticClass, TEXT("UTextBlock"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextBlock);
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateHorizontally()
	{
		struct Throbber_eventSetAnimateHorizontally_Parms
		{
			bool bInAnimateHorizontally;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateHorizontally"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateHorizontally_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms, bool);
			UProperty* NewProp_bInAnimateHorizontally = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateHorizontally"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate horizontally."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateOpacity()
	{
		struct Throbber_eventSetAnimateOpacity_Parms
		{
			bool bInAnimateOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateOpacity_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms, bool);
			UProperty* NewProp_bInAnimateOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate their opacity."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateVertically()
	{
		struct Throbber_eventSetAnimateVertically_Parms
		{
			bool bInAnimateVertically;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateVertically"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateVertically_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms, bool);
			UProperty* NewProp_bInAnimateVertically = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateVertically"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate vertically."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetNumberOfPieces()
	{
		struct Throbber_eventSetNumberOfPieces_Parms
		{
			int32 InNumberOfPieces;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetNumberOfPieces_Parms));
			UProperty* NewProp_InNumberOfPieces = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InNumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InNumberOfPieces, Throbber_eventSetNumberOfPieces_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets how many pieces there are"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UThrobber_NoRegister()
	{
		return UThrobber::StaticClass();
	}
	UClass* Z_Construct_UClass_UThrobber()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UThrobber::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateHorizontally());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateVertically());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetNumberOfPieces());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Image, UThrobber), 0x0010000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_PieceImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PieceImage"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PieceImage_DEPRECATED, UThrobber), 0x0010000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateOpacity, UThrobber, bool);
				UProperty* NewProp_bAnimateOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateOpacity, UThrobber), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateOpacity, UThrobber), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateVertically, UThrobber, bool);
				UProperty* NewProp_bAnimateVertically = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateVertically"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateVertically, UThrobber), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateVertically, UThrobber), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateHorizontally, UThrobber, bool);
				UProperty* NewProp_bAnimateHorizontally = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateHorizontally"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateHorizontally, UThrobber), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateHorizontally, UThrobber), sizeof(bool), true);
				UProperty* NewProp_NumberOfPieces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfPieces"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfPieces, UThrobber), 0x0010000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UThrobber_SetAnimateHorizontally(), "SetAnimateHorizontally"); // 2556818859
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UThrobber_SetAnimateOpacity(), "SetAnimateOpacity"); // 2630630676
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UThrobber_SetAnimateVertically(), "SetAnimateVertically"); // 1915512747
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UThrobber_SetNumberOfPieces(), "SetNumberOfPieces"); // 1594645934
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Throbber.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Throbber widget that shows several zooming circles in a row."));
				MetaData->SetValue(NewProp_Image, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ToolTip"), TEXT("Image to use for each segment of the throbber"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("ToolTip"), TEXT("Should the pieces animate their opacity?"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("ToolTip"), TEXT("Should the pieces animate vertically?"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("ToolTip"), TEXT("Should the pieces animate horizontally?"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ToolTip"), TEXT("How many pieces there are"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UThrobber(Z_Construct_UClass_UThrobber, &UThrobber::StaticClass, TEXT("UThrobber"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UThrobber);
	UScriptStruct* Z_Construct_UScriptStruct_FWidgetAnimationBinding()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("WidgetAnimationBinding"), sizeof(FWidgetAnimationBinding), Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetAnimationBinding"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWidgetAnimationBinding>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsRootWidget, FWidgetAnimationBinding, bool);
			UProperty* NewProp_bIsRootWidget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsRootWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsRootWidget, FWidgetAnimationBinding), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsRootWidget, FWidgetAnimationBinding), sizeof(bool), true);
			UProperty* NewProp_AnimationGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimationGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AnimationGuid, FWidgetAnimationBinding), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_SlotWidgetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SlotWidgetName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SlotWidgetName, FWidgetAnimationBinding), 0x0010000000000000);
			UProperty* NewProp_WidgetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WidgetName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(WidgetName, FWidgetAnimationBinding), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A single object bound to a UMG sequence."));
			MetaData->SetValue(NewProp_bIsRootWidget, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(NewProp_AnimationGuid, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(NewProp_SlotWidgetName, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(NewProp_WidgetName, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC() { return 1746557531U; }
	UFunction* Z_Construct_UDelegateFunction_UMG_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnWidgetAnimationPlaybackStatusChanged__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetAnimation_GetEndTime()
	{
		struct WidgetAnimation_eventGetEndTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetAnimation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEndTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(WidgetAnimation_eventGetEndTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetAnimation_eventGetEndTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the end time of this animation.\n\n@return End time in seconds.\n@see GetStartTime"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetAnimation_GetStartTime()
	{
		struct WidgetAnimation_eventGetStartTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetAnimation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStartTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(WidgetAnimation_eventGetStartTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetAnimation_eventGetStartTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the start time of this animation.\n\n@return Start time in seconds.\n@see GetEndTime"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetAnimation_NoRegister()
	{
		return UWidgetAnimation::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetAnimation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneSequence();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetAnimation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetAnimation_GetEndTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetAnimation_GetStartTime());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AnimationBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AnimationBindings, UWidgetAnimation), 0x0010000000000000);
				UProperty* NewProp_AnimationBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimationBindings, TEXT("AnimationBindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FWidgetAnimationBinding());
				UProperty* NewProp_MovieScene = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovieScene"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MovieScene, UWidgetAnimation), 0x0010000000080008, Z_Construct_UClass_UMovieScene_NoRegister());
				UProperty* NewProp_OnAnimationFinished = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnAnimationFinished"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnAnimationFinished, UWidgetAnimation), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature());
				UProperty* NewProp_OnAnimationStarted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnAnimationStarted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnAnimationStarted, UWidgetAnimation), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetAnimation_GetEndTime(), "GetEndTime"); // 1660414491
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetAnimation_GetStartTime(), "GetStartTime"); // 2841236218
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/WidgetAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_AnimationBindings, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ToolTip"), TEXT("Pointer to the movie scene that controls this animation."));
				MetaData->SetValue(NewProp_OnAnimationFinished, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_OnAnimationFinished, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_OnAnimationFinished, TEXT("ToolTip"), TEXT("Fires when the widget animation is finished."));
				MetaData->SetValue(NewProp_OnAnimationStarted, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_OnAnimationStarted, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_OnAnimationStarted, TEXT("ToolTip"), TEXT("Fires when the widget animation starts playing."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetAnimation(Z_Construct_UClass_UWidgetAnimation, &UWidgetAnimation::StaticClass, TEXT("UWidgetAnimation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetAnimation);
	UEnum* Z_Construct_UEnum_UMG_EBindingKind()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EBindingKind_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBindingKind"), 0, Get_Z_Construct_UEnum_UMG_EBindingKind_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBindingKind"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBindingKind::Function")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBindingKind::Property")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBindingKind::EBindingKind_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EBindingKind");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EBindingKind_CRC() { return 1597261083U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDelegateRuntimeBinding()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DelegateRuntimeBinding"), sizeof(FDelegateRuntimeBinding), Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DelegateRuntimeBinding"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDelegateRuntimeBinding>, EStructFlags(0x00000001));
			UProperty* NewProp_Kind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Kind"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Kind, FDelegateRuntimeBinding), 0x0010000000000000, Z_Construct_UEnum_UMG_EBindingKind());
			UProperty* NewProp_Kind_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Kind, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourcePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePath, FDelegateRuntimeBinding), 0x0010000000000000, Z_Construct_UScriptStruct_FDynamicPropertyPath());
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(FunctionName, FDelegateRuntimeBinding), 0x0010000000000000);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PropertyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(PropertyName, FDelegateRuntimeBinding), 0x0010000000000000);
			UProperty* NewProp_ObjectName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ObjectName, FDelegateRuntimeBinding), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_Kind, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_Kind, TEXT("ToolTip"), TEXT("The kind of binding we're performing, are we binding to a property or a function."));
			MetaData->SetValue(NewProp_SourcePath, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_FunctionName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_FunctionName, TEXT("ToolTip"), TEXT("The function or property we're binding to on the source object."));
			MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("The property on the widget that will have a binding placed on it."));
			MetaData->SetValue(NewProp_ObjectName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_ObjectName, TEXT("ToolTip"), TEXT("The widget that will be bound to the live data."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC() { return 370368795U; }
	UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass_NoRegister()
	{
		return UWidgetBlueprintGeneratedClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintGeneratedClass();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetBlueprintGeneratedClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanEverPaint, UWidgetBlueprintGeneratedClass, uint8);
				UProperty* NewProp_bCanEverPaint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanEverPaint"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanEverPaint, UWidgetBlueprintGeneratedClass), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanEverPaint, UWidgetBlueprintGeneratedClass), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanEverTick, UWidgetBlueprintGeneratedClass, uint8);
				UProperty* NewProp_bCanEverTick = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanEverTick"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanEverTick, UWidgetBlueprintGeneratedClass), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanEverTick, UWidgetBlueprintGeneratedClass), sizeof(uint8), false);
				UProperty* NewProp_NamedSlots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamedSlots"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NamedSlots, UWidgetBlueprintGeneratedClass), 0x0010000000000000);
				UProperty* NewProp_NamedSlots_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamedSlots, TEXT("NamedSlots"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_Animations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Animations"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Animations, UWidgetBlueprintGeneratedClass), 0x0010000000000000);
				UProperty* NewProp_Animations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Animations, TEXT("Animations"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UWidgetAnimation_NoRegister());
				UProperty* NewProp_Bindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Bindings, UWidgetBlueprintGeneratedClass), 0x0010000000000000);
				UProperty* NewProp_Bindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Bindings, TEXT("Bindings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDelegateRuntimeBinding());
				UProperty* NewProp_WidgetTree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetTree"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidgetTree, UWidgetBlueprintGeneratedClass), 0x0010000000000000, Z_Construct_UClass_UWidgetTree_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The widget blueprint generated class allows us to create blueprint-able widgets for UMG at runtime.\nAll WBPGC's are of UUserWidget classes, and they perform special post initialization using this class\nto give themselves many of the same capabilities as AActor blueprints, like dynamic delegate binding for\nwidgets."));
				MetaData->SetValue(NewProp_bCanEverPaint, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_bCanEverTick, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_NamedSlots, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_Animations, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_Bindings, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ToolTip"), TEXT("A tree of the widget templates to be created"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetBlueprintGeneratedClass(Z_Construct_UClass_UWidgetBlueprintGeneratedClass, &UWidgetBlueprintGeneratedClass::StaticClass, TEXT("UWidgetBlueprintGeneratedClass"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetBlueprintGeneratedClass);
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CancelDragDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Cancels any current drag drop operation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick()
	{
		struct WidgetBlueprintLibrary_eventCaptureJoystick_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			bool bInAllJoysticks;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureJoystick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventCaptureJoystick_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms, bool);
			UProperty* NewProp_bInAllJoysticks = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllJoysticks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), sizeof(bool), true);
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllJoysticks"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use SetUserFocus() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse()
	{
		struct WidgetBlueprintLibrary_eventCaptureMouse_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureMouse"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventCaptureMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus()
	{
		struct WidgetBlueprintLibrary_eventClearUserFocus_Parms
		{
			FEventReply Reply;
			bool bInAllUsers;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearUserFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventClearUserFocus_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms, bool);
			UProperty* NewProp_bInAllUsers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllUsers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms), sizeof(bool), true);
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllUsers"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Create()
	{
		struct WidgetBlueprintLibrary_eventCreate_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetType;
			APlayerController* OwningPlayer;
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Create"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventCreate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCreate_Parms), 0x0010000000000580, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_OwningPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwningPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwningPlayer, WidgetBlueprintLibrary_eventCreate_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_WidgetType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetType"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetType, WidgetBlueprintLibrary_eventCreate_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventCreate_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Create Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a widget"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation()
	{
		struct WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms
		{
			TSubclassOf<UDragDropOperation>  OperationClass;
			UDragDropOperation* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateDragDropOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms), 0x0010000000000580, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_OperationClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OperationClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(OperationClass, WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms), 0x0014000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister(), UClass::StaticClass());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a new drag and drop operation that can be returned from a drag begin to inform the UI what i\nbeing dragged and dropped and what it looks like."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag()
	{
		struct WidgetBlueprintLibrary_eventDetectDrag_Parms
		{
			FEventReply Reply;
			UWidget* WidgetDetectingDrag;
			FKey DragKey;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DetectDrag"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventDetectDrag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_DragKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DragKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DragKey, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_WidgetDetectingDrag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetDetectingDrag"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidgetDetectingDrag, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ask Slate to detect if a user starts dragging in this widget later.  Slate internally tracks the movement\nand if it surpasses the drag threshold, Slate will send an OnDragDetected event to the widget.\n\n@param WidgetDetectingDrag  Detect dragging in this widget\n@param DragKey                      This button should be pressed to detect the drag"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed()
	{
		struct WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms
		{
			FPointerEvent PointerEvent;
			UWidget* WidgetDetectingDrag;
			FKey DragKey;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DetectDragIfPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_DragKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DragKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DragKey, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_WidgetDetectingDrag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetDetectingDrag"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidgetDetectingDrag, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Given the pointer event, emit the DetectDrag reply if the provided key was pressed.\nIf the DragKey is a touch key, that will also automatically work.\n@param PointerEvent  The pointer device event coming in.\n@param WidgetDetectingDrag  Detect dragging in this widget.\n@param DragKey                      This button should be pressed to detect the drag, won't emit the DetectDrag FEventReply unless this is pressed."));
			MetaData->SetValue(NewProp_PointerEvent, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DismissAllMenus"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Menu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Closes any popup menu"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox()
	{
		struct WidgetBlueprintLibrary_eventDrawBox_Parms
		{
			FPaintContext Context;
			FVector2D Position;
			FVector2D Size;
			USlateBrushAsset* Brush;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawBox_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0010000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Size, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a box"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine()
	{
		struct WidgetBlueprintLibrary_eventDrawLine_Parms
		{
			FPaintContext Context;
			FVector2D PositionA;
			FVector2D PositionB;
			FLinearColor Tint;
			bool bAntiAlias;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawLine"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawLine_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms, bool);
			UProperty* NewProp_bAntiAlias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAntiAlias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms), sizeof(bool), true);
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_PositionB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PositionB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PositionB, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_PositionA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PositionA"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PositionA, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("4"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAntiAlias"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a line.\n\n@param PositionA             Starting position of the line in local space.\n@param PositionB             Ending position of the line in local space.\n@param Thickness             How many pixels thick this line should be.\n@param Tint                  Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines()
	{
		struct WidgetBlueprintLibrary_eventDrawLines_Parms
		{
			FPaintContext Context;
			TArray<FVector2D> Points;
			FLinearColor Tint;
			bool bAntiAlias;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawLines"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawLines_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms, bool);
			UProperty* NewProp_bAntiAlias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAntiAlias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms), sizeof(bool), true);
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Points"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Points, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0010000008000182);
			UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAntiAlias"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws several line segments.\n\n@param Points                Line pairs, each line needs to be 2 separate points in the array.\n@param Thickness             How many pixels thick this line should be.\n@param Tint                  Color to render the line."));
			MetaData->SetValue(NewProp_Points, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText()
	{
		struct WidgetBlueprintLibrary_eventDrawText_Parms
		{
			FPaintContext Context;
			FString InString;
			FVector2D Position;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawText_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InString, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0010000000000080);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Draw Text instead"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws text.\n\n@param InString              The string to draw.\n@param Position              The starting position where the text is drawn in local space.\n@param Tint                  Color to render the line."));
			MetaData->SetValue(NewProp_InString, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted()
	{
		struct WidgetBlueprintLibrary_eventDrawTextFormatted_Parms
		{
			FPaintContext Context;
			FText Text;
			FVector2D Position;
			UFont* Font;
			int32 FontSize;
			FName FontTypeFace;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawTextFormatted"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawTextFormatted_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FontTypeFace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FontTypeFace"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(FontTypeFace, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000000000080);
			UProperty* NewProp_FontSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FontSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FontSize, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000000000080);
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Font, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000000000080, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Text, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000008000182);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FontSize"), TEXT("16"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FontTypeFace"), TEXT("Regular"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws text.\n\n@param Text                  The string to draw.\n@param Position              The starting position where the text is drawn in local space.\n@param Tint                  Color to render the line."));
			MetaData->SetValue(NewProp_Text, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop()
	{
		struct WidgetBlueprintLibrary_eventEndDragDrop_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EndDragDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventEndDragDrop_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventEndDragDrop_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventEndDragDrop_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("An event should return FReply::Handled().EndDragDrop() to request that the current drag/drop operation be terminated."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass()
	{
		struct WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms
		{
			UObject* WorldContextObject;
			TArray<UUserWidget*> FoundWidgets;
			TSubclassOf<UUserWidget>  WidgetClass;
			bool TopLevelOnly;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllWidgetsOfClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0014000000000080, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_FoundWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FoundWidgets, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010000000000180);
			UProperty* NewProp_FoundWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoundWidgets, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TopLevelOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("FoundWidgets"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all widgets of a certain class.\n@param FoundWidgets The widgets that were found matching the filter.\n@param WidgetClass The widget class to filter by.\n@param TopLevelOnly Only the widgets that are direct children of the viewport will be returned."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface()
	{
		struct WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UInterface>  Interface;
			TArray<UUserWidget*> FoundWidgets;
			bool TopLevelOnly;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllWidgetsWithInterface"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), sizeof(bool), true);
			UProperty* NewProp_FoundWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FoundWidgets, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0010000000000180);
			UProperty* NewProp_FoundWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoundWidgets, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_Interface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Interface"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Interface, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0014000000000080, UInterface::StaticClass(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DeterminesOutputType"), TEXT("WidgetClass"));
			MetaData->SetValue(ReturnFunction, TEXT("DynamicOutputParam"), TEXT("FoundWidgets"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all widgets in the world with the specified interface.\nThis is a slow operation, use with caution e.g. do not use every frame.\n@param Interface The interface to find. Must be specified or result array will be empty.\n@param FoundWidgets Output array of widgets that implement the specified interface.\n@param TopLevelOnly Only the widgets that are direct children of the viewport will be returned."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResource_Parms
		{
			FSlateBrush Brush;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResource"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResource_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResource_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResource_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the resource object on a brush.  This could be a UTexture2D or a UMaterialInterface."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInterface* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResourceAsMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the brush resource as a material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms
		{
			FSlateBrush Brush;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResourceAsTexture2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the brush resource as a texture 2D."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent()
	{
		struct WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms
		{
			UDragDropOperation* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDragDroppingContent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms), 0x0010000000000580, Z_Construct_UClass_UDragDropOperation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the drag and drop operation that is currently occurring if any, otherwise nothing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial()
	{
		struct WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the material that allows changes to parameters at runtime.  The brush must already have a material assigned to it,\nif it does it will automatically be converted to a MID.\n\n@return A material that supports dynamic input from the game."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms
		{
			FCharacterEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromCharacterEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FCharacterEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms
		{
			FControllerEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromControllerEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FControllerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms
		{
			FKeyEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromKeyEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms
		{
			FNavigationEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromNavigationEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FNavigationEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms
		{
			FPointerEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromPointerEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent()
	{
		struct WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms
		{
			FAnalogInputEvent Event;
			FKeyEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKeyEventFromAnalogInputEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FKeyEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FAnalogInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(NewProp_Event, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetSafeZonePadding()
	{
		struct WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms
		{
			UObject* WorldContextObject;
			FVector2D SafePadding;
			FVector2D SafePaddingScale;
			FVector2D SpillOverPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSafeZonePadding"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms));
			UProperty* NewProp_SpillOverPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SpillOverPadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpillOverPadding, WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SafePaddingScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SafePaddingScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SafePaddingScale, WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SafePadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SafePadding"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SafePadding, WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventGetSafeZonePadding_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Safe Zone"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the amount of padding that needs to be added when accounting for the safe zone on TVs."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled()
	{
		struct WidgetBlueprintLibrary_eventHandled_Parms
		{
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Handled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventHandled_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventHandled_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The event reply to use when you choose to handle an event.  This will prevent the event\nfrom continuing to bubble up / down the widget hierarchy."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping()
	{
		struct WidgetBlueprintLibrary_eventIsDragDropping_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDragDropping"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetBlueprintLibrary_eventIsDragDropping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a drag/drop event is occurring that a widget can handle."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse()
	{
		struct WidgetBlueprintLibrary_eventLockMouse_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LockMouse"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventLockMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms
		{
			USlateBrushAsset* BrushAsset;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BrushAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BrushAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BrushAsset, WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms), 0x0010000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Slate Brush Asset\n\n@return A new slate brush using the asset's brush."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
			int32 Width;
			int32 Height;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0010000000000080);
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Material.  Materials don't have an implicit size, so providing a widget and height\nis required to hint slate with how large the image wants to be by default.\n\n@return A new slate brush using the material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms
		{
			UTexture2D* Texture;
			int32 Width;
			int32 Height;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0010000000000080);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Texture2D\n\n@param Width  When less than or equal to zero, the Width of the brush will default to the Width of the Texture\n@param Height  When less than or equal to zero, the Height of the brush will default to the Height of the Texture\n\n@return A new slate brush using the texture."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush()
	{
		struct WidgetBlueprintLibrary_eventNoResourceBrush_Parms
		{
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NoResourceBrush"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventNoResourceBrush_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventNoResourceBrush_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush that wont draw anything, the \"Null Brush\".\n\n@return A new slate brush that wont draw anything."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture()
	{
		struct WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms
		{
			FEventReply Reply;
			bool bInAllJoysticks;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseJoystickCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms, bool);
			UProperty* NewProp_bInAllJoysticks = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllJoysticks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), sizeof(bool), true);
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllJoysticks"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use ClearUserFocus() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture()
	{
		struct WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseMouseCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial()
	{
		struct WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushResourceToMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the resource on a brush to be a Material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture()
	{
		struct WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms
		{
			FSlateBrush Brush;
			UTexture2D* Texture;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushResourceToTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms));
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the resource on a brush to be a UTexture2D."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFocusToGameViewport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Focus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			bool bLockMouseToViewport;
			bool bHideCursorDuringCapture;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_GameAndUI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms, bool);
			UProperty* NewProp_bHideCursorDuringCapture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bHideCursorDuringCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms, bool);
			UProperty* NewProp_bLockMouseToViewport = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLockMouseToViewport"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), sizeof(bool), true);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bHideCursorDuringCapture"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bLockMouseToViewport"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use the new version of Set Input Mode Game And UI instead"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Input Mode Game And UI (Deprecated)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUIEx()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			EMouseLockMode InMouseLockMode;
			bool bHideCursorDuringCapture;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_GameAndUIEx"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms, bool);
			UProperty* NewProp_bHideCursorDuringCapture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bHideCursorDuringCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms), sizeof(bool), true);
			UProperty* NewProp_InMouseLockMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMouseLockMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(InMouseLockMode, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_EMouseLockMode());
			UProperty* NewProp_InMouseLockMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_InMouseLockMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_GameAndUIEx_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bHideCursorDuringCapture"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InMouseLockMode"), TEXT("DoNotLock"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Input Mode Game And UI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only the UI to respond to user input, and if the UI doesn't handle it player input / player controller gets a chance."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms
		{
			APlayerController* Target;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_GameOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms));
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only player input / player controller to respond to user input."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			bool bLockMouseToViewport;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_UIOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms, bool);
			UProperty* NewProp_bLockMouseToViewport = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLockMouseToViewport"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), sizeof(bool), true);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bLockMouseToViewport"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use the new version of Set Input Mode UI Only instead"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Input Mode UI Only (Deprecated)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnlyEx()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_UIOnlyEx_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			EMouseLockMode InMouseLockMode;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_UIOnlyEx"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_UIOnlyEx_Parms));
			UProperty* NewProp_InMouseLockMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMouseLockMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(InMouseLockMode, WidgetBlueprintLibrary_eventSetInputMode_UIOnlyEx_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_EMouseLockMode());
			UProperty* NewProp_InMouseLockMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_InMouseLockMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_UIOnlyEx_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_UIOnlyEx_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InMouseLockMode"), TEXT("DoNotLock"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Input Mode UI Only"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only the UI to respond to user input."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition()
	{
		struct WidgetBlueprintLibrary_eventSetMousePosition_Parms
		{
			FEventReply Reply;
			FVector2D NewMousePosition;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMousePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(WidgetBlueprintLibrary_eventSetMousePosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_NewMousePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMousePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewMousePosition, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus()
	{
		struct WidgetBlueprintLibrary_eventSetUserFocus_Parms
		{
			FEventReply Reply;
			UWidget* FocusWidget;
			bool bInAllUsers;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUserFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetUserFocus_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms, bool);
			UProperty* NewProp_bInAllUsers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllUsers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms), sizeof(bool), true);
			UProperty* NewProp_FocusWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FocusWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FocusWidget, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllUsers"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled()
	{
		struct WidgetBlueprintLibrary_eventUnhandled_Parms
		{
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Unhandled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventUnhandled_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventUnhandled_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The event reply to use when you choose not to handle an event."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse()
	{
		struct WidgetBlueprintLibrary_eventUnlockMouse_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnlockMouse"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventUnlockMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventUnlockMouse_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventUnlockMouse_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintLibrary_NoRegister()
	{
		return UWidgetBlueprintLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetBlueprintLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Create());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetSafeZonePadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUIEx());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnlyEx());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop(), "CancelDragDrop"); // 2246488732
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick(), "CaptureJoystick"); // 4153721410
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse(), "CaptureMouse"); // 2628461702
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus(), "ClearUserFocus"); // 1464128416
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_Create(), "Create"); // 1233916699
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation(), "CreateDragDropOperation"); // 2940594235
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag(), "DetectDrag"); // 3851807347
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed(), "DetectDragIfPressed"); // 1434796617
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus(), "DismissAllMenus"); // 887357550
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox(), "DrawBox"); // 471190085
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine(), "DrawLine"); // 1002524447
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines(), "DrawLines"); // 884695396
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText(), "DrawText"); // 2821525685
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted(), "DrawTextFormatted"); // 2169779060
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop(), "EndDragDrop"); // 3207254562
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass(), "GetAllWidgetsOfClass"); // 576087551
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface(), "GetAllWidgetsWithInterface"); // 900794474
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource(), "GetBrushResource"); // 4249268720
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial(), "GetBrushResourceAsMaterial"); // 2266131276
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D(), "GetBrushResourceAsTexture2D"); // 4262021536
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent(), "GetDragDroppingContent"); // 1281320111
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial(), "GetDynamicMaterial"); // 3439440611
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent(), "GetInputEventFromCharacterEvent"); // 2209873368
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent(), "GetInputEventFromControllerEvent"); // 2519571687
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent(), "GetInputEventFromKeyEvent"); // 891505931
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent(), "GetInputEventFromNavigationEvent"); // 4282333297
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent(), "GetInputEventFromPointerEvent"); // 1602384525
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent(), "GetKeyEventFromAnalogInputEvent"); // 14326895
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetSafeZonePadding(), "GetSafeZonePadding"); // 1290824848
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled(), "Handled"); // 3820955266
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping(), "IsDragDropping"); // 2675992597
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse(), "LockMouse"); // 3173203079
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset(), "MakeBrushFromAsset"); // 3481604282
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial(), "MakeBrushFromMaterial"); // 4212640770
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture(), "MakeBrushFromTexture"); // 1832859929
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush(), "NoResourceBrush"); // 3368307517
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture(), "ReleaseJoystickCapture"); // 4074986860
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture(), "ReleaseMouseCapture"); // 325665415
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial(), "SetBrushResourceToMaterial"); // 3387222457
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture(), "SetBrushResourceToTexture"); // 3140619399
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport(), "SetFocusToGameViewport"); // 1181013711
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI(), "SetInputMode_GameAndUI"); // 818147341
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUIEx(), "SetInputMode_GameAndUIEx"); // 3410168017
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly(), "SetInputMode_GameOnly"); // 1154203511
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly(), "SetInputMode_UIOnly"); // 162801057
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnlyEx(), "SetInputMode_UIOnlyEx"); // 4250274875
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition(), "SetMousePosition"); // 1631479009
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus(), "SetUserFocus"); // 2275468376
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled(), "Unhandled"); // 2297543930
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse(), "UnlockMouse"); // 2103474902
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetBlueprintLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetBlueprintLibrary(Z_Construct_UClass_UWidgetBlueprintLibrary, &UWidgetBlueprintLibrary::StaticClass, TEXT("UWidgetBlueprintLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetBlueprintLibrary);
	UEnum* Z_Construct_UEnum_UMG_EWidgetGeometryMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetGeometryMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EWidgetGeometryMode"), 0, Get_Z_Construct_UEnum_UMG_EWidgetGeometryMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetGeometryMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetGeometryMode::Plane")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetGeometryMode::Cylinder")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetGeometryMode::EWidgetGeometryMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EWidgetGeometryMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Cylinder.ToolTip"), TEXT("The widget is mapped onto a cylinder"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Plane.ToolTip"), TEXT("The widget is mapped onto a plane"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetGeometryMode_CRC() { return 1709804607U; }
	UEnum* Z_Construct_UEnum_UMG_EWidgetBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EWidgetBlendMode"), 0, Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetBlendMode::Opaque")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetBlendMode::Masked")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetBlendMode::Transparent")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetBlendMode::EWidgetBlendMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EWidgetBlendMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC() { return 1743090613U; }
	UEnum* Z_Construct_UEnum_UMG_EWidgetSpace()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EWidgetSpace"), 0, Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetSpace::World")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetSpace::Screen")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetSpace::EWidgetSpace_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EWidgetSpace");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Screen.ToolTip"), TEXT("The widget is rendered in the screen, completely outside of the world, never occluded."));
			MetaData->SetValue(ReturnEnum, TEXT("World.ToolTip"), TEXT("The widget is rendered in the world as mesh, it can be occluded like any other mesh in the world."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC() { return 1374912221U; }
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetDrawSize()
	{
		struct WidgetComponent_eventGetDrawSize_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDrawSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(WidgetComponent_eventGetDrawSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetDrawSize_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The draw size of the quad in the world"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetMaterialInstance()
	{
		struct WidgetComponent_eventGetMaterialInstance_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaterialInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetMaterialInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetMaterialInstance_Parms), 0x0010000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The dynamic material instance used to render the user widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer()
	{
		struct WidgetComponent_eventGetOwnerPlayer_Parms
		{
			ULocalPlayer* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwnerPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetOwnerPlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetOwnerPlayer_Parms), 0x0010000000000580, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the local player that owns this widget component."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetRenderTarget()
	{
		struct WidgetComponent_eventGetRenderTarget_Parms
		{
			UTextureRenderTarget2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetRenderTarget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetRenderTarget_Parms), 0x0010000000000580, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The render target to which the user widget is rendered"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject()
	{
		struct WidgetComponent_eventGetUserWidgetObject_Parms
		{
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUserWidgetObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetUserWidgetObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetUserWidgetObject_Parms), 0x0010000000000580, Z_Construct_UClass_UUserWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The user widget object displayed by this component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_RequestRedraw()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestRedraw"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Requests that the widget be redrawn."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetBackgroundColor()
	{
		struct WidgetComponent_eventSetBackgroundColor_Parms
		{
			FLinearColor NewBackgroundColor;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(WidgetComponent_eventSetBackgroundColor_Parms));
			UProperty* NewProp_NewBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewBackgroundColor, WidgetComponent_eventSetBackgroundColor_Parms), 0x0010000000000082, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the background color and opacityscale for this widget"));
			MetaData->SetValue(NewProp_NewBackgroundColor, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetDrawSize()
	{
		struct WidgetComponent_eventSetDrawSize_Parms
		{
			FVector2D Size;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDrawSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(WidgetComponent_eventSetDrawSize_Parms));
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Size, WidgetComponent_eventSetDrawSize_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the draw size of the quad in the world"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer()
	{
		struct WidgetComponent_eventSetOwnerPlayer_Parms
		{
			ULocalPlayer* LocalPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOwnerPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetComponent_eventSetOwnerPlayer_Parms));
			UProperty* NewProp_LocalPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LocalPlayer, WidgetComponent_eventSetOwnerPlayer_Parms), 0x0010000000000080, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the local player that owns this widget component.  Setting the owning player controls\nwhich player's viewport the widget appears on in a split screen scenario.  Additionally it\nforwards the owning player to the actual UserWidget that is spawned."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetWidget()
	{
		struct WidgetComponent_eventSetWidget_Parms
		{
			UUserWidget* Widget;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetComponent_eventSetWidget_Parms));
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetComponent_eventSetWidget_Parms), 0x0010000000000080, Z_Construct_UClass_UUserWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the widget to use directly. This function will keep track of the widget till the next time it's called\n    with either a newer widget or a nullptr"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetComponent_NoRegister()
	{
		return UWidgetComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMeshComponent();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B01080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetDrawSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetMaterialInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetRenderTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_RequestRedraw());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetBackgroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetDrawSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetWidget());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CylinderArcAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CylinderArcAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CylinderArcAngle, UWidgetComponent), 0x0020080000000001);
				UProperty* NewProp_GeometryMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeometryMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(GeometryMode, UWidgetComponent), 0x0020080000000001, Z_Construct_UEnum_UMG_EWidgetGeometryMode());
				UProperty* NewProp_GeometryMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_GeometryMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_LayerZOrder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayerZOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LayerZOrder, UWidgetComponent), 0x0020080000010001);
				UProperty* NewProp_SharedLayerName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SharedLayerName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SharedLayerName, UWidgetComponent), 0x0020080000010001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEditTimeUsable, UWidgetComponent, bool);
				UProperty* NewProp_bEditTimeUsable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEditTimeUsable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEditTimeUsable, UWidgetComponent), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bEditTimeUsable, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAddedToScreen, UWidgetComponent, bool);
				UProperty* NewProp_bAddedToScreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAddedToScreen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAddedToScreen, UWidgetComponent), 0x0020080000202000, CPP_BOOL_PROPERTY_BITMASK(bAddedToScreen, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_MaterialInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaterialInstance, UWidgetComponent), 0x0020080000202000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_RenderTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RenderTarget, UWidgetComponent), 0x0020080000202000, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_MaskedMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaskedMaterial_OneSided"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaskedMaterial_OneSided, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MaskedMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaskedMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaskedMaterial, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OpaqueMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpaqueMaterial_OneSided"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OpaqueMaterial_OneSided, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OpaqueMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpaqueMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OpaqueMaterial, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_TranslucentMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMaterial_OneSided"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TranslucentMaterial_OneSided, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_TranslucentMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TranslucentMaterial, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BodySetup, UWidgetComponent), 0x0020080000202000, Z_Construct_UClass_UBodySetup_NoRegister());
				UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, UWidgetComponent), 0x0020080000202000, Z_Construct_UClass_UUserWidget_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TickWhenOffscreen, UWidgetComponent, bool);
				UProperty* NewProp_TickWhenOffscreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TickWhenOffscreen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TickWhenOffscreen, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(TickWhenOffscreen, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTwoSided, UWidgetComponent, bool);
				UProperty* NewProp_bIsTwoSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTwoSided"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTwoSided, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bIsTwoSided, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(BlendMode, UWidgetComponent), 0x0020080000000001, Z_Construct_UEnum_UMG_EWidgetBlendMode());
				UProperty* NewProp_BlendMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_BlendMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_OpacityFromTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityFromTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OpacityFromTexture, UWidgetComponent), 0x0020080000000001);
				UProperty* NewProp_TintColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TintColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TintColorAndOpacity, UWidgetComponent), 0x0020080000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UWidgetComponent), 0x0020080000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_OwnerPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnerPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerPlayer, UWidgetComponent), 0x0020080000000000, Z_Construct_UClass_ULocalPlayer_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWindowFocusable, UWidgetComponent, bool);
				UProperty* NewProp_bWindowFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWindowFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWindowFocusable, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bWindowFocusable, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReceiveHardwareInput, UWidgetComponent, bool);
				UProperty* NewProp_bReceiveHardwareInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReceiveHardwareInput"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReceiveHardwareInput, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bReceiveHardwareInput, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_Pivot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pivot"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Pivot, UWidgetComponent), 0x0020080000000001, Z_Construct_UScriptStruct_FVector2D());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawAtDesiredSize, UWidgetComponent, bool);
				UProperty* NewProp_bDrawAtDesiredSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDrawAtDesiredSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawAtDesiredSize, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bDrawAtDesiredSize, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_CurrentDrawSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentDrawSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CurrentDrawSize, UWidgetComponent), 0x0020080000000000, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_RedrawTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RedrawTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RedrawTime, UWidgetComponent), 0x0020080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRedrawRequested, UWidgetComponent, bool);
				UProperty* NewProp_bRedrawRequested = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRedrawRequested"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRedrawRequested, UWidgetComponent), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bRedrawRequested, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bManuallyRedraw, UWidgetComponent, bool);
				UProperty* NewProp_bManuallyRedraw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bManuallyRedraw"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bManuallyRedraw, UWidgetComponent), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bManuallyRedraw, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_DrawSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DrawSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DrawSize, UWidgetComponent), 0x0020080000000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, UWidgetComponent), 0x0024080000000001, Z_Construct_UClass_UUserWidget_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Space = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Space"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Space, UWidgetComponent), 0x0020080000000001, Z_Construct_UEnum_UMG_EWidgetSpace());
				UProperty* NewProp_Space_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Space, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_GetDrawSize(), "GetDrawSize"); // 2601687571
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_GetMaterialInstance(), "GetMaterialInstance"); // 1954502486
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer(), "GetOwnerPlayer"); // 2841613888
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_GetRenderTarget(), "GetRenderTarget"); // 726340272
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject(), "GetUserWidgetObject"); // 162266727
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_RequestRedraw(), "RequestRedraw"); // 2251838157
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_SetBackgroundColor(), "SetBackgroundColor"); // 3877680271
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_SetDrawSize(), "SetDrawSize"); // 3071125899
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer(), "SetOwnerPlayer"); // 3881121643
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetComponent_SetWidget(), "SetWidget"); // 3744792082
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("UserInterface"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Activation Components|Activation Sockets Base Lighting LOD Mesh Mobility Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The widget component provides a surface in the 3D environment on which to render widgets normally rendered to the screen.\nWidgets are first rendered to a render target, then that render target is displayed in the world.\n\nMaterial Properties set by this component on whatever material overrides the default.\nSlateUI [Texture]\nBackColor [Vector]\nTintColorAndOpacity [Vector]\nOpacityFromTexture [Scalar]"));
				MetaData->SetValue(NewProp_CylinderArcAngle, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_CylinderArcAngle, TEXT("ClampMax"), TEXT("180.000000"));
				MetaData->SetValue(NewProp_CylinderArcAngle, TEXT("ClampMin"), TEXT("1.000000"));
				MetaData->SetValue(NewProp_CylinderArcAngle, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_CylinderArcAngle, TEXT("ToolTip"), TEXT("Curvature of a cylindrical widget in degrees."));
				MetaData->SetValue(NewProp_GeometryMode, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_GeometryMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_GeometryMode, TEXT("ToolTip"), TEXT("Controls the geometry of the widget component. See EWidgetGeometryMode."));
				MetaData->SetValue(NewProp_LayerZOrder, TEXT("Category"), TEXT("Layers"));
				MetaData->SetValue(NewProp_LayerZOrder, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_LayerZOrder, TEXT("ToolTip"), TEXT("ZOrder the layer will be created on, note this only matters on the first time a new layer is created, subsequent additions to the same layer will use the initially defined ZOrder"));
				MetaData->SetValue(NewProp_SharedLayerName, TEXT("Category"), TEXT("Layers"));
				MetaData->SetValue(NewProp_SharedLayerName, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_SharedLayerName, TEXT("ToolTip"), TEXT("Layer Name the widget will live on"));
				MetaData->SetValue(NewProp_bEditTimeUsable, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bEditTimeUsable, TEXT("ToolTip"), TEXT("Allows the widget component to be used at editor time.  For use in the VR-Editor."));
				MetaData->SetValue(NewProp_bAddedToScreen, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaterialInstance, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaterialInstance, TEXT("ToolTip"), TEXT("The dynamic instance of the material that the render target is attached to"));
				MetaData->SetValue(NewProp_RenderTarget, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_RenderTarget, TEXT("ToolTip"), TEXT("The target to which the user widget is rendered"));
				MetaData->SetValue(NewProp_MaskedMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaskedMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for masked, one-sided widget components."));
				MetaData->SetValue(NewProp_MaskedMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaskedMaterial, TEXT("ToolTip"), TEXT("The material instance for masked widget components."));
				MetaData->SetValue(NewProp_OpaqueMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OpaqueMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for opaque, one-sided widget components"));
				MetaData->SetValue(NewProp_OpaqueMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OpaqueMaterial, TEXT("ToolTip"), TEXT("The material instance for opaque widget components"));
				MetaData->SetValue(NewProp_TranslucentMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TranslucentMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for translucent, one-sided widget components"));
				MetaData->SetValue(NewProp_TranslucentMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TranslucentMaterial, TEXT("ToolTip"), TEXT("The material instance for translucent widget components"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("The body setup of the displayed quad"));
				MetaData->SetValue(NewProp_Widget, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Widget, TEXT("ToolTip"), TEXT("The User Widget object displayed and managed by this component"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("ToolTip"), TEXT("Should the component tick the widget when it's off screen?"));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("ToolTip"), TEXT("Is the component visible from behind?"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("The blend mode for the widget."));
				MetaData->SetValue(NewProp_OpacityFromTexture, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_OpacityFromTexture, TEXT("ClampMax"), TEXT("1.000000"));
				MetaData->SetValue(NewProp_OpacityFromTexture, TEXT("ClampMin"), TEXT("0.000000"));
				MetaData->SetValue(NewProp_OpacityFromTexture, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OpacityFromTexture, TEXT("ToolTip"), TEXT("Sets the amount of opacity from the widget's UI texture to use when rendering the translucent or masked UI to the viewport (0.0-1.0)"));
				MetaData->SetValue(NewProp_TintColorAndOpacity, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TintColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TintColorAndOpacity, TEXT("ToolTip"), TEXT("Tint color and opacity for this component"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The background color of the component"));
				MetaData->SetValue(NewProp_OwnerPlayer, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OwnerPlayer, TEXT("ToolTip"), TEXT("The owner player for a widget component, if this widget is drawn on the screen, this controls\nwhat player's screen it appears on for split screen, if not set, users player 0."));
				MetaData->SetValue(NewProp_bWindowFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bWindowFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bWindowFocusable, TEXT("ToolTip"), TEXT("Is the virtual window created to host the widget focusable?"));
				MetaData->SetValue(NewProp_bReceiveHardwareInput, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bReceiveHardwareInput, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bReceiveHardwareInput, TEXT("ToolTip"), TEXT("Register with the viewport for hardware input from the true mouse and keyboard.  These widgets\nwill more or less react like regular 2D widgets in the viewport, e.g. they can and will steal focus\nfrom the viewport.\n\nWARNING: If you are making a VR game, definitely do not change this to true.  This option should ONLY be used\nif you're making what would otherwise be a normal menu for a game, just in 3D.  If you also need the game to\nremain responsive and for the player to be able to interact with UI and move around the world (such as a keypad on a door),\nuse the WidgetInteractionComponent instead."));
				MetaData->SetValue(NewProp_Pivot, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ToolTip"), TEXT("The Alignment/Pivot point that the widget is placed at relative to the position."));
				MetaData->SetValue(NewProp_bDrawAtDesiredSize, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_bDrawAtDesiredSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bDrawAtDesiredSize, TEXT("ToolTip"), TEXT("Causes the render target to automatically match the desired size.\n\nWARNING: If you change this every frame, it will be very expensive.  If you need\n   that effect, you should keep the outer widget's sized locked and dynamically\n   scale or resize some inner widget."));
				MetaData->SetValue(NewProp_CurrentDrawSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_CurrentDrawSize, TEXT("ToolTip"), TEXT("The actual draw size, this changes based on DrawSize - or the desired size of the widget if\nbDrawAtDesiredSize is true."));
				MetaData->SetValue(NewProp_RedrawTime, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_RedrawTime, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_RedrawTime, TEXT("ToolTip"), TEXT("The time in between draws, if 0 - we would redraw every frame.  If 1, we would redraw every second.\nThis will work with bManuallyRedraw as well.  So you can say, manually redraw, but only redraw at this\nmaximum rate."));
				MetaData->SetValue(NewProp_bRedrawRequested, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bRedrawRequested, TEXT("ToolTip"), TEXT("Has anyone requested we redraw?"));
				MetaData->SetValue(NewProp_bManuallyRedraw, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_bManuallyRedraw, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bManuallyRedraw, TEXT("ToolTip"), TEXT("Should we wait to be told to redraw to actually draw?"));
				MetaData->SetValue(NewProp_DrawSize, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_DrawSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_DrawSize, TEXT("ToolTip"), TEXT("The size of the displayed quad."));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("ToolTip"), TEXT("The class of User Widget to create and display an instance of"));
				MetaData->SetValue(NewProp_Space, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_Space, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Space, TEXT("ToolTip"), TEXT("The coordinate space in which to render the widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetComponent(Z_Construct_UClass_UWidgetComponent, &UWidgetComponent::StaticClass, TEXT("UWidgetComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetComponent);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnHoveredWidgetChanged__DelegateSignature()
	{
		struct _Script_UMG_eventOnHoveredWidgetChanged_Parms
		{
			UWidgetComponent* WidgetComponent;
			UWidgetComponent* PreviousWidgetComponent;
		};
		UObject* Outer=Z_Construct_UPackage__Script_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnHoveredWidgetChanged__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnHoveredWidgetChanged_Parms));
			UProperty* NewProp_PreviousWidgetComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousWidgetComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PreviousWidgetComponent, _Script_UMG_eventOnHoveredWidgetChanged_Parms), 0x0010000000080080, Z_Construct_UClass_UWidgetComponent_NoRegister());
			UProperty* NewProp_WidgetComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidgetComponent, _Script_UMG_eventOnHoveredWidgetChanged_Parms), 0x0010000000080080, Z_Construct_UClass_UWidgetComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("TODO Come up with a better way to let people forward a lot of keyboard input without a bunch of glue"));
			MetaData->SetValue(NewProp_PreviousWidgetComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_WidgetComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_UMG_EWidgetInteractionSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetInteractionSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EWidgetInteractionSource"), 0, Get_Z_Construct_UEnum_UMG_EWidgetInteractionSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetInteractionSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetInteractionSource::World")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetInteractionSource::Mouse")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetInteractionSource::CenterScreen")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetInteractionSource::Custom")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EWidgetInteractionSource::EWidgetInteractionSource_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EWidgetInteractionSource");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("CenterScreen.ToolTip"), TEXT("Sends trace from the center of the first local player's screen."));
			MetaData->SetValue(ReturnEnum, TEXT("Custom.ToolTip"), TEXT("Sends traces from a custom location determined by the user.  Will use whatever\nFHitResult is set by the call to SetCustomHitResult."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Mouse.ToolTip"), TEXT("Sends traces from the mouse location of the first local player controller."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The interaction source for the widget interaction component, e.g. where do we try and\ntrace from to try to find a widget under a virtual pointer device."));
			MetaData->SetValue(ReturnEnum, TEXT("World.ToolTip"), TEXT("Sends traces from the world location and orientation of the interaction component."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetInteractionSource_CRC() { return 3420851079U; }
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_Get2DHitLocation()
	{
		struct WidgetInteractionComponent_eventGet2DHitLocation_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Get2DHitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(WidgetInteractionComponent_eventGet2DHitLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetInteractionComponent_eventGet2DHitLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the last hit location on the widget in 2D, local pixel units of the render target."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_GetHoveredWidgetComponent()
	{
		struct WidgetInteractionComponent_eventGetHoveredWidgetComponent_Parms
		{
			UWidgetComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHoveredWidgetComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetInteractionComponent_eventGetHoveredWidgetComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetInteractionComponent_eventGetHoveredWidgetComponent_Parms), 0x0010000000080588, Z_Construct_UClass_UWidgetComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the currently hovered widget component."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_GetLastHitResult()
	{
		struct WidgetInteractionComponent_eventGetLastHitResult_Parms
		{
			FHitResult ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLastHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetInteractionComponent_eventGetLastHitResult_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetInteractionComponent_eventGetLastHitResult_Parms), 0x0010008008000582, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the last hit result generated by the component.  Returns the custom hit result if that was set."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverFocusableWidget()
	{
		struct WidgetInteractionComponent_eventIsOverFocusableWidget_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsOverFocusableWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetInteractionComponent_eventIsOverFocusableWidget_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventIsOverFocusableWidget_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventIsOverFocusableWidget_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventIsOverFocusableWidget_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a widget under the hit result is focusable.  e.g. Slate widgets that\nreturn true for SupportsKeyboardFocus()."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverHitTestVisibleWidget()
	{
		struct WidgetInteractionComponent_eventIsOverHitTestVisibleWidget_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsOverHitTestVisibleWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetInteractionComponent_eventIsOverHitTestVisibleWidget_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventIsOverHitTestVisibleWidget_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventIsOverHitTestVisibleWidget_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventIsOverHitTestVisibleWidget_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a widget under the hit result is has a visibility that makes it hit test\nvisible.  e.g. Slate widgets that return true for GetVisibility().IsHitTestVisible()."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_IsOverInteractableWidget()
	{
		struct WidgetInteractionComponent_eventIsOverInteractableWidget_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsOverInteractableWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetInteractionComponent_eventIsOverInteractableWidget_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventIsOverInteractableWidget_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventIsOverInteractableWidget_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventIsOverInteractableWidget_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a widget under the hit result is interactive.  e.g. Slate widgets\nthat return true for IsInteractable()."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressAndReleaseKey()
	{
		struct WidgetInteractionComponent_eventPressAndReleaseKey_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PressAndReleaseKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventPressAndReleaseKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventPressAndReleaseKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventPressAndReleaseKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventPressAndReleaseKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, WidgetInteractionComponent_eventPressAndReleaseKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Does both the press and release of a simulated keyboard key."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressKey()
	{
		struct WidgetInteractionComponent_eventPressKey_Parms
		{
			FKey Key;
			bool bRepeat;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PressKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventPressKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventPressKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventPressKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventPressKey_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRepeat, WidgetInteractionComponent_eventPressKey_Parms, bool);
			UProperty* NewProp_bRepeat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRepeat"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRepeat, WidgetInteractionComponent_eventPressKey_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bRepeat, WidgetInteractionComponent_eventPressKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, WidgetInteractionComponent_eventPressKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRepeat"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Press a key as if it had come from the keyboard.  Avoid using this for 'a-z|A-Z', things like\nthe Editable Textbox in Slate expect OnKeyChar to be called to signal a specific character being\nsend to the widget.  So for those cases you should use SendKeyChar."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_PressPointerKey()
	{
		struct WidgetInteractionComponent_eventPressPointerKey_Parms
		{
			FKey Key;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PressPointerKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventPressPointerKey_Parms));
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, WidgetInteractionComponent_eventPressPointerKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Presses a key as if the mouse/pointer were the source of it.  Normally you would just use\nLeft/Right mouse button for the Key.  However - advanced uses could also be imagined where you\nsend other keys to signal widgets to take special actions if they're under the cursor."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ReleaseKey()
	{
		struct WidgetInteractionComponent_eventReleaseKey_Parms
		{
			FKey Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventReleaseKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventReleaseKey_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventReleaseKey_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventReleaseKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, WidgetInteractionComponent_eventReleaseKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Releases a key as if it had been released by the keyboard."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ReleasePointerKey()
	{
		struct WidgetInteractionComponent_eventReleasePointerKey_Parms
		{
			FKey Key;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleasePointerKey"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventReleasePointerKey_Parms));
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, WidgetInteractionComponent_eventReleasePointerKey_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Releases a key as if the mouse/pointer were the source of it.  Normally you would just use\nLeft/Right mouse button for the Key.  However - advanced uses could also be imagined where you\nsend other keys to signal widgets to take special actions if they're under the cursor."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_ScrollWheel()
	{
		struct WidgetInteractionComponent_eventScrollWheel_Parms
		{
			float ScrollDelta;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollWheel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventScrollWheel_Parms));
			UProperty* NewProp_ScrollDelta = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScrollDelta"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScrollDelta, WidgetInteractionComponent_eventScrollWheel_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sends a scroll wheel event to the widget under the last hit result."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_SendKeyChar()
	{
		struct WidgetInteractionComponent_eventSendKeyChar_Parms
		{
			FString Characters;
			bool bRepeat;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendKeyChar"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(WidgetInteractionComponent_eventSendKeyChar_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetInteractionComponent_eventSendKeyChar_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetInteractionComponent_eventSendKeyChar_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetInteractionComponent_eventSendKeyChar_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRepeat, WidgetInteractionComponent_eventSendKeyChar_Parms, bool);
			UProperty* NewProp_bRepeat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRepeat"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRepeat, WidgetInteractionComponent_eventSendKeyChar_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bRepeat, WidgetInteractionComponent_eventSendKeyChar_Parms), sizeof(bool), true);
			UProperty* NewProp_Characters = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Characters"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Characters, WidgetInteractionComponent_eventSendKeyChar_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRepeat"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Transmits a list of characters to a widget by simulating a OnKeyChar event for each key listed in\nthe string."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetInteractionComponent_SetCustomHitResult()
	{
		struct WidgetInteractionComponent_eventSetCustomHitResult_Parms
		{
			FHitResult HitResult;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetInteractionComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCustomHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(WidgetInteractionComponent_eventSetCustomHitResult_Parms));
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HitResult, WidgetInteractionComponent_eventSetCustomHitResult_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set custom hit result.  This is only taken into account if InteractionSource is set to EWidgetInteractionSource::Custom."));
			MetaData->SetValue(NewProp_HitResult, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetInteractionComponent_NoRegister()
	{
		return UWidgetInteractionComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetInteractionComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetInteractionComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_Get2DHitLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_GetHoveredWidgetComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_GetLastHitResult());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverFocusableWidget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverHitTestVisibleWidget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverInteractableWidget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_PressAndReleaseKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_PressKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_PressPointerKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_ReleaseKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_ReleasePointerKey());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_ScrollWheel());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_SendKeyChar());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetInteractionComponent_SetCustomHitResult());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ArrowComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArrowComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ArrowComponent, UWidgetInteractionComponent), 0x0010000800080008, Z_Construct_UClass_UArrowComponent_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsHoveredWidgetHitTestVisible, UWidgetInteractionComponent, bool);
				UProperty* NewProp_bIsHoveredWidgetHitTestVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsHoveredWidgetHitTestVisible"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsHoveredWidgetHitTestVisible, UWidgetInteractionComponent), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bIsHoveredWidgetHitTestVisible, UWidgetInteractionComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsHoveredWidgetFocusable, UWidgetInteractionComponent, bool);
				UProperty* NewProp_bIsHoveredWidgetFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsHoveredWidgetFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsHoveredWidgetFocusable, UWidgetInteractionComponent), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bIsHoveredWidgetFocusable, UWidgetInteractionComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsHoveredWidgetInteractable, UWidgetInteractionComponent, bool);
				UProperty* NewProp_bIsHoveredWidgetInteractable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsHoveredWidgetInteractable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsHoveredWidgetInteractable, UWidgetInteractionComponent), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bIsHoveredWidgetInteractable, UWidgetInteractionComponent), sizeof(bool), true);
				UProperty* NewProp_LastHitResult = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LastHitResult, UWidgetInteractionComponent), 0x0020088000002000, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_HoveredWidgetComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HoveredWidgetComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(HoveredWidgetComponent, UWidgetInteractionComponent), 0x0020080000082008, Z_Construct_UClass_UWidgetComponent_NoRegister());
				UProperty* NewProp_LastLocalHitLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastLocalHitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LastLocalHitLocation, UWidgetInteractionComponent), 0x0020080000002000, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_LocalHitLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalHitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocalHitLocation, UWidgetInteractionComponent), 0x0020080000002000, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_CustomHitResult = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomHitResult, UWidgetInteractionComponent), 0x0020088000002000, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_DebugColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebugColor, UWidgetInteractionComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowDebug, UWidgetInteractionComponent, bool);
				UProperty* NewProp_bShowDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowDebug, UWidgetInteractionComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShowDebug, UWidgetInteractionComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableHitTesting, UWidgetInteractionComponent, bool);
				UProperty* NewProp_bEnableHitTesting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableHitTesting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableHitTesting, UWidgetInteractionComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnableHitTesting, UWidgetInteractionComponent), sizeof(bool), true);
				UProperty* NewProp_InteractionSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InteractionSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(InteractionSource, UWidgetInteractionComponent), 0x0010000000000005, Z_Construct_UEnum_UMG_EWidgetInteractionSource());
				UProperty* NewProp_InteractionSource_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_InteractionSource, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_InteractionDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InteractionDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InteractionDistance, UWidgetInteractionComponent), 0x0010000000000005);
				UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, UWidgetInteractionComponent), 0x0010000000000005, Z_Construct_UEnum_Engine_ECollisionChannel());
				UProperty* NewProp_PointerIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PointerIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PointerIndex, UWidgetInteractionComponent), 0x0011000000000005);
				UProperty* NewProp_VirtualUserIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VirtualUserIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VirtualUserIndex, UWidgetInteractionComponent), 0x0011000000000005);
				UProperty* NewProp_OnHoveredWidgetChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnHoveredWidgetChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnHoveredWidgetChanged, UWidgetInteractionComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnHoveredWidgetChanged__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_Get2DHitLocation(), "Get2DHitLocation"); // 162676800
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_GetHoveredWidgetComponent(), "GetHoveredWidgetComponent"); // 3216487338
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_GetLastHitResult(), "GetLastHitResult"); // 179860590
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverFocusableWidget(), "IsOverFocusableWidget"); // 939166486
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverHitTestVisibleWidget(), "IsOverHitTestVisibleWidget"); // 1488836842
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_IsOverInteractableWidget(), "IsOverInteractableWidget"); // 2678186197
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_PressAndReleaseKey(), "PressAndReleaseKey"); // 683751967
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_PressKey(), "PressKey"); // 388857109
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_PressPointerKey(), "PressPointerKey"); // 2466779367
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_ReleaseKey(), "ReleaseKey"); // 1898971099
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_ReleasePointerKey(), "ReleasePointerKey"); // 2819906178
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_ScrollWheel(), "ScrollWheel"); // 1847348090
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_SendKeyChar(), "SendKeyChar"); // 303492398
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetInteractionComponent_SetCustomHitResult(), "SetCustomHitResult"); // 1461976779
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("UserInterface"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is a component to allow interaction with the Widget Component.  This class allows you to\nsimulate a sort of laser pointer device, when it hovers over widgets it will send the basic signals\nto show as if the mouse were moving on top of it.  You'll then tell the component to simulate key presses,\nlike Left Mouse, down and up, to simulate a mouse click."));
				MetaData->SetValue(NewProp_ArrowComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ArrowComponent, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_ArrowComponent, TEXT("ToolTip"), TEXT("The arrow component we show at editor time."));
				MetaData->SetValue(NewProp_bIsHoveredWidgetHitTestVisible, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_bIsHoveredWidgetHitTestVisible, TEXT("ToolTip"), TEXT("Are we hovered over a widget that is hit test visible?"));
				MetaData->SetValue(NewProp_bIsHoveredWidgetFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_bIsHoveredWidgetFocusable, TEXT("ToolTip"), TEXT("Are we hovering over any focusable widget?"));
				MetaData->SetValue(NewProp_bIsHoveredWidgetInteractable, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_bIsHoveredWidgetInteractable, TEXT("ToolTip"), TEXT("Are we hovering over any interactive widgets."));
				MetaData->SetValue(NewProp_LastHitResult, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_LastHitResult, TEXT("ToolTip"), TEXT("The last hit result we used."));
				MetaData->SetValue(NewProp_HoveredWidgetComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_HoveredWidgetComponent, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_HoveredWidgetComponent, TEXT("ToolTip"), TEXT("The widget component we're currently hovering over."));
				MetaData->SetValue(NewProp_LastLocalHitLocation, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_LastLocalHitLocation, TEXT("ToolTip"), TEXT("The last 2D location on the widget component that was hit."));
				MetaData->SetValue(NewProp_LocalHitLocation, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_LocalHitLocation, TEXT("ToolTip"), TEXT("The 2D location on the widget component that was hit."));
				MetaData->SetValue(NewProp_CustomHitResult, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_CustomHitResult, TEXT("ToolTip"), TEXT("Stores the custom hit result set by the player."));
				MetaData->SetValue(NewProp_DebugColor, TEXT("Category"), TEXT("Debugging"));
				MetaData->SetValue(NewProp_DebugColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_DebugColor, TEXT("ToolTip"), TEXT("Determines the color of the debug lines."));
				MetaData->SetValue(NewProp_bShowDebug, TEXT("Category"), TEXT("Debugging"));
				MetaData->SetValue(NewProp_bShowDebug, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_bShowDebug, TEXT("ToolTip"), TEXT("Shows some debugging lines and a hit sphere to help you debug interactions."));
				MetaData->SetValue(NewProp_bEnableHitTesting, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bEnableHitTesting, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_bEnableHitTesting, TEXT("ToolTip"), TEXT("Should the interaction component perform hit testing (Automatic or Custom) and attempt to\nsimulate hover - if you were going to emulate a keyboard you would want to turn this option off\nif the virtual keyboard was separate from the virtual pointer device and used a second interaction\ncomponent."));
				MetaData->SetValue(NewProp_InteractionSource, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_InteractionSource, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_InteractionSource, TEXT("ToolTip"), TEXT("Should we project from the world location of the component?  If you set this to false, you'll\nneed to call SetCustomHitResult(), and provide the result of a custom hit test form whatever\nlocation you wish."));
				MetaData->SetValue(NewProp_InteractionDistance, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_InteractionDistance, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_InteractionDistance, TEXT("ToolTip"), TEXT("The distance in game units the component should be able to interact with a widget component."));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("ToolTip"), TEXT("The trace channel to use when tracing for widget components in the world."));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("ToolTip"), TEXT("Each user virtual controller or virtual finger tips being simulated should use a different pointer index."));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("UIMax"), TEXT("9"));
				MetaData->SetValue(NewProp_PointerIndex, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VirtualUserIndex, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_VirtualUserIndex, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VirtualUserIndex, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_VirtualUserIndex, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_VirtualUserIndex, TEXT("ToolTip"), TEXT("Represents the Virtual User Index.  Each virtual user should be represented by a different\nindex number, this will maintain separate capture and focus states for them.  Each\ncontroller or finger-tip should get a unique PointerIndex."));
				MetaData->SetValue(NewProp_OnHoveredWidgetChanged, TEXT("Category"), TEXT("Interaction|Event"));
				MetaData->SetValue(NewProp_OnHoveredWidgetChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetInteractionComponent.h"));
				MetaData->SetValue(NewProp_OnHoveredWidgetChanged, TEXT("ToolTip"), TEXT("Called when the hovered Widget Component changes.  The interaction component functions at the Slate\nlevel - so it's unable to report anything about what UWidget is under the hit result."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetInteractionComponent(Z_Construct_UClass_UWidgetInteractionComponent, &UWidgetInteractionComponent::StaticClass, TEXT("UWidgetInteractionComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetInteractionComponent);
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI()
	{
		struct WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms
		{
			APlayerController* Player;
			float LocationX;
			float LocationY;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMousePositionScaledByDPI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422409, 65535, sizeof(WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LocationY, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0010000000000180);
			UProperty* NewProp_LocationX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LocationX, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0010000000000180);
			UProperty* NewProp_Player = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Player"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Player, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the mouse position of the player controller, scaled by the DPI.  If you're trying to go from raw mouse screenspace coordinates\nto fullscreen widget space, you'll need to transform the mouse into DPI Scaled space.  This function performs that scaling.\n\nMousePositionScaledByDPI = MousePosition * (1 / ViewportScale)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale()
	{
		struct WidgetLayoutLibrary_eventGetViewportScale_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetLayoutLibrary_eventGetViewportScale_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventGetViewportScale_Parms), 0x0010000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventGetViewportScale_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current DPI Scale being applied to the viewport and all the Widgets."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize()
	{
		struct WidgetLayoutLibrary_eventGetViewportSize_Parms
		{
			UObject* WorldContextObject;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822409, 65535, sizeof(WidgetLayoutLibrary_eventGetViewportSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventGetViewportSize_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventGetViewportSize_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the size of the game viewport."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition()
	{
		struct WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms
		{
			APlayerController* PlayerController;
			FVector WorldLocation;
			FVector2D ScreenPosition;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectWorldLocationToWidgetPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22409, 65535, sizeof(WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), sizeof(bool), true);
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0010000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the projected world to screen position for a player, then converts it into a widget\nposition, which takes into account any quality scaling.\n@param PlayerController The player controller to project the position in the world to their screen.\n@param WorldLocation The world location to project from.\n@param ScreenPosition The position in the viewport with quality scale removed and DPI scale remove.\n@return true if the position projects onto the screen."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets()
	{
		struct WidgetLayoutLibrary_eventRemoveAllWidgets_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveAllWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetLayoutLibrary_eventRemoveAllWidgets_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventRemoveAllWidgets_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes all widgets from the viewport."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsBorderSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsBorderSlot_Parms
		{
			UWidget* Widget;
			UBorderSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsBorderSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsBorderSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsBorderSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UBorderSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsBorderSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Border Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a border panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms
		{
			UWidget* Widget;
			UCanvasPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsCanvasSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UCanvasPanelSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Canvas Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a canvas panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsGridSlot_Parms
		{
			UWidget* Widget;
			UGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsGridSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsGridSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsGridSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UGridSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsGridSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Grid Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a grid panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms
		{
			UWidget* Widget;
			UHorizontalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsHorizontalBoxSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UHorizontalBoxSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Horizontal Box Slot, allowing you to manipulate its information.\n@param Widget The child widget of a Horizontal Box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms
		{
			UWidget* Widget;
			UOverlaySlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsOverlaySlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms), 0x0010000000000580, Z_Construct_UClass_UOverlaySlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Overlay Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a overlay panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms
		{
			UWidget* Widget;
			UUniformGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsUniformGridSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UUniformGridSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Uniform Grid Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a uniform grid panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms
		{
			UWidget* Widget;
			UVerticalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsVerticalBoxSlot"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms), 0x0010000000000580, Z_Construct_UClass_UVerticalBoxSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms), 0x0010000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Vertical Box Slot, allowing you to manipulate its information.\n@param Widget The child widget of a Vertical Box."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetLayoutLibrary_NoRegister()
	{
		return UWidgetLayoutLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetLayoutLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetLayoutLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsBorderSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI(), "GetMousePositionScaledByDPI"); // 2352237762
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale(), "GetViewportScale"); // 761618978
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize(), "GetViewportSize"); // 2189768419
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition(), "ProjectWorldLocationToWidgetPosition"); // 1174876686
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets(), "RemoveAllWidgets"); // 553209596
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsBorderSlot(), "SlotAsBorderSlot"); // 3081446254
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot(), "SlotAsCanvasSlot"); // 3284004489
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot(), "SlotAsGridSlot"); // 349731648
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot(), "SlotAsHorizontalBoxSlot"); // 4093140227
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot(), "SlotAsOverlaySlot"); // 3388355583
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot(), "SlotAsUniformGridSlot"); // 3003407474
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot(), "SlotAsVerticalBoxSlot"); // 4177935036
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetLayoutLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetLayoutLibrary(Z_Construct_UClass_UWidgetLayoutLibrary, &UWidgetLayoutLibrary::StaticClass, TEXT("UWidgetLayoutLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetLayoutLibrary);
	UScriptStruct* Z_Construct_UScriptStruct_FWidgetNavigationData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("WidgetNavigationData"), sizeof(FWidgetNavigationData), Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetNavigationData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWidgetNavigationData>, EStructFlags(0x00000201));
			UProperty* NewProp_WidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WidgetToFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(WidgetToFocus, FWidgetNavigationData), 0x0010000000000015);
			UProperty* NewProp_Rule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rule"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Rule, FWidgetNavigationData), 0x0010000000000015, Z_Construct_UEnum_SlateCore_EUINavigationRule());
			UProperty* NewProp_Rule_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Rule, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
			MetaData->SetValue(NewProp_WidgetToFocus, TEXT("Category"), TEXT("Navigation"));
			MetaData->SetValue(NewProp_WidgetToFocus, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
			MetaData->SetValue(NewProp_Rule, TEXT("Category"), TEXT("Navigation"));
			MetaData->SetValue(NewProp_Rule, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC() { return 3500800477U; }
	UClass* Z_Construct_UClass_UWidgetNavigation_NoRegister()
	{
		return UWidgetNavigation::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetNavigation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetNavigation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Previous = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Previous"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Previous, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Next = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Next"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Next, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Right"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Right, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Left = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Left"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Left, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Down = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Down"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Down, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Up = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Up"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Up, UWidgetNavigation), 0x0010000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Previous, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Previous, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Previous, TEXT("ToolTip"), TEXT("Happens when the user presses Shift+Tab."));
				MetaData->SetValue(NewProp_Next, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Next, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Next, TEXT("ToolTip"), TEXT("Happens when the user presses Tab."));
				MetaData->SetValue(NewProp_Right, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Right, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Right, TEXT("ToolTip"), TEXT("Happens when the user presses right arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Left, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Left, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Left, TEXT("ToolTip"), TEXT("Happens when the user presses left arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Down, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Down, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Down, TEXT("ToolTip"), TEXT("Happens when the user presses down arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Up, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Up, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Up, TEXT("ToolTip"), TEXT("Happens when the user presses up arrow, joystick, d-pad."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetNavigation(Z_Construct_UClass_UWidgetNavigation, &UWidgetNavigation::StaticClass, TEXT("UWidgetNavigation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetNavigation);
	UClass* Z_Construct_UClass_UWidgetTree_NoRegister()
	{
		return UWidgetTree::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetTree()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_UMG();
			OuterClass = UWidgetTree::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AllWidgets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AllWidgets, UWidgetTree), 0x0020080000000000);
				UProperty* NewProp_AllWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllWidgets, TEXT("AllWidgets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_RootWidget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootWidget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RootWidget, UWidgetTree), 0x0010000000000000, Z_Construct_UClass_UWidget_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The widget tree manages the collection of widgets in a blueprint widget."));
				MetaData->SetValue(NewProp_AllWidgets, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(NewProp_RootWidget, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(NewProp_RootWidget, TEXT("ToolTip"), TEXT("The root widget of the tree"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetTree(Z_Construct_UClass_UWidgetTree, &UWidgetTree::StaticClass, TEXT("UWidgetTree"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetTree);
	UScriptStruct* Z_Construct_UScriptStruct_FMovieScene2DTransformSectionTemplate()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieScene2DTransformSectionTemplate_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MovieScene2DTransformSectionTemplate"), sizeof(FMovieScene2DTransformSectionTemplate), Get_Z_Construct_UScriptStruct_FMovieScene2DTransformSectionTemplate_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieScene2DTransformSectionTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMovieSceneEvalTemplate(), new UScriptStruct::TCppStructOps<FMovieScene2DTransformSectionTemplate>, EStructFlags(0x00000001));
			UProperty* NewProp_Shear = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Shear"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Shear, FMovieScene2DTransformSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			NewProp_Shear->ArrayDim = CPP_ARRAY_DIM(Shear, FMovieScene2DTransformSectionTemplate);
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Scale, FMovieScene2DTransformSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			NewProp_Scale->ArrayDim = CPP_ARRAY_DIM(Scale, FMovieScene2DTransformSectionTemplate);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FMovieScene2DTransformSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Translation, FMovieScene2DTransformSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			NewProp_Translation->ArrayDim = CPP_ARRAY_DIM(Translation, FMovieScene2DTransformSectionTemplate);
			UProperty* NewProp_PropertyData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PropertyData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PropertyData, FMovieScene2DTransformSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FMovieScenePropertySectionData());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
			MetaData->SetValue(NewProp_Shear, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
			MetaData->SetValue(NewProp_Shear, TEXT("ToolTip"), TEXT("Shear curve"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Scale curves"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation curve"));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("Translation curves"));
			MetaData->SetValue(NewProp_PropertyData, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieScene2DTransformTemplate.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieScene2DTransformSectionTemplate_CRC() { return 1958851427U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneMarginSectionTemplate()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneMarginSectionTemplate_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MovieSceneMarginSectionTemplate"), sizeof(FMovieSceneMarginSectionTemplate), Get_Z_Construct_UScriptStruct_FMovieSceneMarginSectionTemplate_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneMarginSectionTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMovieSceneEvalTemplate(), new UScriptStruct::TCppStructOps<FMovieSceneMarginSectionTemplate>, EStructFlags(0x00000001));
			UProperty* NewProp_BottomCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BottomCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BottomCurve, FMovieSceneMarginSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			UProperty* NewProp_RightCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RightCurve, FMovieSceneMarginSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			UProperty* NewProp_LeftCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LeftCurve, FMovieSceneMarginSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			UProperty* NewProp_TopCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TopCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TopCurve, FMovieSceneMarginSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FRichCurve());
			UProperty* NewProp_PropertyData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PropertyData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PropertyData, FMovieSceneMarginSectionTemplate), 0x0040000000000000, Z_Construct_UScriptStruct_FMovieScenePropertySectionData());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
			MetaData->SetValue(NewProp_BottomCurve, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
			MetaData->SetValue(NewProp_RightCurve, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
			MetaData->SetValue(NewProp_LeftCurve, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
			MetaData->SetValue(NewProp_TopCurve, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
			MetaData->SetValue(NewProp_PropertyData, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneMarginTemplate.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneMarginSectionTemplate_CRC() { return 1111084108U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneWidgetMaterialSectionTemplate()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneWidgetMaterialSectionTemplate_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MovieSceneWidgetMaterialSectionTemplate"), sizeof(FMovieSceneWidgetMaterialSectionTemplate), Get_Z_Construct_UScriptStruct_FMovieSceneWidgetMaterialSectionTemplate_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneWidgetMaterialSectionTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMovieSceneParameterSectionTemplate(), new UScriptStruct::TCppStructOps<FMovieSceneWidgetMaterialSectionTemplate>, EStructFlags(0x00000001));
			UProperty* NewProp_BrushPropertyNamePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BrushPropertyNamePath"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BrushPropertyNamePath, FMovieSceneWidgetMaterialSectionTemplate), 0x0040000000000000);
			UProperty* NewProp_BrushPropertyNamePath_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BrushPropertyNamePath, TEXT("BrushPropertyNamePath"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneWidgetMaterialTemplate.h"));
			MetaData->SetValue(NewProp_BrushPropertyNamePath, TEXT("ModuleRelativePath"), TEXT("Private/Animation/MovieSceneWidgetMaterialTemplate.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneWidgetMaterialSectionTemplate_CRC() { return 3730764607U; }
	UPackage* Z_Construct_UPackage__Script_UMG()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/UMG")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x22628C0F;
			Guid.B = 0x6F392ED8;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnConstructEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnInputAction__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UInputKeySelector_OnKeySelected__DelegateSignature();
			Z_Construct_UDelegateFunction_UInputKeySelector_OnIsSelectingKeyChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnControllerCaptureBeginEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnControllerCaptureEndEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnHoveredWidgetChanged__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
