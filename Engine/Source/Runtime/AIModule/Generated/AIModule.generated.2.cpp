// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "AIModule.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode2AIModule() {}
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTaskResource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	GAMEPLAYTASKS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayResourceSet();
	ENGINE_API class UClass* Z_Construct_UClass_AController();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTasksComponent_NoRegister();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTaskOwnerInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEndPlayReason();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTaskResource();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	GAMEPLAYTASKS_API class UClass* Z_Construct_UClass_UGameplayTask();
	GAMEPLAYTASKS_API class UFunction* Z_Construct_UDelegateFunction_UGameplayTask_GenericGameplayTaskDelegate__DelegateSignature();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditedDocumentInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagContainer();
	GAMEPLAYTAGS_API class UEnum* Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETraceTypeQuery();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	GAMEPLAYTAGS_API class UScriptStruct* Z_Construct_UScriptStruct_FGameplayTagQuery();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceMask();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent_NoRegister();

	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAILockSource();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAIRequestPriority();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnActionEventType();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnActionResult();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnActionAbortState();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAIOptionFlag();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIMoveRequest();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIRequestID();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResourceInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResourceInterface();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathFollowingRequestResult();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathFollowingAction();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathFollowingResult();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathFollowingStatus();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPathFollowingComponent_GetPathActionType();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPathFollowingComponent_GetPathDestination();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPathFollowingComponent_OnActorBump();
	AIMODULE_API class UClass* Z_Construct_UClass_UPathFollowingComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPathFollowingComponent();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_AIModule_OAISimpleDelegate__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIAsyncTaskBlueprintProxy_OnMoveCompleted();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIAsyncTaskBlueprintProxy_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIAsyncTaskBlueprintProxy();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_CreateMoveToProxyObject();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_GetAIController();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_GetBlackboard();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_IsValidAIDirection();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_IsValidAILocation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_IsValidAIRotation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_LockAIResourcesWithAnimation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_SendAIMessage();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_SpawnAIFromClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIBlueprintHelperLibrary_UnlockAIResourcesWithAnimation();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIBlueprintHelperLibrary_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIBlueprintHelperLibrary();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionListenerInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionListenerInterface();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_ETeamAttitude();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FGenericTeamId();
	AIMODULE_API class UClass* Z_Construct_UClass_UGenericTeamAgentInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UGenericTeamAgentInterface();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_AIModule_AIMoveCompletedSignature__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_ClaimTaskResource();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetAIPerceptionComponent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetFocalPoint();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetFocalPointOnActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetFocusActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetImmediateMoveDestination();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetMoveStatus();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_GetPathFollowingComponent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_HasPartialPath();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_K2_ClearFocus();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_K2_SetFocalPoint();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_K2_SetFocus();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_MoveToActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_MoveToLocation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_OnGameplayTaskResourcesClaimed();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_OnPossess();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_OnUnpossess();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_OnUsingBlackBoard();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_RunBehaviorTree();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_SetMoveBlockDetection();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_UnclaimTaskResource();
	AIMODULE_API class UFunction* Z_Construct_UFunction_AAIController_UseBlackboard();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController();
	AIMODULE_API class UClass* Z_Construct_UClass_ADetourCrowdAIController_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_ADetourCrowdAIController();
	AIMODULE_API class UClass* Z_Construct_UClass_AGridPathAIController_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_AGridPathAIController();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderBoolValue();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderFloatValue();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderIntValue();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderStructValue();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderTypedValue();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDataProviderValue();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider_QueryParams_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider_QueryParams();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider_Random_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIDataProvider_Random();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIHotSpotManager_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIHotSpotManager();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAISenseNotifyType();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAISenseAffiliationFilter();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIStimulus();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionSystem_GetSenseClassForStimulus();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionSystem_OnPerceptionStimuliSourceEndPlay();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionSystem_RegisterPerceptionStimuliSource();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionSystem_ReportEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionSystem_ReportPerceptionEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionSystem_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionSystem();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_AIModule_ActorPerceptionUpdatedDelegate__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_AIModule_PerceptionUpdatedDelegate__DelegateSignature();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorPerceptionBlueprintInfo();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_GetActorsPerception();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_GetCurrentlyPerceivedActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_GetKnownPerceivedActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_GetPerceivedActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_GetPerceivedHostileActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_OnOwnerEndPlay();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionComponent_RequestStimuliListenerUpdate();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionComponent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionStimuliSourceComponent_RegisterForSense();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionStimuliSourceComponent_RegisterWithPerceptionSystem();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionStimuliSourceComponent_UnregisterFromPerceptionSystem();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAIPerceptionStimuliSourceComponent_UnregisterFromSense();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionStimuliSourceComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIPerceptionStimuliSourceComponent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResource_Movement_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResource_Movement();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResource_Logic_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAIResource_Logic();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_GetAllListenerActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_GetAllListenerComponents();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_K2_OnNewPawn();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_OnListenerRegistered();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_OnListenerUnregistered();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_OnListenerUpdated();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Blueprint_OnUpdate();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Blueprint_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Blueprint();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDamageEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Damage_ReportDamageEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Damage_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Damage();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAINoiseEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Hearing_ReportNoiseEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Hearing_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Hearing();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIPredictionEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Prediction_RequestControllerPredictionEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISense_Prediction_RequestPawnPredictionEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Prediction_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Prediction();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAISightEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Sight_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Sight();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAITeamStimulusEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Team_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Team();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAITouchEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Touch_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISense_Touch();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseBlueprintListener_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseBlueprintListener();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Blueprint_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Blueprint();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Damage_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Damage();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Hearing_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Hearing();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Prediction_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Prediction();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Sight_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Sight();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Team_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Team();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Touch_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseConfig_Touch();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent_Damage_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent_Damage();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent_Hearing_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISenseEvent_Hearing();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISightTargetInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISightTargetInterface();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISystem_AIIgnorePlayers();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAISystem_AILoggingVerbose();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISystem_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAISystem();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAITaskPriority();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask_LockLogic_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask_LockLogic();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_AIModule_MoveTaskCompletedSignature__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UAITask_MoveTo_AIMoveTo();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask_MoveTo_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UAITask_MoveTo();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTFlowAbortMode();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTNodeResult();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlackboardKeySelector();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeTypes_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeTypes();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBrainComponent_RestartLogic();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBrainComponent_StopLogic();
	AIMODULE_API class UClass* Z_Construct_UClass_UBrainComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBrainComponent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBehaviorTreeComponent_AddCooldownTagDuration();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBehaviorTreeComponent_GetTagCooldownEndTime();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBehaviorTreeComponent_SetDynamicSubtree();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeComponent();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTNode_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTNode();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTDecoratorLogic();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTChildIndex();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBTCompositeChild();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBTDecoratorLogic();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTCompositeNode_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTCompositeNode();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTree_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTree();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeManager_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeManager();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_ETextKeyOperation();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EArithmeticKeyOperation();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBasicKeyOperation();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlackboardEntry();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardData_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardData();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_ClearValue();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetLocationFromEntry();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetRotationFromEntry();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsBool();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsEnum();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsFloat();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsInt();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsName();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsObject();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsRotator();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsString();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsVector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_IsVectorValueSet();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsBool();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsEnum();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsFloat();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsInt();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsName();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsObject();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsRotator();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsString();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsVector();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardComponent();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Bool_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Bool();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Class_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Class();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Enum_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Enum();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Float_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Float();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Int_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Int();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Name_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Name();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_NativeEnum_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_NativeEnum();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Object_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Object();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Rotator_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Rotator();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_String_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_String();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Vector_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardKeyType_Vector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValue();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValueAsVector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsBool();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsEnum();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsFloat();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsInt();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsName();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsObject();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsRotator();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsString();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsVector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetOwnerComponent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetOwnersBlackboard();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsBool();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsEnum();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsFloat();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsInt();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsName();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsObject();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsRotator();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsString();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsVector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_StartUsingExternalEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTFunctionLibrary_StopUsingExternalEvent();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTFunctionLibrary_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTFunctionLibrary();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTAuxiliaryNode_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTAuxiliaryNode();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_BlackboardBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_BlackboardBase();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTBlackboardRestart();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Blackboard_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Blackboard();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ConditionalLoop_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ConditionalLoop();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_IsAtLocation_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_IsAtLocation();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_IsBBEntryOfClass_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_IsBBEntryOfClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorExecutionActive();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorObserverActive();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheck();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheckAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinish();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinishAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStart();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStartAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivated();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivatedAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivated();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivatedAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTick();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTickAI();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_BlueprintBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_CheckGameplayTagsOnActor_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_CheckGameplayTagsOnActor();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_CompareBBEntries_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_CompareBBEntries();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ConeCheck_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ConeCheck();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Cooldown_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Cooldown();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPathExistanceQueryType();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_DoesPathExist_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_DoesPathExist();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ForceSuccess_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ForceSuccess();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_KeepInCone_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_KeepInCone();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Loop_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_Loop();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ReachedMoveGoal_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_ReachedMoveGoal();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_SetTagCooldown_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_SetTagCooldown();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_TagCooldown_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_TagCooldown();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_TimeLimit_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator_TimeLimit();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_BlackboardBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_BlackboardBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_DefaultFocus_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_DefaultFocus();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryTestClamping();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvDirection();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvOverlapShape();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTraceShape();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryTrace();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EAIParamType();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryParam();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryRunMode();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryStatus();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestScoreOperator();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestFilterOperator();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestCost();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestWeight();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestScoreEquation();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestFilterType();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestPurpose();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FAIDynamicParam();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryResult();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvOverlapData();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvTraceData();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvDirection();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvNamedValue();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTypes_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTypes();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_RunEQS_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_RunEQS();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_IsServiceActive();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivationAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivation();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivationAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStart();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStartAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTick();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTickAI();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTService_BlueprintBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_Selector_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_Selector();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_Sequence_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_Sequence();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EBTParallelMode();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_SimpleParallel_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTComposite_SimpleParallel();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTaskNode_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTaskNode();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlackboardBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlackboardBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MoveTo_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MoveTo();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MoveDirectlyToward_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MoveDirectlyToward();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RotateToFaceBBEntry_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RotateToFaceBBEntry();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunEQSQuery_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunEQSQuery();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_FinishAbort();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_FinishExecute();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskAborting();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskExecuting();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbort();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbortAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecute();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecuteAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTick();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTickAI();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessage();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessageWithId();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlueprintBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_GameplayTaskBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_GameplayTaskBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MakeNoise_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_MakeNoise();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PawnActionBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PawnActionBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PushPawnAction_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PushPawnAction();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PlayAnimation_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PlayAnimation();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PlaySound_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_PlaySound();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunBehavior_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunBehavior();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunBehaviorDynamic_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_RunBehaviorDynamic();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_SetTagCooldown_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_SetTagCooldown();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_Wait_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_Wait();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_WaitBlackboardTime_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_WaitBlackboardTime();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdAgentInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdAgentInterface();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FCrowdAvoidanceConfig();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdManager_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdManager();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQuery_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQuery();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideActorsSet();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideLocationsSet();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleLocation();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_BlueprintBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_Item_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_Item();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_Querier_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryContext_Querier();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryDebugHelpers_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryDebugHelpers();
	AIMODULE_API class UClass* Z_Construct_UClass_UEQSQueryResultSourceInterface_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEQSQueryResultSourceInterface();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetItemScore();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsActors();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsLocations();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_SetNamedParam();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_VectorBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_VectorBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_ActorBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_ActorBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Actor_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Actor();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Direction_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Direction();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Point_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryItemType_Point();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryInstanceCache();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryRequest();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryManager_RunEQSQuery();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryManager_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryManager();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryNode_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryNode();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_ActorsOfClass_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_ActorsOfClass();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedActor();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedVector();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_DoItemGeneration();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_GetQuerier();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Composite_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Composite();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_CurrentLocation_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_CurrentLocation();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Cone_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Cone();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Donut_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_Donut();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_OnCircle_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_OnCircle();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_PathingGrid_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryGenerator_PathingGrid();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEQSNormalizationType();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestDistance();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Distance_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Distance();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestDot();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Dot_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Dot();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_GameplayTags_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_GameplayTags();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Overlap_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Overlap();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvTestPathfinding();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Pathfinding_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Pathfinding();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_PathfindingBatch_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_PathfindingBatch();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Project_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Project();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Random_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Random();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Trace_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryTest_Trace();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryOption_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEnvQueryOption();
	AIMODULE_API class UClass* Z_Construct_UClass_UEQSRenderingComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UEQSRenderingComponent();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode();
	AIMODULE_API class UClass* Z_Construct_UClass_AEQSTestingPawn_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_AEQSTestingPawn();
	AIMODULE_API class UClass* Z_Construct_UClass_UNavFilter_AIControllerDefault_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UNavFilter_AIControllerDefault();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForBox();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForPoint();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UNavLocalGridManager_FindLocalNavigationGridPath();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UNavLocalGridManager_RemoveLocalNavigationGrid();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UNavLocalGridManager_SetLocalNavigationGridDensity();
	AIMODULE_API class UClass* Z_Construct_UClass_UNavLocalGridManager_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UNavLocalGridManager();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UCrowdFollowingComponent_SuspendCrowdSteering();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdFollowingComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UCrowdFollowingComponent();
	AIMODULE_API class UClass* Z_Construct_UClass_UGridPathFollowingComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UGridPathFollowingComponent();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnActionFailHandling();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnSubActionTriggeringPolicy();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_CreateActionInstance();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_Finish();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_GetActionPriority();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionFinished();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionPause();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionResume();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionStart();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionTick();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_BlueprintBase_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_BlueprintBase();
	AIMODULE_API class UEnum* Z_Construct_UEnum_AIModule_EPawnActionMoveMode();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Move_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Move();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Repeat_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Repeat();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Sequence_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Sequence();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Wait_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnAction_Wait();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FPawnActionStack();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FPawnActionEvent();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_AbortAction();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_ForceAbortAction();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_PerformAction();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_PushAction();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnActionsComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnActionsComponent();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionAngle();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionCosine();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetPeripheralVisionAngle();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetSensingInterval();
	AIMODULE_API class UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetSensingUpdatesEnabled();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnSensingComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UPawnSensingComponent();
	AIMODULE_API class UClass* Z_Construct_UClass_UVisualLoggerExtension_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UVisualLoggerExtension();
	AIMODULE_API class UPackage* Z_Construct_UPackage__Script_AIModule();
	UClass* Z_Construct_UClass_UBTCompositeNode_NoRegister()
	{
		return UBTCompositeNode::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTCompositeNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTCompositeNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Services = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Services"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Services, UBTCompositeNode), 0x0010000000000000);
				UProperty* NewProp_Services_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Services, TEXT("Services"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UBTService_NoRegister());
				UProperty* NewProp_Children = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Children"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Children, UBTCompositeNode), 0x0010000000000000);
				UProperty* NewProp_Children_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Children, TEXT("Children"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBTCompositeChild());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTCompositeNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTCompositeNode.h"));
				MetaData->SetValue(NewProp_Services, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTCompositeNode.h"));
				MetaData->SetValue(NewProp_Services, TEXT("ToolTip"), TEXT("service nodes"));
				MetaData->SetValue(NewProp_Children, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTCompositeNode.h"));
				MetaData->SetValue(NewProp_Children, TEXT("ToolTip"), TEXT("child nodes"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTCompositeNode(Z_Construct_UClass_UBTCompositeNode, &UBTCompositeNode::StaticClass, TEXT("UBTCompositeNode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTCompositeNode);
	UClass* Z_Construct_UClass_UBehaviorTree_NoRegister()
	{
		return UBehaviorTree::StaticClass();
	}
	UClass* Z_Construct_UClass_UBehaviorTree()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBehaviorTree::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RootDecoratorOps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootDecoratorOps"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RootDecoratorOps, UBehaviorTree), 0x0010000000000000);
				UProperty* NewProp_RootDecoratorOps_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RootDecoratorOps, TEXT("RootDecoratorOps"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBTDecoratorLogic());
				UProperty* NewProp_RootDecorators = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootDecorators"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RootDecorators, UBehaviorTree), 0x0010000000000000);
				UProperty* NewProp_RootDecorators_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RootDecorators, TEXT("RootDecorators"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UBTDecorator_NoRegister());
				UProperty* NewProp_BlackboardAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BlackboardAsset, UBehaviorTree), 0x0010000000000000, Z_Construct_UClass_UBlackboardData_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_LastEditedDocuments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastEditedDocuments"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LastEditedDocuments, UBehaviorTree), 0x0010000800000000);
				UProperty* NewProp_LastEditedDocuments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LastEditedDocuments, TEXT("LastEditedDocuments"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FEditedDocumentInfo());
				UProperty* NewProp_BTGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BTGraph"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BTGraph, UBehaviorTree), 0x0010000800000000, Z_Construct_UClass_UEdGraph_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_RootNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RootNode, UBehaviorTree), 0x0010000000000000, Z_Construct_UClass_UBTCompositeNode_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_RootDecoratorOps, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_RootDecoratorOps, TEXT("ToolTip"), TEXT("logic operators for root level decorators, used by subtrees"));
				MetaData->SetValue(NewProp_RootDecorators, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_RootDecorators, TEXT("ToolTip"), TEXT("root level decorators, used by subtrees"));
				MetaData->SetValue(NewProp_BlackboardAsset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_BlackboardAsset, TEXT("ToolTip"), TEXT("blackboard asset for this tree"));
				MetaData->SetValue(NewProp_LastEditedDocuments, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_LastEditedDocuments, TEXT("ToolTip"), TEXT("Info about the graphs we last edited"));
				MetaData->SetValue(NewProp_BTGraph, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_BTGraph, TEXT("ToolTip"), TEXT("Graph for Behavior Tree"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTree.h"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ToolTip"), TEXT("root node of loaded tree"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBehaviorTree(Z_Construct_UClass_UBehaviorTree, &UBehaviorTree::StaticClass, TEXT("UBehaviorTree"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBehaviorTree);
	UScriptStruct* Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BehaviorTreeTemplateInfo"), sizeof(FBehaviorTreeTemplateInfo), Get_Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BehaviorTreeTemplateInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBehaviorTreeTemplateInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Template = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Template"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Template, FBehaviorTreeTemplateInfo), 0x0010000000002000, Z_Construct_UClass_UBTCompositeNode_NoRegister());
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Asset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Asset, FBehaviorTreeTemplateInfo), 0x0010000000000000, Z_Construct_UClass_UBehaviorTree_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
			MetaData->SetValue(NewProp_Template, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
			MetaData->SetValue(NewProp_Template, TEXT("ToolTip"), TEXT("initialized template"));
			MetaData->SetValue(NewProp_Asset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
			MetaData->SetValue(NewProp_Asset, TEXT("ToolTip"), TEXT("behavior tree asset"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo_CRC() { return 4060707261U; }
	UClass* Z_Construct_UClass_UBehaviorTreeManager_NoRegister()
	{
		return UBehaviorTreeManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UBehaviorTreeManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBehaviorTreeManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActiveComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActiveComponents, UBehaviorTreeManager), 0x0020088000000008);
				UProperty* NewProp_ActiveComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveComponents, TEXT("ActiveComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
				UProperty* NewProp_LoadedTemplates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoadedTemplates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LoadedTemplates, UBehaviorTreeManager), 0x0020080000000000);
				UProperty* NewProp_LoadedTemplates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LoadedTemplates, TEXT("LoadedTemplates"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBehaviorTreeTemplateInfo());
				UProperty* NewProp_MaxDebuggerSteps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDebuggerSteps"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxDebuggerSteps, UBehaviorTreeManager), 0x0010000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BehaviorTreeManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
				MetaData->SetValue(NewProp_ActiveComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ActiveComponents, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
				MetaData->SetValue(NewProp_LoadedTemplates, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
				MetaData->SetValue(NewProp_LoadedTemplates, TEXT("ToolTip"), TEXT("initialized tree templates"));
				MetaData->SetValue(NewProp_MaxDebuggerSteps, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BehaviorTreeManager.h"));
				MetaData->SetValue(NewProp_MaxDebuggerSteps, TEXT("ToolTip"), TEXT("limit for recording execution steps for debugger"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBehaviorTreeManager(Z_Construct_UClass_UBehaviorTreeManager, &UBehaviorTreeManager::StaticClass, TEXT("UBehaviorTreeManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBehaviorTreeManager);
	UEnum* Z_Construct_UEnum_AIModule_ETextKeyOperation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_ETextKeyOperation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextKeyOperation"), 0, Get_Z_Construct_UEnum_AIModule_ETextKeyOperation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextKeyOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextKeyOperation::Equal")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextKeyOperation::NotEqual")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextKeyOperation::Contain")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextKeyOperation::NotContain")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextKeyOperation::ETextKeyOperation_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ETextKeyOperation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Contain.DisplayName"), TEXT("Contains"));
			MetaData->SetValue(ReturnEnum, TEXT("Equal.DisplayName"), TEXT("Is Equal To"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NotContain.DisplayName"), TEXT("Not Contains"));
			MetaData->SetValue(ReturnEnum, TEXT("NotEqual.DisplayName"), TEXT("Is Not Equal To"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_ETextKeyOperation_CRC() { return 3038121622U; }
	UEnum* Z_Construct_UEnum_AIModule_EArithmeticKeyOperation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EArithmeticKeyOperation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EArithmeticKeyOperation"), 0, Get_Z_Construct_UEnum_AIModule_EArithmeticKeyOperation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EArithmeticKeyOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::Equal")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::NotEqual")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::Less")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::LessOrEqual")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::Greater")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::GreaterOrEqual")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EArithmeticKeyOperation::EArithmeticKeyOperation_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EArithmeticKeyOperation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Equal.DisplayName"), TEXT("Is Equal To"));
			MetaData->SetValue(ReturnEnum, TEXT("Greater.DisplayName"), TEXT("Is Greater Than"));
			MetaData->SetValue(ReturnEnum, TEXT("GreaterOrEqual.DisplayName"), TEXT("Is Greater Than Or Equal To"));
			MetaData->SetValue(ReturnEnum, TEXT("Less.DisplayName"), TEXT("Is Less Than"));
			MetaData->SetValue(ReturnEnum, TEXT("LessOrEqual.DisplayName"), TEXT("Is Less Than Or Equal To"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NotEqual.DisplayName"), TEXT("Is Not Equal To"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EArithmeticKeyOperation_CRC() { return 3719072725U; }
	UEnum* Z_Construct_UEnum_AIModule_EBasicKeyOperation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EBasicKeyOperation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBasicKeyOperation"), 0, Get_Z_Construct_UEnum_AIModule_EBasicKeyOperation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBasicKeyOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBasicKeyOperation::Set")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBasicKeyOperation::NotSet")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBasicKeyOperation::EBasicKeyOperation_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EBasicKeyOperation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NotSet.DisplayName"), TEXT("Is Not Set"));
			MetaData->SetValue(ReturnEnum, TEXT("Set.DisplayName"), TEXT("Is Set"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EBasicKeyOperation_CRC() { return 3799207389U; }
	UClass* Z_Construct_UClass_UBlackboardKeyType_NoRegister()
	{
		return UBlackboardKeyType::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType(Z_Construct_UClass_UBlackboardKeyType, &UBlackboardKeyType::StaticClass, TEXT("UBlackboardKeyType"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType);
	UScriptStruct* Z_Construct_UScriptStruct_FBlackboardEntry()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FBlackboardEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BlackboardEntry"), sizeof(FBlackboardEntry), Get_Z_Construct_UScriptStruct_FBlackboardEntry_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BlackboardEntry"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBlackboardEntry>, EStructFlags(0x00000005));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInstanceSynced, FBlackboardEntry, uint8);
			UProperty* NewProp_bInstanceSynced = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInstanceSynced"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInstanceSynced, FBlackboardEntry), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInstanceSynced, FBlackboardEntry), sizeof(uint8), false);
			UProperty* NewProp_KeyType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("KeyType"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(KeyType, FBlackboardEntry), 0x0012000000080009, Z_Construct_UClass_UBlackboardKeyType_NoRegister());
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_EntryDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EntryDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(EntryDescription, FBlackboardEntry), 0x0010000800000001);
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_EntryName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EntryName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EntryName, FBlackboardEntry), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("blackboard entry definition"));
			MetaData->SetValue(NewProp_bInstanceSynced, TEXT("Category"), TEXT("Blackboard"));
			MetaData->SetValue(NewProp_bInstanceSynced, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
			MetaData->SetValue(NewProp_bInstanceSynced, TEXT("ToolTip"), TEXT("if set to true then this field will be synchronized across all instances of this blackboard"));
			MetaData->SetValue(NewProp_KeyType, TEXT("Category"), TEXT("Blackboard"));
			MetaData->SetValue(NewProp_KeyType, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_KeyType, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
			MetaData->SetValue(NewProp_KeyType, TEXT("ToolTip"), TEXT("key type and additional properties"));
			MetaData->SetValue(NewProp_EntryDescription, TEXT("Category"), TEXT("Blackboard"));
			MetaData->SetValue(NewProp_EntryDescription, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
			MetaData->SetValue(NewProp_EntryDescription, TEXT("ToolTip"), TEXT("Optional description to explain what this blackboard entry does."));
			MetaData->SetValue(NewProp_EntryName, TEXT("Category"), TEXT("Blackboard"));
			MetaData->SetValue(NewProp_EntryName, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBlackboardEntry_CRC() { return 3521682567U; }
	UClass* Z_Construct_UClass_UBlackboardData_NoRegister()
	{
		return UBlackboardData::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasSynchronizedKeys, UBlackboardData, uint8);
				UProperty* NewProp_bHasSynchronizedKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasSynchronizedKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasSynchronizedKeys, UBlackboardData), 0x0040000000000000, CPP_BOOL_PROPERTY_BITMASK(bHasSynchronizedKeys, UBlackboardData), sizeof(uint8), false);
				UProperty* NewProp_Keys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Keys, UBlackboardData), 0x0010008000000001);
				UProperty* NewProp_Keys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Keys, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FBlackboardEntry());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ParentKeys = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ParentKeys, UBlackboardData), 0x0010008800032001);
				UProperty* NewProp_ParentKeys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParentKeys, TEXT("ParentKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008800020000, Z_Construct_UScriptStruct_FBlackboardEntry());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, UBlackboardData), 0x0010000000000001, Z_Construct_UClass_UBlackboardData_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(NewProp_bHasSynchronizedKeys, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(NewProp_Keys, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_Keys, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(NewProp_Keys, TEXT("ToolTip"), TEXT("blackboard keys"));
				MetaData->SetValue(NewProp_ParentKeys, TEXT("Category"), TEXT("Parent"));
				MetaData->SetValue(NewProp_ParentKeys, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(NewProp_ParentKeys, TEXT("ToolTip"), TEXT("all keys inherited from parent chain"));
				MetaData->SetValue(NewProp_Parent, TEXT("Category"), TEXT("Parent"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardData.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ToolTip"), TEXT("parent blackboard (keys can be overridden)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardData(Z_Construct_UClass_UBlackboardData, &UBlackboardData::StaticClass, TEXT("UBlackboardData"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardData);
	UFunction* Z_Construct_UFunction_UBlackboardComponent_ClearValue()
	{
		struct BlackboardComponent_eventClearValue_Parms
		{
			FName KeyName;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventClearValue_Parms));
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventClearValue_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetLocationFromEntry()
	{
		struct BlackboardComponent_eventGetLocationFromEntry_Parms
		{
			FName KeyName;
			FVector ResultLocation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocationFromEntry"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(BlackboardComponent_eventGetLocationFromEntry_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlackboardComponent_eventGetLocationFromEntry_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlackboardComponent_eventGetLocationFromEntry_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlackboardComponent_eventGetLocationFromEntry_Parms), sizeof(bool), true);
			UProperty* NewProp_ResultLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ResultLocation, BlackboardComponent_eventGetLocationFromEntry_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetLocationFromEntry_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("return false if call failed (most probably no such entry in BB)"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetRotationFromEntry()
	{
		struct BlackboardComponent_eventGetRotationFromEntry_Parms
		{
			FName KeyName;
			FRotator ResultRotation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRotationFromEntry"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(BlackboardComponent_eventGetRotationFromEntry_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlackboardComponent_eventGetRotationFromEntry_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlackboardComponent_eventGetRotationFromEntry_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlackboardComponent_eventGetRotationFromEntry_Parms), sizeof(bool), true);
			UProperty* NewProp_ResultRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ResultRotation, BlackboardComponent_eventGetRotationFromEntry_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetRotationFromEntry_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("return false if call failed (most probably no such entry in BB)"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsBool()
	{
		struct BlackboardComponent_eventGetValueAsBool_Parms
		{
			FName KeyName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlackboardComponent_eventGetValueAsBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlackboardComponent_eventGetValueAsBool_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlackboardComponent_eventGetValueAsBool_Parms), sizeof(bool), true);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsBool_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsClass()
	{
		struct BlackboardComponent_eventGetValueAsClass_Parms
		{
			FName KeyName;
			UClass* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsClass_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsClass_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsEnum()
	{
		struct BlackboardComponent_eventGetValueAsEnum_Parms
		{
			FName KeyName;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsEnum_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsEnum_Parms), 0x0010000000000580);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsEnum_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsFloat()
	{
		struct BlackboardComponent_eventGetValueAsFloat_Parms
		{
			FName KeyName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsFloat_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsInt()
	{
		struct BlackboardComponent_eventGetValueAsInt_Parms
		{
			FName KeyName;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsInt_Parms), 0x0010000000000580);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsInt_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsName()
	{
		struct BlackboardComponent_eventGetValueAsName_Parms
		{
			FName KeyName;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsName_Parms), 0x0010000000000580);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsName_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsObject()
	{
		struct BlackboardComponent_eventGetValueAsObject_Parms
		{
			FName KeyName;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsObject_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsObject_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsRotator()
	{
		struct BlackboardComponent_eventGetValueAsRotator_Parms
		{
			FName KeyName;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(BlackboardComponent_eventGetValueAsRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsRotator_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsString()
	{
		struct BlackboardComponent_eventGetValueAsString_Parms
		{
			FName KeyName;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventGetValueAsString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsString_Parms), 0x0010000000000580);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsString_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_GetValueAsVector()
	{
		struct BlackboardComponent_eventGetValueAsVector_Parms
		{
			FName KeyName;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValueAsVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(BlackboardComponent_eventGetValueAsVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BlackboardComponent_eventGetValueAsVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventGetValueAsVector_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_IsVectorValueSet()
	{
		struct BlackboardComponent_eventIsVectorValueSet_Parms
		{
			FName KeyName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsVectorValueSet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(BlackboardComponent_eventIsVectorValueSet_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BlackboardComponent_eventIsVectorValueSet_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BlackboardComponent_eventIsVectorValueSet_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BlackboardComponent_eventIsVectorValueSet_Parms), sizeof(bool), true);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventIsVectorValueSet_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("Tooltip"), TEXT("If the vector value has been set (and not cleared), this function returns true (indicating that the value should be valid).  If it's not set, the vector value is invalid and this function will return false.  (Also returns false if the key specified does not hold a vector.)"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsBool()
	{
		struct BlackboardComponent_eventSetValueAsBool_Parms
		{
			FName KeyName;
			bool BoolValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BoolValue, BlackboardComponent_eventSetValueAsBool_Parms, bool);
			UProperty* NewProp_BoolValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoolValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BoolValue, BlackboardComponent_eventSetValueAsBool_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(BoolValue, BlackboardComponent_eventSetValueAsBool_Parms), sizeof(bool), true);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsBool_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsClass()
	{
		struct BlackboardComponent_eventSetValueAsClass_Parms
		{
			FName KeyName;
			UClass* ClassValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsClass_Parms));
			UProperty* NewProp_ClassValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClassValue"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ClassValue, BlackboardComponent_eventSetValueAsClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsClass_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsEnum()
	{
		struct BlackboardComponent_eventSetValueAsEnum_Parms
		{
			FName KeyName;
			uint8 EnumValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsEnum_Parms));
			UProperty* NewProp_EnumValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EnumValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EnumValue, BlackboardComponent_eventSetValueAsEnum_Parms), 0x0010000000000080);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsEnum_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsFloat()
	{
		struct BlackboardComponent_eventSetValueAsFloat_Parms
		{
			FName KeyName;
			float FloatValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsFloat_Parms));
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, BlackboardComponent_eventSetValueAsFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsFloat_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsInt()
	{
		struct BlackboardComponent_eventSetValueAsInt_Parms
		{
			FName KeyName;
			int32 IntValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsInt_Parms));
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, BlackboardComponent_eventSetValueAsInt_Parms), 0x0010000000000080);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsInt_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsName()
	{
		struct BlackboardComponent_eventSetValueAsName_Parms
		{
			FName KeyName;
			FName NameValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsName_Parms));
			UProperty* NewProp_NameValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NameValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NameValue, BlackboardComponent_eventSetValueAsName_Parms), 0x0010000000000080);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsName_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsObject()
	{
		struct BlackboardComponent_eventSetValueAsObject_Parms
		{
			FName KeyName;
			UObject* ObjectValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsObject_Parms));
			UProperty* NewProp_ObjectValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ObjectValue, BlackboardComponent_eventSetValueAsObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsObject_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsRotator()
	{
		struct BlackboardComponent_eventSetValueAsRotator_Parms
		{
			FName KeyName;
			FRotator VectorValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BlackboardComponent_eventSetValueAsRotator_Parms));
			UProperty* NewProp_VectorValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VectorValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorValue, BlackboardComponent_eventSetValueAsRotator_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsRotator_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsString()
	{
		struct BlackboardComponent_eventSetValueAsString_Parms
		{
			FName KeyName;
			FString StringValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(BlackboardComponent_eventSetValueAsString_Parms));
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, BlackboardComponent_eventSetValueAsString_Parms), 0x0010000000000080);
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsString_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBlackboardComponent_SetValueAsVector()
	{
		struct BlackboardComponent_eventSetValueAsVector_Parms
		{
			FName KeyName;
			FVector VectorValue;
		};
		UObject* Outer=Z_Construct_UClass_UBlackboardComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValueAsVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BlackboardComponent_eventSetValueAsVector_Parms));
			UProperty* NewProp_VectorValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VectorValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorValue, BlackboardComponent_eventSetValueAsVector_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_KeyName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KeyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(KeyName, BlackboardComponent_eventSetValueAsVector_Parms), 0x0010000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|Blackboard"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
			MetaData->SetValue(NewProp_KeyName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBlackboardComponent_NoRegister()
	{
		return UBlackboardComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_ClearValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetLocationFromEntry());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetRotationFromEntry());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsEnum());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsString());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_GetValueAsVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_IsVectorValueSet());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsEnum());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsString());
				OuterClass->LinkChild(Z_Construct_UFunction_UBlackboardComponent_SetValueAsVector());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_KeyInstances = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeyInstances"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(KeyInstances, UBlackboardComponent), 0x0020080000002000);
				UProperty* NewProp_KeyInstances_Inner = new(EC_InternalUseOnlyConstructor, NewProp_KeyInstances, TEXT("KeyInstances"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UBlackboardKeyType_NoRegister());
				UProperty* NewProp_BlackboardAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BlackboardAsset, UBlackboardComponent), 0x0020080000002000, Z_Construct_UClass_UBlackboardData_NoRegister());
				UProperty* NewProp_BrainComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrainComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BrainComp, UBlackboardComponent), 0x0020080000082008, Z_Construct_UClass_UBrainComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_ClearValue(), "ClearValue"); // 3040523401
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetLocationFromEntry(), "GetLocationFromEntry"); // 2445609873
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetRotationFromEntry(), "GetRotationFromEntry"); // 1081995079
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsBool(), "GetValueAsBool"); // 2277128462
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsClass(), "GetValueAsClass"); // 3477775155
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsEnum(), "GetValueAsEnum"); // 1750431822
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsFloat(), "GetValueAsFloat"); // 3376134720
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsInt(), "GetValueAsInt"); // 2162886092
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsName(), "GetValueAsName"); // 251189181
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsObject(), "GetValueAsObject"); // 4088879390
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsRotator(), "GetValueAsRotator"); // 1749839490
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsString(), "GetValueAsString"); // 1978256814
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_GetValueAsVector(), "GetValueAsVector"); // 4078031122
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_IsVectorValueSet(), "IsVectorValueSet"); // 3959272995
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsBool(), "SetValueAsBool"); // 3493848609
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsClass(), "SetValueAsClass"); // 2065603209
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsEnum(), "SetValueAsEnum"); // 634200725
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsFloat(), "SetValueAsFloat"); // 3898502726
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsInt(), "SetValueAsInt"); // 1845347944
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsName(), "SetValueAsName"); // 2828641325
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsObject(), "SetValueAsObject"); // 153494112
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsRotator(), "SetValueAsRotator"); // 2551927232
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsString(), "SetValueAsString"); // 2681143578
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBlackboardComponent_SetValueAsVector(), "SetValueAsVector"); // 342402562
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("AI"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BlackboardComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_KeyInstances, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
				MetaData->SetValue(NewProp_KeyInstances, TEXT("ToolTip"), TEXT("instanced keys with custom data allocations"));
				MetaData->SetValue(NewProp_BlackboardAsset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
				MetaData->SetValue(NewProp_BlackboardAsset, TEXT("ToolTip"), TEXT("data asset defining entries"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BlackboardComponent.h"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("ToolTip"), TEXT("cached behavior tree component"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardComponent(Z_Construct_UClass_UBlackboardComponent, &UBlackboardComponent::StaticClass, TEXT("UBlackboardComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardComponent);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Bool_NoRegister()
	{
		return UBlackboardKeyType_Bool::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Bool()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Bool::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Bool"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Bool.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Bool.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Bool(Z_Construct_UClass_UBlackboardKeyType_Bool, &UBlackboardKeyType_Bool::StaticClass, TEXT("UBlackboardKeyType_Bool"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Bool);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Class_NoRegister()
	{
		return UBlackboardKeyType_Class::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Class()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Class::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BaseClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(BaseClass, UBlackboardKeyType_Class), 0x0010000000010001, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Class"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Class.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Class.h"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("AllowAbstract"), TEXT("1"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Class.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Class(Z_Construct_UClass_UBlackboardKeyType_Class, &UBlackboardKeyType_Class::StaticClass, TEXT("UBlackboardKeyType_Class"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Class);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Enum_NoRegister()
	{
		return UBlackboardKeyType_Enum::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Enum()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Enum::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsEnumNameValid, UBlackboardKeyType_Enum, uint8);
				UProperty* NewProp_bIsEnumNameValid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsEnumNameValid"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsEnumNameValid, UBlackboardKeyType_Enum), 0x0010000000030001, CPP_BOOL_PROPERTY_BITMASK(bIsEnumNameValid, UBlackboardKeyType_Enum), sizeof(uint8), false);
				UProperty* NewProp_EnumName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnumName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(EnumName, UBlackboardKeyType_Enum), 0x0010000000010001);
				UProperty* NewProp_EnumType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnumType"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EnumType, UBlackboardKeyType_Enum), 0x0010000000010001, UEnum::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Enum"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Enum.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Enum.h"));
				MetaData->SetValue(NewProp_bIsEnumNameValid, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_bIsEnumNameValid, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Enum.h"));
				MetaData->SetValue(NewProp_bIsEnumNameValid, TEXT("ToolTip"), TEXT("set when EnumName override is valid and active"));
				MetaData->SetValue(NewProp_EnumName, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_EnumName, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Enum.h"));
				MetaData->SetValue(NewProp_EnumName, TEXT("ToolTip"), TEXT("name of enum defined in c++ code, will take priority over asset from EnumType property"));
				MetaData->SetValue(NewProp_EnumType, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_EnumType, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Enum.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Enum(Z_Construct_UClass_UBlackboardKeyType_Enum, &UBlackboardKeyType_Enum::StaticClass, TEXT("UBlackboardKeyType_Enum"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Enum);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Float_NoRegister()
	{
		return UBlackboardKeyType_Float::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Float()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Float::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Float"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Float.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Float.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Float(Z_Construct_UClass_UBlackboardKeyType_Float, &UBlackboardKeyType_Float::StaticClass, TEXT("UBlackboardKeyType_Float"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Float);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Int_NoRegister()
	{
		return UBlackboardKeyType_Int::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Int()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Int::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Int"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Int.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Int.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Int(Z_Construct_UClass_UBlackboardKeyType_Int, &UBlackboardKeyType_Int::StaticClass, TEXT("UBlackboardKeyType_Int"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Int);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Name_NoRegister()
	{
		return UBlackboardKeyType_Name::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Name()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Name::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Name"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Name.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Name.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Name(Z_Construct_UClass_UBlackboardKeyType_Name, &UBlackboardKeyType_Name::StaticClass, TEXT("UBlackboardKeyType_Name"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Name);
	UClass* Z_Construct_UClass_UBlackboardKeyType_NativeEnum_NoRegister()
	{
		return UBlackboardKeyType_NativeEnum::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_NativeEnum()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_NativeEnum::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x24103080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EnumType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnumType"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EnumType, UBlackboardKeyType_NativeEnum), 0x0010000000000000, UEnum::StaticClass());
				UProperty* NewProp_EnumName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnumName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(EnumName, UBlackboardKeyType_NativeEnum), 0x0010000000010001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_NativeEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_NativeEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("DEPRECATED, please use UBlackboardKeyType_Enum instead"));
				MetaData->SetValue(NewProp_EnumType, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_NativeEnum.h"));
				MetaData->SetValue(NewProp_EnumName, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_EnumName, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_NativeEnum.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_NativeEnum(Z_Construct_UClass_UBlackboardKeyType_NativeEnum, &UBlackboardKeyType_NativeEnum::StaticClass, TEXT("UBlackboardKeyType_NativeEnum"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_NativeEnum);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Object_NoRegister()
	{
		return UBlackboardKeyType_Object::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Object()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Object::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BaseClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(BaseClass, UBlackboardKeyType_Object), 0x0010000000010001, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Object.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Object.h"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("AllowAbstract"), TEXT("1"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BaseClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Object.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Object(Z_Construct_UClass_UBlackboardKeyType_Object, &UBlackboardKeyType_Object::StaticClass, TEXT("UBlackboardKeyType_Object"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Object);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Rotator_NoRegister()
	{
		return UBlackboardKeyType_Rotator::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Rotator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Rotator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotator"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Rotator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Rotator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Rotator(Z_Construct_UClass_UBlackboardKeyType_Rotator, &UBlackboardKeyType_Rotator::StaticClass, TEXT("UBlackboardKeyType_Rotator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Rotator);
	UClass* Z_Construct_UClass_UBlackboardKeyType_String_NoRegister()
	{
		return UBlackboardKeyType_String::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_String()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_String::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, UBlackboardKeyType_String), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("String"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_String.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_String.h"));
				MetaData->SetValue(NewProp_StringValue, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_String.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_String(Z_Construct_UClass_UBlackboardKeyType_String, &UBlackboardKeyType_String::StaticClass, TEXT("UBlackboardKeyType_String"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_String);
	UClass* Z_Construct_UClass_UBlackboardKeyType_Vector_NoRegister()
	{
		return UBlackboardKeyType_Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UBlackboardKeyType_Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlackboardKeyType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBlackboardKeyType_Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20103080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Blackboard"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Blackboard/BlackboardKeyType_Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Blackboard/BlackboardKeyType_Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBlackboardKeyType_Vector(Z_Construct_UClass_UBlackboardKeyType_Vector, &UBlackboardKeyType_Vector::StaticClass, TEXT("UBlackboardKeyType_Vector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBlackboardKeyType_Vector);
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValue()
	{
		struct BTFunctionLibrary_eventClearBlackboardValue_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearBlackboardValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventClearBlackboardValue_Parms));
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventClearBlackboardValue_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventClearBlackboardValue_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resets indicated value to \"not set\" value, based on values type"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValueAsVector()
	{
		struct BTFunctionLibrary_eventClearBlackboardValueAsVector_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearBlackboardValueAsVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventClearBlackboardValueAsVector_Parms));
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventClearBlackboardValueAsVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventClearBlackboardValueAsVector_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use ClearBlackboardValue instead."));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("(DEPRECATED) Use ClearBlackboardValue instead"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsActor()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsActor_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsActor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsActor_Parms), 0x0010000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsActor_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsActor_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsBool()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsBool_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsClass()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsClass_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			UClass* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsClass_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsClass_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsClass_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsClass_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsEnum()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsEnum_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsEnum_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsEnum_Parms), 0x0010000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsEnum_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsEnum_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsFloat()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsFloat_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsFloat_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsFloat_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsInt()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsInt_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsInt_Parms), 0x0010000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsInt_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsInt_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsName()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsName_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsName_Parms), 0x0010000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsName_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsName_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsObject()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsObject_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsObject_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsObject_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsObject_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsRotator()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsRotator_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsRotator_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsRotator_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsString()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsString_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsString_Parms), 0x0010000000000580);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsString_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsString_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsVector()
	{
		struct BTFunctionLibrary_eventGetBlackboardValueAsVector_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBlackboardValueAsVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(BTFunctionLibrary_eventGetBlackboardValueAsVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetBlackboardValueAsVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventGetBlackboardValueAsVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetBlackboardValueAsVector_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetOwnerComponent()
	{
		struct BTFunctionLibrary_eventGetOwnerComponent_Parms
		{
			UBTNode* NodeOwner;
			UBehaviorTreeComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwnerComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BTFunctionLibrary_eventGetOwnerComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetOwnerComponent_Parms), 0x0010000000080588, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetOwnerComponent_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_GetOwnersBlackboard()
	{
		struct BTFunctionLibrary_eventGetOwnersBlackboard_Parms
		{
			UBTNode* NodeOwner;
			UBlackboardComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwnersBlackboard"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BTFunctionLibrary_eventGetOwnersBlackboard_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BTFunctionLibrary_eventGetOwnersBlackboard_Parms), 0x0010000000080588, Z_Construct_UClass_UBlackboardComponent_NoRegister());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventGetOwnersBlackboard_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsBool()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			bool Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms, bool);
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Value, BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsBool_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsClass()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsClass_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			UClass* Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsClass"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsClass_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsClass_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsClass_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsClass_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsEnum()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsEnum_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			uint8 Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsEnum_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsEnum_Parms), 0x0010000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsEnum_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsEnum_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsFloat()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsFloat_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsFloat_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsFloat_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsFloat_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsInt()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsInt_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			int32 Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsInt_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsInt_Parms), 0x0010000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsInt_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsInt_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsName()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsName_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FName Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsName_Parms), 0x0010000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsName_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsName_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsObject()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsObject_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			UObject* Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsObject"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsObject_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsObject_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsObject_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsObject_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsRotator()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsRotator_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FRotator Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsRotator_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsRotator_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsRotator_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsRotator_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsString()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsString_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsString_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsString_Parms), 0x0010000000000080);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsString_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsString_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsVector()
	{
		struct BTFunctionLibrary_eventSetBlackboardValueAsVector_Parms
		{
			UBTNode* NodeOwner;
			FBlackboardKeySelector Key;
			FVector Value;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBlackboardValueAsVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(BTFunctionLibrary_eventSetBlackboardValueAsVector_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, BTFunctionLibrary_eventSetBlackboardValueAsVector_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Key, BTFunctionLibrary_eventSetBlackboardValueAsVector_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventSetBlackboardValueAsVector_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(NewProp_Key, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_StartUsingExternalEvent()
	{
		struct BTFunctionLibrary_eventStartUsingExternalEvent_Parms
		{
			UBTNode* NodeOwner;
			AActor* OwningActor;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StartUsingExternalEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(BTFunctionLibrary_eventStartUsingExternalEvent_Parms));
			UProperty* NewProp_OwningActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwningActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwningActor, BTFunctionLibrary_eventStartUsingExternalEvent_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventStartUsingExternalEvent_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("No longer needed"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Initialize variables marked as \"instance memory\" and set owning actor for blackboard operations"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTFunctionLibrary_StopUsingExternalEvent()
	{
		struct BTFunctionLibrary_eventStopUsingExternalEvent_Parms
		{
			UBTNode* NodeOwner;
		};
		UObject* Outer=Z_Construct_UClass_UBTFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopUsingExternalEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(BTFunctionLibrary_eventStopUsingExternalEvent_Parms));
			UProperty* NewProp_NodeOwner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NodeOwner, BTFunctionLibrary_eventStopUsingExternalEvent_Parms), 0x0010000000000080, Z_Construct_UClass_UBTNode_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("No longer needed"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("NodeOwner"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Save variables marked as \"instance memory\" and clear owning actor"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBTFunctionLibrary_NoRegister()
	{
		return UBTFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValueAsVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsEnum());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsString());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetOwnerComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_GetOwnersBlackboard());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsEnum());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsInt());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsName());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsRotator());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsString());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_StartUsingExternalEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTFunctionLibrary_StopUsingExternalEvent());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValue(), "ClearBlackboardValue"); // 3313919179
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_ClearBlackboardValueAsVector(), "ClearBlackboardValueAsVector"); // 723798333
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsActor(), "GetBlackboardValueAsActor"); // 122743640
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsBool(), "GetBlackboardValueAsBool"); // 2311712778
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsClass(), "GetBlackboardValueAsClass"); // 2468448417
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsEnum(), "GetBlackboardValueAsEnum"); // 3265657875
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsFloat(), "GetBlackboardValueAsFloat"); // 3375861740
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsInt(), "GetBlackboardValueAsInt"); // 3746028389
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsName(), "GetBlackboardValueAsName"); // 835465711
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsObject(), "GetBlackboardValueAsObject"); // 2722994450
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsRotator(), "GetBlackboardValueAsRotator"); // 3251163767
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsString(), "GetBlackboardValueAsString"); // 269152740
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetBlackboardValueAsVector(), "GetBlackboardValueAsVector"); // 3237976031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetOwnerComponent(), "GetOwnerComponent"); // 411367831
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_GetOwnersBlackboard(), "GetOwnersBlackboard"); // 507262940
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsBool(), "SetBlackboardValueAsBool"); // 2237864569
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsClass(), "SetBlackboardValueAsClass"); // 2649223691
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsEnum(), "SetBlackboardValueAsEnum"); // 2850833348
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsFloat(), "SetBlackboardValueAsFloat"); // 2393963363
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsInt(), "SetBlackboardValueAsInt"); // 704091353
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsName(), "SetBlackboardValueAsName"); // 202448547
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsObject(), "SetBlackboardValueAsObject"); // 1016933096
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsRotator(), "SetBlackboardValueAsRotator"); // 1793456771
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsString(), "SetBlackboardValueAsString"); // 576202418
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_SetBlackboardValueAsVector(), "SetBlackboardValueAsVector"); // 2421440323
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_StartUsingExternalEvent(), "StartUsingExternalEvent"); // 1876536853
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTFunctionLibrary_StopUsingExternalEvent(), "StopUsingExternalEvent"); // 181896276
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("RestrictedToClasses"), TEXT("BTNode"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTFunctionLibrary(Z_Construct_UClass_UBTFunctionLibrary, &UBTFunctionLibrary::StaticClass, TEXT("UBTFunctionLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTFunctionLibrary);
	UClass* Z_Construct_UClass_UBTAuxiliaryNode_NoRegister()
	{
		return UBTAuxiliaryNode::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTAuxiliaryNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTAuxiliaryNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTAuxiliaryNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTAuxiliaryNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Auxiliary nodes are supporting nodes, that receive notification about execution flow and can be ticked\n\nBecause some of them can be instanced for specific AI, following virtual functions are not marked as const:\n - OnBecomeRelevant\n - OnCeaseRelevant\n - TickNode\n\nIf your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\nTemplate nodes are shared across all behavior tree components using the same tree asset and must store\ntheir runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTAuxiliaryNode(Z_Construct_UClass_UBTAuxiliaryNode, &UBTAuxiliaryNode::StaticClass, TEXT("UBTAuxiliaryNode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTAuxiliaryNode);
	UClass* Z_Construct_UClass_UBTDecorator_NoRegister()
	{
		return UBTDecorator::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTAuxiliaryNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FlowAbortMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FlowAbortMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FlowAbortMode, UBTDecorator), 0x0020080000000001, Z_Construct_UEnum_AIModule_EBTFlowAbortMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInverseCondition, UBTDecorator, uint8);
				UProperty* NewProp_bInverseCondition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInverseCondition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInverseCondition, UBTDecorator), 0x0040000000000001, CPP_BOOL_PROPERTY_BITMASK(bInverseCondition, UBTDecorator), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTDecorator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTDecorator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Decorators are supporting nodes placed on parent-child connection, that receive notification about execution flow and can be ticked\n\nBecause some of them can be instanced for specific AI, following virtual functions are not marked as const:\n - OnNodeActivation\n - OnNodeDeactivation\n - OnNodeProcessed\n - OnBecomeRelevant (from UBTAuxiliaryNode)\n - OnCeaseRelevant (from UBTAuxiliaryNode)\n - TickNode (from UBTAuxiliaryNode)\n\nIf your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\nTemplate nodes are shared across all behavior tree components using the same tree asset and must store\ntheir runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )"));
				MetaData->SetValue(NewProp_FlowAbortMode, TEXT("Category"), TEXT("FlowControl"));
				MetaData->SetValue(NewProp_FlowAbortMode, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTDecorator.h"));
				MetaData->SetValue(NewProp_FlowAbortMode, TEXT("ToolTip"), TEXT("flow controller settings"));
				MetaData->SetValue(NewProp_bInverseCondition, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_bInverseCondition, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTDecorator.h"));
				MetaData->SetValue(NewProp_bInverseCondition, TEXT("ToolTip"), TEXT("if set, condition check result will be inversed"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator(Z_Construct_UClass_UBTDecorator, &UBTDecorator::StaticClass, TEXT("UBTDecorator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator);
	UClass* Z_Construct_UClass_UBTDecorator_BlackboardBase_NoRegister()
	{
		return UBTDecorator_BlackboardBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_BlackboardBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_BlackboardBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlackboardKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKey, UBTDecorator_BlackboardBase), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_BlackboardBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ToolTip"), TEXT("blackboard key selector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_BlackboardBase(Z_Construct_UClass_UBTDecorator_BlackboardBase, &UBTDecorator_BlackboardBase::StaticClass, TEXT("UBTDecorator_BlackboardBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_BlackboardBase);
	UEnum* Z_Construct_UEnum_AIModule_EBTBlackboardRestart()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EBTBlackboardRestart_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBTBlackboardRestart"), 0, Get_Z_Construct_UEnum_AIModule_EBTBlackboardRestart_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBTBlackboardRestart"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTBlackboardRestart::ValueChange")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTBlackboardRestart::ResultChange")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTBlackboardRestart::EBTBlackboardRestart_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EBTBlackboardRestart::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ResultChange.DisplayName"), TEXT("On Result Change"));
			MetaData->SetValue(ReturnEnum, TEXT("ResultChange.ToolTip"), TEXT("Restart only when result of evaluated condition is changed"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Decorator for accessing blackboard values"));
			MetaData->SetValue(ReturnEnum, TEXT("ValueChange.DisplayName"), TEXT("On Value Change"));
			MetaData->SetValue(ReturnEnum, TEXT("ValueChange.ToolTip"), TEXT("Restart on every change of observed blackboard value"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EBTBlackboardRestart_CRC() { return 834726252U; }
	UClass* Z_Construct_UClass_UBTDecorator_Blackboard_NoRegister()
	{
		return UBTDecorator_Blackboard::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_Blackboard()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_Blackboard::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_TextOperation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TextOperation, UBTDecorator_Blackboard), 0x0020080800000001, Z_Construct_UEnum_AIModule_ETextKeyOperation());
				UProperty* NewProp_ArithmeticOperation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArithmeticOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ArithmeticOperation, UBTDecorator_Blackboard), 0x0020080800000001, Z_Construct_UEnum_AIModule_EArithmeticKeyOperation());
				UProperty* NewProp_BasicOperation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasicOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BasicOperation, UBTDecorator_Blackboard), 0x0020080800000001, Z_Construct_UEnum_AIModule_EBasicKeyOperation());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NotifyObserver = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NotifyObserver"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NotifyObserver, UBTDecorator_Blackboard), 0x0020080000000001, Z_Construct_UEnum_AIModule_EBTBlackboardRestart());
				UProperty* NewProp_OperationType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OperationType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OperationType, UBTDecorator_Blackboard), 0x0020080000000000);
				UProperty* NewProp_CachedDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(CachedDescription, UBTDecorator_Blackboard), 0x0020080000000000);
				UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, UBTDecorator_Blackboard), 0x0020080000000001);
				UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, UBTDecorator_Blackboard), 0x0020080000000001);
				UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, UBTDecorator_Blackboard), 0x0020080000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Blackboard decorator node.\nA decorator node that bases its condition on a Blackboard key."));
				MetaData->SetValue(NewProp_TextOperation, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_TextOperation, TEXT("DisplayName"), TEXT("Key Query"));
				MetaData->SetValue(NewProp_TextOperation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_ArithmeticOperation, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_ArithmeticOperation, TEXT("DisplayName"), TEXT("Key Query"));
				MetaData->SetValue(NewProp_ArithmeticOperation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_BasicOperation, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BasicOperation, TEXT("DisplayName"), TEXT("Key Query"));
				MetaData->SetValue(NewProp_BasicOperation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_NotifyObserver, TEXT("Category"), TEXT("FlowControl"));
				MetaData->SetValue(NewProp_NotifyObserver, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_NotifyObserver, TEXT("ToolTip"), TEXT("when observer can try to request abort?"));
				MetaData->SetValue(NewProp_OperationType, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_OperationType, TEXT("ToolTip"), TEXT("operation type"));
				MetaData->SetValue(NewProp_CachedDescription, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_CachedDescription, TEXT("ToolTip"), TEXT("cached description"));
				MetaData->SetValue(NewProp_StringValue, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_StringValue, TEXT("DisplayName"), TEXT("Key Value"));
				MetaData->SetValue(NewProp_StringValue, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_StringValue, TEXT("ToolTip"), TEXT("value for string operations"));
				MetaData->SetValue(NewProp_FloatValue, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_FloatValue, TEXT("DisplayName"), TEXT("Key Value"));
				MetaData->SetValue(NewProp_FloatValue, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_FloatValue, TEXT("ToolTip"), TEXT("value for arithmetic operations"));
				MetaData->SetValue(NewProp_IntValue, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_IntValue, TEXT("DisplayName"), TEXT("Key Value"));
				MetaData->SetValue(NewProp_IntValue, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Blackboard.h"));
				MetaData->SetValue(NewProp_IntValue, TEXT("ToolTip"), TEXT("value for arithmetic operations"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_Blackboard(Z_Construct_UClass_UBTDecorator_Blackboard, &UBTDecorator_Blackboard::StaticClass, TEXT("UBTDecorator_Blackboard"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_Blackboard);
	UClass* Z_Construct_UClass_UBTDecorator_ConditionalLoop_NoRegister()
	{
		return UBTDecorator_ConditionalLoop::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_ConditionalLoop()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator_Blackboard();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_ConditionalLoop::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("FlowControl Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_ConditionalLoop.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConditionalLoop.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Conditional loop decorator node.\nA decorator node that loops execution as long as condition is satisfied."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_ConditionalLoop(Z_Construct_UClass_UBTDecorator_ConditionalLoop, &UBTDecorator_ConditionalLoop::StaticClass, TEXT("UBTDecorator_ConditionalLoop"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_ConditionalLoop);
	UClass* Z_Construct_UClass_UBTDecorator_IsAtLocation_NoRegister()
	{
		return UBTDecorator_IsAtLocation::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_IsAtLocation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_IsAtLocation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseNavAgentGoalLocation, UBTDecorator_IsAtLocation, uint8);
				UProperty* NewProp_bUseNavAgentGoalLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseNavAgentGoalLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseNavAgentGoalLocation, UBTDecorator_IsAtLocation), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseNavAgentGoalLocation, UBTDecorator_IsAtLocation), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseParametrizedRadius, UBTDecorator_IsAtLocation, uint8);
				UProperty* NewProp_bUseParametrizedRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseParametrizedRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseParametrizedRadius, UBTDecorator_IsAtLocation), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseParametrizedRadius, UBTDecorator_IsAtLocation), sizeof(uint8), false);
				UProperty* NewProp_ParametrizedAcceptableRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParametrizedAcceptableRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParametrizedAcceptableRadius, UBTDecorator_IsAtLocation), 0x0010008000000001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_AcceptableRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AcceptableRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AcceptableRadius, UBTDecorator_IsAtLocation), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Is At Location decorator node.\nA decorator node that checks if AI controlled pawn is at given location."));
				MetaData->SetValue(NewProp_bUseNavAgentGoalLocation, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_bUseNavAgentGoalLocation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(NewProp_bUseNavAgentGoalLocation, TEXT("ToolTip"), TEXT("if moving to an actor and this actor is a nav agent, then we will move to their nav agent location"));
				MetaData->SetValue(NewProp_bUseParametrizedRadius, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(NewProp_ParametrizedAcceptableRadius, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_ParametrizedAcceptableRadius, TEXT("EditCondition"), TEXT("bUseParametrizedRadius"));
				MetaData->SetValue(NewProp_ParametrizedAcceptableRadius, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("EditCondition"), TEXT("!bUseParametrizedRadius"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsAtLocation.h"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ToolTip"), TEXT("distance threshold to accept as being at location"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_IsAtLocation(Z_Construct_UClass_UBTDecorator_IsAtLocation, &UBTDecorator_IsAtLocation::StaticClass, TEXT("UBTDecorator_IsAtLocation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_IsAtLocation);
	UClass* Z_Construct_UClass_UBTDecorator_IsBBEntryOfClass_NoRegister()
	{
		return UBTDecorator_IsBBEntryOfClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_IsBBEntryOfClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_IsBBEntryOfClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TestClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(TestClass, UBTDecorator_IsBBEntryOfClass), 0x0024080000000001, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_IsBBEntryOfClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsBBEntryOfClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_TestClass, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_TestClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_IsBBEntryOfClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_IsBBEntryOfClass(Z_Construct_UClass_UBTDecorator_IsBBEntryOfClass, &UBTDecorator_IsBBEntryOfClass::StaticClass, TEXT("UBTDecorator_IsBBEntryOfClass"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_IsBBEntryOfClass);
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorExecutionActive()
	{
		struct BTDecorator_BlueprintBase_eventIsDecoratorExecutionActive_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDecoratorExecutionActive"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(BTDecorator_BlueprintBase_eventIsDecoratorExecutionActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorExecutionActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorExecutionActive_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorExecutionActive_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("check if decorator is part of currently active branch"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorObserverActive()
	{
		struct BTDecorator_BlueprintBase_eventIsDecoratorObserverActive_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDecoratorObserverActive"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(BTDecorator_BlueprintBase_eventIsDecoratorObserverActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorObserverActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorObserverActive_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTDecorator_BlueprintBase_eventIsDecoratorObserverActive_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("check if decorator's observer is currently active"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheck()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerformConditionCheck"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventPerformConditionCheck_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheck_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheck_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheck_Parms), sizeof(bool), true);
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventPerformConditionCheck_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when testing if underlying node can be executed, must call FinishConditionCheck\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheckAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerformConditionCheckAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms), sizeof(bool), true);
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventPerformConditionCheckAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveConditionCheck\n    @see ReceiveConditionCheck for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinish()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecutionFinish"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveExecutionFinish_Parms));
			UProperty* NewProp_NodeResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeResult"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NodeResult, BTDecorator_BlueprintBase_eventReceiveExecutionFinish_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EBTNodeResult());
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventReceiveExecutionFinish_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when execution of underlying node is finished\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinishAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecutionFinishAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveExecutionFinishAI_Parms));
			UProperty* NewProp_NodeResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NodeResult"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NodeResult, BTDecorator_BlueprintBase_eventReceiveExecutionFinishAI_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EBTNodeResult());
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventReceiveExecutionFinishAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventReceiveExecutionFinishAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveExecutionFinish\n    @see ReceiveExecutionFinish for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStart()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecutionStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveExecutionStart_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventReceiveExecutionStart_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called on execution of underlying node\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStartAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecutionStartAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveExecutionStartAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventReceiveExecutionStartAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventReceiveExecutionStartAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveExecutionStart\n    @see ReceiveExecutionStart for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivated()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveObserverActivated"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveObserverActivated_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventReceiveObserverActivated_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when observer is activated (flow controller)\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivatedAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveObserverActivatedAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveObserverActivatedAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventReceiveObserverActivatedAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventReceiveObserverActivatedAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveObserverActivated\n    @see ReceiveObserverActivated for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivated()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveObserverDeactivated"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveObserverDeactivated_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventReceiveObserverDeactivated_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when observer is deactivated (flow controller)\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivatedAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveObserverDeactivatedAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveObserverDeactivatedAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventReceiveObserverDeactivatedAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventReceiveObserverDeactivatedAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveObserverDeactivated\n    @see ReceiveObserverDeactivated for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTick()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveTick_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTDecorator_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080);
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTDecorator_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("tick function\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTickAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTDecorator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTickAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTDecorator_BlueprintBase_eventReceiveTickAI_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTDecorator_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080);
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTDecorator_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTDecorator_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveTick\n    @see ReceiveTick for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBTDecorator_BlueprintBase_NoRegister()
	{
		return UBTDecorator_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;

				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorExecutionActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorObserverActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheck());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheckAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinish());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinishAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStartAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivated());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivatedAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivated());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivatedAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTick());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTickAI());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsObservingBB, UBTDecorator_BlueprintBase, uint8);
				UProperty* NewProp_bIsObservingBB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsObservingBB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsObservingBB, UBTDecorator_BlueprintBase), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsObservingBB, UBTDecorator_BlueprintBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCheckConditionOnlyBlackBoardChanges, UBTDecorator_BlueprintBase, uint8);
				UProperty* NewProp_bCheckConditionOnlyBlackBoardChanges = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCheckConditionOnlyBlackBoardChanges"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCheckConditionOnlyBlackBoardChanges, UBTDecorator_BlueprintBase), 0x00200c0000010001, CPP_BOOL_PROPERTY_BITMASK(bCheckConditionOnlyBlackBoardChanges, UBTDecorator_BlueprintBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowPropertyDetails, UBTDecorator_BlueprintBase, uint8);
				UProperty* NewProp_bShowPropertyDetails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowPropertyDetails"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowPropertyDetails, UBTDecorator_BlueprintBase), 0x0020080000000801, CPP_BOOL_PROPERTY_BITMASK(bShowPropertyDetails, UBTDecorator_BlueprintBase), sizeof(uint8), false);
				UProperty* NewProp_ObservedKeyNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObservedKeyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ObservedKeyNames, UBTDecorator_BlueprintBase), 0x0020080000000000);
				UProperty* NewProp_ObservedKeyNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ObservedKeyNames, TEXT("ObservedKeyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ActorOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorOwner, UBTDecorator_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_AIOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AIOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AIOwner, UBTDecorator_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AAIController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorExecutionActive(), "IsDecoratorExecutionActive"); // 2504503891
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_IsDecoratorObserverActive(), "IsDecoratorObserverActive"); // 2402863732
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheck(), "PerformConditionCheck"); // 196595878
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_PerformConditionCheckAI(), "PerformConditionCheckAI"); // 2575099265
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinish(), "ReceiveExecutionFinish"); // 1589881211
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionFinishAI(), "ReceiveExecutionFinishAI"); // 2206355999
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStart(), "ReceiveExecutionStart"); // 389115619
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveExecutionStartAI(), "ReceiveExecutionStartAI"); // 1344100925
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivated(), "ReceiveObserverActivated"); // 2423580523
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverActivatedAI(), "ReceiveObserverActivatedAI"); // 4254989976
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivated(), "ReceiveObserverDeactivated"); // 2140095299
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveObserverDeactivatedAI(), "ReceiveObserverDeactivatedAI"); // 300252234
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTick(), "ReceiveTick"); // 3382158262
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTDecorator_BlueprintBase_ReceiveTickAI(), "ReceiveTickAI"); // 3832191486
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for blueprint based decorator nodes. Do NOT use it for creating native c++ classes!\n\nUnlike task and services, decorator have two execution chains:\n ExecutionStart-ExecutionFinish and ObserverActivated-ObserverDeactivated\nwhich makes automatic latent action cleanup impossible. Keep in mind, that\nyou HAVE TO verify is given chain is still active after resuming from any\nlatent action (like Delay, Timelines, etc).\n\nHelper functions:\n- IsDecoratorExecutionActive (true after ExecutionStart, until ExecutionFinish)\n- IsDecoratorObserverActive (true after ObserverActivated, until ObserverDeactivated)"));
				MetaData->SetValue(NewProp_bIsObservingBB, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bIsObservingBB, TEXT("ToolTip"), TEXT("gets set to true if decorator declared BB keys it can potentially observe"));
				MetaData->SetValue(NewProp_bCheckConditionOnlyBlackBoardChanges, TEXT("Category"), TEXT("FlowControl"));
				MetaData->SetValue(NewProp_bCheckConditionOnlyBlackBoardChanges, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bCheckConditionOnlyBlackBoardChanges, TEXT("ToolTip"), TEXT("Applies only if Decorator has any FBlackboardKeySelector property and if decorator is\n    set to abort BT flow. Is set to true ReceiveConditionCheck will be called only on changes\n   to observed BB keys. If false or no BB keys observed ReceiveConditionCheck will be called every tick"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("Category"), TEXT("Description"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ToolTip"), TEXT("show detailed information about properties"));
				MetaData->SetValue(NewProp_ObservedKeyNames, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_ObservedKeyNames, TEXT("ToolTip"), TEXT("blackboard key names that should be observed"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ToolTip"), TEXT("Cached AIController owner of BehaviorTreeComponent."));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ToolTip"), TEXT("Cached AIController owner of BehaviorTreeComponent."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_BlueprintBase(Z_Construct_UClass_UBTDecorator_BlueprintBase, &UBTDecorator_BlueprintBase::StaticClass, TEXT("UBTDecorator_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_BlueprintBase);
	UClass* Z_Construct_UClass_UBTDecorator_CheckGameplayTagsOnActor_NoRegister()
	{
		return UBTDecorator_CheckGameplayTagsOnActor::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_CheckGameplayTagsOnActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_CheckGameplayTagsOnActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CachedDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(CachedDescription, UBTDecorator_CheckGameplayTagsOnActor), 0x0020080000000000);
				UProperty* NewProp_GameplayTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GameplayTags, UBTDecorator_CheckGameplayTagsOnActor), 0x0020080000000001, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_TagsToMatch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TagsToMatch"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TagsToMatch, UBTDecorator_CheckGameplayTagsOnActor), 0x0020080000000001, Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType());
				UProperty* NewProp_TagsToMatch_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TagsToMatch, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ActorToCheck = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorToCheck"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ActorToCheck, UBTDecorator_CheckGameplayTagsOnActor), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("GameplayTag decorator node.\nA decorator node that bases its condition on whether the specified Actor (in the blackboard) has a Gameplay Tag or\nTags specified."));
				MetaData->SetValue(NewProp_CachedDescription, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(NewProp_CachedDescription, TEXT("ToolTip"), TEXT("cached description"));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("Category"), TEXT("GameplayTagCheck"));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(NewProp_TagsToMatch, TEXT("Category"), TEXT("GameplayTagCheck"));
				MetaData->SetValue(NewProp_TagsToMatch, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(NewProp_ActorToCheck, TEXT("Category"), TEXT("GameplayTagCheck"));
				MetaData->SetValue(NewProp_ActorToCheck, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CheckGameplayTagsOnActor.h"));
				MetaData->SetValue(NewProp_ActorToCheck, TEXT("ToolTips"), TEXT("Which Actor (from the blackboard) should be checked for these gameplay tags?"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_CheckGameplayTagsOnActor(Z_Construct_UClass_UBTDecorator_CheckGameplayTagsOnActor, &UBTDecorator_CheckGameplayTagsOnActor::StaticClass, TEXT("UBTDecorator_CheckGameplayTagsOnActor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_CheckGameplayTagsOnActor);
	UEnum* Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBlackBoardEntryComparison"), 0, Get_Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBlackBoardEntryComparison"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBlackBoardEntryComparison::Equal")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBlackBoardEntryComparison::NotEqual")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBlackBoardEntryComparison::EBlackBoardEntryComparison_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EBlackBoardEntryComparison::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Equal.DisplayName"), TEXT("Is Equal To"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NotEqual.DisplayName"), TEXT("Is Not Equal To"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison_CRC() { return 3856406524U; }
	UClass* Z_Construct_UClass_UBTDecorator_CompareBBEntries_NoRegister()
	{
		return UBTDecorator_CompareBBEntries::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_CompareBBEntries()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_CompareBBEntries::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlackboardKeyB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKeyB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKeyB, UBTDecorator_CompareBBEntries), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_BlackboardKeyA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKeyA"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKeyA, UBTDecorator_CompareBBEntries), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_Operator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Operator"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Operator, UBTDecorator_CompareBBEntries), 0x0020080000000001, Z_Construct_UEnum_AIModule_EBlackBoardEntryComparison());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Blackboard comparison decorator node.\nA decorator node that bases its condition on a comparison between two Blackboard keys."));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_Operator, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_Operator, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_CompareBBEntries.h"));
				MetaData->SetValue(NewProp_Operator, TEXT("ToolTip"), TEXT("operation type"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_CompareBBEntries(Z_Construct_UClass_UBTDecorator_CompareBBEntries, &UBTDecorator_CompareBBEntries::StaticClass, TEXT("UBTDecorator_CompareBBEntries"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_CompareBBEntries);
	UClass* Z_Construct_UClass_UBTDecorator_ConeCheck_NoRegister()
	{
		return UBTDecorator_ConeCheck::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_ConeCheck()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_ConeCheck::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Observed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Observed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Observed, UBTDecorator_ConeCheck), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_ConeDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConeDirection, UBTDecorator_ConeCheck), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_ConeOrigin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConeOrigin, UBTDecorator_ConeCheck), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_ConeHalfAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeHalfAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConeHalfAngle, UBTDecorator_ConeCheck), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cone check decorator node.\nA decorator node that bases its condition on a cone check, using Blackboard entries to form the parameters of the check."));
				MetaData->SetValue(NewProp_Observed, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_Observed, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(NewProp_Observed, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_ConeDirection, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_ConeDirection, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(NewProp_ConeDirection, TEXT("ToolTip"), TEXT("\"None\" means \"use ConeOrigin's direction\""));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ConeCheck.h"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("ToolTip"), TEXT("Angle between cone direction and code cone edge, or a half of the total cone angle"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_ConeCheck(Z_Construct_UClass_UBTDecorator_ConeCheck, &UBTDecorator_ConeCheck::StaticClass, TEXT("UBTDecorator_ConeCheck"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_ConeCheck);
	UClass* Z_Construct_UClass_UBTDecorator_Cooldown_NoRegister()
	{
		return UBTDecorator_Cooldown::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_Cooldown()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_Cooldown::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CoolDownTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoolDownTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CoolDownTime, UBTDecorator_Cooldown), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_Cooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Cooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cooldown decorator node.\nA decorator node that bases its condition on whether a cooldown timer has expired."));
				MetaData->SetValue(NewProp_CoolDownTime, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_CoolDownTime, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Cooldown.h"));
				MetaData->SetValue(NewProp_CoolDownTime, TEXT("ToolTip"), TEXT("max allowed time for execution of underlying node"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_Cooldown(Z_Construct_UClass_UBTDecorator_Cooldown, &UBTDecorator_Cooldown::StaticClass, TEXT("UBTDecorator_Cooldown"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_Cooldown);
	UEnum* Z_Construct_UEnum_AIModule_EPathExistanceQueryType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EPathExistanceQueryType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPathExistanceQueryType"), 0, Get_Z_Construct_UEnum_AIModule_EPathExistanceQueryType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPathExistanceQueryType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPathExistanceQueryType::NavmeshRaycast2D")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPathExistanceQueryType::HierarchicalQuery")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPathExistanceQueryType::RegularPathFinding")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPathExistanceQueryType::EPathExistanceQueryType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EPathExistanceQueryType::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("HierarchicalQuery.ToolTip"), TEXT("Fast"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NavmeshRaycast2D.ToolTip"), TEXT("Really Fast"));
			MetaData->SetValue(ReturnEnum, TEXT("RegularPathFinding.ToolTip"), TEXT("Slow"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EPathExistanceQueryType_CRC() { return 201865209U; }
	UClass* Z_Construct_UClass_UBTDecorator_DoesPathExist_NoRegister()
	{
		return UBTDecorator_DoesPathExist::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_DoesPathExist()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_DoesPathExist::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(FilterClass, UBTDecorator_DoesPathExist), 0x0014000000000001, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_PathQueryType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathQueryType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PathQueryType, UBTDecorator_DoesPathExist), 0x0010000000000001, Z_Construct_UEnum_AIModule_EPathExistanceQueryType());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSelf, UBTDecorator_DoesPathExist, uint8);
				UProperty* NewProp_bUseSelf = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSelf"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSelf, UBTDecorator_DoesPathExist), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseSelf, UBTDecorator_DoesPathExist), sizeof(uint8), false);
				UProperty* NewProp_BlackboardKeyB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKeyB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKeyB, UBTDecorator_DoesPathExist), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_BlackboardKeyA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKeyA"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKeyA, UBTDecorator_DoesPathExist), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cooldown decorator node.\nA decorator node that bases its condition on whether a path exists between two points from the Blackboard."));
				MetaData->SetValue(NewProp_FilterClass, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ToolTip"), TEXT("\"None\" will result in default filter being used"));
				MetaData->SetValue(NewProp_PathQueryType, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_PathQueryType, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(NewProp_bUseSelf, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(NewProp_bUseSelf, TEXT("ToolTip"), TEXT("deprecated, set value of blackboard key A on initialization"));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(NewProp_BlackboardKeyB, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_DoesPathExist.h"));
				MetaData->SetValue(NewProp_BlackboardKeyA, TEXT("ToolTip"), TEXT("blackboard key selector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_DoesPathExist(Z_Construct_UClass_UBTDecorator_DoesPathExist, &UBTDecorator_DoesPathExist::StaticClass, TEXT("UBTDecorator_DoesPathExist"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_DoesPathExist);
	UClass* Z_Construct_UClass_UBTDecorator_ForceSuccess_NoRegister()
	{
		return UBTDecorator_ForceSuccess::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_ForceSuccess()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_ForceSuccess::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_ForceSuccess.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ForceSuccess.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Change node result to Success\nuseful for creating optional branches in sequence\n\nForcing failed result was not implemented, because it doesn't make sense in both basic composites:\n- sequence = child nodes behind it will be never run\n- selector = would allow executing multiple nodes, turning it into a sequence..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_ForceSuccess(Z_Construct_UClass_UBTDecorator_ForceSuccess, &UBTDecorator_ForceSuccess::StaticClass, TEXT("UBTDecorator_ForceSuccess"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_ForceSuccess);
	UClass* Z_Construct_UClass_UBTDecorator_KeepInCone_NoRegister()
	{
		return UBTDecorator_KeepInCone::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_KeepInCone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_KeepInCone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSelfAsObserved, UBTDecorator_KeepInCone, uint8);
				UProperty* NewProp_bUseSelfAsObserved = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSelfAsObserved"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSelfAsObserved, UBTDecorator_KeepInCone), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseSelfAsObserved, UBTDecorator_KeepInCone), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSelfAsOrigin, UBTDecorator_KeepInCone, uint8);
				UProperty* NewProp_bUseSelfAsOrigin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSelfAsOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSelfAsOrigin, UBTDecorator_KeepInCone), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseSelfAsOrigin, UBTDecorator_KeepInCone), sizeof(uint8), false);
				UProperty* NewProp_Observed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Observed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Observed, UBTDecorator_KeepInCone), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_ConeOrigin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConeOrigin, UBTDecorator_KeepInCone), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_ConeHalfAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeHalfAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConeHalfAngle, UBTDecorator_KeepInCone), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cooldown decorator node.\nA decorator node that bases its condition on whether the observed position is still inside a cone. The cone's direction is calculated when the node first becomes relevant."));
				MetaData->SetValue(NewProp_bUseSelfAsObserved, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(NewProp_bUseSelfAsObserved, TEXT("ToolTip"), TEXT("deprecated, set value of Observed on initialization"));
				MetaData->SetValue(NewProp_bUseSelfAsOrigin, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(NewProp_bUseSelfAsOrigin, TEXT("ToolTip"), TEXT("deprecated, set value of ConeOrigin on initialization"));
				MetaData->SetValue(NewProp_Observed, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_Observed, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(NewProp_Observed, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(NewProp_ConeOrigin, TEXT("ToolTip"), TEXT("blackboard key selector"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_KeepInCone.h"));
				MetaData->SetValue(NewProp_ConeHalfAngle, TEXT("ToolTip"), TEXT("max allowed time for execution of underlying node"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_KeepInCone(Z_Construct_UClass_UBTDecorator_KeepInCone, &UBTDecorator_KeepInCone::StaticClass, TEXT("UBTDecorator_KeepInCone"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_KeepInCone);
	UClass* Z_Construct_UClass_UBTDecorator_Loop_NoRegister()
	{
		return UBTDecorator_Loop::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_Loop()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_Loop::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InfiniteLoopTimeoutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InfiniteLoopTimeoutTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InfiniteLoopTimeoutTime, UBTDecorator_Loop), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteLoop, UBTDecorator_Loop, bool);
				UProperty* NewProp_bInfiniteLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInfiniteLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteLoop, UBTDecorator_Loop), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInfiniteLoop, UBTDecorator_Loop), sizeof(bool), true);
				UProperty* NewProp_NumLoops = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumLoops"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumLoops, UBTDecorator_Loop), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_Loop.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Loop.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Loop decorator node.\nA decorator node that bases its condition on whether its loop counter has been exceeded."));
				MetaData->SetValue(NewProp_InfiniteLoopTimeoutTime, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_InfiniteLoopTimeoutTime, TEXT("EditCondition"), TEXT("bInfiniteLoop"));
				MetaData->SetValue(NewProp_InfiniteLoopTimeoutTime, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Loop.h"));
				MetaData->SetValue(NewProp_InfiniteLoopTimeoutTime, TEXT("ToolTip"), TEXT("timeout (when looping infinitely, when we finish a loop we will check whether we have spent this time looping, if we have we will stop looping). A negative value means loop forever."));
				MetaData->SetValue(NewProp_bInfiniteLoop, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_bInfiniteLoop, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Loop.h"));
				MetaData->SetValue(NewProp_bInfiniteLoop, TEXT("ToolTip"), TEXT("infinite loop"));
				MetaData->SetValue(NewProp_NumLoops, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_NumLoops, TEXT("EditCondition"), TEXT("!bInfiniteLoop"));
				MetaData->SetValue(NewProp_NumLoops, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_Loop.h"));
				MetaData->SetValue(NewProp_NumLoops, TEXT("ToolTip"), TEXT("number of executions"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_Loop(Z_Construct_UClass_UBTDecorator_Loop, &UBTDecorator_Loop::StaticClass, TEXT("UBTDecorator_Loop"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_Loop);
	UClass* Z_Construct_UClass_UBTDecorator_ReachedMoveGoal_NoRegister()
	{
		return UBTDecorator_ReachedMoveGoal::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_ReachedMoveGoal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_ReachedMoveGoal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DeprecatedNode"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("DeprecationMessage"), TEXT("Please use IsAtLocation decorator instead."));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_ReachedMoveGoal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_ReachedMoveGoal.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Reached Move Goal decorator node.\nA decorator node that bases its condition on whether the AI controller's path following component returns that it has reached its goal."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_ReachedMoveGoal(Z_Construct_UClass_UBTDecorator_ReachedMoveGoal, &UBTDecorator_ReachedMoveGoal::StaticClass, TEXT("UBTDecorator_ReachedMoveGoal"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_ReachedMoveGoal);
	UClass* Z_Construct_UClass_UBTDecorator_SetTagCooldown_NoRegister()
	{
		return UBTDecorator_SetTagCooldown::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_SetTagCooldown()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_SetTagCooldown::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAddToExistingDuration, UBTDecorator_SetTagCooldown, bool);
				UProperty* NewProp_bAddToExistingDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAddToExistingDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAddToExistingDuration, UBTDecorator_SetTagCooldown), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAddToExistingDuration, UBTDecorator_SetTagCooldown), sizeof(bool), true);
				UProperty* NewProp_CooldownDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CooldownDuration, UBTDecorator_SetTagCooldown), 0x0010000000000001);
				UProperty* NewProp_CooldownTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownTag"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CooldownTag, UBTDecorator_SetTagCooldown), 0x0010000000000001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_SetTagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_SetTagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Set tag cooldown decorator node.\nA decorator node that sets a gameplay tag cooldown."));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ToolTip"), TEXT("True if we are adding to any existing duration, false if we are setting the duration (potentially invalidating an existing end time)."));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ToolTip"), TEXT("Value we will add or set to the Cooldown tag when this task runs."));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ToolTip"), TEXT("Gameplay tag that will be used for the cooldown."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_SetTagCooldown(Z_Construct_UClass_UBTDecorator_SetTagCooldown, &UBTDecorator_SetTagCooldown::StaticClass, TEXT("UBTDecorator_SetTagCooldown"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_SetTagCooldown);
	UClass* Z_Construct_UClass_UBTDecorator_TagCooldown_NoRegister()
	{
		return UBTDecorator_TagCooldown::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_TagCooldown()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_TagCooldown::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActivatesCooldown, UBTDecorator_TagCooldown, bool);
				UProperty* NewProp_bActivatesCooldown = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bActivatesCooldown"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActivatesCooldown, UBTDecorator_TagCooldown), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bActivatesCooldown, UBTDecorator_TagCooldown), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAddToExistingDuration, UBTDecorator_TagCooldown, bool);
				UProperty* NewProp_bAddToExistingDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAddToExistingDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAddToExistingDuration, UBTDecorator_TagCooldown), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAddToExistingDuration, UBTDecorator_TagCooldown), sizeof(bool), true);
				UProperty* NewProp_CooldownDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CooldownDuration, UBTDecorator_TagCooldown), 0x0010000000000001);
				UProperty* NewProp_CooldownTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownTag"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CooldownTag, UBTDecorator_TagCooldown), 0x0010000000000001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cooldown decorator node.\nA decorator node that bases its condition on whether a cooldown timer based on a gameplay tag has expired."));
				MetaData->SetValue(NewProp_bActivatesCooldown, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_bActivatesCooldown, TEXT("DisplayName"), TEXT("Adds/Sets Cooldown on Deactivation"));
				MetaData->SetValue(NewProp_bActivatesCooldown, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(NewProp_bActivatesCooldown, TEXT("ToolTip"), TEXT("Whether or not we are adding/setting to the cooldown tag's value when the decorator deactivates."));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("EditCondition"), TEXT("bActivatesCooldown"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ToolTip"), TEXT("True if we are adding to any existing duration, false if we are setting the duration (potentially invalidating an existing end time)."));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("EditCondition"), TEXT("bActivatesCooldown"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ToolTip"), TEXT("Value we will add or set to the Cooldown tag when this node is deactivated."));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ToolTip"), TEXT("Gameplay tag that will be used for the cooldown."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_TagCooldown(Z_Construct_UClass_UBTDecorator_TagCooldown, &UBTDecorator_TagCooldown::StaticClass, TEXT("UBTDecorator_TagCooldown"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_TagCooldown);
	UClass* Z_Construct_UClass_UBTDecorator_TimeLimit_NoRegister()
	{
		return UBTDecorator_TimeLimit::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_TimeLimit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTDecorator_TimeLimit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TimeLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeLimit, UBTDecorator_TimeLimit), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Condition"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Decorators/BTDecorator_TimeLimit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TimeLimit.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Time Limit decorator node.\nA decorator node that bases its condition on whether a timer has exceeded a specified value. The timer is reset each time the node becomes relevant."));
				MetaData->SetValue(NewProp_TimeLimit, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_TimeLimit, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Decorators/BTDecorator_TimeLimit.h"));
				MetaData->SetValue(NewProp_TimeLimit, TEXT("ToolTip"), TEXT("max allowed time for execution of underlying node"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_TimeLimit(Z_Construct_UClass_UBTDecorator_TimeLimit, &UBTDecorator_TimeLimit::StaticClass, TEXT("UBTDecorator_TimeLimit"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_TimeLimit);
	UClass* Z_Construct_UClass_UBTService_NoRegister()
	{
		return UBTService::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTService()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTAuxiliaryNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTService::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRestartTimerOnEachActivation, UBTService, uint8);
				UProperty* NewProp_bRestartTimerOnEachActivation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRestartTimerOnEachActivation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRestartTimerOnEachActivation, UBTService), 0x00200c0000000001, CPP_BOOL_PROPERTY_BITMASK(bRestartTimerOnEachActivation, UBTService), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCallTickOnSearchStart, UBTService, uint8);
				UProperty* NewProp_bCallTickOnSearchStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCallTickOnSearchStart"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCallTickOnSearchStart, UBTService), 0x00200c0000000001, CPP_BOOL_PROPERTY_BITMASK(bCallTickOnSearchStart, UBTService), sizeof(uint8), false);
				UProperty* NewProp_RandomDeviation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomDeviation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RandomDeviation, UBTService), 0x0020080000000001);
				UProperty* NewProp_Interval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Interval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Interval, UBTService), 0x0020080000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTService.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTService.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Behavior Tree service nodes is designed to perform \"background\" tasks that update AI's knowledge.\n\nServices are being executed when underlying branch of behavior tree becomes active,\nbut unlike tasks they don't return any results and can't directly affect execution flow.\n\nUsually they perform periodical checks (see TickNode) and often store results in blackboard.\nIf any decorator node below requires results of check beforehand, use OnSearchStart function.\nKeep in mind that any checks performed there have to be instantaneous!\n\nOther typical use case is creating a marker when specific branch is being executed\n(see OnBecomeRelevant, OnCeaseRelevant), by setting a flag in blackboard.\n\nBecause some of them can be instanced for specific AI, following virtual functions are not marked as const:\n- OnBecomeRelevant (from UBTAuxiliaryNode)\n- OnCeaseRelevant (from UBTAuxiliaryNode)\n- TickNode (from UBTAuxiliaryNode)\n- OnSearchStart\n\nIf your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\nTemplate nodes are shared across all behavior tree components using the same tree asset and must store\ntheir runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )"));
				MetaData->SetValue(NewProp_bRestartTimerOnEachActivation, TEXT("Category"), TEXT("Service"));
				MetaData->SetValue(NewProp_bRestartTimerOnEachActivation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTService.h"));
				MetaData->SetValue(NewProp_bRestartTimerOnEachActivation, TEXT("ToolTip"), TEXT("if set, next tick time will be always reset to service's interval when node is activated"));
				MetaData->SetValue(NewProp_bCallTickOnSearchStart, TEXT("Category"), TEXT("Service"));
				MetaData->SetValue(NewProp_bCallTickOnSearchStart, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTService.h"));
				MetaData->SetValue(NewProp_bCallTickOnSearchStart, TEXT("ToolTip"), TEXT("call Tick event when task search enters this node (SearchStart will be called as well)"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("Category"), TEXT("Service"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTService.h"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ToolTip"), TEXT("adds random range to service's Interval"));
				MetaData->SetValue(NewProp_Interval, TEXT("Category"), TEXT("Service"));
				MetaData->SetValue(NewProp_Interval, TEXT("ClampMin"), TEXT("0.001"));
				MetaData->SetValue(NewProp_Interval, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTService.h"));
				MetaData->SetValue(NewProp_Interval, TEXT("ToolTip"), TEXT("defines time span between subsequent ticks of the service"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTService(Z_Construct_UClass_UBTService, &UBTService::StaticClass, TEXT("UBTService"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTService);
	UClass* Z_Construct_UClass_UBTService_BlackboardBase_NoRegister()
	{
		return UBTService_BlackboardBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTService_BlackboardBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTService();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTService_BlackboardBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlackboardKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKey, UBTService_BlackboardBase), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Services/BTService_BlackboardBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ToolTip"), TEXT("blackboard key selector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTService_BlackboardBase(Z_Construct_UClass_UBTService_BlackboardBase, &UBTService_BlackboardBase::StaticClass, TEXT("UBTService_BlackboardBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTService_BlackboardBase);
	UClass* Z_Construct_UClass_UBTService_DefaultFocus_NoRegister()
	{
		return UBTService_DefaultFocus::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTService_DefaultFocus()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTService_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTService_DefaultFocus::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FocusPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FocusPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FocusPriority, UBTService_DefaultFocus), 0x0020080000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Service"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Services/BTService_DefaultFocus.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_DefaultFocus.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Default Focus service node.\nA service node that automatically sets the AI controller's focus when it becomes active."));
				MetaData->SetValue(NewProp_FocusPriority, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_DefaultFocus.h"));
				MetaData->SetValue(NewProp_FocusPriority, TEXT("ToolTip"), TEXT("not exposed to users on purpose. Here to make reusing focus-setting mechanics by derived classes possible"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTService_DefaultFocus(Z_Construct_UClass_UBTService_DefaultFocus, &UBTService_DefaultFocus::StaticClass, TEXT("UBTService_DefaultFocus"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTService_DefaultFocus);
	UClass* Z_Construct_UClass_UEnvQueryItemType_NoRegister()
	{
		return UEnvQueryItemType::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType(Z_Construct_UClass_UEnvQueryItemType, &UEnvQueryItemType::StaticClass, TEXT("UEnvQueryItemType"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType);
	UClass* Z_Construct_UClass_UEnvQueryContext_NoRegister()
	{
		return UEnvQueryContext::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryContext()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryContext::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryContext.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryContext.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryContext(Z_Construct_UClass_UEnvQueryContext, &UEnvQueryContext::StaticClass, TEXT("UEnvQueryContext"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryContext);
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryTestClamping()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryTestClamping_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryTestClamping"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryTestClamping_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryTestClamping"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTestClamping::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTestClamping::SpecifiedValue")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTestClamping::FilterThreshold")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTestClamping::EEnvQueryTestClamping_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvQueryTestClamping::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FilterThreshold.ToolTip"), TEXT("Clamp to test's filter threshold."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SpecifiedValue.ToolTip"), TEXT("Clamp to value specified in test."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryTestClamping_CRC() { return 4125622216U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvDirection()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvDirection_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvDirection"), 0, Get_Z_Construct_UEnum_AIModule_EEnvDirection_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvDirection::TwoPoints")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvDirection::Rotation")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvDirection::EEnvDirection_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvDirection::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Rotation.ToolTip"), TEXT("Context's rotation will be used as a direction."));
			MetaData->SetValue(ReturnEnum, TEXT("TwoPoints.DisplayName"), TEXT("Two Points"));
			MetaData->SetValue(ReturnEnum, TEXT("TwoPoints.ToolTip"), TEXT("Direction from location of one context to another."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvDirection_CRC() { return 2762763217U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvOverlapShape()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvOverlapShape_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvOverlapShape"), 0, Get_Z_Construct_UEnum_AIModule_EEnvOverlapShape_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvOverlapShape"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvOverlapShape::Box")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvOverlapShape::Sphere")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvOverlapShape::Capsule")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvOverlapShape::EEnvOverlapShape_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvOverlapShape::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvOverlapShape_CRC() { return 4251590623U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTraceShape()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTraceShape_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTraceShape"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTraceShape_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTraceShape"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTraceShape::Line")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTraceShape::Box")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTraceShape::Sphere")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTraceShape::Capsule")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTraceShape::EEnvTraceShape_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTraceShape::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTraceShape_CRC() { return 4093656102U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryTrace()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryTrace_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryTrace"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryTrace_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryTrace"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTrace::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTrace::Navigation")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTrace::Geometry")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTrace::NavigationOverLedges")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryTrace::EEnvQueryTrace_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvQueryTrace::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryTrace_CRC() { return 1118802723U; }
	UEnum* Z_Construct_UEnum_AIModule_EAIParamType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EAIParamType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAIParamType"), 0, Get_Z_Construct_UEnum_AIModule_EAIParamType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAIParamType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAIParamType::Float")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAIParamType::Int")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAIParamType::Bool")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAIParamType::EAIParamType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EAIParamType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EAIParamType_CRC() { return 188488445U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryParam()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryParam_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryParam"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryParam_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryParam"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryParam::Float")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryParam::Int")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryParam::Bool")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryParam::EEnvQueryParam_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvQueryParam::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryParam_CRC() { return 1957641321U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryRunMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryRunMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryRunMode"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryRunMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryRunMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryRunMode::SingleResult")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryRunMode::RandomBest5Pct")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryRunMode::RandomBest25Pct")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryRunMode::AllMatching")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryRunMode::EEnvQueryRunMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvQueryRunMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AllMatching.Tooltip"), TEXT("Get all items that match conditions"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RandomBest25Pct.DisplayName"), TEXT("Single Random Item from Best 25%"));
			MetaData->SetValue(ReturnEnum, TEXT("RandomBest25Pct.Tooltip"), TEXT("Pick random item with score 75% .. 100% of max"));
			MetaData->SetValue(ReturnEnum, TEXT("RandomBest5Pct.DisplayName"), TEXT("Single Random Item from Best 5%"));
			MetaData->SetValue(ReturnEnum, TEXT("RandomBest5Pct.Tooltip"), TEXT("Pick random item with score 95% .. 100% of max"));
			MetaData->SetValue(ReturnEnum, TEXT("SingleResult.DisplayName"), TEXT("Single Best Item"));
			MetaData->SetValue(ReturnEnum, TEXT("SingleResult.Tooltip"), TEXT("Pick first item with the best score"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryRunMode_CRC() { return 2574957303U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryStatus()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryStatus_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryStatus"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryStatus_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::Processing")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::Success")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::Failed")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::Aborted")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::OwnerLost")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::MissingParam")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryStatus::EEnvQueryStatus_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvQueryStatus::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryStatus_CRC() { return 144263937U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestScoreOperator()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestScoreOperator_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestScoreOperator"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestScoreOperator_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestScoreOperator"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreOperator::AverageScore")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreOperator::MinScore")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreOperator::MaxScore")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreOperator::EEnvTestScoreOperator_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestScoreOperator::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AverageScore.Tooltip"), TEXT("Use average score from all contexts"));
			MetaData->SetValue(ReturnEnum, TEXT("MaxScore.Tooltip"), TEXT("Use maximum score from all contexts"));
			MetaData->SetValue(ReturnEnum, TEXT("MinScore.Tooltip"), TEXT("Use minimum score from all contexts"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestScoreOperator_CRC() { return 3434225089U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestFilterOperator()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestFilterOperator_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestFilterOperator"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestFilterOperator_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestFilterOperator"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterOperator::AllPass")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterOperator::AnyPass")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterOperator::EEnvTestFilterOperator_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestFilterOperator::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AllPass.Tooltip"), TEXT("All contexts must pass condition"));
			MetaData->SetValue(ReturnEnum, TEXT("AnyPass.Tooltip"), TEXT("At least one context must pass condition"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestFilterOperator_CRC() { return 2917460086U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestCost()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestCost_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestCost"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestCost_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestCost"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestCost::Low")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestCost::Medium")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestCost::High")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestCost::EEnvTestCost_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestCost::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("High.ToolTip"), TEXT("Really expensive calls (e.g. visibility traces, pathfinding)."));
			MetaData->SetValue(ReturnEnum, TEXT("Low.ToolTip"), TEXT("Reading data, math operations (e.g. distance)."));
			MetaData->SetValue(ReturnEnum, TEXT("Medium.ToolTip"), TEXT("Processing data from multiple sources (e.g. fire tickets)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestCost_CRC() { return 1845047472U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestWeight()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestWeight_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestWeight"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestWeight_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::Square")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::Inverse")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::Unused")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::Constant")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::Skip")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestWeight::EEnvTestWeight_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestWeight::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Skip.DisplayName"), TEXT("Do not weight"));
			MetaData->SetValue(ReturnEnum, TEXT("Unused.Hidden"), TEXT(""));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestWeight_CRC() { return 3754797792U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestScoreEquation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestScoreEquation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestScoreEquation"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestScoreEquation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestScoreEquation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::Square")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::InverseLinear")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::SquareRoot")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::Constant")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestScoreEquation::EEnvTestScoreEquation_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestScoreEquation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestScoreEquation_CRC() { return 638060756U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestFilterType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestFilterType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestFilterType"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestFilterType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestFilterType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterType::Minimum")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterType::Maximum")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterType::Range")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterType::Match")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestFilterType::EEnvTestFilterType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestFilterType::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Match.ToolTip"), TEXT("For Boolean tests."));
			MetaData->SetValue(ReturnEnum, TEXT("Maximum.ToolTip"), TEXT("For numeric tests."));
			MetaData->SetValue(ReturnEnum, TEXT("Minimum.ToolTip"), TEXT("For numeric tests."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Range.ToolTip"), TEXT("For numeric tests."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestFilterType_CRC() { return 3960645784U; }
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestPurpose()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestPurpose_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestPurpose"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestPurpose_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestPurpose"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPurpose::Filter")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPurpose::Score")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPurpose::FilterAndScore")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPurpose::EEnvTestPurpose_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestPurpose::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Filter.DisplayName"), TEXT("Filter Only"));
			MetaData->SetValue(ReturnEnum, TEXT("FilterAndScore.DisplayName"), TEXT("Filter and Score"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Score.DisplayName"), TEXT("Score Only"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestPurpose_CRC() { return 3232621141U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EQSParametrizedQueryExecutionRequest"), sizeof(FEQSParametrizedQueryExecutionRequest), Get_Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EQSParametrizedQueryExecutionRequest"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEQSParametrizedQueryExecutionRequest>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseBBKeyForQueryTemplate, FEQSParametrizedQueryExecutionRequest, uint8);
			UProperty* NewProp_bUseBBKeyForQueryTemplate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseBBKeyForQueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseBBKeyForQueryTemplate, FEQSParametrizedQueryExecutionRequest), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseBBKeyForQueryTemplate, FEQSParametrizedQueryExecutionRequest), sizeof(uint8), false);
			UProperty* NewProp_RunMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RunMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RunMode, FEQSParametrizedQueryExecutionRequest), 0x0010000000000001, Z_Construct_UEnum_AIModule_EEnvQueryRunMode());
			UProperty* NewProp_EQSQueryBlackboardKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EQSQueryBlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EQSQueryBlackboardKey, FEQSParametrizedQueryExecutionRequest), 0x0010000000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_QueryConfig = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QueryConfig, FEQSParametrizedQueryExecutionRequest), 0x0010000000000001);
			UProperty* NewProp_QueryConfig_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryConfig, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAIDynamicParam());
			UProperty* NewProp_QueryTemplate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryTemplate, FEQSParametrizedQueryExecutionRequest), 0x0010000000000001, Z_Construct_UClass_UEnvQuery_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bUseBBKeyForQueryTemplate, TEXT("Category"), TEXT("Node"));
			MetaData->SetValue(NewProp_bUseBBKeyForQueryTemplate, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bUseBBKeyForQueryTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_RunMode, TEXT("Category"), TEXT("Node"));
			MetaData->SetValue(NewProp_RunMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_RunMode, TEXT("ToolTip"), TEXT("determines which item will be stored (All = only first matching)"));
			MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("Category"), TEXT("Blackboard"));
			MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("EditCondition"), TEXT("bUseBBKeyForQueryTemplate"));
			MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("ToolTip"), TEXT("blackboard key storing an EQS query template"));
			MetaData->SetValue(NewProp_QueryConfig, TEXT("Category"), TEXT("Node"));
			MetaData->SetValue(NewProp_QueryConfig, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("Category"), TEXT("Node"));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("EditCondition"), TEXT("!bUseBBKeyForQueryTemplate"));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest_CRC() { return 139283949U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAIDynamicParam()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FAIDynamicParam_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AIDynamicParam"), sizeof(FAIDynamicParam), Get_Z_Construct_UScriptStruct_FAIDynamicParam_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AIDynamicParam"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAIDynamicParam>, EStructFlags(0x00000201));
			UProperty* NewProp_BBKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BBKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BBKey, FAIDynamicParam), 0x0010000000000005, Z_Construct_UScriptStruct_FBlackboardKeySelector());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FAIDynamicParam), 0x0010000000000005);
			UProperty* NewProp_ParamType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ParamType, FAIDynamicParam), 0x0010000000020015, Z_Construct_UEnum_AIModule_EAIParamType());
			UProperty* NewProp_ParamType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ParamType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParamName, FAIDynamicParam), 0x0010000000020015);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_BBKey, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_BBKey, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ParamType, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_ParamType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAIDynamicParam_CRC() { return 1612148087U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryResult()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvQueryResult_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvQueryResult"), sizeof(FEnvQueryResult), Get_Z_Construct_UScriptStruct_FEnvQueryResult_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvQueryResult"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvQueryResult>, EStructFlags(0x00000201));
			UProperty* NewProp_QueryID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryID, FEnvQueryResult), 0x0010000000000014);
			UProperty* NewProp_OptionIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptionIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OptionIndex, FEnvQueryResult), 0x0010000000000014);
			UProperty* NewProp_ItemType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ItemType, FEnvQueryResult), 0x0014000000000014, Z_Construct_UClass_UEnvQueryItemType_NoRegister(), UClass::StaticClass());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_QueryID, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_QueryID, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_QueryID, TEXT("ToolTip"), TEXT("instance ID"));
			MetaData->SetValue(NewProp_OptionIndex, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_OptionIndex, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_OptionIndex, TEXT("ToolTip"), TEXT("index of query option, that generated items"));
			MetaData->SetValue(NewProp_ItemType, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(NewProp_ItemType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ItemType, TEXT("ToolTip"), TEXT("type of generated items"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvQueryResult_CRC() { return 3778709597U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvOverlapData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvOverlapData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvOverlapData"), sizeof(FEnvOverlapData), Get_Z_Construct_UScriptStruct_FEnvOverlapData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvOverlapData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvOverlapData>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverlapComplex, FEnvOverlapData, uint8);
			UProperty* NewProp_bOverlapComplex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverlapComplex"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverlapComplex, FEnvOverlapData), 0x0010040000010001, CPP_BOOL_PROPERTY_BITMASK(bOverlapComplex, FEnvOverlapData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyBlockingHits, FEnvOverlapData, uint8);
			UProperty* NewProp_bOnlyBlockingHits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOnlyBlockingHits"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyBlockingHits, FEnvOverlapData), 0x0010040000010001, CPP_BOOL_PROPERTY_BITMASK(bOnlyBlockingHits, FEnvOverlapData), sizeof(uint8), false);
			UProperty* NewProp_OverlapShape = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OverlapShape"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OverlapShape, FEnvOverlapData), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvOverlapShape());
			UProperty* NewProp_OverlapChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OverlapChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OverlapChannel, FEnvOverlapData), 0x0010000000010001, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_ShapeOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShapeOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ShapeOffset, FEnvOverlapData), 0x0010040000010001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ExtentZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentZ"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentZ, FEnvOverlapData), 0x0010000000010001);
			UProperty* NewProp_ExtentY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentY, FEnvOverlapData), 0x0010000000010001);
			UProperty* NewProp_ExtentX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentX, FEnvOverlapData), 0x0010000000010001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bOverlapComplex, TEXT("Category"), TEXT("Overlap"));
			MetaData->SetValue(NewProp_bOverlapComplex, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bOverlapComplex, TEXT("ToolTip"), TEXT("if set, overlap will run on complex collisions"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("Category"), TEXT("Overlap"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("ToolTip"), TEXT("if set, overlap will look only for blocking hits"));
			MetaData->SetValue(NewProp_OverlapShape, TEXT("Category"), TEXT("Overlap"));
			MetaData->SetValue(NewProp_OverlapShape, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_OverlapShape, TEXT("ToolTip"), TEXT("shape used for geometry overlap"));
			MetaData->SetValue(NewProp_OverlapChannel, TEXT("Category"), TEXT("Overlap"));
			MetaData->SetValue(NewProp_OverlapChannel, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_OverlapChannel, TEXT("ToolTip"), TEXT("geometry trace channel used for overlap"));
			MetaData->SetValue(NewProp_ShapeOffset, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ShapeOffset, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ShapeOffset, TEXT("Tooltip"), TEXT("Offset from the item location at which to test the overlap.  For example, you may need to offset vertically to avoid overlaps with flat ground."));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ToolTip"), TEXT("shape parameter for overlap"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ToolTip"), TEXT("shape parameter for overlap"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ToolTip"), TEXT("shape parameter for overlap"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("UIMin"), TEXT("0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvOverlapData_CRC() { return 1309069290U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvTraceData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvTraceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvTraceData"), sizeof(FEnvTraceData), Get_Z_Construct_UScriptStruct_FEnvTraceData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvTraceData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvTraceData>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanProjectDown, FEnvTraceData, uint8);
			UProperty* NewProp_bCanProjectDown = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanProjectDown"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanProjectDown, FEnvTraceData), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bCanProjectDown, FEnvTraceData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanDisableTrace, FEnvTraceData, uint8);
			UProperty* NewProp_bCanDisableTrace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanDisableTrace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanDisableTrace, FEnvTraceData), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bCanDisableTrace, FEnvTraceData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanTraceOnGeometry, FEnvTraceData, uint8);
			UProperty* NewProp_bCanTraceOnGeometry = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanTraceOnGeometry"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanTraceOnGeometry, FEnvTraceData), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bCanTraceOnGeometry, FEnvTraceData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanTraceOnNavMesh, FEnvTraceData, uint8);
			UProperty* NewProp_bCanTraceOnNavMesh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanTraceOnNavMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanTraceOnNavMesh, FEnvTraceData), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bCanTraceOnNavMesh, FEnvTraceData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyBlockingHits, FEnvTraceData, uint8);
			UProperty* NewProp_bOnlyBlockingHits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOnlyBlockingHits"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyBlockingHits, FEnvTraceData), 0x0010040000010001, CPP_BOOL_PROPERTY_BITMASK(bOnlyBlockingHits, FEnvTraceData), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTraceComplex, FEnvTraceData, uint8);
			UProperty* NewProp_bTraceComplex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTraceComplex"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTraceComplex, FEnvTraceData), 0x0010040000010001, CPP_BOOL_PROPERTY_BITMASK(bTraceComplex, FEnvTraceData), sizeof(uint8), false);
			UProperty* NewProp_TraceMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TraceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceMode, FEnvTraceData), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvQueryTrace());
			UProperty* NewProp_TraceShape = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TraceShape"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceShape, FEnvTraceData), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTraceShape());
			UProperty* NewProp_SerializedChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SerializedChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SerializedChannel, FEnvTraceData), 0x0010000000010001, Z_Construct_UEnum_Engine_ECollisionChannel());
			UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, FEnvTraceData), 0x0010000000010001, Z_Construct_UEnum_Engine_ETraceTypeQuery());
			UProperty* NewProp_PostProjectionVerticalOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PostProjectionVerticalOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PostProjectionVerticalOffset, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_ExtentZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentZ"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentZ, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_ExtentY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentY, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_ExtentX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExtentX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExtentX, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_ProjectUp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProjectUp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ProjectUp, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_ProjectDown = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProjectDown"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ProjectDown, FEnvTraceData), 0x0010000000010001);
			UProperty* NewProp_NavigationFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NavigationFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(NavigationFilter, FEnvTraceData), 0x0014000000010001, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_VersionNum = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VersionNum"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VersionNum, FEnvTraceData), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bCanProjectDown, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bCanProjectDown, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bCanProjectDown, TEXT("ToolTip"), TEXT("if set, editor show height up/down properties for projection"));
			MetaData->SetValue(NewProp_bCanDisableTrace, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bCanDisableTrace, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bCanDisableTrace, TEXT("ToolTip"), TEXT("if set, editor will allow"));
			MetaData->SetValue(NewProp_bCanTraceOnGeometry, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bCanTraceOnGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bCanTraceOnGeometry, TEXT("ToolTip"), TEXT("if set, editor will allow picking geometry trace"));
			MetaData->SetValue(NewProp_bCanTraceOnNavMesh, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bCanTraceOnNavMesh, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bCanTraceOnNavMesh, TEXT("ToolTip"), TEXT("if set, editor will allow picking navmesh trace"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bOnlyBlockingHits, TEXT("ToolTip"), TEXT("if set, trace will look only for blocking hits"));
			MetaData->SetValue(NewProp_bTraceComplex, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_bTraceComplex, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_bTraceComplex, TEXT("ToolTip"), TEXT("if set, trace will run on complex collisions"));
			MetaData->SetValue(NewProp_TraceMode, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_TraceMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_TraceMode, TEXT("ToolTip"), TEXT("shape used for geometry tracing"));
			MetaData->SetValue(NewProp_TraceShape, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_TraceShape, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_TraceShape, TEXT("ToolTip"), TEXT("shape used for geometry tracing"));
			MetaData->SetValue(NewProp_SerializedChannel, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_SerializedChannel, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_SerializedChannel, TEXT("ToolTip"), TEXT("geometry trace channel for serialization purposes"));
			MetaData->SetValue(NewProp_TraceChannel, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_TraceChannel, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_TraceChannel, TEXT("ToolTip"), TEXT("geometry trace channel"));
			MetaData->SetValue(NewProp_PostProjectionVerticalOffset, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_PostProjectionVerticalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_PostProjectionVerticalOffset, TEXT("ToolTip"), TEXT("this value will be added to resulting location's Z axis. Can be useful when\n    projecting points to navigation since navmesh is just an approximation of level\n    geometry and items may end up being under collide-able geometry which would\n    for example falsify visibility tests."));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("ToolTip"), TEXT("shape parameter for trace"));
			MetaData->SetValue(NewProp_ExtentZ, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("ToolTip"), TEXT("shape parameter for trace"));
			MetaData->SetValue(NewProp_ExtentY, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("ToolTip"), TEXT("shape parameter for trace"));
			MetaData->SetValue(NewProp_ExtentX, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ProjectUp, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ProjectUp, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ProjectUp, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ProjectUp, TEXT("ToolTip"), TEXT("search height: above point"));
			MetaData->SetValue(NewProp_ProjectUp, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ProjectDown, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_ProjectDown, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ProjectDown, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ProjectDown, TEXT("ToolTip"), TEXT("search height: below point"));
			MetaData->SetValue(NewProp_ProjectDown, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_NavigationFilter, TEXT("Category"), TEXT("Trace"));
			MetaData->SetValue(NewProp_NavigationFilter, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_NavigationFilter, TEXT("ToolTip"), TEXT("navigation filter for tracing"));
			MetaData->SetValue(NewProp_VersionNum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_VersionNum, TEXT("ToolTip"), TEXT("version number for updates"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvTraceData_CRC() { return 1141411425U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvDirection()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvDirection_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvDirection"), sizeof(FEnvDirection), Get_Z_Construct_UScriptStruct_FEnvDirection_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvDirection>, EStructFlags(0x00000201));
			UProperty* NewProp_DirMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DirMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DirMode, FEnvDirection), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvDirection());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Rotation, FEnvDirection), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_LineTo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LineTo"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(LineTo, FEnvDirection), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_LineFrom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LineFrom"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(LineFrom, FEnvDirection), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_DirMode, TEXT("Category"), TEXT("Direction"));
			MetaData->SetValue(NewProp_DirMode, TEXT("DisplayName"), TEXT("Mode"));
			MetaData->SetValue(NewProp_DirMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_DirMode, TEXT("ToolTip"), TEXT("defines direction of second line used by test"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("Direction"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("rotation: direction context"));
			MetaData->SetValue(NewProp_LineTo, TEXT("Category"), TEXT("Direction"));
			MetaData->SetValue(NewProp_LineTo, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_LineTo, TEXT("ToolTip"), TEXT("line: finish context"));
			MetaData->SetValue(NewProp_LineFrom, TEXT("Category"), TEXT("Direction"));
			MetaData->SetValue(NewProp_LineFrom, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_LineFrom, TEXT("ToolTip"), TEXT("line: start context"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvDirection_CRC() { return 3970318122U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvNamedValue()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvNamedValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvNamedValue"), sizeof(FEnvNamedValue), Get_Z_Construct_UScriptStruct_FEnvNamedValue_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvNamedValue"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvNamedValue>, EStructFlags(0x00000201));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FEnvNamedValue), 0x0010000000000005);
			UProperty* NewProp_ParamType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ParamType, FEnvNamedValue), 0x0010000000000005, Z_Construct_UEnum_AIModule_EAIParamType());
			UProperty* NewProp_ParamType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ParamType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParamName, FEnvNamedValue), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Param"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ParamType, TEXT("Category"), TEXT("Param"));
			MetaData->SetValue(NewProp_ParamType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
			MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("Param"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvNamedValue_CRC() { return 751427697U; }
	UClass* Z_Construct_UClass_UEnvQueryTypes_NoRegister()
	{
		return UEnvQueryTypes::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTypes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTypes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTypes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTypes(Z_Construct_UClass_UEnvQueryTypes, &UEnvQueryTypes::StaticClass, TEXT("UEnvQueryTypes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTypes);
	UClass* Z_Construct_UClass_UBTService_RunEQS_NoRegister()
	{
		return UBTService_RunEQS::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTService_RunEQS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTService_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTService_RunEQS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EQSRequest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQSRequest"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EQSRequest, UBTService_RunEQS), 0x0020080000000001, Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Services/BTService_RunEQS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_RunEQS.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_EQSRequest, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_EQSRequest, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_RunEQS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTService_RunEQS(Z_Construct_UClass_UBTService_RunEQS, &UBTService_RunEQS::StaticClass, TEXT("UBTService_RunEQS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTService_RunEQS);
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_IsServiceActive()
	{
		struct BTService_BlueprintBase_eventIsServiceActive_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsServiceActive"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(BTService_BlueprintBase_eventIsServiceActive_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTService_BlueprintBase_eventIsServiceActive_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTService_BlueprintBase_eventIsServiceActive_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTService_BlueprintBase_eventIsServiceActive_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("check if service is currently being active"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivation()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveActivation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveActivation_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTService_BlueprintBase_eventReceiveActivation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("service became active\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivationAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveActivationAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveActivationAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTService_BlueprintBase_eventReceiveActivationAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTService_BlueprintBase_eventReceiveActivationAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveActivation function.\n    @see ReceiveActivation for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivation()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveDeactivation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveDeactivation_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTService_BlueprintBase_eventReceiveDeactivation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("service became inactive\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivationAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveDeactivationAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveDeactivationAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTService_BlueprintBase_eventReceiveDeactivationAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTService_BlueprintBase_eventReceiveDeactivationAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveDeactivation function.\n    @see ReceiveDeactivation for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStart()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveSearchStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveSearchStart_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTService_BlueprintBase_eventReceiveSearchStart_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("task search enters branch of tree\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStartAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveSearchStartAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveSearchStartAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTService_BlueprintBase_eventReceiveSearchStartAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTService_BlueprintBase_eventReceiveSearchStartAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveSearchStart function.\n    @see ReceiveSearchStart for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTick()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveTick_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTService_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080);
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTService_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("tick function\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTickAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTService_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTickAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTService_BlueprintBase_eventReceiveTickAI_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTService_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080);
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTService_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTService_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveTick function.\n    @see ReceiveTick for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBTService_BlueprintBase_NoRegister()
	{
		return UBTService_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTService_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTService();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTService_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;

				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_IsServiceActive());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivation());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivationAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivation());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivationAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStartAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTick());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTickAI());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowEventDetails, UBTService_BlueprintBase, uint8);
				UProperty* NewProp_bShowEventDetails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowEventDetails"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowEventDetails, UBTService_BlueprintBase), 0x0020080000000801, CPP_BOOL_PROPERTY_BITMASK(bShowEventDetails, UBTService_BlueprintBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowPropertyDetails, UBTService_BlueprintBase, uint8);
				UProperty* NewProp_bShowPropertyDetails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowPropertyDetails"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowPropertyDetails, UBTService_BlueprintBase), 0x0020080000000801, CPP_BOOL_PROPERTY_BITMASK(bShowPropertyDetails, UBTService_BlueprintBase), sizeof(uint8), false);
				UProperty* NewProp_ActorOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorOwner, UBTService_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_AIOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AIOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AIOwner, UBTService_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AAIController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_IsServiceActive(), "IsServiceActive"); // 1794374802
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivation(), "ReceiveActivation"); // 752000063
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveActivationAI(), "ReceiveActivationAI"); // 2321054340
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivation(), "ReceiveDeactivation"); // 869918990
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveDeactivationAI(), "ReceiveDeactivationAI"); // 697423620
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStart(), "ReceiveSearchStart"); // 2789225042
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveSearchStartAI(), "ReceiveSearchStartAI"); // 1255061830
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTick(), "ReceiveTick"); // 372067773
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTService_BlueprintBase_ReceiveTickAI(), "ReceiveTickAI"); // 949242897
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for blueprint based service nodes. Do NOT use it for creating native c++ classes!\n\nWhen service receives Deactivation event, all latent actions associated this instance are being removed.\nThis prevents from resuming activity started by Activation, but does not handle external events.\nPlease use them safely (unregister at abort) and call IsServiceActive() when in doubt."));
				MetaData->SetValue(NewProp_bShowEventDetails, TEXT("Category"), TEXT("Description"));
				MetaData->SetValue(NewProp_bShowEventDetails, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bShowEventDetails, TEXT("ToolTip"), TEXT("show detailed information about implemented events"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("Category"), TEXT("Description"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ToolTip"), TEXT("show detailed information about properties"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ToolTip"), TEXT("Cached actor owner of BehaviorTreeComponent."));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Services/BTService_BlueprintBase.h"));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ToolTip"), TEXT("Cached AIController owner of BehaviorTreeComponent."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTService_BlueprintBase(Z_Construct_UClass_UBTService_BlueprintBase, &UBTService_BlueprintBase::StaticClass, TEXT("UBTService_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTService_BlueprintBase);
	UClass* Z_Construct_UClass_UBTComposite_Selector_NoRegister()
	{
		return UBTComposite_Selector::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTComposite_Selector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTCompositeNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTComposite_Selector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Composites/BTComposite_Selector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Composites/BTComposite_Selector.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selector composite node.\nSelector Nodes execute their children from left to right, and will stop executing its children when one of their children succeeds.\nIf a Selector's child succeeds, the Selector succeeds. If all the Selector's children fail, the Selector fails."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTComposite_Selector(Z_Construct_UClass_UBTComposite_Selector, &UBTComposite_Selector::StaticClass, TEXT("UBTComposite_Selector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTComposite_Selector);
	UClass* Z_Construct_UClass_UBTComposite_Sequence_NoRegister()
	{
		return UBTComposite_Sequence::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTComposite_Sequence()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTCompositeNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTComposite_Sequence::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Composites/BTComposite_Sequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Composites/BTComposite_Sequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sequence composite node.\nSequence Nodes execute their children from left to right, and will stop executing its children when one of their children fails.\nIf a child fails, then the Sequence fails. If all the Sequence's children succeed, then the Sequence succeeds."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTComposite_Sequence(Z_Construct_UClass_UBTComposite_Sequence, &UBTComposite_Sequence::StaticClass, TEXT("UBTComposite_Sequence"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTComposite_Sequence);
	UEnum* Z_Construct_UEnum_AIModule_EBTParallelMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EBTParallelMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBTParallelMode"), 0, Get_Z_Construct_UEnum_AIModule_EBTParallelMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBTParallelMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTParallelMode::AbortBackground")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTParallelMode::WaitForBackground")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EBTParallelMode::EBTParallelMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EBTParallelMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AbortBackground.DisplayName"), TEXT("Immediate"));
			MetaData->SetValue(ReturnEnum, TEXT("AbortBackground.ToolTip"), TEXT("When main task finishes, immediately abort background tree."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Composites/BTComposite_SimpleParallel.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("keep in sync with DescribeFinishMode"));
			MetaData->SetValue(ReturnEnum, TEXT("WaitForBackground.DisplayName"), TEXT("Delayed"));
			MetaData->SetValue(ReturnEnum, TEXT("WaitForBackground.ToolTip"), TEXT("When main task finishes, wait for background tree to finish."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EBTParallelMode_CRC() { return 3778679032U; }
	UClass* Z_Construct_UClass_UBTComposite_SimpleParallel_NoRegister()
	{
		return UBTComposite_SimpleParallel::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTComposite_SimpleParallel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTCompositeNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTComposite_SimpleParallel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FinishMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FinishMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FinishMode, UBTComposite_SimpleParallel), 0x0010000000000801, Z_Construct_UEnum_AIModule_EBTParallelMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Composites/BTComposite_SimpleParallel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Composites/BTComposite_SimpleParallel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simple Parallel composite node.\nAllows for running two children: one which must be a single task node (with optional decorators), and the other of which can be a complete subtree."));
				MetaData->SetValue(NewProp_FinishMode, TEXT("Category"), TEXT("Parallel"));
				MetaData->SetValue(NewProp_FinishMode, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Composites/BTComposite_SimpleParallel.h"));
				MetaData->SetValue(NewProp_FinishMode, TEXT("ToolTip"), TEXT("how background tree should be handled when main task finishes execution"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTComposite_SimpleParallel(Z_Construct_UClass_UBTComposite_SimpleParallel, &UBTComposite_SimpleParallel::StaticClass, TEXT("UBTComposite_SimpleParallel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTComposite_SimpleParallel);
	UClass* Z_Construct_UClass_UBTTaskNode_NoRegister()
	{
		return UBTTaskNode::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTaskNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTaskNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreRestartSelf, UBTTaskNode, uint8);
				UProperty* NewProp_bIgnoreRestartSelf = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreRestartSelf"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreRestartSelf, UBTTaskNode), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreRestartSelf, UBTTaskNode), sizeof(uint8), false);
				UProperty* NewProp_Services = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Services"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Services, UBTTaskNode), 0x0010000000000000);
				UProperty* NewProp_Services_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Services, TEXT("Services"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UBTService_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/BTTaskNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTaskNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Task are leaf nodes of behavior tree, which perform actual actions\n\nBecause some of them can be instanced for specific AI, following virtual functions are not marked as const:\n - ExecuteTask\n - AbortTask\n - TickTask\n - OnMessage\n\nIf your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\nTemplate nodes are shared across all behavior tree components using the same tree asset and must store\ntheir runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )"));
				MetaData->SetValue(NewProp_bIgnoreRestartSelf, TEXT("Category"), TEXT("Task"));
				MetaData->SetValue(NewProp_bIgnoreRestartSelf, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTaskNode.h"));
				MetaData->SetValue(NewProp_bIgnoreRestartSelf, TEXT("ToolTip"), TEXT("if set, task search will be discarded when this task is selected to execute but is already running"));
				MetaData->SetValue(NewProp_Services, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/BTTaskNode.h"));
				MetaData->SetValue(NewProp_Services, TEXT("ToolTip"), TEXT("service nodes"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTaskNode(Z_Construct_UClass_UBTTaskNode, &UBTTaskNode::StaticClass, TEXT("UBTTaskNode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTaskNode);
	UClass* Z_Construct_UClass_UBTTask_BlackboardBase_NoRegister()
	{
		return UBTTask_BlackboardBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_BlackboardBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_BlackboardBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlackboardKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKey, UBTTask_BlackboardBase), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_BlackboardBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlackboardBase.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ToolTip"), TEXT("blackboard key selector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_BlackboardBase(Z_Construct_UClass_UBTTask_BlackboardBase, &UBTTask_BlackboardBase::StaticClass, TEXT("UBTTask_BlackboardBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_BlackboardBase);
	UClass* Z_Construct_UClass_UBTTask_MoveTo_NoRegister()
	{
		return UBTTask_MoveTo::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_MoveTo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_MoveTo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopOnOverlap, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bStopOnOverlap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStopOnOverlap"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopOnOverlap, UBTTask_MoveTo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bStopOnOverlap, UBTTask_MoveTo), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProjectGoalLocation, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bProjectGoalLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProjectGoalLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProjectGoalLocation, UBTTask_MoveTo), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bProjectGoalLocation, UBTTask_MoveTo), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTrackMovingGoal, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bTrackMovingGoal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTrackMovingGoal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTrackMovingGoal, UBTTask_MoveTo), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bTrackMovingGoal, UBTTask_MoveTo), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowPartialPath, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bAllowPartialPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowPartialPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowPartialPath, UBTTask_MoveTo), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bAllowPartialPath, UBTTask_MoveTo), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowStrafe, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bAllowStrafe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowStrafe"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowStrafe, UBTTask_MoveTo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAllowStrafe, UBTTask_MoveTo), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bObserveBlackboardValue, UBTTask_MoveTo, uint8);
				UProperty* NewProp_bObserveBlackboardValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bObserveBlackboardValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bObserveBlackboardValue, UBTTask_MoveTo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bObserveBlackboardValue, UBTTask_MoveTo), sizeof(uint8), false);
				UProperty* NewProp_ObservedBlackboardValueTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObservedBlackboardValueTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ObservedBlackboardValueTolerance, UBTTask_MoveTo), 0x0010040000000001);
				UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(FilterClass, UBTTask_MoveTo), 0x0014000000000001, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_AcceptableRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AcceptableRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AcceptableRadius, UBTTask_MoveTo), 0x0010000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Move To task node.\nMoves the AI pawn toward the specified Actor or Location blackboard entry using the navigation system."));
				MetaData->SetValue(NewProp_bStopOnOverlap, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bStopOnOverlap, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bStopOnOverlap, TEXT("ToolTip"), TEXT("if set to true agent's radius will be added to AcceptableRadius for purposes of checking\n    if path's end point has been reached. Will result in AI stopping on contact with destination location"));
				MetaData->SetValue(NewProp_bProjectGoalLocation, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bProjectGoalLocation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bProjectGoalLocation, TEXT("ToolTip"), TEXT("if set, goal location will be projected on navigation data (navmesh) before using"));
				MetaData->SetValue(NewProp_bTrackMovingGoal, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bTrackMovingGoal, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bTrackMovingGoal, TEXT("ToolTip"), TEXT("if set, path to goal actor will update itself when actor moves"));
				MetaData->SetValue(NewProp_bAllowPartialPath, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bAllowPartialPath, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bAllowPartialPath, TEXT("ToolTip"), TEXT("if set, use incomplete path when goal can't be reached"));
				MetaData->SetValue(NewProp_bAllowStrafe, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bAllowStrafe, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bObserveBlackboardValue, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_bObserveBlackboardValue, TEXT("ToolTip"), TEXT("if move goal in BB changes the move will be redirected to new location"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("EditCondition"), TEXT("bObserveBlackboardValue"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("ToolTip"), TEXT("if task is expected to react to changes to location represented by BB key\n    this property can be used to tweak sensitivity of the mechanism. Value is\n    recommended to be less then AcceptableRadius"));
				MetaData->SetValue(NewProp_ObservedBlackboardValueTolerance, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ToolTip"), TEXT("\"None\" will result in default filter being used"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveTo.h"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("UIMin"), TEXT("0.0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_MoveTo(Z_Construct_UClass_UBTTask_MoveTo, &UBTTask_MoveTo::StaticClass, TEXT("UBTTask_MoveTo"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_MoveTo);
	UClass* Z_Construct_UClass_UBTTask_MoveDirectlyToward_NoRegister()
	{
		return UBTTask_MoveDirectlyToward::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_MoveDirectlyToward()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_MoveTo();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_MoveDirectlyToward::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatedDeprecatedProperties, UBTTask_MoveDirectlyToward, uint8);
				UProperty* NewProp_bUpdatedDeprecatedProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatedDeprecatedProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatedDeprecatedProperties, UBTTask_MoveDirectlyToward), 0x0040000000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdatedDeprecatedProperties, UBTTask_MoveDirectlyToward), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProjectVectorGoalToNavigation, UBTTask_MoveDirectlyToward, uint8);
				UProperty* NewProp_bProjectVectorGoalToNavigation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProjectVectorGoalToNavigation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProjectVectorGoalToNavigation, UBTTask_MoveDirectlyToward), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bProjectVectorGoalToNavigation, UBTTask_MoveDirectlyToward), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisablePathUpdateOnGoalLocationChange, UBTTask_MoveDirectlyToward, uint8);
				UProperty* NewProp_bDisablePathUpdateOnGoalLocationChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisablePathUpdateOnGoalLocationChange"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisablePathUpdateOnGoalLocationChange, UBTTask_MoveDirectlyToward), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bDisablePathUpdateOnGoalLocationChange, UBTTask_MoveDirectlyToward), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_MoveDirectlyToward.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveDirectlyToward.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Move Directly Toward task node.\nMoves the AI pawn toward the specified Actor or Location (Vector) blackboard entry in a straight line, without regard to any navigation system. If you need the AI to navigate, use the \"Move To\" node instead."));
				MetaData->SetValue(NewProp_bUpdatedDeprecatedProperties, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveDirectlyToward.h"));
				MetaData->SetValue(NewProp_bProjectVectorGoalToNavigation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveDirectlyToward.h"));
				MetaData->SetValue(NewProp_bDisablePathUpdateOnGoalLocationChange, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MoveDirectlyToward.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_MoveDirectlyToward(Z_Construct_UClass_UBTTask_MoveDirectlyToward, &UBTTask_MoveDirectlyToward::StaticClass, TEXT("UBTTask_MoveDirectlyToward"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_MoveDirectlyToward);
	UClass* Z_Construct_UClass_UBTTask_RotateToFaceBBEntry_NoRegister()
	{
		return UBTTask_RotateToFaceBBEntry::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_RotateToFaceBBEntry()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_RotateToFaceBBEntry::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Precision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Precision"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Precision, UBTTask_RotateToFaceBBEntry), 0x0020080000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_RotateToFaceBBEntry.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RotateToFaceBBEntry.h"));
				MetaData->SetValue(NewProp_Precision, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_Precision, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Precision, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RotateToFaceBBEntry.h"));
				MetaData->SetValue(NewProp_Precision, TEXT("ToolTip"), TEXT("Success condition precision in decrees"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_RotateToFaceBBEntry(Z_Construct_UClass_UBTTask_RotateToFaceBBEntry, &UBTTask_RotateToFaceBBEntry::StaticClass, TEXT("UBTTask_RotateToFaceBBEntry"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_RotateToFaceBBEntry);
	UClass* Z_Construct_UClass_UBTTask_RunEQSQuery_NoRegister()
	{
		return UBTTask_RunEQSQuery::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_RunEQSQuery()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_RunEQSQuery::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EQSRequest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQSRequest"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EQSRequest, UBTTask_RunEQSQuery), 0x0010000000000001, Z_Construct_UScriptStruct_FEQSParametrizedQueryExecutionRequest());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseBBKey, UBTTask_RunEQSQuery, bool);
				UProperty* NewProp_bUseBBKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseBBKey"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseBBKey, UBTTask_RunEQSQuery), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseBBKey, UBTTask_RunEQSQuery), sizeof(bool), true);
				UProperty* NewProp_EQSQueryBlackboardKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQSQueryBlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EQSQueryBlackboardKey, UBTTask_RunEQSQuery), 0x0010000000020001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
				UProperty* NewProp_RunMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RunMode, UBTTask_RunEQSQuery), 0x0010000000020001, Z_Construct_UEnum_AIModule_EEnvQueryRunMode());
				UProperty* NewProp_QueryConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QueryConfig, UBTTask_RunEQSQuery), 0x0010000000020001);
				UProperty* NewProp_QueryConfig_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryConfig, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FAIDynamicParam());
				UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QueryParams, UBTTask_RunEQSQuery), 0x0010000000020001);
				UProperty* NewProp_QueryParams_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryParams, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FEnvNamedValue());
				UProperty* NewProp_QueryTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryTemplate, UBTTask_RunEQSQuery), 0x0010000000020001, Z_Construct_UClass_UEnvQuery_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Run Environment Query System Query task node.\nRuns the specified environment query when executed."));
				MetaData->SetValue(NewProp_EQSRequest, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_EQSRequest, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_bUseBBKey, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bUseBBKey, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bUseBBKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("DisplayName"), TEXT("EQSQueryBlackboardKey_DEPRECATED"));
				MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("EditCondition"), TEXT("bUseBBKey"));
				MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_EQSQueryBlackboardKey, TEXT("ToolTip"), TEXT("blackboard key storing an EQS query template"));
				MetaData->SetValue(NewProp_RunMode, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_RunMode, TEXT("DisplayName"), TEXT("RunMode_DEPRECATED"));
				MetaData->SetValue(NewProp_RunMode, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_RunMode, TEXT("ToolTip"), TEXT("determines which item will be stored (All = only first matching)"));
				MetaData->SetValue(NewProp_QueryConfig, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_QueryConfig, TEXT("DisplayName"), TEXT("QueryConfig_DEPRECATED"));
				MetaData->SetValue(NewProp_QueryConfig, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("DisplayName"), TEXT("QueryParams_DEPRECATED"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("ToolTip"), TEXT("optional parameters for query"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("DisplayName"), TEXT("QueryTemplate_DEPRECATED"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("EditCondition"), TEXT("!bUseBBKey"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunEQSQuery.h"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("ToolTip"), TEXT("query to run"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_RunEQSQuery(Z_Construct_UClass_UBTTask_RunEQSQuery, &UBTTask_RunEQSQuery::StaticClass, TEXT("UBTTask_RunEQSQuery"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_RunEQSQuery);
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_FinishAbort()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishAbort"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("aborts task execution"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_FinishExecute()
	{
		struct BTTask_BlueprintBase_eventFinishExecute_Parms
		{
			bool bSuccess;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishExecute"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(BTTask_BlueprintBase_eventFinishExecute_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuccess, BTTask_BlueprintBase_eventFinishExecute_Parms, bool);
			UProperty* NewProp_bSuccess = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSuccess"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuccess, BTTask_BlueprintBase_eventFinishExecute_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSuccess, BTTask_BlueprintBase_eventFinishExecute_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("finishes task execution with Success or Fail result"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskAborting()
	{
		struct BTTask_BlueprintBase_eventIsTaskAborting_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsTaskAborting"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(BTTask_BlueprintBase_eventIsTaskAborting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTTask_BlueprintBase_eventIsTaskAborting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTTask_BlueprintBase_eventIsTaskAborting_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTTask_BlueprintBase_eventIsTaskAborting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("check if task is currently being aborted"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskExecuting()
	{
		struct BTTask_BlueprintBase_eventIsTaskExecuting_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsTaskExecuting"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54080401, 65535, sizeof(BTTask_BlueprintBase_eventIsTaskExecuting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BTTask_BlueprintBase_eventIsTaskExecuting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BTTask_BlueprintBase_eventIsTaskExecuting_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BTTask_BlueprintBase_eventIsTaskExecuting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("check if task is currently being executed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbort()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveAbort"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveAbort_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTTask_BlueprintBase_eventReceiveAbort_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("if blueprint graph contains this event, task will stay active until FinishAbort is called\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbortAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveAbortAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveAbortAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTTask_BlueprintBase_eventReceiveAbortAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTTask_BlueprintBase_eventReceiveAbortAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveAbort\n    @see ReceiveAbort for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecute()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecute"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveExecute_Parms));
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTTask_BlueprintBase_eventReceiveExecute_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("entry point, task will stay active until FinishExecute is called.\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecuteAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveExecuteAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveExecuteAI_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTTask_BlueprintBase_eventReceiveExecuteAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTTask_BlueprintBase_eventReceiveExecuteAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of ReceiveExecute\n     @see ReceiveExecute for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTick()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveTick_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTTask_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080);
			UProperty* NewProp_OwnerActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerActor, BTTask_BlueprintBase_eventReceiveTick_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("tick function\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTickAI()
	{
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveTickAI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535, sizeof(BTTask_BlueprintBase_eventReceiveTickAI_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, BTTask_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080);
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, BTTask_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			UProperty* NewProp_OwnerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwnerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerController, BTTask_BlueprintBase_eventReceiveTickAI_Parms), 0x0010000000000080, Z_Construct_UClass_AAIController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Alternative AI version of tick function.\n    @see ReceiveTick for more details\n    @Note that if both generic and AI event versions are implemented only the more\n    suitable one will be called, meaning the AI version if called for AI, generic one otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessage()
	{
		struct BTTask_BlueprintBase_eventSetFinishOnMessage_Parms
		{
			FName MessageName;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFinishOnMessage"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(BTTask_BlueprintBase_eventSetFinishOnMessage_Parms));
			UProperty* NewProp_MessageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MessageName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MessageName, BTTask_BlueprintBase_eventSetFinishOnMessage_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("task execution will be finished (with result 'Success') after receiving specified message"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessageWithId()
	{
		struct BTTask_BlueprintBase_eventSetFinishOnMessageWithId_Parms
		{
			FName MessageName;
			int32 RequestID;
		};
		UObject* Outer=Z_Construct_UClass_UBTTask_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFinishOnMessageWithId"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04080401, 65535, sizeof(BTTask_BlueprintBase_eventSetFinishOnMessageWithId_Parms));
			UProperty* NewProp_RequestID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RequestID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RequestID, BTTask_BlueprintBase_eventSetFinishOnMessageWithId_Parms), 0x0010000000000080);
			UProperty* NewProp_MessageName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MessageName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MessageName, BTTask_BlueprintBase_eventSetFinishOnMessageWithId_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|BehaviorTree"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RequestID"), TEXT("-1"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("task execution will be finished (with result 'Success') after receiving specified message with indicated ID"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBTTask_BlueprintBase_NoRegister()
	{
		return UBTTask_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;

				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_FinishAbort());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_FinishExecute());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskAborting());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskExecuting());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbort());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbortAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecute());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecuteAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTick());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTickAI());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessage());
				OuterClass->LinkChild(Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessageWithId());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowPropertyDetails, UBTTask_BlueprintBase, uint8);
				UProperty* NewProp_bShowPropertyDetails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowPropertyDetails"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowPropertyDetails, UBTTask_BlueprintBase), 0x0020080000000801, CPP_BOOL_PROPERTY_BITMASK(bShowPropertyDetails, UBTTask_BlueprintBase), sizeof(uint8), false);
				UProperty* NewProp_ActorOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorOwner, UBTTask_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_AIOwner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AIOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AIOwner, UBTTask_BlueprintBase), 0x0020080000002000, Z_Construct_UClass_AAIController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_FinishAbort(), "FinishAbort"); // 1764954090
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_FinishExecute(), "FinishExecute"); // 3857697413
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskAborting(), "IsTaskAborting"); // 1353496018
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_IsTaskExecuting(), "IsTaskExecuting"); // 2362228630
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbort(), "ReceiveAbort"); // 905047861
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveAbortAI(), "ReceiveAbortAI"); // 971527228
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecute(), "ReceiveExecute"); // 1436341431
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveExecuteAI(), "ReceiveExecuteAI"); // 3382643238
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTick(), "ReceiveTick"); // 3609809844
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_ReceiveTickAI(), "ReceiveTickAI"); // 3829284457
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessage(), "SetFinishOnMessage"); // 3036913722
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UBTTask_BlueprintBase_SetFinishOnMessageWithId(), "SetFinishOnMessageWithId"); // 1357595388
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for blueprint based task nodes. Do NOT use it for creating native c++ classes!\n\nWhen task receives Abort event, all latent actions associated this instance are being removed.\nThis prevents from resuming activity started by Execute, but does not handle external events.\nPlease use them safely (unregister at abort) and call IsTaskExecuting() when in doubt."));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("Category"), TEXT("Description"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
				MetaData->SetValue(NewProp_bShowPropertyDetails, TEXT("ToolTip"), TEXT("show detailed information about properties"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
				MetaData->SetValue(NewProp_ActorOwner, TEXT("ToolTip"), TEXT("Cached actor owner of BehaviorTreeComponent."));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_BlueprintBase.h"));
				MetaData->SetValue(NewProp_AIOwner, TEXT("ToolTip"), TEXT("Cached AIController owner of BehaviorTreeComponent."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_BlueprintBase(Z_Construct_UClass_UBTTask_BlueprintBase, &UBTTask_BlueprintBase::StaticClass, TEXT("UBTTask_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_BlueprintBase);
	UClass* Z_Construct_UClass_UBTTask_GameplayTaskBase_NoRegister()
	{
		return UBTTask_GameplayTaskBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_GameplayTaskBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_GameplayTaskBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWaitForGameplayTask, UBTTask_GameplayTaskBase, uint8);
				UProperty* NewProp_bWaitForGameplayTask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWaitForGameplayTask"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWaitForGameplayTask, UBTTask_GameplayTaskBase), 0x00200c0000000001, CPP_BOOL_PROPERTY_BITMASK(bWaitForGameplayTask, UBTTask_GameplayTaskBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_GameplayTaskBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_GameplayTaskBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for managing gameplay tasks\nSince AITask doesn't have any kind of success/failed results, default implemenation will only return EBTNode::Succeeded\n\nIn your ExecuteTask:\n- use NewBTAITask() helper to create task\n- initialize task with values if needed\n- use StartGameplayTask() helper to execute and get node result"));
				MetaData->SetValue(NewProp_bWaitForGameplayTask, TEXT("Category"), TEXT("Task"));
				MetaData->SetValue(NewProp_bWaitForGameplayTask, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_GameplayTaskBase.h"));
				MetaData->SetValue(NewProp_bWaitForGameplayTask, TEXT("ToolTip"), TEXT("if set, behavior tree task will wait until gameplay tasks finishes"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_GameplayTaskBase(Z_Construct_UClass_UBTTask_GameplayTaskBase, &UBTTask_GameplayTaskBase::StaticClass, TEXT("UBTTask_GameplayTaskBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_GameplayTaskBase);
	UClass* Z_Construct_UClass_UBTTask_MakeNoise_NoRegister()
	{
		return UBTTask_MakeNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_MakeNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_MakeNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Loudnes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Loudnes"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Loudnes, UBTTask_MakeNoise), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_MakeNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MakeNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Make Noise task node.\nA task node that calls MakeNoise() on this Pawn when executed."));
				MetaData->SetValue(NewProp_Loudnes, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_MakeNoise.h"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("ToolTip"), TEXT("Loudnes of generated noise"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Loudnes, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_MakeNoise(Z_Construct_UClass_UBTTask_MakeNoise, &UBTTask_MakeNoise::StaticClass, TEXT("UBTTask_MakeNoise"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_MakeNoise);
	UClass* Z_Construct_UClass_UBTTask_PawnActionBase_NoRegister()
	{
		return UBTTask_PawnActionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_PawnActionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_PawnActionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_PawnActionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PawnActionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for managing pawn actions\n\nTask will set itself as action observer before pushing it to AI Controller,\noverride OnActionEvent if you need any special event handling.\n\nPlease use result returned by PushAction for ExecuteTask function."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_PawnActionBase(Z_Construct_UClass_UBTTask_PawnActionBase, &UBTTask_PawnActionBase::StaticClass, TEXT("UBTTask_PawnActionBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_PawnActionBase);
	UClass* Z_Construct_UClass_UBTTask_PushPawnAction_NoRegister()
	{
		return UBTTask_PushPawnAction::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_PushPawnAction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_PawnActionBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_PushPawnAction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Action"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Action, UBTTask_PushPawnAction), 0x0022080000080009, Z_Construct_UClass_UPawnAction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_PushPawnAction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PushPawnAction.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Action task node.\nPush pawn action to controller."));
				MetaData->SetValue(NewProp_Action, TEXT("Category"), TEXT("Action"));
				MetaData->SetValue(NewProp_Action, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Action, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PushPawnAction.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_PushPawnAction(Z_Construct_UClass_UBTTask_PushPawnAction, &UBTTask_PushPawnAction::StaticClass, TEXT("UBTTask_PushPawnAction"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_PushPawnAction);
	UClass* Z_Construct_UClass_UBTTask_PlayAnimation_NoRegister()
	{
		return UBTTask_PlayAnimation::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_PlayAnimation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_PlayAnimation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CachedSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedSkelMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CachedSkelMesh, UBTTask_PlayAnimation), 0x0010000000080008, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
				UProperty* NewProp_MyOwnerComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MyOwnerComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MyOwnerComp, UBTTask_PlayAnimation), 0x0010000000080008, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNonBlocking, UBTTask_PlayAnimation, uint8);
				UProperty* NewProp_bNonBlocking = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNonBlocking"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNonBlocking, UBTTask_PlayAnimation), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bNonBlocking, UBTTask_PlayAnimation), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, UBTTask_PlayAnimation, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, UBTTask_PlayAnimation), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, UBTTask_PlayAnimation), sizeof(uint8), false);
				UProperty* NewProp_AnimationToPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationToPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AnimationToPlay, UBTTask_PlayAnimation), 0x0010000000000001, Z_Construct_UClass_UAnimationAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Play indicated AnimationAsset on Pawn controlled by BT\nNote that this node is generic and is handing multiple special cases,\nIf you want a more efficient solution you'll need to implement it yourself (or wait for our BTTask_PlayCharacterAnimation)"));
				MetaData->SetValue(NewProp_CachedSkelMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CachedSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(NewProp_MyOwnerComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MyOwnerComp, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(NewProp_bNonBlocking, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bNonBlocking, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(NewProp_bNonBlocking, TEXT("ToolTip"), TEXT("if true the task will just trigger the animation and instantly finish. Fire and Forget."));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(NewProp_AnimationToPlay, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_AnimationToPlay, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlayAnimation.h"));
				MetaData->SetValue(NewProp_AnimationToPlay, TEXT("ToolTip"), TEXT("Animation asset to play. Note that it needs to match the skeleton of pawn this BT is controlling"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_PlayAnimation(Z_Construct_UClass_UBTTask_PlayAnimation, &UBTTask_PlayAnimation::StaticClass, TEXT("UBTTask_PlayAnimation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_PlayAnimation);
	UClass* Z_Construct_UClass_UBTTask_PlaySound_NoRegister()
	{
		return UBTTask_PlaySound::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_PlaySound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_PlaySound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundToPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundToPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundToPlay, UBTTask_PlaySound), 0x0010000000000001, Z_Construct_UClass_USoundCue_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_PlaySound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlaySound.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Play Sound task node.\nPlays the specified sound when executed."));
				MetaData->SetValue(NewProp_SoundToPlay, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_SoundToPlay, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_PlaySound.h"));
				MetaData->SetValue(NewProp_SoundToPlay, TEXT("ToolTip"), TEXT("CUE to play"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_PlaySound(Z_Construct_UClass_UBTTask_PlaySound, &UBTTask_PlaySound::StaticClass, TEXT("UBTTask_PlaySound"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_PlaySound);
	UClass* Z_Construct_UClass_UBTTask_RunBehavior_NoRegister()
	{
		return UBTTask_RunBehavior::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_RunBehavior()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_RunBehavior::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BehaviorAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BehaviorAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BehaviorAsset, UBTTask_RunBehavior), 0x0020080000000001, Z_Construct_UClass_UBehaviorTree_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_RunBehavior.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehavior.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("RunBehavior task allows pushing subtrees on execution stack.\nSubtree asset can't be changed in runtime!\n\nThis limitation is caused by support for subtree's root level decorators,\nwhich are injected into parent tree, and structure of running tree\ncannot be modified in runtime (see: BTNode: ExecutionIndex, MemoryOffset)\n\nUse RunBehaviorDynamic task for subtrees that need to be changed in runtime."));
				MetaData->SetValue(NewProp_BehaviorAsset, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_BehaviorAsset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehavior.h"));
				MetaData->SetValue(NewProp_BehaviorAsset, TEXT("ToolTip"), TEXT("behavior to run"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_RunBehavior(Z_Construct_UClass_UBTTask_RunBehavior, &UBTTask_RunBehavior::StaticClass, TEXT("UBTTask_RunBehavior"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_RunBehavior);
	UClass* Z_Construct_UClass_UBTTask_RunBehaviorDynamic_NoRegister()
	{
		return UBTTask_RunBehaviorDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_RunBehaviorDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_RunBehaviorDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BehaviorAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BehaviorAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BehaviorAsset, UBTTask_RunBehaviorDynamic), 0x0020080000000000, Z_Construct_UClass_UBehaviorTree_NoRegister());
				UProperty* NewProp_DefaultBehaviorAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultBehaviorAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DefaultBehaviorAsset, UBTTask_RunBehaviorDynamic), 0x0020080000000001, Z_Construct_UClass_UBehaviorTree_NoRegister());
				UProperty* NewProp_InjectionTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InjectionTag"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InjectionTag, UBTTask_RunBehaviorDynamic), 0x0020080000000001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_RunBehaviorDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehaviorDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("RunBehaviorDynamic task allows pushing subtrees on execution stack.\nSubtree asset can be assigned at runtime with SetDynamicSubtree function of BehaviorTreeComponent.\n\nDoes NOT support subtree's root level decorators!"));
				MetaData->SetValue(NewProp_BehaviorAsset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehaviorDynamic.h"));
				MetaData->SetValue(NewProp_BehaviorAsset, TEXT("ToolTip"), TEXT("current subtree"));
				MetaData->SetValue(NewProp_DefaultBehaviorAsset, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_DefaultBehaviorAsset, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehaviorDynamic.h"));
				MetaData->SetValue(NewProp_DefaultBehaviorAsset, TEXT("ToolTip"), TEXT("default behavior to run"));
				MetaData->SetValue(NewProp_InjectionTag, TEXT("Category"), TEXT("Node"));
				MetaData->SetValue(NewProp_InjectionTag, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_RunBehaviorDynamic.h"));
				MetaData->SetValue(NewProp_InjectionTag, TEXT("ToolTip"), TEXT("Gameplay tag that will identify this task for subtree injection"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_RunBehaviorDynamic(Z_Construct_UClass_UBTTask_RunBehaviorDynamic, &UBTTask_RunBehaviorDynamic::StaticClass, TEXT("UBTTask_RunBehaviorDynamic"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_RunBehaviorDynamic);
	UClass* Z_Construct_UClass_UBTTask_SetTagCooldown_NoRegister()
	{
		return UBTTask_SetTagCooldown::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_SetTagCooldown()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_SetTagCooldown::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CooldownDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CooldownDuration, UBTTask_SetTagCooldown), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAddToExistingDuration, UBTTask_SetTagCooldown, bool);
				UProperty* NewProp_bAddToExistingDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAddToExistingDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAddToExistingDuration, UBTTask_SetTagCooldown), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAddToExistingDuration, UBTTask_SetTagCooldown), sizeof(bool), true);
				UProperty* NewProp_CooldownTag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CooldownTag"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CooldownTag, UBTTask_SetTagCooldown), 0x0010000000000001, Z_Construct_UScriptStruct_FGameplayTag());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_SetTagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_SetTagCooldown.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Cooldown task node.\nSets a cooldown tag value.  Use with cooldown tag decorators to prevent behavior tree execution."));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("Category"), TEXT("Cooldown"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownDuration, TEXT("ToolTip"), TEXT("Value we will add or set to the Cooldown tag when this task runs."));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("Category"), TEXT("Decorator"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_bAddToExistingDuration, TEXT("ToolTip"), TEXT("True if we are adding to any existing duration, false if we are setting the duration (potentially invalidating an existing end time)."));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("Category"), TEXT("Cooldown"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_SetTagCooldown.h"));
				MetaData->SetValue(NewProp_CooldownTag, TEXT("ToolTip"), TEXT("Gameplay tag that will be used for the cooldown."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_SetTagCooldown(Z_Construct_UClass_UBTTask_SetTagCooldown, &UBTTask_SetTagCooldown::StaticClass, TEXT("UBTTask_SetTagCooldown"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_SetTagCooldown);
	UClass* Z_Construct_UClass_UBTTask_Wait_NoRegister()
	{
		return UBTTask_Wait::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_Wait()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTaskNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_Wait::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomDeviation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomDeviation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RandomDeviation, UBTTask_Wait), 0x0010000000000001);
				UProperty* NewProp_WaitTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WaitTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WaitTime, UBTTask_Wait), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_Wait.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_Wait.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Wait task node.\nWait for the specified time when executed."));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("Category"), TEXT("Wait"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_Wait.h"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("ToolTip"), TEXT("allows adding random time to wait time"));
				MetaData->SetValue(NewProp_RandomDeviation, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WaitTime, TEXT("Category"), TEXT("Wait"));
				MetaData->SetValue(NewProp_WaitTime, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_WaitTime, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_Wait.h"));
				MetaData->SetValue(NewProp_WaitTime, TEXT("ToolTip"), TEXT("wait time in seconds"));
				MetaData->SetValue(NewProp_WaitTime, TEXT("UIMin"), TEXT("0.0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_Wait(Z_Construct_UClass_UBTTask_Wait, &UBTTask_Wait::StaticClass, TEXT("UBTTask_Wait"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_Wait);
	UClass* Z_Construct_UClass_UBTTask_WaitBlackboardTime_NoRegister()
	{
		return UBTTask_WaitBlackboardTime::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_WaitBlackboardTime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_Wait();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UBTTask_WaitBlackboardTime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlackboardKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlackboardKey, UBTTask_WaitBlackboardTime), 0x0020080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Wait"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BehaviorTree/Tasks/BTTask_WaitBlackboardTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_WaitBlackboardTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Wait task node.\nWait for the time specified by a Blackboard key when executed."));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("Category"), TEXT("Blackboard"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ModuleRelativePath"), TEXT("Classes/BehaviorTree/Tasks/BTTask_WaitBlackboardTime.h"));
				MetaData->SetValue(NewProp_BlackboardKey, TEXT("ToolTip"), TEXT("blackboard key selector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_WaitBlackboardTime(Z_Construct_UClass_UBTTask_WaitBlackboardTime, &UBTTask_WaitBlackboardTime::StaticClass, TEXT("UBTTask_WaitBlackboardTime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_WaitBlackboardTime);
	UClass* Z_Construct_UClass_UCrowdAgentInterface_NoRegister()
	{
		return UCrowdAgentInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UCrowdAgentInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UCrowdAgentInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdAgentInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCrowdAgentInterface(Z_Construct_UClass_UCrowdAgentInterface, &UCrowdAgentInterface::StaticClass, TEXT("UCrowdAgentInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCrowdAgentInterface);
	UScriptStruct* Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CrowdAvoidanceSamplingPattern"), sizeof(FCrowdAvoidanceSamplingPattern), Get_Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CrowdAvoidanceSamplingPattern"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCrowdAvoidanceSamplingPattern>, EStructFlags(0x00000201));
			UProperty* NewProp_Radii = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radii"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Radii, FCrowdAvoidanceSamplingPattern), 0x0010000000000001);
			UProperty* NewProp_Radii_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Radii, TEXT("Radii"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Angles = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Angles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Angles, FCrowdAvoidanceSamplingPattern), 0x0010000000000001);
			UProperty* NewProp_Angles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Angles, TEXT("Angles"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_Radii, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_Radii, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_Angles, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_Angles, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern_CRC() { return 2473893444U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCrowdAvoidanceConfig()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FCrowdAvoidanceConfig_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CrowdAvoidanceConfig"), sizeof(FCrowdAvoidanceConfig), Get_Z_Construct_UScriptStruct_FCrowdAvoidanceConfig_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CrowdAvoidanceConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCrowdAvoidanceConfig>, EStructFlags(0x00000201));
			UProperty* NewProp_AdaptiveDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdaptiveDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AdaptiveDepth, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_AdaptiveRings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdaptiveRings"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AdaptiveRings, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_AdaptiveDivisions = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdaptiveDivisions"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AdaptiveDivisions, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_CustomPatternIdx = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomPatternIdx"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CustomPatternIdx, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_ImpactTimeRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactTimeRange"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactTimeRange, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_ImpactTimeWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactTimeWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactTimeWeight, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_SideBiasWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SideBiasWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SideBiasWeight, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_CurrentVelocityWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurrentVelocityWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CurrentVelocityWeight, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_DesiredVelocityWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DesiredVelocityWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DesiredVelocityWeight, FCrowdAvoidanceConfig), 0x0010000000000001);
			UProperty* NewProp_VelocityBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VelocityBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VelocityBias, FCrowdAvoidanceConfig), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Crowd manager is responsible for handling crowds using Detour (Recast library)\n\nAgents will respect navmesh for all steering and avoidance updates,\nbut it's slower than AvoidanceManager solution (RVO, cares only about agents)\n\nAll agents will operate on the same navmesh data, which will be picked from\nnavigation system defaults (UNavigationSystem::SupportedAgents[0])\n\nTo use it, you have to add CrowdFollowingComponent to your agent\n(usually: replace class of PathFollowingComponent in AIController by adding\n those lines in controller's constructor\n\n ACrowdAIController::ACrowdAIController(const FObjectInitializer& ObjectInitializer)\n     : Super(ObjectInitializer.SetDefaultSubobjectClass<UCrowdFollowingComponent>(TEXT(\"PathFollowingComponent\")))\n\n or simply add both components and switch move requests between them)\n\nActors that should be avoided, but are not being simulated by crowd (like players)\nshould implement CrowdAgentInterface AND register/unregister themselves with crowd manager:\n\n UCrowdManager* CrowdManager = UCrowdManager::GetCurrent(this);\n if (CrowdManager)\n {\n    CrowdManager->RegisterAgent(this);\n }\n\n Check flags in CrowdDebugDrawing namespace (CrowdManager.cpp) for debugging options."));
			MetaData->SetValue(NewProp_AdaptiveDepth, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_AdaptiveDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_AdaptiveDepth, TEXT("ToolTip"), TEXT("adaptive sampling: number of iterations at best velocity"));
			MetaData->SetValue(NewProp_AdaptiveRings, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_AdaptiveRings, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_AdaptiveRings, TEXT("ToolTip"), TEXT("adaptive sampling: number of rings"));
			MetaData->SetValue(NewProp_AdaptiveDivisions, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_AdaptiveDivisions, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_AdaptiveDivisions, TEXT("ToolTip"), TEXT("adaptive sampling: number of divisions per ring"));
			MetaData->SetValue(NewProp_CustomPatternIdx, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_CustomPatternIdx, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_CustomPatternIdx, TEXT("ToolTip"), TEXT("index in SamplingPatterns array or 0xff for adaptive sampling"));
			MetaData->SetValue(NewProp_ImpactTimeRange, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_ImpactTimeRange, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_ImpactTimeWeight, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_ImpactTimeWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_SideBiasWeight, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_SideBiasWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_CurrentVelocityWeight, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_CurrentVelocityWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_DesiredVelocityWeight, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_DesiredVelocityWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
			MetaData->SetValue(NewProp_VelocityBias, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(NewProp_VelocityBias, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCrowdAvoidanceConfig_CRC() { return 948666152U; }
	UClass* Z_Construct_UClass_UCrowdManager_NoRegister()
	{
		return UCrowdManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UCrowdManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UCrowdManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResolveCollisions, UCrowdManager, uint8);
				UProperty* NewProp_bResolveCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bResolveCollisions"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResolveCollisions, UCrowdManager), 0x0020080000004001, CPP_BOOL_PROPERTY_BITMASK(bResolveCollisions, UCrowdManager), sizeof(uint8), false);
				UProperty* NewProp_SeparationDirClamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SeparationDirClamp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SeparationDirClamp, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_PathOptimizationInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathOptimizationInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PathOptimizationInterval, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_NavmeshCheckInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavmeshCheckInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NavmeshCheckInterval, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_MaxAvoidedWalls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAvoidedWalls"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxAvoidedWalls, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_MaxAvoidedAgents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAvoidedAgents"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxAvoidedAgents, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_MaxAgentRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAgentRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxAgentRadius, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_MaxAgents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAgents"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxAgents, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_SamplingPatterns = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SamplingPatterns"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SamplingPatterns, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_SamplingPatterns_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SamplingPatterns, TEXT("SamplingPatterns"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FCrowdAvoidanceSamplingPattern());
				UProperty* NewProp_AvoidanceConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvoidanceConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AvoidanceConfig, UCrowdManager), 0x0020080000004001);
				UProperty* NewProp_AvoidanceConfig_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AvoidanceConfig, TEXT("AvoidanceConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FCrowdAvoidanceConfig());
				UProperty* NewProp_MyNavData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MyNavData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MyNavData, UCrowdManager), 0x0020080000002000, Z_Construct_UClass_ANavigationData_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Navigation/CrowdManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_bResolveCollisions, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_bResolveCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_bResolveCollisions, TEXT("ToolTip"), TEXT("should crowd simulation resolve collisions between agents? if not, this will be handled by their movement components"));
				MetaData->SetValue(NewProp_SeparationDirClamp, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_SeparationDirClamp, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_SeparationDirClamp, TEXT("ToolTip"), TEXT("clamp separation force to left/right when neighbor is behind (dot between forward and dirToNei, -1 = disabled)"));
				MetaData->SetValue(NewProp_PathOptimizationInterval, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_PathOptimizationInterval, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_PathOptimizationInterval, TEXT("ToolTip"), TEXT("how often should agents try to optimize their paths?"));
				MetaData->SetValue(NewProp_NavmeshCheckInterval, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_NavmeshCheckInterval, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_NavmeshCheckInterval, TEXT("ToolTip"), TEXT("how often should agents check their position after moving off navmesh?"));
				MetaData->SetValue(NewProp_MaxAvoidedWalls, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_MaxAvoidedWalls, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_MaxAvoidedWalls, TEXT("ToolTip"), TEXT("max number of wall segments for velocity avoidance"));
				MetaData->SetValue(NewProp_MaxAvoidedAgents, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_MaxAvoidedAgents, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_MaxAvoidedAgents, TEXT("ToolTip"), TEXT("max number of neighbor agents for velocity avoidance"));
				MetaData->SetValue(NewProp_MaxAgentRadius, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_MaxAgentRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_MaxAgentRadius, TEXT("ToolTip"), TEXT("max radius of agent that can be added to crowd"));
				MetaData->SetValue(NewProp_MaxAgents, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_MaxAgents, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_MaxAgents, TEXT("ToolTip"), TEXT("max number of agents supported by crowd"));
				MetaData->SetValue(NewProp_SamplingPatterns, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_SamplingPatterns, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_SamplingPatterns, TEXT("ToolTip"), TEXT("obstacle avoidance params"));
				MetaData->SetValue(NewProp_AvoidanceConfig, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_AvoidanceConfig, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
				MetaData->SetValue(NewProp_AvoidanceConfig, TEXT("ToolTip"), TEXT("obstacle avoidance params"));
				MetaData->SetValue(NewProp_MyNavData, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCrowdManager(Z_Construct_UClass_UCrowdManager, &UCrowdManager::StaticClass, TEXT("UCrowdManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCrowdManager);
	UClass* Z_Construct_UClass_UEnvQuery_NoRegister()
	{
		return UEnvQuery::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQuery()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDataAsset();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQuery::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Options = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Options"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Options, UEnvQuery), 0x0020080000000000);
				UProperty* NewProp_Options_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Options, TEXT("Options"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UEnvQueryOption_NoRegister());
				UProperty* NewProp_QueryName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(QueryName, UEnvQuery), 0x0020080000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EdGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EdGraph"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EdGraph, UEnvQuery), 0x0010000800000000, Z_Construct_UClass_UEdGraph_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQuery.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQuery.h"));
				MetaData->SetValue(NewProp_Options, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQuery.h"));
				MetaData->SetValue(NewProp_QueryName, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQuery.h"));
				MetaData->SetValue(NewProp_EdGraph, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQuery.h"));
				MetaData->SetValue(NewProp_EdGraph, TEXT("ToolTip"), TEXT("Graph for query"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQuery(Z_Construct_UClass_UEnvQuery, &UEnvQuery::StaticClass, TEXT("UEnvQuery"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQuery);
	UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideActorsSet()
	{
		UObject* Outer=Z_Construct_UClass_UEnvQueryContext_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProvideActorsSet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x48420800, 65535, sizeof(EnvQueryContext_BlueprintBase_eventProvideActorsSet_Parms));
			UProperty* NewProp_ResultingActorsSet = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultingActorsSet"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ResultingActorsSet, EnvQueryContext_BlueprintBase_eventProvideActorsSet_Parms), 0x0010000000000180);
			UProperty* NewProp_ResultingActorsSet_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResultingActorsSet, TEXT("ResultingActorsSet"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierActor, EnvQueryContext_BlueprintBase_eventProvideActorsSet_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierObject, EnvQueryContext_BlueprintBase_eventProvideActorsSet_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideLocationsSet()
	{
		UObject* Outer=Z_Construct_UClass_UEnvQueryContext_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProvideLocationsSet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x48420800, 65535, sizeof(EnvQueryContext_BlueprintBase_eventProvideLocationsSet_Parms));
			UProperty* NewProp_ResultingLocationSet = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultingLocationSet"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ResultingLocationSet, EnvQueryContext_BlueprintBase_eventProvideLocationsSet_Parms), 0x0010000000000180);
			UProperty* NewProp_ResultingLocationSet_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResultingLocationSet, TEXT("ResultingLocationSet"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QuerierActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierActor, EnvQueryContext_BlueprintBase_eventProvideLocationsSet_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierObject, EnvQueryContext_BlueprintBase_eventProvideLocationsSet_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleActor()
	{
		UObject* Outer=Z_Construct_UClass_UEnvQueryContext_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProvideSingleActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x48420800, 65535, sizeof(EnvQueryContext_BlueprintBase_eventProvideSingleActor_Parms));
			UProperty* NewProp_ResultingActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultingActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ResultingActor, EnvQueryContext_BlueprintBase_eventProvideSingleActor_Parms), 0x0010000000000180, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierActor, EnvQueryContext_BlueprintBase_eventProvideSingleActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierObject, EnvQueryContext_BlueprintBase_eventProvideSingleActor_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleLocation()
	{
		UObject* Outer=Z_Construct_UClass_UEnvQueryContext_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProvideSingleLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x48C20800, 65535, sizeof(EnvQueryContext_BlueprintBase_eventProvideSingleLocation_Parms));
			UProperty* NewProp_ResultingLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultingLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ResultingLocation, EnvQueryContext_BlueprintBase_eventProvideSingleLocation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QuerierActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierActor, EnvQueryContext_BlueprintBase_eventProvideSingleLocation_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_QuerierObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QuerierObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QuerierObject, EnvQueryContext_BlueprintBase_eventProvideSingleLocation_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEnvQueryContext_BlueprintBase_NoRegister()
	{
		return UEnvQueryContext_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryContext_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryContext();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryContext_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081081;

				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideActorsSet());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideLocationsSet());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleLocation());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideActorsSet(), "ProvideActorsSet"); // 382840044
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideLocationsSet(), "ProvideLocationsSet"); // 1291368778
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleActor(), "ProvideSingleActor"); // 3952315988
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryContext_BlueprintBase_ProvideSingleLocation(), "ProvideSingleLocation"); // 1198227466
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_BlueprintBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryContext_BlueprintBase(Z_Construct_UClass_UEnvQueryContext_BlueprintBase, &UEnvQueryContext_BlueprintBase::StaticClass, TEXT("UEnvQueryContext_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryContext_BlueprintBase);
	UClass* Z_Construct_UClass_UEnvQueryContext_Item_NoRegister()
	{
		return UEnvQueryContext_Item::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryContext_Item()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryContext();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryContext_Item::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Contexts/EnvQueryContext_Item.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_Item.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryContext_Item(Z_Construct_UClass_UEnvQueryContext_Item, &UEnvQueryContext_Item::StaticClass, TEXT("UEnvQueryContext_Item"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryContext_Item);
	UClass* Z_Construct_UClass_UEnvQueryContext_Querier_NoRegister()
	{
		return UEnvQueryContext_Querier::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryContext_Querier()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryContext();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryContext_Querier::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Contexts/EnvQueryContext_Querier.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Contexts/EnvQueryContext_Querier.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryContext_Querier(Z_Construct_UClass_UEnvQueryContext_Querier, &UEnvQueryContext_Querier::StaticClass, TEXT("UEnvQueryContext_Querier"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryContext_Querier);
	UClass* Z_Construct_UClass_UEnvQueryDebugHelpers_NoRegister()
	{
		return UEnvQueryDebugHelpers::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryDebugHelpers()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryDebugHelpers::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryDebugHelpers.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryDebugHelpers.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryDebugHelpers(Z_Construct_UClass_UEnvQueryDebugHelpers, &UEnvQueryDebugHelpers::StaticClass, TEXT("UEnvQueryDebugHelpers"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryDebugHelpers);
	UClass* Z_Construct_UClass_UEQSQueryResultSourceInterface_NoRegister()
	{
		return UEQSQueryResultSourceInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UEQSQueryResultSourceInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEQSQueryResultSourceInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSQueryResultSourceInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEQSQueryResultSourceInterface(Z_Construct_UClass_UEQSQueryResultSourceInterface, &UEQSQueryResultSourceInterface::StaticClass, TEXT("UEQSQueryResultSourceInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEQSQueryResultSourceInterface);
	UFunction* Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature()
	{
		struct EnvQueryInstanceBlueprintWrapper_eventEQSQueryDoneSignature_Parms
		{
			UEnvQueryInstanceBlueprintWrapper* QueryInstance;
			TEnumAsByte<EEnvQueryStatus::Type> QueryStatus;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EQSQueryDoneSignature__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(EnvQueryInstanceBlueprintWrapper_eventEQSQueryDoneSignature_Parms));
			UProperty* NewProp_QueryStatus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(QueryStatus, EnvQueryInstanceBlueprintWrapper_eventEQSQueryDoneSignature_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EEnvQueryStatus());
			UProperty* NewProp_QueryInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryInstance, EnvQueryInstanceBlueprintWrapper_eventEQSQueryDoneSignature_Parms), 0x0010000000000080, Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetItemScore()
	{
		struct EnvQueryInstanceBlueprintWrapper_eventGetItemScore_Parms
		{
			int32 ItemIndex;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetItemScore"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(EnvQueryInstanceBlueprintWrapper_eventGetItemScore_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, EnvQueryInstanceBlueprintWrapper_eventGetItemScore_Parms), 0x0010000000000580);
			UProperty* NewProp_ItemIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ItemIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ItemIndex, EnvQueryInstanceBlueprintWrapper_eventGetItemScore_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsActors()
	{
		struct EnvQueryInstanceBlueprintWrapper_eventGetResultsAsActors_Parms
		{
			TArray<AActor*> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetResultsAsActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(EnvQueryInstanceBlueprintWrapper_eventGetResultsAsActors_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, EnvQueryInstanceBlueprintWrapper_eventGetResultsAsActors_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("return an array filled with resulting actors. Not that it makes sense only if ItemType is a EnvQueryItemType_ActorBase-derived type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsLocations()
	{
		struct EnvQueryInstanceBlueprintWrapper_eventGetResultsAsLocations_Parms
		{
			TArray<FVector> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetResultsAsLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(EnvQueryInstanceBlueprintWrapper_eventGetResultsAsLocations_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, EnvQueryInstanceBlueprintWrapper_eventGetResultsAsLocations_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("returns an array of locations generated by the query. If the query generated Actors the the array is filled with their locations"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_SetNamedParam()
	{
		struct EnvQueryInstanceBlueprintWrapper_eventSetNamedParam_Parms
		{
			FName ParamName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNamedParam"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EnvQueryInstanceBlueprintWrapper_eventSetNamedParam_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, EnvQueryInstanceBlueprintWrapper_eventSetNamedParam_Parms), 0x0010000000000080);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParamName, EnvQueryInstanceBlueprintWrapper_eventSetNamedParam_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister()
	{
		return UEnvQueryInstanceBlueprintWrapper::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryInstanceBlueprintWrapper::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetItemScore());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsLocations());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_SetNamedParam());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnQueryFinishedEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnQueryFinishedEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnQueryFinishedEvent, UEnvQueryInstanceBlueprintWrapper), 0x0020080010080000, Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature());
				UProperty* NewProp_OptionIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OptionIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OptionIndex, UEnvQueryInstanceBlueprintWrapper), 0x0020080000000014);
				UProperty* NewProp_ItemType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ItemType, UEnvQueryInstanceBlueprintWrapper), 0x0024080000000014, Z_Construct_UClass_UEnvQueryItemType_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_QueryID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryID, UEnvQueryInstanceBlueprintWrapper), 0x0020080000000014);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature(), "EQSQueryDoneSignature__DelegateSignature"); // 144920493
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetItemScore(), "GetItemScore"); // 447017276
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsActors(), "GetResultsAsActors"); // 3123120224
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_GetResultsAsLocations(), "GetResultsAsLocations"); // 2131134568
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryInstanceBlueprintWrapper_SetNamedParam(), "SetNamedParam"); // 416300046
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UEQSQueryResultSourceInterface_NoRegister(), VTABLE_OFFSET(UEnvQueryInstanceBlueprintWrapper, IEQSQueryResultSourceInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("EQS Query Instance"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_OnQueryFinishedEvent, TEXT("Category"), TEXT("AI|EQS"));
				MetaData->SetValue(NewProp_OnQueryFinishedEvent, TEXT("DisplayName"), TEXT("OnQueryFinished"));
				MetaData->SetValue(NewProp_OnQueryFinishedEvent, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
				MetaData->SetValue(NewProp_OptionIndex, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_OptionIndex, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
				MetaData->SetValue(NewProp_OptionIndex, TEXT("ToolTip"), TEXT("index of query option, that generated items"));
				MetaData->SetValue(NewProp_ItemType, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_ItemType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
				MetaData->SetValue(NewProp_QueryID, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_QueryID, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryInstanceBlueprintWrapper(Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper, &UEnvQueryInstanceBlueprintWrapper::StaticClass, TEXT("UEnvQueryInstanceBlueprintWrapper"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryInstanceBlueprintWrapper);
	UClass* Z_Construct_UClass_UEnvQueryItemType_VectorBase_NoRegister()
	{
		return UEnvQueryItemType_VectorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType_VectorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryItemType();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType_VectorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType_VectorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType_VectorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType_VectorBase(Z_Construct_UClass_UEnvQueryItemType_VectorBase, &UEnvQueryItemType_VectorBase::StaticClass, TEXT("UEnvQueryItemType_VectorBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType_VectorBase);
	UClass* Z_Construct_UClass_UEnvQueryItemType_ActorBase_NoRegister()
	{
		return UEnvQueryItemType_ActorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType_ActorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryItemType_VectorBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType_ActorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType_ActorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType_ActorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType_ActorBase(Z_Construct_UClass_UEnvQueryItemType_ActorBase, &UEnvQueryItemType_ActorBase::StaticClass, TEXT("UEnvQueryItemType_ActorBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType_ActorBase);
	UClass* Z_Construct_UClass_UEnvQueryItemType_Actor_NoRegister()
	{
		return UEnvQueryItemType_Actor::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType_Actor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryItemType_ActorBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType_Actor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType_Actor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType_Actor.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType_Actor(Z_Construct_UClass_UEnvQueryItemType_Actor, &UEnvQueryItemType_Actor::StaticClass, TEXT("UEnvQueryItemType_Actor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType_Actor);
	UClass* Z_Construct_UClass_UEnvQueryItemType_Direction_NoRegister()
	{
		return UEnvQueryItemType_Direction::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType_Direction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryItemType_VectorBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType_Direction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType_Direction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType_Direction.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType_Direction(Z_Construct_UClass_UEnvQueryItemType_Direction, &UEnvQueryItemType_Direction::StaticClass, TEXT("UEnvQueryItemType_Direction"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType_Direction);
	UClass* Z_Construct_UClass_UEnvQueryItemType_Point_NoRegister()
	{
		return UEnvQueryItemType_Point::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryItemType_Point()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryItemType_VectorBase();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryItemType_Point::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Items/EnvQueryItemType_Point.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Items/EnvQueryItemType_Point.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryItemType_Point(Z_Construct_UClass_UEnvQueryItemType_Point, &UEnvQueryItemType_Point::StaticClass, TEXT("UEnvQueryItemType_Point"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryItemType_Point);
	UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryInstanceCache()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvQueryInstanceCache_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvQueryInstanceCache"), sizeof(FEnvQueryInstanceCache), Get_Z_Construct_UScriptStruct_FEnvQueryInstanceCache_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvQueryInstanceCache"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvQueryInstanceCache>, EStructFlags(0x00000001));
			UProperty* NewProp_Template = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Template"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Template, FEnvQueryInstanceCache), 0x0010000000000000, Z_Construct_UClass_UEnvQuery_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("cache of instances with sorted tests"));
			MetaData->SetValue(NewProp_Template, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(NewProp_Template, TEXT("ToolTip"), TEXT("query template, duplicated in manager's world"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvQueryInstanceCache_CRC() { return 2181932546U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEnvQueryRequest()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FEnvQueryRequest_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EnvQueryRequest"), sizeof(FEnvQueryRequest), Get_Z_Construct_UScriptStruct_FEnvQueryRequest_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnvQueryRequest"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEnvQueryRequest>, EStructFlags(0x00000201));
			UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("World"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(World, FEnvQueryRequest), 0x0020080000000000, Z_Construct_UClass_UWorld_NoRegister());
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Owner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Owner, FEnvQueryRequest), 0x0020080000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_QueryTemplate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryTemplate, FEnvQueryRequest), 0x0020080000000000, Z_Construct_UClass_UEnvQuery_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("wrapper for easy query execution"));
			MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("world"));
			MetaData->SetValue(NewProp_Owner, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(NewProp_Owner, TEXT("ToolTip"), TEXT("querier"));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_QueryTemplate, TEXT("ToolTip"), TEXT("query to run"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEnvQueryRequest_CRC() { return 1040406694U; }
	UFunction* Z_Construct_UFunction_UEnvQueryManager_RunEQSQuery()
	{
		struct EnvQueryManager_eventRunEQSQuery_Parms
		{
			UObject* WorldContext;
			UEnvQuery* QueryTemplate;
			UObject* Querier;
			TEnumAsByte<EEnvQueryRunMode::Type> RunMode;
			TSubclassOf<UEnvQueryInstanceBlueprintWrapper>  WrapperClass;
			UEnvQueryInstanceBlueprintWrapper* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RunEQSQuery"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(EnvQueryManager_eventRunEQSQuery_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, EnvQueryManager_eventRunEQSQuery_Parms), 0x0010000000000580, Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister());
			UProperty* NewProp_WrapperClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WrapperClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(WrapperClass, EnvQueryManager_eventRunEQSQuery_Parms), 0x0014040000000080, Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_RunMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RunMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RunMode, EnvQueryManager_eventRunEQSQuery_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EEnvQueryRunMode());
			UProperty* NewProp_Querier = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Querier"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Querier, EnvQueryManager_eventRunEQSQuery_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_QueryTemplate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryTemplate, EnvQueryManager_eventRunEQSQuery_Parms), 0x0010000000000080, Z_Construct_UClass_UEnvQuery_NoRegister());
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, EnvQueryManager_eventRunEQSQuery_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("WrapperClass"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEnvQueryManager_NoRegister()
	{
		return UEnvQueryManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;

				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryManager_RunEQSQuery());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_QueryCountWarningInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryCountWarningInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UDoubleProperty(CPP_PROPERTY_BASE(QueryCountWarningInterval, UEnvQueryManager), 0x0020080000004000);
				UProperty* NewProp_QueryCountWarningThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryCountWarningThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryCountWarningThreshold, UEnvQueryManager), 0x0020080000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTestQueriesUsingBreadth, UEnvQueryManager, bool);
				UProperty* NewProp_bTestQueriesUsingBreadth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTestQueriesUsingBreadth"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTestQueriesUsingBreadth, UEnvQueryManager), 0x0020080000004000, CPP_BOOL_PROPERTY_BITMASK(bTestQueriesUsingBreadth, UEnvQueryManager), sizeof(bool), true);
				UProperty* NewProp_MaxAllowedTestingTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxAllowedTestingTime"), RF_Public|RF_Transient|RF_MarkAsNative) UDoubleProperty(CPP_PROPERTY_BASE(MaxAllowedTestingTime, UEnvQueryManager), 0x0020080000004000);
				UProperty* NewProp_GCShieldedWrappers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GCShieldedWrappers"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(GCShieldedWrappers, UEnvQueryManager), 0x0020080000000000);
				UProperty* NewProp_GCShieldedWrappers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GCShieldedWrappers, TEXT("GCShieldedWrappers"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UEnvQueryInstanceBlueprintWrapper_NoRegister());
				UProperty* NewProp_LocalContexts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalContexts"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LocalContexts, UEnvQueryManager), 0x0020080000002000);
				UProperty* NewProp_LocalContexts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalContexts, TEXT("LocalContexts"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UEnvQueryContext_NoRegister());
				UProperty* NewProp_InstanceCache = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstanceCache"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InstanceCache, UEnvQueryManager), 0x0020080000002000);
				UProperty* NewProp_InstanceCache_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InstanceCache, TEXT("InstanceCache"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FEnvQueryInstanceCache());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryManager_RunEQSQuery(), "RunEQSQuery"); // 1700779535
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_QueryCountWarningInterval, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_QueryCountWarningInterval, TEXT("ToolTip"), TEXT("how often (in seconds) we will warn about the number of queries (allows us to catch multiple occurrences in a session)"));
				MetaData->SetValue(NewProp_QueryCountWarningThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_QueryCountWarningThreshold, TEXT("ToolTip"), TEXT("if greater than zero, we will warn once when the number of queries is greater than or equal to this number, and log the queries out"));
				MetaData->SetValue(NewProp_bTestQueriesUsingBreadth, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_bTestQueriesUsingBreadth, TEXT("ToolTip"), TEXT("whether we update EQS queries based on:\n          running a test on one query and move to the next (breadth) - default behavior,\n          or test an entire query before moving to the next one (depth)."));
				MetaData->SetValue(NewProp_MaxAllowedTestingTime, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_MaxAllowedTestingTime, TEXT("ToolTip"), TEXT("how long are we allowed to test per update, in seconds."));
				MetaData->SetValue(NewProp_GCShieldedWrappers, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_LocalContexts, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_LocalContexts, TEXT("ToolTip"), TEXT("local cache of context objects for managing BP based objects"));
				MetaData->SetValue(NewProp_InstanceCache, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryManager.h"));
				MetaData->SetValue(NewProp_InstanceCache, TEXT("ToolTip"), TEXT("cache of instances"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryManager(Z_Construct_UClass_UEnvQueryManager, &UEnvQueryManager::StaticClass, TEXT("UEnvQueryManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryManager);
	UClass* Z_Construct_UClass_UEnvQueryNode_NoRegister()
	{
		return UEnvQueryNode::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerNum = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerNum"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VerNum, UEnvQueryNode), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryNode.h"));
				MetaData->SetValue(NewProp_VerNum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryNode.h"));
				MetaData->SetValue(NewProp_VerNum, TEXT("ToolTip"), TEXT("Versioning for updating deprecated properties"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryNode(Z_Construct_UClass_UEnvQueryNode, &UEnvQueryNode::StaticClass, TEXT("UEnvQueryNode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryNode);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_NoRegister()
	{
		return UEnvQueryGenerator::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoSortTests, UEnvQueryGenerator, uint8);
				UProperty* NewProp_bAutoSortTests = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoSortTests"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoSortTests, UEnvQueryGenerator), 0x0010040000010001, CPP_BOOL_PROPERTY_BITMASK(bAutoSortTests, UEnvQueryGenerator), sizeof(uint8), false);
				UProperty* NewProp_ItemType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ItemType, UEnvQueryGenerator), 0x0014000000000000, Z_Construct_UClass_UEnvQueryItemType_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_OptionName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OptionName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OptionName, UEnvQueryGenerator), 0x0010000000010001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("Category"), TEXT("Generators"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryGenerator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryGenerator.h"));
				MetaData->SetValue(NewProp_bAutoSortTests, TEXT("Category"), TEXT("Option"));
				MetaData->SetValue(NewProp_bAutoSortTests, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryGenerator.h"));
				MetaData->SetValue(NewProp_bAutoSortTests, TEXT("ToolTip"), TEXT("if set, tests will be automatically sorted for best performance before running query"));
				MetaData->SetValue(NewProp_ItemType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryGenerator.h"));
				MetaData->SetValue(NewProp_ItemType, TEXT("ToolTip"), TEXT("type of generated items"));
				MetaData->SetValue(NewProp_OptionName, TEXT("Category"), TEXT("Option"));
				MetaData->SetValue(NewProp_OptionName, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryGenerator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator(Z_Construct_UClass_UEnvQueryGenerator, &UEnvQueryGenerator::StaticClass, TEXT("UEnvQueryGenerator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_ActorsOfClass_NoRegister()
	{
		return UEnvQueryGenerator_ActorsOfClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_ActorsOfClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_ActorsOfClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SearchCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SearchCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(SearchCenter, UEnvQueryGenerator_ActorsOfClass), 0x0014000000000001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_SearchRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SearchRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SearchRadius, UEnvQueryGenerator_ActorsOfClass), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_GenerateOnlyActorsInRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GenerateOnlyActorsInRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GenerateOnlyActorsInRadius, UEnvQueryGenerator_ActorsOfClass), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
				UProperty* NewProp_SearchedActorClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SearchedActorClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(SearchedActorClass, UEnvQueryGenerator_ActorsOfClass), 0x0014000000010001, Z_Construct_UClass_AActor_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Actors Of Class"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
				MetaData->SetValue(NewProp_SearchCenter, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_SearchCenter, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
				MetaData->SetValue(NewProp_SearchCenter, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_SearchRadius, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_SearchRadius, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
				MetaData->SetValue(NewProp_SearchRadius, TEXT("ToolTip"), TEXT("Max distance of path between point and context.  NOTE: Zero and negative values will never return any results if\nUseRadius is true.  \"Within\" requires Distance < Radius.  Actors ON the circle (Distance == Radius) are excluded."));
				MetaData->SetValue(NewProp_GenerateOnlyActorsInRadius, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_GenerateOnlyActorsInRadius, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
				MetaData->SetValue(NewProp_GenerateOnlyActorsInRadius, TEXT("ToolTip"), TEXT("If true, this will only returns actors of the specified class within the SearchRadius of the SearchCenter context.  If false, it will return ALL actors of the specified class in the world."));
				MetaData->SetValue(NewProp_SearchedActorClass, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_SearchedActorClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ActorsOfClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_ActorsOfClass(Z_Construct_UClass_UEnvQueryGenerator_ActorsOfClass, &UEnvQueryGenerator_ActorsOfClass::StaticClass, TEXT("UEnvQueryGenerator_ActorsOfClass"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_ActorsOfClass);
	UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedActor()
	{
		struct EnvQueryGenerator_BlueprintBase_eventAddGeneratedActor_Parms
		{
			AActor* GeneratedActor;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddGeneratedActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x44020401, 65535, sizeof(EnvQueryGenerator_BlueprintBase_eventAddGeneratedActor_Parms));
			UProperty* NewProp_GeneratedActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GeneratedActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GeneratedActor, EnvQueryGenerator_BlueprintBase_eventAddGeneratedActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedVector()
	{
		struct EnvQueryGenerator_BlueprintBase_eventAddGeneratedVector_Parms
		{
			FVector GeneratedVector;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddGeneratedVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x44820401, 65535, sizeof(EnvQueryGenerator_BlueprintBase_eventAddGeneratedVector_Parms));
			UProperty* NewProp_GeneratedVector = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GeneratedVector"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GeneratedVector, EnvQueryGenerator_BlueprintBase_eventAddGeneratedVector_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_DoItemGeneration()
	{
		UObject* Outer=Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoItemGeneration"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x48420800, 65535, sizeof(EnvQueryGenerator_BlueprintBase_eventDoItemGeneration_Parms));
			UProperty* NewProp_ContextLocations = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ContextLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ContextLocations, EnvQueryGenerator_BlueprintBase_eventDoItemGeneration_Parms), 0x0010000008000182);
			UProperty* NewProp_ContextLocations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ContextLocations, TEXT("ContextLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Generator"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
			MetaData->SetValue(NewProp_ContextLocations, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_GetQuerier()
	{
		struct EnvQueryGenerator_BlueprintBase_eventGetQuerier_Parms
		{
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetQuerier"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EnvQueryGenerator_BlueprintBase_eventGetQuerier_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, EnvQueryGenerator_BlueprintBase_eventGetQuerier_Parms), 0x0010000000000580, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("EQS"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase_NoRegister()
	{
		return UEnvQueryGenerator_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;

				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_DoItemGeneration());
				OuterClass->LinkChild(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_GetQuerier());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GeneratedItemType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeneratedItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(GeneratedItemType, UEnvQueryGenerator_BlueprintBase), 0x0014000000010001, Z_Construct_UClass_UEnvQueryItemType_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Context, UEnvQueryGenerator_BlueprintBase), 0x0014000000000001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_GeneratorsActionDescription = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeneratorsActionDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(GeneratorsActionDescription, UEnvQueryGenerator_BlueprintBase), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedActor(), "AddGeneratedActor"); // 3060990327
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_AddGeneratedVector(), "AddGeneratedVector"); // 536280960
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_DoItemGeneration(), "DoItemGeneration"); // 91826782
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UEnvQueryGenerator_BlueprintBase_GetQuerier(), "GetQuerier"); // 2588275996
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_GeneratedItemType, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_GeneratedItemType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_GeneratedItemType, TEXT("ToolTip"), TEXT("@todo this should show up only in the generator's BP, but\n    due to the way EQS editor is generating widgets it's there as well\n    It's a bug and we'll fix it"));
				MetaData->SetValue(NewProp_Context, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_Context, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_Context, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_GeneratorsActionDescription, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_GeneratorsActionDescription, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_BlueprintBase.h"));
				MetaData->SetValue(NewProp_GeneratorsActionDescription, TEXT("ToolTip"), TEXT("A short description of what test does, like \"Generate pawn named Joe\""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_BlueprintBase(Z_Construct_UClass_UEnvQueryGenerator_BlueprintBase, &UEnvQueryGenerator_BlueprintBase::StaticClass, TEXT("UEnvQueryGenerator_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_BlueprintBase);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Composite_NoRegister()
	{
		return UEnvQueryGenerator_Composite::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Composite()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_Composite::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasMatchingItemType, UEnvQueryGenerator_Composite, bool);
				UProperty* NewProp_bHasMatchingItemType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasMatchingItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasMatchingItemType, UEnvQueryGenerator_Composite), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bHasMatchingItemType, UEnvQueryGenerator_Composite), sizeof(bool), true);
				UProperty* NewProp_Generators = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Generators"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Generators, UEnvQueryGenerator_Composite), 0x0010008000010009);
				UProperty* NewProp_Generators_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Generators, TEXT("Generators"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UEnvQueryGenerator_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Composite"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Composite generator allows using multiple generators in single query option\nAll child generators must produce exactly the same item type!"));
				MetaData->SetValue(NewProp_bHasMatchingItemType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h"));
				MetaData->SetValue(NewProp_Generators, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_Generators, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Generators, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h"));
				MetaData->SetValue(NewProp_Generators_Inner, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_Generators_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Generators_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_Composite(Z_Construct_UClass_UEnvQueryGenerator_Composite, &UEnvQueryGenerator_Composite::StaticClass, TEXT("UEnvQueryGenerator_Composite"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_Composite);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_CurrentLocation_NoRegister()
	{
		return UEnvQueryGenerator_CurrentLocation::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_CurrentLocation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_CurrentLocation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_QueryContext = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryContext"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(QueryContext, UEnvQueryGenerator_CurrentLocation), 0x0024080000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Current Location"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_CurrentLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_CurrentLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_QueryContext, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_QueryContext, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_CurrentLocation.h"));
				MetaData->SetValue(NewProp_QueryContext, TEXT("ToolTip"), TEXT("context"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_CurrentLocation(Z_Construct_UClass_UEnvQueryGenerator_CurrentLocation, &UEnvQueryGenerator_CurrentLocation::StaticClass, TEXT("UEnvQueryGenerator_CurrentLocation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_CurrentLocation);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints_NoRegister()
	{
		return UEnvQueryGenerator_ProjectedPoints::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_ProjectedPoints::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProjectionData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ProjectionData, UEnvQueryGenerator_ProjectedPoints), 0x0010000000010001, Z_Construct_UScriptStruct_FEnvTraceData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_ProjectedPoints.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ProjectedPoints.h"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_ProjectedPoints.h"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("ToolTip"), TEXT("trace params"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_ProjectedPoints(Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints, &UEnvQueryGenerator_ProjectedPoints::StaticClass, TEXT("UEnvQueryGenerator_ProjectedPoints"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_ProjectedPoints);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Cone_NoRegister()
	{
		return UEnvQueryGenerator_Cone::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Cone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_Cone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludeContextLocation, UEnvQueryGenerator_Cone, uint8);
				UProperty* NewProp_bIncludeContextLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIncludeContextLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludeContextLocation, UEnvQueryGenerator_Cone), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bIncludeContextLocation, UEnvQueryGenerator_Cone), sizeof(uint8), false);
				UProperty* NewProp_CenterActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterActor"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(CenterActor, UEnvQueryGenerator_Cone), 0x0024080000000001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Range, UEnvQueryGenerator_Cone), 0x0020088000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_AngleStep = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngleStep"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngleStep, UEnvQueryGenerator_Cone), 0x0020088000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ConeDegrees = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConeDegrees"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConeDegrees, UEnvQueryGenerator_Cone), 0x0020088000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_AlignedPointsDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlignedPointsDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlignedPointsDistance, UEnvQueryGenerator_Cone), 0x0020088000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Points: Cone"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bIncludeContextLocation, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_bIncludeContextLocation, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_bIncludeContextLocation, TEXT("ToolTip"), TEXT("Whether to include CenterActors' locations when generating items.\n    Note that this option skips the MinAngledPointsDistance parameter."));
				MetaData->SetValue(NewProp_CenterActor, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_CenterActor, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_CenterActor, TEXT("ToolTip"), TEXT("The actor (or actors) that will generate a cone in their facing direction"));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("Generation distance"));
				MetaData->SetValue(NewProp_AngleStep, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_AngleStep, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_AngleStep, TEXT("ToolTip"), TEXT("The step of the angle increase. Angle step must be >=1\nSmaller values generate less items"));
				MetaData->SetValue(NewProp_ConeDegrees, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ConeDegrees, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_ConeDegrees, TEXT("ToolTip"), TEXT("Maximum degrees of the generated cone"));
				MetaData->SetValue(NewProp_AlignedPointsDistance, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_AlignedPointsDistance, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Cone.h"));
				MetaData->SetValue(NewProp_AlignedPointsDistance, TEXT("ToolTip"), TEXT("Distance between each point of the same angle"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_Cone(Z_Construct_UClass_UEnvQueryGenerator_Cone, &UEnvQueryGenerator_Cone::StaticClass, TEXT("UEnvQueryGenerator_Cone"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_Cone);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Donut_NoRegister()
	{
		return UEnvQueryGenerator_Donut::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_Donut()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_Donut::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefineArc, UEnvQueryGenerator_Donut, uint8);
				UProperty* NewProp_bDefineArc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefineArc"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefineArc, UEnvQueryGenerator_Donut), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDefineArc, UEnvQueryGenerator_Donut), sizeof(uint8), false);
				UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Center, UEnvQueryGenerator_Donut), 0x0014000000000001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSpiralPattern, UEnvQueryGenerator_Donut, bool);
				UProperty* NewProp_bUseSpiralPattern = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSpiralPattern"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSpiralPattern, UEnvQueryGenerator_Donut), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bUseSpiralPattern, UEnvQueryGenerator_Donut), sizeof(bool), true);
				UProperty* NewProp_ArcAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArcAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ArcAngle, UEnvQueryGenerator_Donut), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ArcDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArcDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ArcDirection, UEnvQueryGenerator_Donut), 0x0010000000010001, Z_Construct_UScriptStruct_FEnvDirection());
				UProperty* NewProp_PointsPerRing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PointsPerRing"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointsPerRing, UEnvQueryGenerator_Donut), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderIntValue());
				UProperty* NewProp_NumberOfRings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfRings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NumberOfRings, UEnvQueryGenerator_Donut), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderIntValue());
				UProperty* NewProp_OuterRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OuterRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OuterRadius, UEnvQueryGenerator_Donut), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_InnerRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InnerRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InnerRadius, UEnvQueryGenerator_Donut), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Points: Donut"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_Center, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_bUseSpiralPattern, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_bUseSpiralPattern, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_bUseSpiralPattern, TEXT("ToolTip"), TEXT("If true, the rings of the wheel will be rotated in a spiral pattern.  If false, they will all be at a zero\nrotation, looking more like the spokes on a wheel."));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("ToolTip"), TEXT("If you generate items on a piece of circle you define angle of Arc cut here"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("EditCondition"), TEXT("bDefineArc"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("ToolTip"), TEXT("If you generate items on a piece of circle you define direction of Arc cut here"));
				MetaData->SetValue(NewProp_PointsPerRing, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_PointsPerRing, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_PointsPerRing, TEXT("ToolTip"), TEXT("number of items to generate for each ring"));
				MetaData->SetValue(NewProp_NumberOfRings, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_NumberOfRings, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_NumberOfRings, TEXT("ToolTip"), TEXT("number of rings to generate"));
				MetaData->SetValue(NewProp_OuterRadius, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_OuterRadius, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_OuterRadius, TEXT("ToolTip"), TEXT("max distance between point and context"));
				MetaData->SetValue(NewProp_InnerRadius, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_InnerRadius, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_Donut.h"));
				MetaData->SetValue(NewProp_InnerRadius, TEXT("ToolTip"), TEXT("min distance between point and context"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_Donut(Z_Construct_UClass_UEnvQueryGenerator_Donut, &UEnvQueryGenerator_Donut::StaticClass, TEXT("UEnvQueryGenerator_Donut"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_Donut);
	UEnum* Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPointOnCircleSpacingMethod"), 0, Get_Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPointOnCircleSpacingMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPointOnCircleSpacingMethod::BySpaceBetween")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPointOnCircleSpacingMethod::ByNumberOfPoints")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPointOnCircleSpacingMethod::EPointOnCircleSpacingMethod_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPointOnCircleSpacingMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ByNumberOfPoints.ToolTip"), TEXT("Use a fixed number of points"));
			MetaData->SetValue(ReturnEnum, TEXT("BySpaceBetween.ToolTip"), TEXT("Use the SpaceBetween value to determine how far apart points should be."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod_CRC() { return 1769719477U; }
	UClass* Z_Construct_UClass_UEnvQueryGenerator_OnCircle_NoRegister()
	{
		return UEnvQueryGenerator_OnCircle::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_OnCircle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_OnCircle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefineArc, UEnvQueryGenerator_OnCircle, uint8);
				UProperty* NewProp_bDefineArc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefineArc"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefineArc, UEnvQueryGenerator_OnCircle), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDefineArc, UEnvQueryGenerator_OnCircle), sizeof(uint8), false);
				UProperty* NewProp_TraceData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceData, UEnvQueryGenerator_OnCircle), 0x0010000000000001, Z_Construct_UScriptStruct_FEnvTraceData());
				UProperty* NewProp_CircleCenterZOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CircleCenterZOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CircleCenterZOffset, UEnvQueryGenerator_OnCircle), 0x0010008000000001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreAnyContextActorsWhenGeneratingCircle, UEnvQueryGenerator_OnCircle, bool);
				UProperty* NewProp_bIgnoreAnyContextActorsWhenGeneratingCircle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreAnyContextActorsWhenGeneratingCircle"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreAnyContextActorsWhenGeneratingCircle, UEnvQueryGenerator_OnCircle), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreAnyContextActorsWhenGeneratingCircle, UEnvQueryGenerator_OnCircle), sizeof(bool), true);
				UProperty* NewProp_CircleCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CircleCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(CircleCenter, UEnvQueryGenerator_OnCircle), 0x0014000000000001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_AngleRadians = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngleRadians"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngleRadians, UEnvQueryGenerator_OnCircle), 0x0010000000000000);
				UProperty* NewProp_ArcAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArcAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ArcAngle, UEnvQueryGenerator_OnCircle), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ArcDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ArcDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ArcDirection, UEnvQueryGenerator_OnCircle), 0x0010000000010001, Z_Construct_UScriptStruct_FEnvDirection());
				UProperty* NewProp_PointOnCircleSpacingMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PointOnCircleSpacingMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(PointOnCircleSpacingMethod, UEnvQueryGenerator_OnCircle), 0x0010000000010001, Z_Construct_UEnum_AIModule_EPointOnCircleSpacingMethod());
				UProperty* NewProp_PointOnCircleSpacingMethod_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_PointOnCircleSpacingMethod, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_NumberOfPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NumberOfPoints, UEnvQueryGenerator_OnCircle), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderIntValue());
				UProperty* NewProp_SpaceBetween = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpaceBetween"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpaceBetween, UEnvQueryGenerator_OnCircle), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_CircleRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CircleRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CircleRadius, UEnvQueryGenerator_OnCircle), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Points: Circle"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bDefineArc, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_TraceData, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_TraceData, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_TraceData, TEXT("ToolTip"), TEXT("horizontal trace for nearest obstacle"));
				MetaData->SetValue(NewProp_CircleCenterZOffset, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_CircleCenterZOffset, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_CircleCenterZOffset, TEXT("ToolTip"), TEXT("context offset"));
				MetaData->SetValue(NewProp_bIgnoreAnyContextActorsWhenGeneratingCircle, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_bIgnoreAnyContextActorsWhenGeneratingCircle, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_bIgnoreAnyContextActorsWhenGeneratingCircle, TEXT("ToolTip"), TEXT("ignore tracing into context actors when generating the circle"));
				MetaData->SetValue(NewProp_CircleCenter, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_CircleCenter, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_CircleCenter, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_AngleRadians, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_ArcAngle, TEXT("ToolTip"), TEXT("If you generate items on a piece of circle you define angle of Arc cut here"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("EditCondition"), TEXT("bDefineArc"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_ArcDirection, TEXT("ToolTip"), TEXT("If you generate items on a piece of circle you define direction of Arc cut here"));
				MetaData->SetValue(NewProp_PointOnCircleSpacingMethod, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_PointOnCircleSpacingMethod, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_PointOnCircleSpacingMethod, TEXT("ToolTip"), TEXT("how we are choosing where the points are in the circle"));
				MetaData->SetValue(NewProp_NumberOfPoints, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_NumberOfPoints, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_NumberOfPoints, TEXT("ToolTip"), TEXT("this many items will be generated on a circle"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("ToolTip"), TEXT("items will be generated on a circle this much apart"));
				MetaData->SetValue(NewProp_CircleRadius, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_CircleRadius, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_OnCircle.h"));
				MetaData->SetValue(NewProp_CircleRadius, TEXT("ToolTip"), TEXT("max distance of path between point and context"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_OnCircle(Z_Construct_UClass_UEnvQueryGenerator_OnCircle, &UEnvQueryGenerator_OnCircle::StaticClass, TEXT("UEnvQueryGenerator_OnCircle"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_OnCircle);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid_NoRegister()
	{
		return UEnvQueryGenerator_SimpleGrid::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator_ProjectedPoints();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_SimpleGrid::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GenerateAround = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GenerateAround"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(GenerateAround, UEnvQueryGenerator_SimpleGrid), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_SpaceBetween = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpaceBetween"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpaceBetween, UEnvQueryGenerator_SimpleGrid), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_GridSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GridSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GridSize, UEnvQueryGenerator_SimpleGrid), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Points: Grid"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_SimpleGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_SimpleGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simple grid, generates points in 2D square around context"));
				MetaData->SetValue(NewProp_GenerateAround, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_GenerateAround, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_SimpleGrid.h"));
				MetaData->SetValue(NewProp_GenerateAround, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_SimpleGrid.h"));
				MetaData->SetValue(NewProp_SpaceBetween, TEXT("ToolTip"), TEXT("generation density"));
				MetaData->SetValue(NewProp_GridSize, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_GridSize, TEXT("DisplayName"), TEXT("GridHalfSize"));
				MetaData->SetValue(NewProp_GridSize, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_SimpleGrid.h"));
				MetaData->SetValue(NewProp_GridSize, TEXT("ToolTip"), TEXT("half of square's extent, like a radius"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_SimpleGrid(Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid, &UEnvQueryGenerator_SimpleGrid::StaticClass, TEXT("UEnvQueryGenerator_SimpleGrid"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_SimpleGrid);
	UClass* Z_Construct_UClass_UEnvQueryGenerator_PathingGrid_NoRegister()
	{
		return UEnvQueryGenerator_PathingGrid::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryGenerator_PathingGrid()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryGenerator_SimpleGrid();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryGenerator_PathingGrid::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScanRangeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScanRangeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScanRangeMultiplier, UEnvQueryGenerator_PathingGrid), 0x0010048000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_NavigationFilter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(NavigationFilter, UEnvQueryGenerator_PathingGrid), 0x0014000000010001, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_PathToItem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathToItem"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PathToItem, UEnvQueryGenerator_PathingGrid), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Points: Pathing Grid"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Generators/EnvQueryGenerator_PathingGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_PathingGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Navigation grid, generates points on navmesh\nwith paths to/from context no further than given limit"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_PathingGrid.h"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("ToolTip"), TEXT("multiplier for max distance between point and context"));
				MetaData->SetValue(NewProp_NavigationFilter, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_NavigationFilter, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_PathingGrid.h"));
				MetaData->SetValue(NewProp_NavigationFilter, TEXT("ToolTip"), TEXT("navigation filter to use in pathfinding"));
				MetaData->SetValue(NewProp_PathToItem, TEXT("Category"), TEXT("Generator"));
				MetaData->SetValue(NewProp_PathToItem, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Generators/EnvQueryGenerator_PathingGrid.h"));
				MetaData->SetValue(NewProp_PathToItem, TEXT("ToolTip"), TEXT("pathfinding direction"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryGenerator_PathingGrid(Z_Construct_UClass_UEnvQueryGenerator_PathingGrid, &UEnvQueryGenerator_PathingGrid::StaticClass, TEXT("UEnvQueryGenerator_PathingGrid"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryGenerator_PathingGrid);
	UEnum* Z_Construct_UEnum_AIModule_EEQSNormalizationType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEQSNormalizationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEQSNormalizationType"), 0, Get_Z_Construct_UEnum_AIModule_EEQSNormalizationType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEQSNormalizationType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEQSNormalizationType::Absolute")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEQSNormalizationType::RelativeToScores")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEQSNormalizationType::EEQSNormalizationType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EEQSNormalizationType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RelativeToScores.ToolTip"), TEXT("using 0 as the base of normalization range"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEQSNormalizationType_CRC() { return 1812762444U; }
	UClass* Z_Construct_UClass_UEnvQueryTest_NoRegister()
	{
		return UEnvQueryTest::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryNode();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWorkOnFloatValues, UEnvQueryTest, uint8);
				UProperty* NewProp_bWorkOnFloatValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWorkOnFloatValues"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWorkOnFloatValues, UEnvQueryTest), 0x0040000000000000, CPP_BOOL_PROPERTY_BITMASK(bWorkOnFloatValues, UEnvQueryTest), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefineReferenceValue, UEnvQueryTest, bool);
				UProperty* NewProp_bDefineReferenceValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefineReferenceValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefineReferenceValue, UEnvQueryTest), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(bDefineReferenceValue, UEnvQueryTest), sizeof(bool), true);
				UProperty* NewProp_ReferenceValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferenceValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReferenceValue, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ScoringFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoringFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScoringFactor, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ScoreClampMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoreClampMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScoreClampMax, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ScoreClampMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoreClampMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScoreClampMin, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_NormalizationType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalizationType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(NormalizationType, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEQSNormalizationType());
				UProperty* NewProp_NormalizationType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_NormalizationType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ClampMaxType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClampMaxType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClampMaxType, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvQueryTestClamping());
				UProperty* NewProp_ClampMinType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClampMinType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClampMinType, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvQueryTestClamping());
				UProperty* NewProp_ScoringEquation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoringEquation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScoringEquation, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTestScoreEquation());
				UProperty* NewProp_FloatValueMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatValueMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FloatValueMax, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_FloatValueMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatValueMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FloatValueMin, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_BoolValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoolValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoolValue, UEnvQueryTest), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
				UProperty* NewProp_FilterType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FilterType, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTestFilterType());
				UProperty* NewProp_MultipleContextScoreOp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultipleContextScoreOp"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MultipleContextScoreOp, UEnvQueryTest), 0x0010040000010001, Z_Construct_UEnum_AIModule_EEnvTestScoreOperator());
				UProperty* NewProp_MultipleContextFilterOp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultipleContextFilterOp"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MultipleContextFilterOp, UEnvQueryTest), 0x0010040000010001, Z_Construct_UEnum_AIModule_EEnvTestFilterOperator());
				UProperty* NewProp_TestComment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestComment"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(TestComment, UEnvQueryTest), 0x0010000000010001);
				UProperty* NewProp_TestPurpose = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestPurpose"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TestPurpose, UEnvQueryTest), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTestPurpose());
				UProperty* NewProp_TestOrder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TestOrder, UEnvQueryTest), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_bWorkOnFloatValues, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_bWorkOnFloatValues, TEXT("ToolTip"), TEXT("When set, test operates on float values (e.g. distance, with AtLeast, UpTo conditions),\notherwise it will accept bool values (e.g. visibility, with Equals condition)"));
				MetaData->SetValue(NewProp_bDefineReferenceValue, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_bDefineReferenceValue, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bDefineReferenceValue, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_bDefineReferenceValue, TEXT("ToolTip"), TEXT("When set to true enables usage of ReferenceValue. It's false by default"));
				MetaData->SetValue(NewProp_ReferenceValue, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ReferenceValue, TEXT("EditCondition"), TEXT("bDefineReferenceValue"));
				MetaData->SetValue(NewProp_ReferenceValue, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ReferenceValue, TEXT("ToolTip"), TEXT("When specified gets used to normalize test's results in such a way that the closer a value is to ReferenceValue\n    the higher normalized result it will produce. Value farthest from ReferenceValue will be normalized\n    to 0, and all the other values in between will get normalized linearly with the distance to ReferenceValue."));
				MetaData->SetValue(NewProp_ScoringFactor, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ScoringFactor, TEXT("ClampMin"), TEXT("0.001"));
				MetaData->SetValue(NewProp_ScoringFactor, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ScoringFactor, TEXT("ToolTip"), TEXT("The weight (factor) by which to multiply the normalized score after the scoring equation is applied."));
				MetaData->SetValue(NewProp_ScoringFactor, TEXT("UIMin"), TEXT("0.001"));
				MetaData->SetValue(NewProp_ScoreClampMax, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ScoreClampMax, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ScoreClampMax, TEXT("ToolTip"), TEXT("Maximum value to use to normalize the raw test value before applying scoring formula."));
				MetaData->SetValue(NewProp_ScoreClampMin, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ScoreClampMin, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ScoreClampMin, TEXT("ToolTip"), TEXT("Minimum value to use to normalize the raw test value before applying scoring formula."));
				MetaData->SetValue(NewProp_NormalizationType, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_NormalizationType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_NormalizationType, TEXT("ToolTip"), TEXT("Specifies how to determine value span used to normalize scores"));
				MetaData->SetValue(NewProp_ClampMaxType, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ClampMaxType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ClampMaxType, TEXT("ToolTip"), TEXT("How should the upper bound for normalization of the raw test value before applying the scoring formula be determined?\n          Should it use the highest value found (tested), the upper threshold for filtering, or a separate specified normalization maximum?"));
				MetaData->SetValue(NewProp_ClampMinType, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ClampMinType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ClampMinType, TEXT("ToolTip"), TEXT("How should the lower bound for normalization of the raw test value before applying the scoring formula be determined?\n          Should it use the lowest value found (tested), the lower threshold for filtering, or a separate specified normalization minimum?"));
				MetaData->SetValue(NewProp_ScoringEquation, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_ScoringEquation, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_ScoringEquation, TEXT("ToolTip"), TEXT("The shape of the curve equation to apply to the normalized score before multiplying by factor."));
				MetaData->SetValue(NewProp_FloatValueMax, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_FloatValueMax, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_FloatValueMax, TEXT("ToolTip"), TEXT("Maximum limit (inclusive) of valid values for the raw test value. Higher values will be discarded as invalid."));
				MetaData->SetValue(NewProp_FloatValueMin, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_FloatValueMin, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_FloatValueMin, TEXT("ToolTip"), TEXT("Minimum limit (inclusive) of valid values for the raw test value. Lower values will be discarded as invalid."));
				MetaData->SetValue(NewProp_BoolValue, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_BoolValue, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_BoolValue, TEXT("ToolTip"), TEXT("Desired boolean value of the test for scoring to occur or filtering test to pass."));
				MetaData->SetValue(NewProp_FilterType, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_FilterType, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_FilterType, TEXT("ToolTip"), TEXT("Does this test filter out results that are below a lower limit, above an upper limit, or both?  Or does it just look for a matching value?"));
				MetaData->SetValue(NewProp_MultipleContextScoreOp, TEXT("Category"), TEXT("Score"));
				MetaData->SetValue(NewProp_MultipleContextScoreOp, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_MultipleContextScoreOp, TEXT("ToolTip"), TEXT("Determines scoring operator when context returns multiple items"));
				MetaData->SetValue(NewProp_MultipleContextFilterOp, TEXT("Category"), TEXT("Filter"));
				MetaData->SetValue(NewProp_MultipleContextFilterOp, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_MultipleContextFilterOp, TEXT("ToolTip"), TEXT("Determines filtering operator when context returns multiple items"));
				MetaData->SetValue(NewProp_TestComment, TEXT("Category"), TEXT("Test"));
				MetaData->SetValue(NewProp_TestComment, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_TestComment, TEXT("ToolTip"), TEXT("Optional comment or explanation about what this test is for.  Useful when the purpose of tests may not be clear,\nespecially when there are multiple tests of the same type."));
				MetaData->SetValue(NewProp_TestPurpose, TEXT("Category"), TEXT("Test"));
				MetaData->SetValue(NewProp_TestPurpose, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_TestPurpose, TEXT("ToolTip"), TEXT("The purpose of this test.  Should it be used for filtering possible results, scoring them, or both?"));
				MetaData->SetValue(NewProp_TestOrder, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryTest.h"));
				MetaData->SetValue(NewProp_TestOrder, TEXT("ToolTip"), TEXT("Number of test as defined in data asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest(Z_Construct_UClass_UEnvQueryTest, &UEnvQueryTest::StaticClass, TEXT("UEnvQueryTest"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest);
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestDistance()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestDistance_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestDistance"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestDistance_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDistance::Distance3D")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDistance::Distance2D")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDistance::DistanceZ")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDistance::DistanceAbsoluteZ")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDistance::EEnvTestDistance_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestDistance::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("DistanceAbsoluteZ.DisplayName"), TEXT("Distance Z (Absolute)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Distance.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestDistance_CRC() { return 4232922672U; }
	UClass* Z_Construct_UClass_UEnvQueryTest_Distance_NoRegister()
	{
		return UEnvQueryTest_Distance::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Distance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Distance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DistanceTo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceTo"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(DistanceTo, UEnvQueryTest_Distance), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_TestMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TestMode, UEnvQueryTest_Distance), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTestDistance());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Distance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Distance.h"));
				MetaData->SetValue(NewProp_DistanceTo, TEXT("Category"), TEXT("Distance"));
				MetaData->SetValue(NewProp_DistanceTo, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Distance.h"));
				MetaData->SetValue(NewProp_DistanceTo, TEXT("ToolTip"), TEXT("context"));
				MetaData->SetValue(NewProp_TestMode, TEXT("Category"), TEXT("Distance"));
				MetaData->SetValue(NewProp_TestMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Distance.h"));
				MetaData->SetValue(NewProp_TestMode, TEXT("ToolTip"), TEXT("testing mode"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Distance(Z_Construct_UClass_UEnvQueryTest_Distance, &UEnvQueryTest_Distance::StaticClass, TEXT("UEnvQueryTest_Distance"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Distance);
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestDot()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestDot_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestDot"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestDot_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestDot"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDot::Dot3D")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDot::Dot2D")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestDot::EEnvTestDot_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EEnvTestDot");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Dot2D.DisplayName"), TEXT("Dot 2D (Heading)"));
			MetaData->SetValue(ReturnEnum, TEXT("Dot2D.Tooltip"), TEXT("Dot Product in the XY-plane, which is equivalent to the cosine of the heading or yaw angle."));
			MetaData->SetValue(ReturnEnum, TEXT("Dot3D.DisplayName"), TEXT("Dot (3D)"));
			MetaData->SetValue(ReturnEnum, TEXT("Dot3D.Tooltip"), TEXT("Fully 3D dot-product"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestDot_CRC() { return 3709404301U; }
	UClass* Z_Construct_UClass_UEnvQueryTest_Dot_NoRegister()
	{
		return UEnvQueryTest_Dot::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Dot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Dot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsoluteValue, UEnvQueryTest_Dot, bool);
				UProperty* NewProp_bAbsoluteValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsoluteValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsoluteValue, UEnvQueryTest_Dot), 0x0020080000010001, CPP_BOOL_PROPERTY_BITMASK(bAbsoluteValue, UEnvQueryTest_Dot), sizeof(bool), true);
				UProperty* NewProp_TestMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TestMode, UEnvQueryTest_Dot), 0x0020080000010001, Z_Construct_UEnum_AIModule_EEnvTestDot());
				UProperty* NewProp_TestMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TestMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_LineB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LineB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineB, UEnvQueryTest_Dot), 0x0020080000010001, Z_Construct_UScriptStruct_FEnvDirection());
				UProperty* NewProp_LineA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LineA"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LineA, UEnvQueryTest_Dot), 0x0020080000010001, Z_Construct_UScriptStruct_FEnvDirection());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(NewProp_bAbsoluteValue, TEXT("Category"), TEXT("Dot"));
				MetaData->SetValue(NewProp_bAbsoluteValue, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(NewProp_bAbsoluteValue, TEXT("ToolTip"), TEXT("If true, this test uses the absolute value of the dot product rather than the dot product itself.  Useful\nwhen you want to compare \"how lateral\" something is.  I.E. values closer to zero are further to the side,\nand values closer to 1 are more in front or behind (without distinguishing forward/backward)."));
				MetaData->SetValue(NewProp_TestMode, TEXT("Category"), TEXT("Dot"));
				MetaData->SetValue(NewProp_TestMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(NewProp_LineB, TEXT("Category"), TEXT("Dot"));
				MetaData->SetValue(NewProp_LineB, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(NewProp_LineB, TEXT("ToolTip"), TEXT("defines direction of second line used by test"));
				MetaData->SetValue(NewProp_LineA, TEXT("Category"), TEXT("Dot"));
				MetaData->SetValue(NewProp_LineA, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Dot.h"));
				MetaData->SetValue(NewProp_LineA, TEXT("ToolTip"), TEXT("defines direction of first line used by test"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Dot(Z_Construct_UClass_UEnvQueryTest_Dot, &UEnvQueryTest_Dot::StaticClass, TEXT("UEnvQueryTest_Dot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Dot);
	UClass* Z_Construct_UClass_UEnvQueryTest_GameplayTags_NoRegister()
	{
		return UEnvQueryTest_GameplayTags::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_GameplayTags()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_GameplayTags::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GameplayTags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GameplayTags"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GameplayTags, UEnvQueryTest_GameplayTags), 0x0020080000000000, Z_Construct_UScriptStruct_FGameplayTagContainer());
				UProperty* NewProp_TagsToMatch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TagsToMatch"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TagsToMatch, UEnvQueryTest_GameplayTags), 0x0020080000000000, Z_Construct_UEnum_GameplayTags_EGameplayContainerMatchType());
				UProperty* NewProp_TagsToMatch_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TagsToMatch, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatedToUseQuery, UEnvQueryTest_GameplayTags, bool);
				UProperty* NewProp_bUpdatedToUseQuery = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatedToUseQuery"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatedToUseQuery, UEnvQueryTest_GameplayTags), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdatedToUseQuery, UEnvQueryTest_GameplayTags), sizeof(bool), true);
				UProperty* NewProp_TagQueryToMatch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TagQueryToMatch"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TagQueryToMatch, UEnvQueryTest_GameplayTags), 0x0020080000000001, Z_Construct_UScriptStruct_FGameplayTagQuery());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
				MetaData->SetValue(NewProp_GameplayTags, TEXT("ToolTip"), TEXT("Deprecated property.  Used only to load old data into TagQueryToMatch."));
				MetaData->SetValue(NewProp_TagsToMatch, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
				MetaData->SetValue(NewProp_TagsToMatch, TEXT("ToolTip"), TEXT("Deprecated property.  Used only to load old data into TagQueryToMatch."));
				MetaData->SetValue(NewProp_bUpdatedToUseQuery, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
				MetaData->SetValue(NewProp_bUpdatedToUseQuery, TEXT("ToolTip"), TEXT("Used to determine whether the file format needs to be updated to move data into TagQueryToMatch or not."));
				MetaData->SetValue(NewProp_TagQueryToMatch, TEXT("Category"), TEXT("GameplayTagCheck"));
				MetaData->SetValue(NewProp_TagQueryToMatch, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_GameplayTags.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_GameplayTags(Z_Construct_UClass_UEnvQueryTest_GameplayTags, &UEnvQueryTest_GameplayTags::StaticClass, TEXT("UEnvQueryTest_GameplayTags"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_GameplayTags);
	UClass* Z_Construct_UClass_UEnvQueryTest_Overlap_NoRegister()
	{
		return UEnvQueryTest_Overlap::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Overlap()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Overlap::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OverlapData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverlapData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OverlapData, UEnvQueryTest_Overlap), 0x0010000000010001, Z_Construct_UScriptStruct_FEnvOverlapData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Overlap.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Overlap.h"));
				MetaData->SetValue(NewProp_OverlapData, TEXT("Category"), TEXT("Overlap"));
				MetaData->SetValue(NewProp_OverlapData, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Overlap.h"));
				MetaData->SetValue(NewProp_OverlapData, TEXT("ToolTip"), TEXT("Overlap data"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Overlap(Z_Construct_UClass_UEnvQueryTest_Overlap, &UEnvQueryTest_Overlap::StaticClass, TEXT("UEnvQueryTest_Overlap"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Overlap);
	UEnum* Z_Construct_UEnum_AIModule_EEnvTestPathfinding()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestPathfinding_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvTestPathfinding"), 0, Get_Z_Construct_UEnum_AIModule_EEnvTestPathfinding_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvTestPathfinding"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPathfinding::PathExist")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPathfinding::PathCost")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPathfinding::PathLength")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvTestPathfinding::EEnvTestPathfinding_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEnvTestPathfinding::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvTestPathfinding_CRC() { return 2135409091U; }
	UClass* Z_Construct_UClass_UEnvQueryTest_Pathfinding_NoRegister()
	{
		return UEnvQueryTest_Pathfinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Pathfinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Pathfinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(FilterClass, UEnvQueryTest_Pathfinding), 0x0014000000010001, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_SkipUnreachable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkipUnreachable"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SkipUnreachable, UEnvQueryTest_Pathfinding), 0x0010048000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
				UProperty* NewProp_PathFromContext = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathFromContext"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PathFromContext, UEnvQueryTest_Pathfinding), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
				UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Context, UEnvQueryTest_Pathfinding), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_TestMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TestMode, UEnvQueryTest_Pathfinding), 0x0010000000010001, Z_Construct_UEnum_AIModule_EEnvTestPathfinding());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ToolTip"), TEXT("navigation filter to use in pathfinding"));
				MetaData->SetValue(NewProp_SkipUnreachable, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_SkipUnreachable, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_SkipUnreachable, TEXT("ToolTip"), TEXT("if set, items with failed path will be invalidated (PathCost, PathLength)"));
				MetaData->SetValue(NewProp_PathFromContext, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_PathFromContext, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_PathFromContext, TEXT("ToolTip"), TEXT("pathfinding direction"));
				MetaData->SetValue(NewProp_Context, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_Context, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_Context, TEXT("ToolTip"), TEXT("context: other end of pathfinding test"));
				MetaData->SetValue(NewProp_TestMode, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_TestMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Pathfinding.h"));
				MetaData->SetValue(NewProp_TestMode, TEXT("ToolTip"), TEXT("testing mode"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Pathfinding(Z_Construct_UClass_UEnvQueryTest_Pathfinding, &UEnvQueryTest_Pathfinding::StaticClass, TEXT("UEnvQueryTest_Pathfinding"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Pathfinding);
	UClass* Z_Construct_UClass_UEnvQueryTest_PathfindingBatch_NoRegister()
	{
		return UEnvQueryTest_PathfindingBatch::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_PathfindingBatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest_Pathfinding();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_PathfindingBatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScanRangeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScanRangeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScanRangeMultiplier, UEnvQueryTest_PathfindingBatch), 0x0010048000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_PathfindingBatch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_PathfindingBatch.h"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("Category"), TEXT("Pathfinding"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_PathfindingBatch.h"));
				MetaData->SetValue(NewProp_ScanRangeMultiplier, TEXT("ToolTip"), TEXT("multiplier for max distance between point and context"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_PathfindingBatch(Z_Construct_UClass_UEnvQueryTest_PathfindingBatch, &UEnvQueryTest_PathfindingBatch::StaticClass, TEXT("UEnvQueryTest_PathfindingBatch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_PathfindingBatch);
	UClass* Z_Construct_UClass_UEnvQueryTest_Project_NoRegister()
	{
		return UEnvQueryTest_Project::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Project()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Project::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProjectionData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ProjectionData, UEnvQueryTest_Project), 0x0020080000010001, Z_Construct_UScriptStruct_FEnvTraceData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Project.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Project.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Projects points on navigation or geometry, will modify value of projected items.\nWorks only on item type: point"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("Category"), TEXT("Test"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Project.h"));
				MetaData->SetValue(NewProp_ProjectionData, TEXT("ToolTip"), TEXT("trace params"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Project(Z_Construct_UClass_UEnvQueryTest_Project, &UEnvQueryTest_Project::StaticClass, TEXT("UEnvQueryTest_Project"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Project);
	UClass* Z_Construct_UClass_UEnvQueryTest_Random_NoRegister()
	{
		return UEnvQueryTest_Random::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Random()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Random::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DeprecatedNode"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("DeprecationMessage"), TEXT("This class is now deprecated, please use RunMode supporting random results instead."));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Random.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Random.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Random(Z_Construct_UClass_UEnvQueryTest_Random, &UEnvQueryTest_Random::StaticClass, TEXT("UEnvQueryTest_Random"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Random);
	UClass* Z_Construct_UClass_UEnvQueryTest_Trace_NoRegister()
	{
		return UEnvQueryTest_Trace::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryTest_Trace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UEnvQueryTest();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryTest_Trace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Context"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Context, UEnvQueryTest_Trace), 0x0014000000010001, Z_Construct_UClass_UEnvQueryContext_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_ContextHeightOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContextHeightOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ContextHeightOffset, UEnvQueryTest_Trace), 0x0010048000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_ItemHeightOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemHeightOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ItemHeightOffset, UEnvQueryTest_Trace), 0x0010048000010001, Z_Construct_UScriptStruct_FAIDataProviderFloatValue());
				UProperty* NewProp_TraceFromContext = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceFromContext"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceFromContext, UEnvQueryTest_Trace), 0x0010008000010001, Z_Construct_UScriptStruct_FAIDataProviderBoolValue());
				UProperty* NewProp_TraceData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TraceData, UEnvQueryTest_Trace), 0x0010000000010001, Z_Construct_UScriptStruct_FEnvTraceData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_Context, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_Context, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_Context, TEXT("ToolTip"), TEXT("context: other end of trace test"));
				MetaData->SetValue(NewProp_ContextHeightOffset, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_ContextHeightOffset, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_ContextHeightOffset, TEXT("ToolTip"), TEXT("Z offset from querier"));
				MetaData->SetValue(NewProp_ItemHeightOffset, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_ItemHeightOffset, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_ItemHeightOffset, TEXT("ToolTip"), TEXT("Z offset from item"));
				MetaData->SetValue(NewProp_TraceFromContext, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_TraceFromContext, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_TraceFromContext, TEXT("ToolTip"), TEXT("trace direction"));
				MetaData->SetValue(NewProp_TraceData, TEXT("Category"), TEXT("Trace"));
				MetaData->SetValue(NewProp_TraceData, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/Tests/EnvQueryTest_Trace.h"));
				MetaData->SetValue(NewProp_TraceData, TEXT("ToolTip"), TEXT("trace data"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryTest_Trace(Z_Construct_UClass_UEnvQueryTest_Trace, &UEnvQueryTest_Trace::StaticClass, TEXT("UEnvQueryTest_Trace"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryTest_Trace);
	UClass* Z_Construct_UClass_UEnvQueryOption_NoRegister()
	{
		return UEnvQueryOption::StaticClass();
	}
	UClass* Z_Construct_UClass_UEnvQueryOption()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEnvQueryOption::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Tests = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tests"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Tests, UEnvQueryOption), 0x0010000000000000);
				UProperty* NewProp_Tests_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Tests, TEXT("Tests"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UEnvQueryTest_NoRegister());
				UProperty* NewProp_Generator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Generator"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Generator, UEnvQueryOption), 0x0010000000000000, Z_Construct_UClass_UEnvQueryGenerator_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EnvQueryOption.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryOption.h"));
				MetaData->SetValue(NewProp_Tests, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryOption.h"));
				MetaData->SetValue(NewProp_Generator, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EnvQueryOption.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEnvQueryOption(Z_Construct_UClass_UEnvQueryOption, &UEnvQueryOption::StaticClass, TEXT("UEnvQueryOption"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEnvQueryOption);
	UClass* Z_Construct_UClass_UEQSRenderingComponent_NoRegister()
	{
		return UEQSRenderingComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UEQSRenderingComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UEQSRenderingComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Mobility Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EQSRenderingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSRenderingComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEQSRenderingComponent(Z_Construct_UClass_UEQSRenderingComponent, &UEQSRenderingComponent::StaticClass, TEXT("UEQSRenderingComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEQSRenderingComponent);
	UEnum* Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEnvQueryHightlightMode"), 0, Get_Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEnvQueryHightlightMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryHightlightMode::All")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryHightlightMode::Best5Pct")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryHightlightMode::Best25Pct")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEnvQueryHightlightMode::EEnvQueryHightlightMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EEnvQueryHightlightMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Best25Pct.DisplayName"), TEXT("Best 25%"));
			MetaData->SetValue(ReturnEnum, TEXT("Best5Pct.DisplayName"), TEXT("Best 5%"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode_CRC() { return 2423956262U; }
	UClass* Z_Construct_UClass_AEQSTestingPawn_NoRegister()
	{
		return AEQSTestingPawn::StaticClass();
	}
	UClass* Z_Construct_UClass_AEQSTestingPawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = AEQSTestingPawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EdRenderComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EdRenderComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EdRenderComp, AEQSTestingPawn), 0x0010000800082008, Z_Construct_UClass_UEQSRenderingComponent_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_QueryingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(QueryingMode, AEQSTestingPawn), 0x0010000000000001, Z_Construct_UEnum_AIModule_EEnvQueryRunMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTickDuringGame, AEQSTestingPawn, uint8);
				UProperty* NewProp_bTickDuringGame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTickDuringGame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTickDuringGame, AEQSTestingPawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTickDuringGame, AEQSTestingPawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldBeVisibleInGame, AEQSTestingPawn, uint8);
				UProperty* NewProp_bShouldBeVisibleInGame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldBeVisibleInGame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldBeVisibleInGame, AEQSTestingPawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bShouldBeVisibleInGame, AEQSTestingPawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReRunQueryOnlyOnFinishedMove, AEQSTestingPawn, uint8);
				UProperty* NewProp_bReRunQueryOnlyOnFinishedMove = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReRunQueryOnlyOnFinishedMove"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReRunQueryOnlyOnFinishedMove, AEQSTestingPawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bReRunQueryOnlyOnFinishedMove, AEQSTestingPawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawFailedItems, AEQSTestingPawn, uint8);
				UProperty* NewProp_bDrawFailedItems = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDrawFailedItems"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawFailedItems, AEQSTestingPawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDrawFailedItems, AEQSTestingPawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDrawLabels, AEQSTestingPawn, uint8);
				UProperty* NewProp_bDrawLabels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDrawLabels"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDrawLabels, AEQSTestingPawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDrawLabels, AEQSTestingPawn), sizeof(uint8), false);
				UProperty* NewProp_HighlightMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HighlightMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(HighlightMode, AEQSTestingPawn), 0x0010000000000001, Z_Construct_UEnum_AIModule_EEnvQueryHightlightMode());
				UProperty* NewProp_HighlightMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_HighlightMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_StepToDebugDraw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StepToDebugDraw"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StepToDebugDraw, AEQSTestingPawn), 0x0010000000000001);
				UProperty* NewProp_TimeLimitPerStep = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeLimitPerStep"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeLimitPerStep, AEQSTestingPawn), 0x0010000000000001);
				UProperty* NewProp_QueryConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QueryConfig, AEQSTestingPawn), 0x0010000000000001);
				UProperty* NewProp_QueryConfig_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryConfig, TEXT("QueryConfig"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAIDynamicParam());
				UProperty* NewProp_QueryParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QueryParams, AEQSTestingPawn), 0x0010000000020001);
				UProperty* NewProp_QueryParams_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QueryParams, TEXT("QueryParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FEnvNamedValue());
				UProperty* NewProp_QueryTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QueryTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(QueryTemplate, AEQSTestingPawn), 0x0010000000000001, Z_Construct_UClass_UEnvQuery_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UEQSQueryResultSourceInterface_NoRegister(), VTABLE_OFFSET(AEQSTestingPawn, IEQSQueryResultSourceInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Advanced Attachment Mesh Animation Clothing Physics Rendering Lighting Activation CharacterMovement AgentPhysics Avoidance MovementComponent Velocity Shape Camera Input Layers SkeletalMesh Optimization Pawn Replication Actor Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("this class is abstract even though it's perfectly functional on its own.\n   The reason is to stop it from showing as valid player pawn type when configuring\n   project's game mode."));
				MetaData->SetValue(NewProp_EdRenderComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_EdRenderComp, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_QueryingMode, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_QueryingMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_bTickDuringGame, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_bTickDuringGame, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_bShouldBeVisibleInGame, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_bShouldBeVisibleInGame, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_bReRunQueryOnlyOnFinishedMove, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_bReRunQueryOnlyOnFinishedMove, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_bDrawFailedItems, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_bDrawFailedItems, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_bDrawLabels, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_bDrawLabels, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_HighlightMode, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_HighlightMode, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_StepToDebugDraw, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_StepToDebugDraw, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_TimeLimitPerStep, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_TimeLimitPerStep, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_QueryConfig, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_QueryConfig, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("DisplayName"), TEXT("QueryParams_DEPRECATED"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
				MetaData->SetValue(NewProp_QueryParams, TEXT("ToolTip"), TEXT("optional parameters for query"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("Category"), TEXT("EQS"));
				MetaData->SetValue(NewProp_QueryTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/EnvironmentQuery/EQSTestingPawn.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AEQSTestingPawn(Z_Construct_UClass_AEQSTestingPawn, &AEQSTestingPawn::StaticClass, TEXT("AEQSTestingPawn"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AEQSTestingPawn);
	UClass* Z_Construct_UClass_UNavFilter_AIControllerDefault_NoRegister()
	{
		return UNavFilter_AIControllerDefault::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavFilter_AIControllerDefault()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavigationQueryFilter();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UNavFilter_AIControllerDefault::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Navigation/NavFilter_AIControllerDefault.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavFilter_AIControllerDefault.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavFilter_AIControllerDefault(Z_Construct_UClass_UNavFilter_AIControllerDefault, &UNavFilter_AIControllerDefault::StaticClass, TEXT("UNavFilter_AIControllerDefault"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavFilter_AIControllerDefault);
	UFunction* Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForBox()
	{
		struct NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms
		{
			UObject* WorldContext;
			FVector Location;
			FVector Extent;
			FRotator Rotation;
			int32 Radius2D;
			float Height;
			bool bRebuildGrids;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavLocalGridManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddLocalNavigationGridForBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms, bool);
			UProperty* NewProp_bRebuildGrids = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRebuildGrids"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), sizeof(bool), true);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Height, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000082);
			UProperty* NewProp_Radius2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius2D"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Radius2D, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000082);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Extent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Extent, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, NavLocalGridManager_eventAddLocalNavigationGridForBox_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRebuildGrids"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Extent"), TEXT("1.000000,1.000000,1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius2D"), TEXT("5"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
			MetaData->SetValue(NewProp_Height, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Radius2D, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForPoint()
	{
		struct NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms
		{
			UObject* WorldContext;
			FVector Location;
			int32 Radius2D;
			float Height;
			bool bRebuildGrids;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavLocalGridManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddLocalNavigationGridForPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000000000580);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms, bool);
			UProperty* NewProp_bRebuildGrids = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRebuildGrids"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bRebuildGrids, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Height, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000000000082);
			UProperty* NewProp_Radius2D = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius2D"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Radius2D, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000000000082);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, NavLocalGridManager_eventAddLocalNavigationGridForPoint_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRebuildGrids"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("100.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Radius2D"), TEXT("5"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
			MetaData->SetValue(NewProp_Height, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Radius2D, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavLocalGridManager_FindLocalNavigationGridPath()
	{
		struct NavLocalGridManager_eventFindLocalNavigationGridPath_Parms
		{
			UObject* WorldContext;
			FVector Start;
			FVector End;
			TArray<FVector> PathPoints;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavLocalGridManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindLocalNavigationGridPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(NavLocalGridManager_eventFindLocalNavigationGridPath_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), sizeof(bool), true);
			UProperty* NewProp_PathPoints = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathPoints, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), 0x0010000000000180);
			UProperty* NewProp_PathPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathPoints, TEXT("PathPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("End"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(End, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Start, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, NavLocalGridManager_eventFindLocalNavigationGridPath_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
			MetaData->SetValue(NewProp_End, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_Start, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavLocalGridManager_RemoveLocalNavigationGrid()
	{
		struct NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms
		{
			UObject* WorldContext;
			int32 GridId;
			bool bRebuildGrids;
		};
		UObject* Outer=Z_Construct_UClass_UNavLocalGridManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveLocalNavigationGrid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRebuildGrids, NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms, bool);
			UProperty* NewProp_bRebuildGrids = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRebuildGrids"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRebuildGrids, NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bRebuildGrids, NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms), sizeof(bool), true);
			UProperty* NewProp_GridId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GridId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(GridId, NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, NavLocalGridManager_eventRemoveLocalNavigationGrid_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRebuildGrids"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavLocalGridManager_SetLocalNavigationGridDensity()
	{
		struct NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms
		{
			UObject* WorldContext;
			float CellSize;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavLocalGridManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLocalNavigationGridDensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms), sizeof(bool), true);
			UProperty* NewProp_CellSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CellSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CellSize, NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms), 0x0010000000000080);
			UProperty* NewProp_WorldContext = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContext"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContext, NavLocalGridManager_eventSetLocalNavigationGridDensity_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContext"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UNavLocalGridManager_NoRegister()
	{
		return UNavLocalGridManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavLocalGridManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UNavLocalGridManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavLocalGridManager_FindLocalNavigationGridPath());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavLocalGridManager_RemoveLocalNavigationGrid());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavLocalGridManager_SetLocalNavigationGridDensity());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForBox(), "AddLocalNavigationGridForBox"); // 2280229035
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavLocalGridManager_AddLocalNavigationGridForPoint(), "AddLocalNavigationGridForPoint"); // 1112815060
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavLocalGridManager_FindLocalNavigationGridPath(), "FindLocalNavigationGridPath"); // 1085586999
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavLocalGridManager_RemoveLocalNavigationGrid(), "RemoveLocalNavigationGrid"); // 473913663
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavLocalGridManager_SetLocalNavigationGridDensity(), "SetLocalNavigationGridDensity"); // 163003898
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Navigation/NavLocalGridManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/NavLocalGridManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Manager for local navigation grids\n\nBuilds non overlapping grid from multiple sources, that can be used later for pathfinding.\nCheck also: UGridPathFollowingComponent, FNavLocalGridData"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavLocalGridManager(Z_Construct_UClass_UNavLocalGridManager, &UNavLocalGridManager::StaticClass, TEXT("UNavLocalGridManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavLocalGridManager);
	UFunction* Z_Construct_UFunction_UCrowdFollowingComponent_SuspendCrowdSteering()
	{
		struct CrowdFollowingComponent_eventSuspendCrowdSteering_Parms
		{
			bool bSuspend;
		};
		UObject* Outer=Z_Construct_UClass_UCrowdFollowingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SuspendCrowdSteering"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(CrowdFollowingComponent_eventSuspendCrowdSteering_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuspend, CrowdFollowingComponent_eventSuspendCrowdSteering_Parms, bool);
			UProperty* NewProp_bSuspend = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSuspend"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuspend, CrowdFollowingComponent_eventSuspendCrowdSteering_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSuspend, CrowdFollowingComponent_eventSuspendCrowdSteering_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Crowd"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("master switch for crowd steering & avoidance"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCrowdFollowingComponent_NoRegister()
	{
		return UCrowdFollowingComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UCrowdFollowingComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPathFollowingComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UCrowdFollowingComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCrowdFollowingComponent_SuspendCrowdSteering());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GroupsToIgnore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupsToIgnore"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GroupsToIgnore_DEPRECATED, UCrowdFollowingComponent), 0x0020080020000000, Z_Construct_UScriptStruct_FNavAvoidanceMask());
				UProperty* NewProp_GroupsToAvoid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupsToAvoid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GroupsToAvoid_DEPRECATED, UCrowdFollowingComponent), 0x0020080020000000, Z_Construct_UScriptStruct_FNavAvoidanceMask());
				UProperty* NewProp_AvoidanceGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvoidanceGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AvoidanceGroup_DEPRECATED, UCrowdFollowingComponent), 0x0020080020000000, Z_Construct_UScriptStruct_FNavAvoidanceMask());
				UProperty* NewProp_CharacterMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CharacterMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CharacterMovement, UCrowdFollowingComponent), 0x0020080000082008, Z_Construct_UClass_UCharacterMovementComponent_NoRegister());
				UProperty* NewProp_CrowdAgentMoveDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CrowdAgentMoveDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CrowdAgentMoveDirection, UCrowdFollowingComponent), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCrowdFollowingComponent_SuspendCrowdSteering(), "SuspendCrowdSteering"); // 1529611141
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UCrowdAgentInterface_NoRegister(), VTABLE_OFFSET(UCrowdFollowingComponent, ICrowdAgentInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(NewProp_GroupsToIgnore, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(NewProp_GroupsToIgnore, TEXT("ToolTip"), TEXT("DEPRECATED: Will NOT avoid other agents if they are in one of specified groups, higher priority than GroupsToAvoid - use property from CharacterMovementComponent instead"));
				MetaData->SetValue(NewProp_GroupsToAvoid, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(NewProp_GroupsToAvoid, TEXT("ToolTip"), TEXT("DEPRECATED: Will avoid other agents if they are in one of specified groups - use property from CharacterMovementComponent instead"));
				MetaData->SetValue(NewProp_AvoidanceGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(NewProp_AvoidanceGroup, TEXT("ToolTip"), TEXT("DEPRECATED: Group mask for this agent - use property from CharacterMovementComponent instead"));
				MetaData->SetValue(NewProp_CharacterMovement, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CharacterMovement, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
				MetaData->SetValue(NewProp_CrowdAgentMoveDirection, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/CrowdFollowingComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCrowdFollowingComponent(Z_Construct_UClass_UCrowdFollowingComponent, &UCrowdFollowingComponent::StaticClass, TEXT("UCrowdFollowingComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCrowdFollowingComponent);
	UClass* Z_Construct_UClass_UGridPathFollowingComponent_NoRegister()
	{
		return UGridPathFollowingComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UGridPathFollowingComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPathFollowingComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UGridPathFollowingComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GridManager = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GridManager"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GridManager, UGridPathFollowingComponent), 0x0020080000002000, Z_Construct_UClass_UNavLocalGridManager_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Navigation/GridPathFollowingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/GridPathFollowingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Path following augmented with local navigation grids\n\nKeeps track of nearby grids and use them instead of navigation path when agent is inside.\nOnce outside grid, regular path following is resumed.\n\nThis allows creating dynamic navigation obstacles with fully static navigation (e.g. static navmesh),\nas long as they are minor modifications for path. Not recommended for blocking off entire corridors.\n\nDoes not replace proper avoidance for dynamic obstacles!"));
				MetaData->SetValue(NewProp_GridManager, TEXT("ModuleRelativePath"), TEXT("Classes/Navigation/GridPathFollowingComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGridPathFollowingComponent(Z_Construct_UClass_UGridPathFollowingComponent, &UGridPathFollowingComponent::StaticClass, TEXT("UGridPathFollowingComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGridPathFollowingComponent);
	UEnum* Z_Construct_UEnum_AIModule_EPawnActionFailHandling()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EPawnActionFailHandling_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPawnActionFailHandling"), 0, Get_Z_Construct_UEnum_AIModule_EPawnActionFailHandling_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPawnActionFailHandling"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionFailHandling::RequireSuccess")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionFailHandling::IgnoreFailure")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionFailHandling::EPawnActionFailHandling_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EPawnActionFailHandling::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EPawnActionFailHandling_CRC() { return 3079624939U; }
	UEnum* Z_Construct_UEnum_AIModule_EPawnSubActionTriggeringPolicy()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EPawnSubActionTriggeringPolicy_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPawnSubActionTriggeringPolicy"), 0, Get_Z_Construct_UEnum_AIModule_EPawnSubActionTriggeringPolicy_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPawnSubActionTriggeringPolicy"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnSubActionTriggeringPolicy::CopyBeforeTriggering")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnSubActionTriggeringPolicy::ReuseInstances")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnSubActionTriggeringPolicy::EPawnSubActionTriggeringPolicy_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EPawnSubActionTriggeringPolicy::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EPawnSubActionTriggeringPolicy_CRC() { return 2292307402U; }
	UFunction* Z_Construct_UFunction_UPawnAction_CreateActionInstance()
	{
		struct PawnAction_eventCreateActionInstance_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UPawnAction>  ActionClass;
			UPawnAction* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnAction();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateActionInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PawnAction_eventCreateActionInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, PawnAction_eventCreateActionInstance_Parms), 0x0010000000000580, Z_Construct_UClass_UPawnAction_NoRegister());
			UProperty* NewProp_ActionClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActionClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ActionClass, PawnAction_eventCreateActionInstance_Parms), 0x0014000000000080, Z_Construct_UClass_UPawnAction_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, PawnAction_eventCreateActionInstance_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_Finish()
	{
		struct PawnAction_eventFinish_Parms
		{
			TEnumAsByte<EPawnActionResult::Type> WithResult;
		};
		UObject* Outer=Z_Construct_UClass_UPawnAction();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Finish"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04080400, 65535, sizeof(PawnAction_eventFinish_Parms));
			UProperty* NewProp_WithResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithResult"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(WithResult, PawnAction_eventFinish_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EPawnActionResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_GetActionPriority()
	{
		struct PawnAction_eventGetActionPriority_Parms
		{
			TEnumAsByte<EAIRequestPriority::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnAction();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActionPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(PawnAction_eventGetActionPriority_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PawnAction_eventGetActionPriority_Parms), 0x0010000000000580, Z_Construct_UEnum_AIModule_EAIRequestPriority());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Blueprint interface"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPawnAction_NoRegister()
	{
		return UPawnAction::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901081;

				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_CreateActionInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_Finish());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_GetActionPriority());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysNotifyOnFinished, UPawnAction, uint8);
				UProperty* NewProp_bAlwaysNotifyOnFinished = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysNotifyOnFinished"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysNotifyOnFinished, UPawnAction), 0x00200c0000010005, CPP_BOOL_PROPERTY_BITMASK(bAlwaysNotifyOnFinished, UPawnAction), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldPauseMovement, UPawnAction, uint8);
				UProperty* NewProp_bShouldPauseMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldPauseMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldPauseMovement, UPawnAction), 0x0020080000010005, CPP_BOOL_PROPERTY_BITMASK(bShouldPauseMovement, UPawnAction), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReplaceActiveSameClassInstance, UPawnAction, uint8);
				UProperty* NewProp_bReplaceActiveSameClassInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReplaceActiveSameClassInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReplaceActiveSameClassInstance, UPawnAction), 0x0020080000010005, CPP_BOOL_PROPERTY_BITMASK(bReplaceActiveSameClassInstance, UPawnAction), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowNewSameClassInstance, UPawnAction, uint8);
				UProperty* NewProp_bAllowNewSameClassInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowNewSameClassInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowNewSameClassInstance, UPawnAction), 0x0020080000010015, CPP_BOOL_PROPERTY_BITMASK(bAllowNewSameClassInstance, UPawnAction), sizeof(uint8), false);
				UProperty* NewProp_BrainComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrainComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BrainComp, UPawnAction), 0x0020080000082008, Z_Construct_UClass_UBrainComponent_NoRegister());
				UProperty* NewProp_Instigator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Instigator"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Instigator, UPawnAction), 0x0040000000002000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_OwnerComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnerComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwnerComponent, UPawnAction), 0x0040000000082008, Z_Construct_UClass_UPawnActionsComponent_NoRegister());
				UProperty* NewProp_ParentAction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentAction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentAction, UPawnAction), 0x0040000000002000, Z_Construct_UClass_UPawnAction_NoRegister());
				UProperty* NewProp_ChildAction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildAction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ChildAction, UPawnAction), 0x0040000000002000, Z_Construct_UClass_UPawnAction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_CreateActionInstance(), "CreateActionInstance"); // 1347074356
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_Finish(), "Finish"); // 3118692796
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_GetActionPriority(), "GetActionPriority"); // 676202897
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Things to remember:\n* Actions are created paused"));
				MetaData->SetValue(NewProp_bAlwaysNotifyOnFinished, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_bAlwaysNotifyOnFinished, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_bAlwaysNotifyOnFinished, TEXT("ToolTip"), TEXT("if set, action will call OnFinished notify even when ending as FailedToStart"));
				MetaData->SetValue(NewProp_bShouldPauseMovement, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_bShouldPauseMovement, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_bShouldPauseMovement, TEXT("ToolTip"), TEXT("this is a temporary solution to allow having movement action running in background while there's\n    another action on top doing its thing\n    @note should go away once AI resource locking comes on-line"));
				MetaData->SetValue(NewProp_bReplaceActiveSameClassInstance, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_bReplaceActiveSameClassInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_bReplaceActiveSameClassInstance, TEXT("ToolTip"), TEXT("if this is TRUE, when we try to push a new instance of an action who has the\n    same class as the action on the top of the stack, pop the one on the stack, and push the new one\n    NOTE: This trumps bAllowNewClassInstance (e.g. if this is true and bAllowNewClassInstance\n    is false the active instance will still be replaced)"));
				MetaData->SetValue(NewProp_bAllowNewSameClassInstance, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_bAllowNewSameClassInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_bAllowNewSameClassInstance, TEXT("ToolTip"), TEXT("if this is FALSE and we're trying to push a new instance of a given class,\n    but the top of the stack is already an instance of that class ignore the attempted push"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_BrainComp, TEXT("ToolTip"), TEXT("@Note: THIS IS HERE _ONLY_ BECAUSE OF THE WAY AI MESSAGING IS CURRENTLY IMPLEMENTED. WILL GO AWAY!"));
				MetaData->SetValue(NewProp_Instigator, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_Instigator, TEXT("ToolTip"), TEXT("indicates an object that caused this action. Used for mass removal of actions\n    by specific object"));
				MetaData->SetValue(NewProp_OwnerComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_OwnerComponent, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_OwnerComponent, TEXT("ToolTip"), TEXT("Extra reference to the component this action is being governed by"));
				MetaData->SetValue(NewProp_ParentAction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_ChildAction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction.h"));
				MetaData->SetValue(NewProp_ChildAction, TEXT("ToolTip"), TEXT("Current child node executing on top of this Action"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction(Z_Construct_UClass_UPawnAction, &UPawnAction::StaticClass, TEXT("UPawnAction"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction);
	UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionFinished()
	{
		UObject* Outer=Z_Construct_UClass_UPawnAction_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActionFinished"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(PawnAction_BlueprintBase_eventActionFinished_Parms));
			UProperty* NewProp_WithResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WithResult"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(WithResult, PawnAction_BlueprintBase_eventActionFinished_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EPawnActionResult());
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, PawnAction_BlueprintBase_eventActionFinished_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionPause()
	{
		UObject* Outer=Z_Construct_UClass_UPawnAction_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActionPause"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(PawnAction_BlueprintBase_eventActionPause_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, PawnAction_BlueprintBase_eventActionPause_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionResume()
	{
		UObject* Outer=Z_Construct_UClass_UPawnAction_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActionResume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(PawnAction_BlueprintBase_eventActionResume_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, PawnAction_BlueprintBase_eventActionResume_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionStart()
	{
		UObject* Outer=Z_Construct_UClass_UPawnAction_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActionStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(PawnAction_BlueprintBase_eventActionStart_Parms));
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, PawnAction_BlueprintBase_eventActionStart_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Blueprint interface"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionTick()
	{
		UObject* Outer=Z_Construct_UClass_UPawnAction_BlueprintBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActionTick"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(PawnAction_BlueprintBase_eventActionTick_Parms));
			UProperty* NewProp_DeltaSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DeltaSeconds, PawnAction_BlueprintBase_eventActionTick_Parms), 0x0010000000000080);
			UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, PawnAction_BlueprintBase_eventActionTick_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPawnAction_BlueprintBase_NoRegister()
	{
		return UPawnAction_BlueprintBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction_BlueprintBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPawnAction();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction_BlueprintBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901081;

				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionFinished());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionPause());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionResume());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionTick());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionFinished(), "ActionFinished"); // 3373814530
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionPause(), "ActionPause"); // 3857636387
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionResume(), "ActionResume"); // 1790465297
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionStart(), "ActionStart"); // 3415125674
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnAction_BlueprintBase_ActionTick(), "ActionTick"); // 645650550
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction_BlueprintBase.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_BlueprintBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction_BlueprintBase(Z_Construct_UClass_UPawnAction_BlueprintBase, &UPawnAction_BlueprintBase::StaticClass, TEXT("UPawnAction_BlueprintBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction_BlueprintBase);
	UEnum* Z_Construct_UEnum_AIModule_EPawnActionMoveMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UEnum_AIModule_EPawnActionMoveMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPawnActionMoveMode"), 0, Get_Z_Construct_UEnum_AIModule_EPawnActionMoveMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPawnActionMoveMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionMoveMode::UsePathfinding")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionMoveMode::StraightLine")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPawnActionMoveMode::EPawnActionMoveMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EPawnActionMoveMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AIModule_EPawnActionMoveMode_CRC() { return 884834850U; }
	UClass* Z_Construct_UClass_UPawnAction_Move_NoRegister()
	{
		return UPawnAction_Move::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction_Move()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPawnAction();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction_Move::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbortChildActionOnPathChange, UPawnAction_Move, uint8);
				UProperty* NewProp_bAbortChildActionOnPathChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbortChildActionOnPathChange"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbortChildActionOnPathChange, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bAbortChildActionOnPathChange, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatePathToGoal, UPawnAction_Move, uint8);
				UProperty* NewProp_bUpdatePathToGoal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatePathToGoal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatePathToGoal, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdatePathToGoal, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProjectGoalToNavigation, UPawnAction_Move, uint8);
				UProperty* NewProp_bProjectGoalToNavigation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProjectGoalToNavigation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProjectGoalToNavigation, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bProjectGoalToNavigation, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowPartialPath, UPawnAction_Move, uint8);
				UProperty* NewProp_bAllowPartialPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowPartialPath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowPartialPath, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bAllowPartialPath, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePathfinding, UPawnAction_Move, uint8);
				UProperty* NewProp_bUsePathfinding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePathfinding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePathfinding, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bUsePathfinding, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFinishOnOverlap, UPawnAction_Move, uint8);
				UProperty* NewProp_bFinishOnOverlap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFinishOnOverlap"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFinishOnOverlap, UPawnAction_Move), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bFinishOnOverlap, UPawnAction_Move), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowStrafe, UPawnAction_Move, uint8);
				UProperty* NewProp_bAllowStrafe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowStrafe"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowStrafe, UPawnAction_Move), 0x0020080000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowStrafe, UPawnAction_Move), sizeof(uint8), false);
				UProperty* NewProp_FilterClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(FilterClass, UPawnAction_Move), 0x0024080000000005, Z_Construct_UClass_UNavigationQueryFilter_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_AcceptableRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AcceptableRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AcceptableRadius, UPawnAction_Move), 0x0020080000000005);
				UProperty* NewProp_GoalLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GoalLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GoalLocation, UPawnAction_Move), 0x0020080000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_GoalActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GoalActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GoalActor, UPawnAction_Move), 0x0020080000000005, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction_Move.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bAbortChildActionOnPathChange, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bAbortChildActionOnPathChange, TEXT("ToolTip"), TEXT("if set, other actions with the same priority will be aborted when path is changed"));
				MetaData->SetValue(NewProp_bUpdatePathToGoal, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bUpdatePathToGoal, TEXT("ToolTip"), TEXT("if set, path to GoalActor will be updated with goal's movement"));
				MetaData->SetValue(NewProp_bProjectGoalToNavigation, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bProjectGoalToNavigation, TEXT("ToolTip"), TEXT("if set, GoalLocation will be projected on navigation before using"));
				MetaData->SetValue(NewProp_bAllowPartialPath, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bAllowPartialPath, TEXT("ToolTip"), TEXT("if set, use incomplete path when goal can't be reached"));
				MetaData->SetValue(NewProp_bUsePathfinding, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bUsePathfinding, TEXT("ToolTip"), TEXT("if set, movement will use path finding"));
				MetaData->SetValue(NewProp_bFinishOnOverlap, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_bFinishOnOverlap, TEXT("ToolTip"), TEXT("if set to true (default) will make action succeed when the pawn's collision component overlaps with goal's collision component"));
				MetaData->SetValue(NewProp_bAllowStrafe, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_bAllowStrafe, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_FilterClass, TEXT("ToolTip"), TEXT("\"None\" will result in default filter being used"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_AcceptableRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_GoalLocation, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_GoalLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
				MetaData->SetValue(NewProp_GoalActor, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_GoalActor, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Move.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction_Move(Z_Construct_UClass_UPawnAction_Move, &UPawnAction_Move::StaticClass, TEXT("UPawnAction_Move"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction_Move);
	UClass* Z_Construct_UClass_UPawnAction_Repeat_NoRegister()
	{
		return UPawnAction_Repeat::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction_Repeat()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPawnAction();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction_Repeat::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ChildFailureHandlingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildFailureHandlingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ChildFailureHandlingMode, UPawnAction_Repeat), 0x0010000000000015, Z_Construct_UEnum_AIModule_EPawnActionFailHandling());
				UProperty* NewProp_RecentActionCopy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RecentActionCopy"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RecentActionCopy, UPawnAction_Repeat), 0x0010000000002000, Z_Construct_UClass_UPawnAction_NoRegister());
				UProperty* NewProp_ActionToRepeat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActionToRepeat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActionToRepeat, UPawnAction_Repeat), 0x0010000000000000, Z_Construct_UClass_UPawnAction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction_Repeat.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Repeat.h"));
				MetaData->SetValue(NewProp_ChildFailureHandlingMode, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_ChildFailureHandlingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Repeat.h"));
				MetaData->SetValue(NewProp_RecentActionCopy, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Repeat.h"));
				MetaData->SetValue(NewProp_ActionToRepeat, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Repeat.h"));
				MetaData->SetValue(NewProp_ActionToRepeat, TEXT("ToolTip"), TEXT("Action to repeat. This instance won't really be run, it's a source for copying actions to be actually performed"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction_Repeat(Z_Construct_UClass_UPawnAction_Repeat, &UPawnAction_Repeat::StaticClass, TEXT("UPawnAction_Repeat"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction_Repeat);
	UClass* Z_Construct_UClass_UPawnAction_Sequence_NoRegister()
	{
		return UPawnAction_Sequence::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction_Sequence()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPawnAction();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction_Sequence::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RecentActionCopy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RecentActionCopy"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RecentActionCopy, UPawnAction_Sequence), 0x0010000000002000, Z_Construct_UClass_UPawnAction_NoRegister());
				UProperty* NewProp_ChildFailureHandlingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildFailureHandlingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ChildFailureHandlingMode, UPawnAction_Sequence), 0x0010000000000015, Z_Construct_UEnum_AIModule_EPawnActionFailHandling());
				UProperty* NewProp_ActionSequence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActionSequence"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActionSequence, UPawnAction_Sequence), 0x0010000000000000);
				UProperty* NewProp_ActionSequence_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActionSequence, TEXT("ActionSequence"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPawnAction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction_Sequence.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Sequence.h"));
				MetaData->SetValue(NewProp_RecentActionCopy, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Sequence.h"));
				MetaData->SetValue(NewProp_ChildFailureHandlingMode, TEXT("Category"), TEXT("PawnAction"));
				MetaData->SetValue(NewProp_ChildFailureHandlingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Sequence.h"));
				MetaData->SetValue(NewProp_ActionSequence, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Sequence.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction_Sequence(Z_Construct_UClass_UPawnAction_Sequence, &UPawnAction_Sequence::StaticClass, TEXT("UPawnAction_Sequence"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction_Sequence);
	UClass* Z_Construct_UClass_UPawnAction_Wait_NoRegister()
	{
		return UPawnAction_Wait::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnAction_Wait()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPawnAction();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnAction_Wait::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TimeToWait = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeToWait"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeToWait, UPawnAction_Wait), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnAction_Wait.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Wait.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("uses system timers rather then ticking"));
				MetaData->SetValue(NewProp_TimeToWait, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnAction_Wait.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnAction_Wait(Z_Construct_UClass_UPawnAction_Wait, &UPawnAction_Wait::StaticClass, TEXT("UPawnAction_Wait"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnAction_Wait);
	UScriptStruct* Z_Construct_UScriptStruct_FPawnActionStack()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FPawnActionStack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PawnActionStack"), sizeof(FPawnActionStack), Get_Z_Construct_UScriptStruct_FPawnActionStack_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PawnActionStack"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPawnActionStack>, EStructFlags(0x00000201));
			UProperty* NewProp_TopAction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TopAction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TopAction, FPawnActionStack), 0x0040000000000000, Z_Construct_UClass_UPawnAction_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
			MetaData->SetValue(NewProp_TopAction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPawnActionStack_CRC() { return 1469866624U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPawnActionEvent()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AIModule();
		extern uint32 Get_Z_Construct_UScriptStruct_FPawnActionEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PawnActionEvent"), sizeof(FPawnActionEvent), Get_Z_Construct_UScriptStruct_FPawnActionEvent_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PawnActionEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPawnActionEvent>, EStructFlags(0x00000201));
			UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Action"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Action, FPawnActionEvent), 0x0010000000000000, Z_Construct_UClass_UPawnAction_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
			MetaData->SetValue(NewProp_Action, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPawnActionEvent_CRC() { return 4215437575U; }
	UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_AbortAction()
	{
		struct PawnActionsComponent_eventK2_AbortAction_Parms
		{
			UPawnAction* ActionToAbort;
			TEnumAsByte<EPawnActionAbortState::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnActionsComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_AbortAction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PawnActionsComponent_eventK2_AbortAction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PawnActionsComponent_eventK2_AbortAction_Parms), 0x0010000000000580, Z_Construct_UEnum_AIModule_EPawnActionAbortState());
			UProperty* NewProp_ActionToAbort = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActionToAbort"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActionToAbort, PawnActionsComponent_eventK2_AbortAction_Parms), 0x0010000000000080, Z_Construct_UClass_UPawnAction_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PawnAction"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("AbortAction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Aborts given action instance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_ForceAbortAction()
	{
		struct PawnActionsComponent_eventK2_ForceAbortAction_Parms
		{
			UPawnAction* ActionToAbort;
			TEnumAsByte<EPawnActionAbortState::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnActionsComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_ForceAbortAction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PawnActionsComponent_eventK2_ForceAbortAction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, PawnActionsComponent_eventK2_ForceAbortAction_Parms), 0x0010000000000580, Z_Construct_UEnum_AIModule_EPawnActionAbortState());
			UProperty* NewProp_ActionToAbort = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActionToAbort"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActionToAbort, PawnActionsComponent_eventK2_ForceAbortAction_Parms), 0x0010000000000080, Z_Construct_UClass_UPawnAction_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PawnAction"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ForceAbortAction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Aborts given action instance"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_PerformAction()
	{
		struct PawnActionsComponent_eventK2_PerformAction_Parms
		{
			APawn* Pawn;
			UPawnAction* Action;
			TEnumAsByte<EAIRequestPriority::Type> Priority;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnActionsComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_PerformAction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PawnActionsComponent_eventK2_PerformAction_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PawnActionsComponent_eventK2_PerformAction_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PawnActionsComponent_eventK2_PerformAction_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PawnActionsComponent_eventK2_PerformAction_Parms), sizeof(bool), true);
			UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Priority"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Priority, PawnActionsComponent_eventK2_PerformAction_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EAIRequestPriority());
			UProperty* NewProp_Action = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Action"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Action, PawnActionsComponent_eventK2_PerformAction_Parms), 0x0010000000000080, Z_Construct_UClass_UPawnAction_NoRegister());
			UProperty* NewProp_Pawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Pawn, PawnActionsComponent_eventK2_PerformAction_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|PawnActions"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Priority"), TEXT("HardScript"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("PerformAction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("blueprint interface"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnActionsComponent_K2_PushAction()
	{
		struct PawnActionsComponent_eventK2_PushAction_Parms
		{
			UPawnAction* NewAction;
			TEnumAsByte<EAIRequestPriority::Type> Priority;
			UObject* Instigator;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnActionsComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_PushAction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PawnActionsComponent_eventK2_PushAction_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PawnActionsComponent_eventK2_PushAction_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PawnActionsComponent_eventK2_PushAction_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PawnActionsComponent_eventK2_PushAction_Parms), sizeof(bool), true);
			UProperty* NewProp_Instigator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Instigator"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Instigator, PawnActionsComponent_eventK2_PushAction_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Priority"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Priority, PawnActionsComponent_eventK2_PushAction_Parms), 0x0010000000000080, Z_Construct_UEnum_AIModule_EAIRequestPriority());
			UProperty* NewProp_NewAction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewAction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewAction, PawnActionsComponent_eventK2_PushAction_Parms), 0x0010000000000080, Z_Construct_UClass_UPawnAction_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PawnAction"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("PushAction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPawnActionsComponent_NoRegister()
	{
		return UPawnActionsComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnActionsComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnActionsComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPawnActionsComponent_K2_AbortAction());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnActionsComponent_K2_ForceAbortAction());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnActionsComponent_K2_PerformAction());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnActionsComponent_K2_PushAction());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CurrentAction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentAction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurrentAction, UPawnActionsComponent), 0x0020080000002000, Z_Construct_UClass_UPawnAction_NoRegister());
				UProperty* NewProp_ActionEvents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActionEvents"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActionEvents, UPawnActionsComponent), 0x0020080000000000);
				UProperty* NewProp_ActionEvents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActionEvents, TEXT("ActionEvents"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPawnActionEvent());
				UProperty* NewProp_ActionStacks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActionStacks"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActionStacks, UPawnActionsComponent), 0x0020080000000000);
				UProperty* NewProp_ActionStacks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActionStacks, TEXT("ActionStacks"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPawnActionStack());
				UProperty* NewProp_ControlledPawn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ControlledPawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ControlledPawn, UPawnActionsComponent), 0x0020080000000014, Z_Construct_UClass_APawn_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnActionsComponent_K2_AbortAction(), "K2_AbortAction"); // 1709035187
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnActionsComponent_K2_ForceAbortAction(), "K2_ForceAbortAction"); // 1292324798
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnActionsComponent_K2_PerformAction(), "K2_PerformAction"); // 2688090363
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnActionsComponent_K2_PushAction(), "K2_PushAction"); // 2774970715
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actions/PawnActionsComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
				MetaData->SetValue(NewProp_CurrentAction, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
				MetaData->SetValue(NewProp_ActionEvents, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
				MetaData->SetValue(NewProp_ActionStacks, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
				MetaData->SetValue(NewProp_ControlledPawn, TEXT("Category"), TEXT("PawnActions"));
				MetaData->SetValue(NewProp_ControlledPawn, TEXT("ModuleRelativePath"), TEXT("Classes/Actions/PawnActionsComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnActionsComponent(Z_Construct_UClass_UPawnActionsComponent, &UPawnActionsComponent::StaticClass, TEXT("UPawnActionsComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnActionsComponent);
	UFunction* Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature()
	{
		struct PawnSensingComponent_eventHearNoiseDelegate_Parms
		{
			APawn* Instigator;
			FVector Location;
			float Volume;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HearNoiseDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00D30000, 65535, sizeof(PawnSensingComponent_eventHearNoiseDelegate_Parms));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, PawnSensingComponent_eventHearNoiseDelegate_Parms), 0x0010000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, PawnSensingComponent_eventHearNoiseDelegate_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Instigator = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Instigator"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Instigator, PawnSensingComponent_eventHearNoiseDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
			MetaData->SetValue(NewProp_Location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature()
	{
		struct PawnSensingComponent_eventSeePawnDelegate_Parms
		{
			APawn* Pawn;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SeePawnDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(PawnSensingComponent_eventSeePawnDelegate_Parms));
			UProperty* NewProp_Pawn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pawn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Pawn, PawnSensingComponent_eventSeePawnDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionAngle()
	{
		struct PawnSensingComponent_eventGetPeripheralVisionAngle_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPeripheralVisionAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PawnSensingComponent_eventGetPeripheralVisionAngle_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PawnSensingComponent_eventGetPeripheralVisionAngle_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|PawnSensing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionCosine()
	{
		struct PawnSensingComponent_eventGetPeripheralVisionCosine_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPeripheralVisionCosine"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PawnSensingComponent_eventGetPeripheralVisionCosine_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, PawnSensingComponent_eventGetPeripheralVisionCosine_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|PawnSensing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetPeripheralVisionAngle()
	{
		struct PawnSensingComponent_eventSetPeripheralVisionAngle_Parms
		{
			float NewPeripheralVisionAngle;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPeripheralVisionAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020404, 65535, sizeof(PawnSensingComponent_eventSetPeripheralVisionAngle_Parms));
			UProperty* NewProp_NewPeripheralVisionAngle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPeripheralVisionAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewPeripheralVisionAngle, PawnSensingComponent_eventSetPeripheralVisionAngle_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|PawnSensing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets PeripheralVisionAngle. Calculates PeripheralVisionCosine from PeripheralVisionAngle"));
			MetaData->SetValue(NewProp_NewPeripheralVisionAngle, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetSensingInterval()
	{
		struct PawnSensingComponent_eventSetSensingInterval_Parms
		{
			float NewSensingInterval;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSensingInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020404, 65535, sizeof(PawnSensingComponent_eventSetSensingInterval_Parms));
			UProperty* NewProp_NewSensingInterval = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewSensingInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewSensingInterval, PawnSensingComponent_eventSetSensingInterval_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|PawnSensing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Changes the SensingInterval.\nIf we are currently waiting for an interval, this can either extend or shorten that interval.\nA value <= 0 prevents any updates."));
			MetaData->SetValue(NewProp_NewSensingInterval, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPawnSensingComponent_SetSensingUpdatesEnabled()
	{
		struct PawnSensingComponent_eventSetSensingUpdatesEnabled_Parms
		{
			bool bEnabled;
		};
		UObject* Outer=Z_Construct_UClass_UPawnSensingComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSensingUpdatesEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020404, 65535, sizeof(PawnSensingComponent_eventSetSensingUpdatesEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, PawnSensingComponent_eventSetSensingUpdatesEnabled_Parms, bool);
			UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, PawnSensingComponent_eventSetSensingUpdatesEnabled_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bEnabled, PawnSensingComponent_eventSetSensingUpdatesEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Components|PawnSensing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Enables or disables sensing updates. The timer is reset in either case."));
			MetaData->SetValue(NewProp_bEnabled, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPawnSensingComponent_NoRegister()
	{
		return UPawnSensingComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UPawnSensingComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UPawnSensingComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionCosine());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnSensingComponent_SetPeripheralVisionAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnSensingComponent_SetSensingInterval());
				OuterClass->LinkChild(Z_Construct_UFunction_UPawnSensingComponent_SetSensingUpdatesEnabled());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PeripheralVisionCosine = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeripheralVisionCosine"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PeripheralVisionCosine, UPawnSensingComponent), 0x0020080000000000);
				UProperty* NewProp_PeripheralVisionAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeripheralVisionAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PeripheralVisionAngle, UPawnSensingComponent), 0x0020080000000015);
				UProperty* NewProp_OnHearNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnHearNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnHearNoise, UPawnSensingComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature());
				UProperty* NewProp_OnSeePawn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnSeePawn"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnSeePawn, UPawnSensingComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHearNoises, UPawnSensingComponent, uint8);
				UProperty* NewProp_bHearNoises = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHearNoises"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHearNoises, UPawnSensingComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bHearNoises, UPawnSensingComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSeePawns, UPawnSensingComponent, uint8);
				UProperty* NewProp_bSeePawns = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSeePawns"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSeePawns, UPawnSensingComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bSeePawns, UPawnSensingComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlySensePlayers, UPawnSensingComponent, uint8);
				UProperty* NewProp_bOnlySensePlayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOnlySensePlayers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlySensePlayers, UPawnSensingComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOnlySensePlayers, UPawnSensingComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableSensingUpdates, UPawnSensingComponent, uint8);
				UProperty* NewProp_bEnableSensingUpdates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableSensingUpdates"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableSensingUpdates, UPawnSensingComponent), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bEnableSensingUpdates, UPawnSensingComponent), sizeof(uint8), false);
				UProperty* NewProp_HearingMaxSoundAge = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HearingMaxSoundAge"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HearingMaxSoundAge, UPawnSensingComponent), 0x0010000000000005);
				UProperty* NewProp_SensingInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SensingInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SensingInterval, UPawnSensingComponent), 0x0010000000000015);
				UProperty* NewProp_SightRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SightRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SightRadius, UPawnSensingComponent), 0x0010000000000005);
				UProperty* NewProp_LOSHearingThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LOSHearingThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LOSHearingThreshold, UPawnSensingComponent), 0x0010000000000005);
				UProperty* NewProp_HearingThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HearingThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HearingThreshold, UPawnSensingComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionAngle(), "GetPeripheralVisionAngle"); // 792402996
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnSensingComponent_GetPeripheralVisionCosine(), "GetPeripheralVisionCosine"); // 646308734
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature(), "HearNoiseDelegate__DelegateSignature"); // 192836938
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature(), "SeePawnDelegate__DelegateSignature"); // 1773665845
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnSensingComponent_SetPeripheralVisionAngle(), "SetPeripheralVisionAngle"); // 4236730945
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnSensingComponent_SetSensingInterval(), "SetSensingInterval"); // 1102530761
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPawnSensingComponent_SetSensingUpdatesEnabled(), "SetSensingUpdatesEnabled"); // 220958327
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("AI"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Activation Components|Activation Collision"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Perception/PawnSensingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SensingComponent encapsulates sensory (ie sight and hearing) settings and functionality for an Actor,\nallowing the actor to see/hear Pawns in the world. It does nothing on network clients."));
				MetaData->SetValue(NewProp_PeripheralVisionCosine, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_PeripheralVisionCosine, TEXT("ToolTip"), TEXT("Cosine of limits of peripheral vision. Computed from PeripheralVisionAngle."));
				MetaData->SetValue(NewProp_PeripheralVisionAngle, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_PeripheralVisionAngle, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_PeripheralVisionAngle, TEXT("ToolTip"), TEXT("How far to the side AI can see, in degrees. Use SetPeripheralVisionAngle to change the value at runtime."));
				MetaData->SetValue(NewProp_OnHearNoise, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_OnHearNoise, TEXT("ToolTip"), TEXT("Delegate to execute when we hear a noise from a Pawn's PawnNoiseEmitterComponent."));
				MetaData->SetValue(NewProp_OnSeePawn, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_OnSeePawn, TEXT("ToolTip"), TEXT("Delegate to execute when we see a Pawn."));
				MetaData->SetValue(NewProp_bHearNoises, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_bHearNoises, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_bHearNoises, TEXT("ToolTip"), TEXT("If true, we will perform audibility tests and will be notified when a Pawn makes a noise that can be heard. Default: true\nIMPORTANT NOTE: If we can see pawns (bSeePawns is true), and the pawn is visible, noise notifications are not triggered."));
				MetaData->SetValue(NewProp_bSeePawns, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_bSeePawns, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_bSeePawns, TEXT("ToolTip"), TEXT("If true, we will perform visibility tests and will trigger notifications when a Pawn is visible. Default: true"));
				MetaData->SetValue(NewProp_bOnlySensePlayers, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_bOnlySensePlayers, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_bOnlySensePlayers, TEXT("ToolTip"), TEXT("If true, will only sense player-controlled pawns in the world. Default: true"));
				MetaData->SetValue(NewProp_bEnableSensingUpdates, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_bEnableSensingUpdates, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_bEnableSensingUpdates, TEXT("ToolTip"), TEXT("If true, component will perform sensing updates. At runtime change this using SetSensingUpdatesEnabled()."));
				MetaData->SetValue(NewProp_HearingMaxSoundAge, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_HearingMaxSoundAge, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_HearingMaxSoundAge, TEXT("ToolTip"), TEXT("Max age of sounds we can hear. Should be greater than SensingInterval, or you might miss hearing some sounds!"));
				MetaData->SetValue(NewProp_SensingInterval, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_SensingInterval, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_SensingInterval, TEXT("ToolTip"), TEXT("Amount of time between pawn sensing updates. Use SetSensingInterval() to adjust this at runtime. A value <= 0 prevents any updates."));
				MetaData->SetValue(NewProp_SightRadius, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_SightRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_SightRadius, TEXT("ToolTip"), TEXT("Maximum sight distance."));
				MetaData->SetValue(NewProp_LOSHearingThreshold, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_LOSHearingThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_LOSHearingThreshold, TEXT("ToolTip"), TEXT("Max distance at which a makenoise(1.0) loudness sound can be heard if unoccluded (LOSHearingThreshold should be > HearingThreshold)"));
				MetaData->SetValue(NewProp_HearingThreshold, TEXT("Category"), TEXT("AI"));
				MetaData->SetValue(NewProp_HearingThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Perception/PawnSensingComponent.h"));
				MetaData->SetValue(NewProp_HearingThreshold, TEXT("ToolTip"), TEXT("Max distance at which a makenoise(1.0) loudness sound can be heard, regardless of occlusion"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPawnSensingComponent(Z_Construct_UClass_UPawnSensingComponent, &UPawnSensingComponent::StaticClass, TEXT("UPawnSensingComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPawnSensingComponent);
	UClass* Z_Construct_UClass_UVisualLoggerExtension_NoRegister()
	{
		return UVisualLoggerExtension::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisualLoggerExtension()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_AIModule();
			OuterClass = UVisualLoggerExtension::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VisualLoggerExtension.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLoggerExtension.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisualLoggerExtension(Z_Construct_UClass_UVisualLoggerExtension, &UVisualLoggerExtension::StaticClass, TEXT("UVisualLoggerExtension"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisualLoggerExtension);
	UPackage* Z_Construct_UPackage__Script_AIModule()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/AIModule")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xCA06474A;
			Guid.B = 0x3656D97C;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_AIModule_AIMoveCompletedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_AIModule_OAISimpleDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UEnvQueryInstanceBlueprintWrapper_EQSQueryDoneSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_AIModule_PerceptionUpdatedDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_AIModule_ActorPerceptionUpdatedDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPawnSensingComponent_SeePawnDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPawnSensingComponent_HearNoiseDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_AIModule_MoveTaskCompletedSignature__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
