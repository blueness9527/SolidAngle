// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Engine.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode4Engine() {}
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FQuat();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntVector();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_ETouchIndex();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringClassReference();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FUniqueNetIdWrapper();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxSphereBounds();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPackedNormal();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FMatrix();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveFloat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveQuat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox2D();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ELifetimeCondition();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FDateTime();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FPlane();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputChord();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTimespan();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomStream();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchCase();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_ESearchDir();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveTwoVectors();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatRange();
	PACKETHANDLER_API class UClass* Z_Construct_UClass_UHandlerComponentFactory();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFontLoadingPolicy();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFontHinting();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontFaceInterface_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpCurveLinearColor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EPixelFormat();

	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantizeNormal();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize100();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize10();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFastArraySerializerItem();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshBufferAccess();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpawnActorCollisionHandlingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintFrame();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularConstraintMotion();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentSocketType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentMobility();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicalSurface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWalkableSlopeBehavior();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERotatorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorQuantization();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEndPlayReason();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoPossessAI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoReceiveInput();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetDormancy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUpdateRateShiftBucket();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EShadowMapFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightMapPaddingType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionEnabled();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineSigType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESleepFamily();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERadialImpulseFalloff();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputConsumeOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFilterInterpolationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsSceneType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETraceTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EObjectTypeQuery();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOverlapFilterOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkSmoothingMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMovementMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETriangleSortOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELightingBuildQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSamplerType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialTessellationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialShadingModel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailWidthMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGBufferFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneCaptureCompositeMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneCaptureSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucentSortPolicy();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERefractionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETranslucencyLightingMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESamplerSourceMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EIndirectLightingCacheQuality();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneDepthPriorityGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDetachmentRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachmentRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EActorMetricsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FUserActivity();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasUVTri();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontRenderInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDepthFieldGlowInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugFloatHistory();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRedirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstrainComponentPropName();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWalkableSlopeOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepAttachment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepMovement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimerHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshBuildSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPOV();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimUpdateRateParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotDesc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMTDResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveMaterialRef();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSwarmDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDebugOptions();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPrimitiveSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassDirectionalLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassPointLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassLightSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocalizedSubtitle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubtitleCue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionImpactData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyContactInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyErrorCorrection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigidBodyState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FResponseChannel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightingChannels();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewModeIndex();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDemoPlayFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETravelFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkLagState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENetworkFailure();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETickingGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMouseLockMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMouseCaptureMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInputEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposureSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FURL();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPrimitiveComponentPostPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorComponentTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActorTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTickPrerequisite();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineBaseTypes();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeEnabledState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeAdvancedPins();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENodeTitleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEdGraphPinDirection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphTerminalType();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintPinStyleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphPinReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphPinType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimpleMemberReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin_Deprecated_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphPin_Deprecated();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_AssetUserData();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorComponentDeactivateSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorComponentActivatedSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EComponentCreationMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ComponentHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_GetComponentTickInterval();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_IsComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_OnRep_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetAutoActivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetComponentTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetComponentTickInterval();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetIsReplicated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UActorComponent_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERelativeTransformSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDetailMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOverlapInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DetachFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_DoesSocketExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAllSocketNames();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAttachParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetAttachSocketName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetComponentVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetNumChildrenComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetParentComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketQuaternion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetSocketTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsAnySimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsSimulatingPhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_IsVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AddWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AttachTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_AttachToComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_DetachFromComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_GetComponentToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_K2_SetWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_AttachChildren();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_AttachParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_AttachSocketName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Transform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_OnRep_Visibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ResetRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetAbsolute();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SetWorldScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_SnapTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneComponent_ToggleVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UChildActorComponent_SetChildActorClass();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildActorComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialMergeType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSizingType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialProxySettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSimplificationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelSimplificationDetails();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicTextureInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableTextureInstance();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevel();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ActorHasTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_AddTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DetachRootComponentFromParent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_DisableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_EnableInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_FlushNetDormancy();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ForceNetUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorEyesViewPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorTickInterval();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetActorUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetAllChildActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetAttachedActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetAttachParentActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetAttachParentSocketName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetComponentsByTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetGameTimeSinceCreation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetHorizontalDotProductTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInputVectorAxisValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetInstigatorController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetParentActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetParentComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetRemoteRole();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetSquaredDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_GetVerticalDistanceTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_HasAuthority();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorBeingDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsChildActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorLocalTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AddActorWorldTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachRootComponentToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_AttachToComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DestroyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_DetachFromActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_GetRootComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnBecomeViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnEndViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_OnReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRelativeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_SetActorTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_K2_TeleportTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeMIDForMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_MakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_AttachmentReplication();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_Instigator();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_Owner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicatedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_OnRep_ReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorBeginOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorEndOverlap();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnClicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchEnter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnInputTouchLeave();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveActorOnReleased();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveBeginPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveDestroyed();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveHit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceivePointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_ReceiveTick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_RemoveTickPrerequisiteComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorEnableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorHiddenInGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorRelativeScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorScale3D();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorTickEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetActorTickInterval();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetLifeSpan();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetReplicates();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickableWhenPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SetTickGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_SnapRootComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_TearOff();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_UserConstructionScript();
	ENGINE_API class UFunction* Z_Construct_UFunction_AActor_WasRecentlyRendered();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAmbientSound_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAmbientSound();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBrushType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECsgOper();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeomSelection();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrush();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABrushShape();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ReverbPreset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInteriorSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReverbSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAudioVolume_OnRep_bEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAudioVolume_SetEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAudioVolume_SetInteriorSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAudioVolume_SetPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_AAudioVolume_SetReverbSettings();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAudioVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABlockingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraBlockingVolume();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCullDistanceSizePair();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACullDistanceVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStreamingVolumeUsage();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelStreamingVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassCharacterIndirectDetailVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassImportanceVolume();
	ENGINE_API class UClass* Z_Construct_UClass_AMeshMergeCullingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMeshMergeCullingVolume();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationFilterArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationQueryFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationQueryResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavPathEvent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringModeConfig();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavDataGatheringMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavigationOptionFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavDataConfig();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovementProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAgentSelector();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationTypes();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavMeshBoundsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavModifierVolume_SetAreaClass();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavModifierVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPhysicsVolume();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AKillZVolume();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APainCausingVolume();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendableLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoExposureMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAntiAliasingMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPostProcessSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendables();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWeightedBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScene();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_PostProcessVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_APostProcessVolume_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APostProcessVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityOverrideVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APrecomputedVisibilityVolume();
	ENGINE_API class UClass* Z_Construct_UClass_APreCullTrianglesVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APreCullTrianglesVolume();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACameraActor_GetAutoActivatePlayerIndex();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACameraActor();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAgentInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_CastToPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ClientSetRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetDesiredRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLocalPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsLookInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_IsPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_K2_GetPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_LineOfSightTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_Pawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_Possess();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ReceiveInstigatedAnyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ResetIgnoreInputFlags();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ResetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_ResetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_SetInitialLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_StopMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_AController_UnPossess();
	ENGINE_API class UClass* Z_Construct_UClass_AController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AController();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLatentActionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FUniqueNetIdRepl();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlayerMuteList();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAnimPlaySpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraProjectionMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMinimalViewInfo();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInitialOscillatorOffset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVOscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FROscillator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFOscillator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_BlueprintUpdateCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveIsFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceivePlayShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraShake_ReceiveStopShake();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EViewTargetBlendFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FViewTargetTransitionParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTViewTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCacheEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_AddNewCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_BlueprintUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_ClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_FindCameraModifierByClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetCameraRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetFOVAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_OnPhotographyMultiPartCaptureEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_OnPhotographyMultiPartCaptureStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_OnPhotographySessionEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_OnPhotographySessionStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PhotographyCameraModify();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_PlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_RemoveCameraModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_SetManualCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StartCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraAnims();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllCameraShakes();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopAllInstancesOfCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerCameraManager_StopCameraShake();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControllerAnalogStick();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetControllerVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_GetTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_IsControllerKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInputComponent_WasControllerKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyHandleMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIndexedCurve();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveExtrapolation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentWeightMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveTangentMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERichCurveInterpMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurveKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetTimeRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveBase_GetValueRange();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveFloat_GetFloatValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveForceFeedbackEffect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FForceFeedbackChannelDetails();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDynamicForceFeedbackAction();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ActivateTouchInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_AddYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Camera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClearAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientAddTextureStreamingLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCancelPendingMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCapBandwidth();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientClearCameraLensEffects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientCommitMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEnableNetworkVoice();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientEndOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientFlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientForceGarbageCollection();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGameEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientGotoState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreLookInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientIgnoreMoveInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlayForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySound();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrepareMapChange();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientPrestreamTextures();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReceiveLocalizedMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRepObjRef();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientRetryClientRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientReturnToMainMenu();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetBlockOnAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraFade();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCameraMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetForceMipLevelsToBeResident();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientSpawnCameraLensEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStartOnlineSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientStopForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTeamMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientTravelInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientUpdateLevelStreamingStatus();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientVoiceHandshakeComplete();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ClientWasKicked();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ConsoleKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectMousePositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_DeprojectScreenPositionToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_EnableCheats();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_FOV();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetFocalLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderCursorForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFinger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerByChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHitResultUnderFingerForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputAnalogStickState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputKeyTimeDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMotionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputMouseDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputTouchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetInputVectorKeyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetMousePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetSpectatorPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_GetViewportSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_IsInputKeyDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_LocalTravel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_OnServerStartedVisualLogger();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayDynamicForceFeedback();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_PlayHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ProjectWorldLocationToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_RestartLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SendToConsole();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerAcknowledgePossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossession();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerCheckClientPossessionReliable();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerMutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerNotifyLoadedWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerPause();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerSetSpectatorWaiting();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerShortTimeout();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUnmutePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerUpdateLevelVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerVerifyViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewNextPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewPrevPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ServerViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetAudioListenerOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetControllerLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetHapticsByValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetMouseLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetViewTargetWithBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SetVirtualJoystickVisibility();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StartFire();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_StopHapticEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_SwitchLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_ToggleSpeaking();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustPressed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerController_WasInputKeyJustReleased();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_GetSelectedActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ReceiveOnActivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ReceiveOnActorSelected();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ReceiveOnDeactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_SetPawnMovementSpeedScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ShowDebugSelectedInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADebugCameraController_ToggleDisplay();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraController();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADecalActor_SetDecalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADecalActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADestructibleActor();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADocumentationActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Activate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_Deactivate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnParticleSystemFinished();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_OnRep_bCurrentlyActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_SetVectorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_AEmitter_ToggleActive();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AEmitterCameraLensEffectBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugTextInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_AddHitBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawRect();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_DrawTextureSimple();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetActorsInSelectionRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetOwningPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_GetTextSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveDrawHUD();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxBeginCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxClick();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxEndCursorOver();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ReceiveHitBoxRelease();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveAllDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_RemoveDebugText();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebug();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugForReticleTargetToggle();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowDebugToggleSubCategory();
	ENGINE_API class UFunction* Z_Construct_UFunction_AHUD_ShowHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADebugCameraHUD();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAtmosphericFog();
	ENGINE_API class UFunction* Z_Construct_UFunction_AExponentialHeightFog_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AExponentialHeightFog();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerPitchInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerRollInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddControllerYawInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_AddMovementInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ConsumeMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_DetachFromControllerPendingDestroy();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetBaseAimRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetController();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetControlRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetLastMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementBaseActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetNavAgentLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_GetPendingMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsLocallyControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_IsPlayerControlled();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_K2_GetMovementInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_LaunchPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_Controller();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_OnRep_PlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_PawnMakeNoise();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceivePossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_ReceiveUnpossessed();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SetCanAffectNavigationGeneration();
	ENGINE_API class UFunction* Z_Construct_UFunction_APawn_SpawnDefaultController();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_CanSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_ChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_ChoosePlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_GetDefaultPawnClassForController();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_GetNumPlayers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_GetNumSpectators();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_HandleStartingNewPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_HasMatchStarted();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_InitializeHUDForPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_InitStartSpot();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_FindPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_OnChangeName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_OnLogout();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_OnRestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_OnSwapPlayerControllers();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_K2_PostLogin();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_MustSpectate();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_PlayerCanRestart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_ResetLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_RestartPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_RestartPlayerAtPlayerStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_RestartPlayerAtTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_ReturnToMainMenuHost();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_ShouldReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_SpawnDefaultPawnAtTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_SpawnDefaultPawnFor();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameModeBase_StartPlay();
	ENGINE_API class UClass* Z_Construct_UClass_AGameModeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameModeBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_AbortMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_EndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_GetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_HasMatchEnded();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_IsMatchInProgress();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_K2_OnSetMatchState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToEndMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_ReadyToStartMatch();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_RestartGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_Say();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_SetBandwidthLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameMode_StartMatch();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStandbyType();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameNetworkManager();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_GetPlayerRespawnDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_GetPlayerStartTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_GetServerWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_HasBegunPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_HasMatchStarted();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_OnRep_GameModeClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_OnRep_ReplicatedHasBegunPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_OnRep_ReplicatedWorldTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameStateBase_OnRep_SpectatorClass();
	ENGINE_API class UClass* Z_Construct_UClass_AGameStateBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameStateBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_ElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_AGameState_OnRep_MatchState();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_bIsInactive();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_PlayerName();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_Score();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_OnRep_UniqueId();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_ReceiveCopyProperties();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlayerState_ReceiveOverrideWith();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkyLight_OnRep_bEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkyLight();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWindDirectionalSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshMergeType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshLODSelectionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELandscapeCullingPrecision();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshFeatureImportance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshMergingSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshProxySettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshReductionSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityAggressiveness();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHierarchicalSimplification();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetViewer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassWorldInfoSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_AWorldSettings_OnRep_WorldGravityZ();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AWorldSettings();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_LevelReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_RemoteEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_SetCinematicMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALevelScriptActor_WorldOriginLocationChanged();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_IsEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_OnRep_bEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetCastShadows();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ALight_ToggleEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ALight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALight();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADirectionalLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_APointLight_SetRadius();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASpotLight_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpotLight();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGeneratedMeshAreaLight();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassPortal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALightmassPortal();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamingTextureBuildInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamingTexturePrimitiveInfo();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDOFMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBodyInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponse();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHasCustomNavigableGeometry();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanBeCharacterBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpriteCategoryInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddAngularImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddForceAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddImpulseAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddRadialImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_AddTorque();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CanCharacterStepUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ClearMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ClearMoveIgnoreComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CopyArrayOfMoveIgnoreActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CopyArrayOfMoveIgnoreComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetClosestPointOnCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetInertiaTensor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetNumMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlapInfos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetOverlappingComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_GetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IgnoreActorWhenMoving();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IgnoreComponentWhenMoving();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsAnyRigidBodyAwake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsGravityEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_IsOverlappingComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_IsCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_IsQueryCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_K2_LineTraceComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_PutRigidBodyToSleep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_ScaleByMomentOfInertia();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAllPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetBoundsScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCastShadow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionProfileName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToAllChannels();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCollisionResponseToChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetConstraintMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCullDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetCustomDepthStencilValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetEnableGravity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetLockedAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassOverrideInKg();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMassScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetMaterialByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetNotifyRigidBodyCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOnlyOwnerSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetOwnerNoSee();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsLinearVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysicsMaxAngularVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetPhysMaterialOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderCustomDepth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderInMainPass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetRenderInMono();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetTranslucentSortPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_SetWalkableSlopeOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeAllRigidBodies();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPrimitiveComponent_WakeRigidBody();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialTextureInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLightmassMaterialInterfaceSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetBaseMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInterface_GetPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterialIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_GetMaterialSlotNames();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_IsMaterialSlotNameValid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_SetScalarParameterValueOnMaterials();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshComponent_SetVectorParameterValueOnMaterials();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshComponentLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintedVertex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_GetLocalBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_OnRep_StaticMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetForcedLodModel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMeshComponent_SetStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ALODActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMaterialInstanceActor();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpGroupActorInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraCutInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_ChangePlaybackDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_EnableGroupByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetLoopingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_AMatineeActor_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActor();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AMatineeActorCameraAnim();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERuntimeGenerationType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedAreaData();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationData();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AAbstractNavData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavGraphEdge();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraph();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERecastPartitioning();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARecastNavMesh();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationGraphNode();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationObjectBase();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStartPIE();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavPathObserverInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavCostDisplay();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavigationTestingActor();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENavLinkDirection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationSegmentLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationLinkBase();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkDefinition();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkHostInterface();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_HasMovingAgents();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_IsSmartLinkEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ReceiveSmartLinkReached();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_ResumePathFollowing();
	ENGINE_API class UFunction* Z_Construct_UFunction_ANavLinkProxy_SetSmartLinkEnabled();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANavLinkProxy();
	ENGINE_API class UClass* Z_Construct_UClass_ANote_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ANote();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemOcclusionBoundsMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleSystemLODMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemUpdateMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedEmitterMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLODSoloTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystem_ContainsEmitterType();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleEventType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ParticleReplayState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSysParamType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSysParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_BeginTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_CreateNamedDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_EndTrails();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GenerateParticleEvent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamSourcePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamSourceStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamSourceTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamTargetPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamTargetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetBeamTargetTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNamedMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_GetNumActiveParticles();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetActorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetAutoAttachmentParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetAutoAttachParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourcePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamSourceTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetBeamTargetTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetColorParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetEmitterEnable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetMaterialParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTemplate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetTrailSourceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UParticleSystemComponent_SetVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AParticleEventManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshUVChannelInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAssetAttachContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewAttachedObjectPair();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimLinkMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLinkableElement();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimInterpolationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECurveBlendOption();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveAnimationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyFilterType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMontageNotifyTickType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMarkerSyncData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSyncMarker();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNotifyEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeights();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneBlendWeight();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterface_CollisionDataProvider();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_SkeletalMeshOptimizationImportance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothingAssetData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClothPhysicsProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshOptimizationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTriangleSortSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorExport();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneMirrorInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_FindSocket();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_FindSocketAndIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_GetBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_GetImportedBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_GetSocketByIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_IsSectionUsingCloth();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMesh_NumSockets();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimGroupRole();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionRootLock();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationGroupReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionMovementParams();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTickRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMarkerSyncAnimPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendFilter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSampleData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionFinishVelocityMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionSourceSettingsFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionSourceStatusFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERootMotionAccumulateMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSourceGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource_JumpForce();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource_MoveToDynamicForce();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource_MoveToForce();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource_RadialForce();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource_ConstantForce();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSourceSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionSourceStatus();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LandedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBasedMovementInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSimulatedRootMotionReplicatedMove();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRepRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_CanJumpInternal();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatFly();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatGhost();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_ClientCheatWalk();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Crouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetAnimRootMotionTranslationScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetBaseRotationOffsetRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetBaseTranslationOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_GetCurrentMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsJumpProvidingForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingNetworkedRootMotionMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_IsPlayingRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_Jump();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnEndCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnMovementModeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_OnStartCrouch();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_K2_UpdateCustomMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_LaunchCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnJumped();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLanded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnLaunched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_IsCrouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_ReplicatedBasedMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnRep_RootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_OnWalkingOffLedge();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_PlayAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_SetReplicateMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopAnimMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_StopJumping();
	ENGINE_API class UFunction* Z_Construct_UFunction_ACharacter_UnCrouch();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUp();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_LookUpAtRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveForward();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveRight();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_MoveUp_World();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_Turn();
	ENGINE_API class UFunction* Z_Construct_UFunction_ADefaultPawn_TurnAtRate();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ADefaultPawn();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ABoxReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlaneReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASphereReflectionCapture();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARigidBodyBase();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsConstraintActor();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APhysicsThruster();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_DisableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_EnableForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_ARadialForceActor_ToggleForce();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ARadialForceActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_APlanarReflection_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_APlanarReflection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlanarReflection();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCapture2D_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCapture2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASceneCaptureCube_OnInterpToggle();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASceneCaptureCube();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeAnimInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial0();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMaterial1();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_ASkeletalMeshActor_OnRep_ReplicatedPhysAsset();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASkeletalMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASplineMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();
	ENGINE_API class UClass* Z_Construct_UClass_ASubDSurfaceActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASubDSurfaceActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATargetPoint();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATextRenderActor();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBase();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerBox();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerCapsule();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ATriggerSphere();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AVectorFieldVolume();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UApplicationLifecycleComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainDirectionToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainLocationToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_ConstrainNormalToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetGravityZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPhysicsVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_GetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_IsExceedingMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetMaxSpeedModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_GetModifiedMaxSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_K2_MoveUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_PhysicsVolumeChanged();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintAxisSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintFromVectors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetPlaneConstraintOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SetUpdatedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_SnapUpdatedComponentToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMovementComponent_StopMovementImmediately();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpToBehaviourType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpControlPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_FinaliseControlPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_RestartMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInterpToMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpToMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsCrouching();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFalling();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsFlying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsMovingOnGround();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_IsSwimming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopActiveMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavMovementComponent_StopMovementKeepPathing();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMovementComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_AddInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_ConsumeInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetLastInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_GetPendingInputVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_IsMoveInputIgnored();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnMovementComponent_K2_GetInputVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartName();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSmartNameMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveMetaData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneTranslationRetargetingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVirtualBone();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSlotGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigConfiguration();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReductionSetting();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FReferencePose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletonToMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeleton();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAlphaBlendOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAlphaBlend();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawCurveTracks();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveParam();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETypeAdvanceAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSequenceBase_GetPlayLength();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSegment();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRootMotionExtractionStep();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompositeBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimNotifyEventType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimMontageInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointMarker();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotAnimationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSection();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceMask();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URVOAvoidanceInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkPredictionInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterMovementComponentPostPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFindFloorResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_AddImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CalcVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_CapsuleTouched();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAckGoodMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustRootMotionPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientAdjustRootMotionSourcePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ClientVeryShortAdjustPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_DisableMovement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetAnalogInputModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCharacterOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetCurrentAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetImpartedMovementBaseVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxBrakingDeceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMaxJumpHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetMovementBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetPerchRadiusThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_GetValidPerchRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalkable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_IsWalking();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_ComputeFloorDist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_FindFloor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetModifiedMaxAcceleration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_K2_GetWalkableFloorZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDual();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveDualHybridRootMotion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_ServerMoveOld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceGroup();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetAvoidanceGroupMask();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToAvoid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToAvoidMask();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToIgnore();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetGroupsToIgnoreMask();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetMovementMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCharacterMovementComponent_SetWalkableFloorZ();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpectatorPawnMovement();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_LimitVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_SetVelocityInLocalSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UProjectileMovementComponent_StopSimulating();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URotatingMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationInvokerComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavRelevantComponent_SetNavigationRelevancy();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavRelevantComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkCustomComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavModifierComponent_SetAreaClass();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavModifierComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPawnNoiseEmitterComponent_MakeNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnNoiseEmitterComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELinearConstraintMotion();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTwistConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConeConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintBaseParams();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAngularDriveMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAngularDriveConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearDriveConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintDrive();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConstraintProfileProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalAnimationData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicalAnimationComponent_ApplyPhysicalAnimationSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicalAnimationComponent_SetSkeletalMeshComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicalAnimationComponent_SetStrengthMultiplyer();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalAnimationComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalAnimationComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GetGrabbedComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponentAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_GrabComponentAtLocationWithRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_ReleaseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetAngularStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetInterpolationSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearDamping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetLinearStiffness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetLocationAndRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsHandleComponent_SetTargetRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsHandleComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInLaptopMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_IsInTabletMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformEventsComponent_SupportsConvertibleLaptops();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformEventsComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAtmospherePrecomputeParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableGroundScattering();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_DisableSunDisk();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetAltitudeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDefaultLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDensityOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetFogMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetPrecomputeParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_SetSunMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAtmosphericFogComponent_StartPrecompute();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAtmosphericFogComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttenuationShape();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttenuationDistanceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBaseAttenuationSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundSpatializationAlgorithm();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundDistanceCalc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAudioPlaybackPercent__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioComponentParam();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustAttenuation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_AdjustVolume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_BP_GetAttenuationSettingsToApply();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_FadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetBoolParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetFloatParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetIntParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetPitchMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetSound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetUISound();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetVolumeMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_SetWaveParameter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAudioComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_GetCameraView();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetAspectRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetConstraintAspectRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetFieldOfView();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetOrthoFarClipPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetOrthoNearClipPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetOrthoWidth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetPostProcessBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetProjectionMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraComponent_SetUseFieldOfViewForLOD();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetFadeDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_GetFadeStartDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetDecalMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetFadeOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDecalComponent_SetSortOrder();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDecalComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogCutoffDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogDensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogHeightFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogInscatteringColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFogMaxOpacity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetInscatteringColorCubemap();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetInscatteringTextureTint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UExponentialHeightFogComponent_SetStartDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExponentialHeightFogComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FForceFeedbackAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackAttenuation();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnForceFeedbackFinished__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_AdjustAttenuation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_BP_GetAttenuationSettingsToApply();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_SetForceFeedbackEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_SetIntensityMultiplier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UForceFeedbackComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_GetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponentBase_SetCastShadows();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponentBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectDynamicIndirectLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetAffectTranslucentLighting();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomThreshold();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetBloomTint();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetEnableLightShaftBloom();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIESTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionDisabledBrightness();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionFadeDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetLightFunctionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULightComponent_SetTemperature();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeDistributionExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetCascadeTransitionFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowCascades();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetEnableLightShaftOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetLightShaftOverrideDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetOcclusionMaskDarkness();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDirectionalLightComponent_SetShadowDistanceFadeoutFraction();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDirectionalLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetAttenuationRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetLightFalloffExponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPointLightComponent_SetSourceRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetInnerConeAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_USpotLightComponent_SetOuterConeAngle();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESkyLightSourceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_RecaptureSky();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemap();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetCubemapBlend();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIndirectLightingIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetIntensity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetLightColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetMinOcclusion();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkyLightComponent_SetOcclusionTint();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPortalComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPortalComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationGraphNodeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_BreakConstraint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetConstraintForce();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing1();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentSwing2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_GetCurrentTwist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularDriveMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularOrientationTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing1Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularSwing2Limit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularTwistLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetAngularVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstrainedComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferenceOrientation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetConstraintReferencePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetDisableCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearPositionTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearVelocityTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearXLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearYLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetLinearZLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetOrientationDriveSLERP();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetNormalizedCompressionScalar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringCurrentEndPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPhysicsSpringComponent_GetSpringRestingPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSpringComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsThrusterComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShapeComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPostProcessComponent_AddOrUpdateBlendable();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPostProcessComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_DEPRECATED();
	ENGINE_API class UFunction* Z_Construct_UFunction_UArrowComponent_SetArrowColor_New();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSprite();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetSpriteAndUV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBillboardComponent_SetUV();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawFrustumComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedPoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBatchedLine();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULineBatchComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialSpriteElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialBillboardComponent_AddElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialBillboardComponent_SetElements();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialBillboardComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneSpaces();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshComponentUpdateFlag();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysBodyOp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneVisibilityStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkelMeshComponentLODInfo();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_BoneIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_ClearVertexColorOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_FindClosestBone_K2();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetNumBones();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetParentBone();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_GetSocketBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_HideBoneByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_IsBoneHiddenByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetForcedLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetMinLOD();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetPhysicsAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetSkeletalMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_SetVertexColorOverride_LinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformFromBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_TransformToBoneSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkinnedMeshComponent_UnHideBoneByName();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkinnedMeshComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_ApplyRadiusDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_GetDestructibleMesh();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDestructibleComponent_SetDestructibleMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_CopyPoseFromSkeletalComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_GetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_ResetBoneTransformByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneLocationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneRotationByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneScaleByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPoseableMeshComponent_SetBoneTransformByName();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseableMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSingleAnimationPlayData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseSnapshot();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsTransformUpdateMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EKinematicBonesUpdateToPhysics();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshComponentClothTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshComponentEndPhysicsTickFunction();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AddForceToAllBodiesBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_AddImpulseToAllBodiesBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_BindClothToMasterPoseComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_BreakConstraint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_FindConstraintBoneName();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetAnimInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetBoneMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetCurrentJointAngles();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetPostProcessInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_GetSkeletalCenterOfMass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsBodyGravityEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsClothingSimulationSuspended();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_OverrideAnimationData();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_PlayAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResetClothTeleportMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_ResumeClothingSimulation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllBodiesSimulatePhysics();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularDriveParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAngularLimits();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimationMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetAnimInstanceClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetClothMaxDistanceScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetConstraintProfile();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetConstraintProfileForAll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnableBodyGravity();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetEnablePhysicsBlending();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPhysicsBlendWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SetUpdateAnimationInEditor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SnapshotPose();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_SuspendClothingSimulation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshComponent_UnbindClothFromMasterPoseComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshMappingInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInstancedStaticMeshInstanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_AddInstanceWorldSpace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_ClearInstances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstancesOverlappingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstancesOverlappingSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_GetInstanceTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_RemoveInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_SetCullDistances();
	ENGINE_API class UFunction* Z_Construct_UFunction_UInstancedStaticMeshComponent_UpdateInstanceTransform();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInstancedStaticMeshComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClusterNode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHierarchicalInstancedStaticMeshComponent_RemoveInstances();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHierarchicalInstancedStaticMeshComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineMeshAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplineMeshParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_GetStartTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetBoundaryMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetEndTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetForwardAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetSplineUpDir();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartAndEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartOffset();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartRoll();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_SetStartTangent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineMeshComponent_UpdateMesh();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UModelComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavMeshRenderingComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavTestRenderingComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetScaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_GetUnscaledBoxExtent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBoxComponent_SetBoxExtent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleHalfHeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCapsuleComponent_SetCapsuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetScaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetShapeScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_GetUnscaledSphereRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_USphereComponent_SetSphereRadius();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDrawSphereComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplineCoordinateSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESplinePointType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplinePoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplineCurves();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineLocalPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplinePointAtIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_AddSplineWorldPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_ClearSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindDirectionClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindInputKeyClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindLocationClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindRightVectorClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindRollClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindRotationClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindScaleClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindTangentClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindTransformClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_FindUpVectorClosestToWorldLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetArriveTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetDistanceAlongSplineAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetInputKeyAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLeaveTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocalLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAndTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetNumberOfSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRightVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRollAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetScaleAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTangentAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetTransformAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetUpVectorAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldDirectionAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldLocationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldRotationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_GetWorldTangentAtDistanceAlongSpline();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_IsClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_RemoveSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetClosedLoop();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetClosedLoopAtPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetDefaultUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetDrawDebug();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSelectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineLocalPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplinePointType();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetSplineWorldPoints();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetTangentAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetTangentsAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetUnselectedSplineSegmentColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetUpVectorAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_SetWorldLocationAtSplinePoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_USplineComponent_UpdateSpline();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USplineComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USubDSurfaceComponent_SetMesh();
	ENGINE_API class UClass* Z_Construct_UClass_USubDSurfaceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubDSurfaceComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVerticalTextAligment();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHorizTextAligment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextLocalSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_GetTextWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_K2_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetFont();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizontalAlignment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetHorizSpacingAdjust();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetTextRenderColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetVerticalAlignment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetVertSpacingAdjust();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetWorldSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetXScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTextRenderComponent_SetYScale();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextRenderComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVectorFieldComponent_SetIntensity();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_AddObjectTypeToAffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_FireImpulse();
	ENGINE_API class UFunction* Z_Construct_UFunction_URadialForceComponent_RemoveObjectTypeToAffect();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URadialForceComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EReflectionSourceType();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoxReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlaneReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereReflectionCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UScriptViewportClient();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebugDisplayProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SetConsoleTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_ShowTitleSafeArea();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameViewportClient_SSSwapControllers();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEngineShowFlagsSetting();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_ClearShowOnlyComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_HideComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_RemoveShowOnlyActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_RemoveShowOnlyComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_ShowOnlyActorComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent_ShowOnlyComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UPlanarReflectionComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlanarReflectionComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_AddOrUpdateBlendable();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponent2D_CaptureScene();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_USceneCaptureComponentCube_CaptureScene();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponentCube();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStereoLayerShape();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EStereoLayerType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_GetPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_GetQuadSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_GetTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_GetUVRect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_MarkTextureForUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_SetPriority();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_SetQuadSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_SetTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerComponent_SetUVRect();
	ENGINE_API class UClass* Z_Construct_UClass_UStereoLayerComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStereoLayerComponent();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWindSourceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetMaximumGustAmount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetMinimumGustAmount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetSpeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetStrength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UWindDirectionalSourceComponent_SetWindType();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWindDirectionalSourceComponent();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineDirection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETimelineLengthMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimeline();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimelineEventEntry();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetIgnoreTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_GetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_IsReversing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_OnRep_Timeline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_PlayFromStart();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_ReverseFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetFloatCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetIgnoreTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetLinearColorCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetNewTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlaybackPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetTimelineLengthMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_SetVectorCurve();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTimelineComponent_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAISystemBase();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimComposite();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdditiveBasePoseType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationKeyFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimationCompressionFormat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompressedTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScaleTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRotationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTranslationTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackToSkeletonMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequenceTrackContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawAnimSequenceTrack();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENotifyTriggerMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlendSpaceAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPerBoneInterpolation();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGridBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSample();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpolationParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpace1D();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAimOffsetBlendSpace1D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseDataContainer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseData();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionLogicType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationStateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBakedStateExitTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionBetweenStates();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationStateBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationTransitionRule();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimStateMachineTypes();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimClassInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimClassInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimClassData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimClassData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_Automatic();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_BitwiseCompressOnly();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_LeastDestructive();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveEverySecondKey();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveLinearKeys();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_PerTrackCompression();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimCompress_RemoveTrivialKeys();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnAllMontageInstancesEndedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMontagePlayReturnType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAnimCurveType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlotEvaluationPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2CSPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FA2Pose();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintInitializeAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintPostEvaluateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_BlueprintUpdateAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_CalculateDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_ClearMorphTargets();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentActiveMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurrentStateName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetCurveValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceCurrentStateElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceMachineWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionCrossfadeDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetInstanceTransitionTimeElapsedFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetOwningComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemaining();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetRelevantAnimTimeRemainingFraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetStateWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetSyncGroupPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_GetTimeToClosestMarker();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_HasMarkerBeenHitThisFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsAnyMontagePlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsPlayingSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_IsSyncGroupBetweenMarkers();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_LockAIResources();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetBlendTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetCurrentSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetIsStopped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_GetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_IsPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_JumpToSectionsEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Pause();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Play();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Resume();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetNextSection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_Montage_Stop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_PlaySlotAnimationAsDynamicMontage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SavePoseSnapshot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SetMorphTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SetRootMotionMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_SnapshotPose();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_StopSlotAnimation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_TryGetPawnOwner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimInstance_UnlockAIResources();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_GetLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_PlayAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetAnimationAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetBlendSpaceInput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetLooping();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlaying();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPlayRate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPositionWithPreviousTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetPreviewCurveOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_SetReverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimSingleNodeInstance_StopAnim();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSingleNodeInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMetaData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchingPointNotifyPayload();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotify_Received_Notify();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_PlayParticleEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_PlayParticleEffect();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_PlaySound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_PlaySound();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_ResetClothingSimulation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotify_ResetClothingSimulation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_GetNotifyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyBegin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyEnd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Received_NotifyTick();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_TimedParticleEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAnimNotifyState_Trail_OverridePSTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimNotifyState_Trail();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSetMeshLinkup();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetImportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetMappingTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetMappingTable();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetUserData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLaunchOnTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorMapPerformanceTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialEditorPromotionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionNewProjectSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionOpenAssetSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuildPromotionImportWorkflowSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportWorkflowDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditorImportExportTestDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FImportFactorySettingValues();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExternalToolDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOpenTestAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAutomationTestSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavAvoidanceData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityForComponent();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetAvoidanceVelocityIgnoringUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetNewAvoidanceUID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_GetObjectCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UAvoidanceManager_RegisterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAvoidanceManager();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendProfileBoneEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendProfile();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintAsyncActionBase_Activate();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintCore();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintNativizationFlag();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintCompileMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBlueprintStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditedDocumentInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPInterfaceDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableDescription();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVariableMetaDataEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompilerNativizationOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimParentNodeAssetOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimGroupInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprint();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelScriptBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintFunctionLibrary_MakeStringAssetReference();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Find();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Keys();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintMapLibrary_Map_Values();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintMapLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintMapLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugCreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_DebugRemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleNetworkError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_HandleTravelError();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveInit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameInstance_ReceiveShutdown();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformScreenOrientationChangedDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformReceivedLocalNotificationDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformReceivedRemoteNotificationDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformRegisteredForUserNotificationsDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EScreenOrientation();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformGameInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformGameInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintPlatformLibrary_CancelLocalNotification();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintPlatformLibrary_ClearAllLocalNotifications();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintPlatformLibrary_GetLaunchNotification();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintPlatformLibrary_ScheduleLocalNotificationAtTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintPlatformLibrary_ScheduleLocalNotificationFromNow();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintPlatformLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintPlatformLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_AddItems();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Difference();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Intersection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_RemoveItems();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_ToArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UBlueprintSetLibrary_Set_Union();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintSetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintSetLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableCategoryHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDataTableRowHandle();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTable();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluateCurveTableResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_EvaluateCurveTableRow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowFromName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UDataTableFunctionLibrary_GetDataTableRowNames();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataTableFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDebugDrawService();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EQuitPreference();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMoveComponentAction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGenericStruct();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_AddFloatHistorySample();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxOverlapComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_BoxTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CanLaunchURL();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleOverlapComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CapsuleTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CollectGarbage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ComponentOverlapComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ControlScreensaver();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetClassToClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_AssetToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Conv_InterfaceToObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_CreateCopyForUndoBuffer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_Delay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DoesImplementInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugArrow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCapsule();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCircle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugConeInDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCoordinateSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugCylinder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFloatHistoryTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugFrustum();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugPoint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugSphere();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_DrawDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ExecuteConsoleCommand();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushDebugStrings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_FlushPersistentDebugLines();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ForceCloseAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetActorListFromComponentList();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetAdIDCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetClassDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetCommandLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetComponentBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetConvenientWindowedResolutions();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDeviceId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetEngineVersion();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameBundleId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetGameTimeInSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencyCode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetLocalCurrencySymbol();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetMinYResolutionFor3DView();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetMinYResolutionForUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetObjectName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPathName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPlatformUserName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetPreferredLanguages();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingDetailMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetRenderingMaterialQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetSupportedFullscreenResolutions();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetUniqueDeviceId();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_HideAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsControllerAssignedToGamepad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsDedicatedServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsInterstitialAdAvailable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsInterstitialAdRequested();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsLoggedIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsPackagedForDistribution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsServer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsStandalone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_IsValidClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearAndInvalidateTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_ClearTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_InvalidateTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActive();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerActiveHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsTimerPausedHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_IsValidTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_PauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_SetTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExists();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_TimerExistsHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerDelegate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_K2_UnPauseTimerHandle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LaunchURL();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LineTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAsset();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadAssetClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_LoadInterstitialAd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MakeLiteralText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_MoveComponentTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_PrintWarning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_QuitGame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RegisterForRemoteNotifications();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignments();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ResetGamepadAssignmentToController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_RetriggerableDelay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetAssetPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBoolPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetBytePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetClassPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetCollisionProfileNameProperty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetFloatPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetInterfacePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetIntPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetLinearColorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetNamePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetObjectPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetRotatorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStringPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetStructurePropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetSuppressViewportTransitionMessage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTextPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetTransformPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetUserActivity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVectorPropertyByName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SetWindowTitle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowAdBanner();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowInterstitialAd();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapActors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereOverlapComponents();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMulti();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceMultiForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_SphereTraceSingleForObjects();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetSystemLibrary_StackTrace();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetSystemLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalNumber();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGrammaticalGender();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueWaveParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContext();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESuggestProjVelocityTraceOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPredictProjectilePathResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPredictProjectilePathPointData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPredictProjectilePathParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ActivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyPointDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ApplyRadialDamageWithFalloff();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_AreAnyListenersWithinRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_AreSubtitlesEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginDeferredActorSpawnFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BeginSpawningActorFromClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_Blueprint_PredictProjectilePath_Advanced();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_Blueprint_PredictProjectilePath_ByObjectType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_Blueprint_PredictProjectilePath_ByTraceChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BlueprintSuggestProjectileVelocity();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_BreakHitResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CancelAsyncLoading();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixClassOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ClearSoundMixModifiers();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreatePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSaveGameObjectFromBlueprint();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_CreateSound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeactivateReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeleteGameInSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DeprojectScreenToWorld();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_DoesSaveGameExist();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_EnableLiveStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FindCollisionUV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FinishSpawningActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_FlushLevelStreaming();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAccurateRealTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayAverageLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetActorArrayBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsOfClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithInterface();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAllActorsWithTag();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetAudioTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentLevelName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetCurrentReverbEffect();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGameState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetIntOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetKeyValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetObjectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlatformName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCameraManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerCharacter();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerController();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerControllerID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetPlayerPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetRealTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetStreamingLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetSurfaceType();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetUnpausedTimeSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldDeltaSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_GrassOverlappingSphereCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_HasLaunchOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_HasOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_IsGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadGameFromSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_LoadStreamLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_MakeHitResult();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_OpenLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ParseOption();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlaySoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PlayWorldCameraShake();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PopSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_ProjectWorldToScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_PushSoundMixModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RebaseLocalOriginOntoZero();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RebaseZeroOriginOntoLocal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_RemovePlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SaveGameToSlot();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetBaseSoundMix();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGamePaused();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalListenerFocusParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalPitchModulation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetGlobalTimeDilation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetPlayerControllerID();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetSoundMixClassOverride();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetSubtitlesEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SetWorldOriginLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDecalAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogue2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnDialogueAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnEmitterAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnForceFeedbackAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnForceFeedbackAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSound2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAtLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SpawnSoundAttached();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_SuggestProjectileVelocity_CustomArc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameplayStatics_UnloadStreamLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameplayStatics();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHMDWornState();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EHMDTrackingOrigin();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrientPositionSelector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableHMD();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetHMDDeviceName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetScreenPercentage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetTrackingOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetVRFocusState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetClippingPlanes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetTrackingOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHeadMountedDisplayFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Add();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_AddUnique();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Append();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Clear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Find();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Get();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Insert();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_IsValidIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_LastIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Length();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Remove();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_RemoveItem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Resize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Set();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_Array_Shuffle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_FilterArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetArrayLibrary_SetArrayPropertyByName();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetArrayLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Conv_GuidToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_EqualEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Invalidate_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_IsValid_Guid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NewGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_NotEqual_GuidGuid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetGuidLibrary_Parse_StringToGuid();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetGuidLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_CalibrateTilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_ControllerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_InputChordInputChord();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_EqualEqual_KeyKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetAnalogValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsLeftShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRepeat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightAltDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightCommandDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightControlDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsRightShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_InputEvent_IsShiftDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_GetDisplayName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsFloatAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsGamepadKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsKeyboardKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsModifierKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsMouseButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_Key_IsVectorAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetCursorDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetEffectingButton();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetGestureDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetPointerIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetScreenSpacePosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetTouchpadIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetUserIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_GetWheelDelta();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsMouseButtonDown();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetInputLibrary_PointerEvent_IsTouchEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetInputLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_CreateDynamicMaterialInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMaterialLibrary_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMaterialLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELerpInterpolationMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEasingFunc();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorSpringState();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatSpringState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Abs_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Acos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Add_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_And_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Asin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Atan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNAND();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanNOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BooleanXOR();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakRotIntoAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_BreakVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Clamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClampVectorSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ClassIsChildOf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeRotators();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ComposeTransforms();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_BoolToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ByteToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_ColorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_FloatToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntToIntVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_IntVectorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_LinearColorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_RotatorToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_Vector2DToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Conv_VectorToVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ConvertTransformToRelative();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CreateVectorFromYawPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Cross_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_CrossProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromIsoString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DateTimeMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DaysInYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAcos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAsin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegAtan2();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegCos();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegreesToRadians();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegSin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DegTan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Divide_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Dot_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_DotProduct2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Ease();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_EqualEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Exp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FCeil();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FClamp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FFloor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindClosestPointOnLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindClosestPointOnSegment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindLookAtRotation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FindNearestPointsOnLineSegments();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpEaseInOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FixedTurn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FloatSpringInterp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMax();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FMod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Fraction();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FromSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTrunc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_FTruncVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDayOfYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDirectionUnitVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetForwardVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHour12();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMaxElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMillisecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinElement();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinute();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetMonth();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPointDistanceToLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetPointDistanceToSegment();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetReflectionVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetRightVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSecond();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTAU();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTimeOfDay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalDays();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalHours();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMilliseconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalMinutes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetTotalSeconds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetUpVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetVectorArrayAverage();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYawPitchFromVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GetYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Greater_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GreaterGreater_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_GridSnap_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_HSVToRGB_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Hypotenuse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InRange_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InverseTransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_InvertTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsAfternoon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsLeapYear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsMorning();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsPointInBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_IsPointInBoxWithTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Lerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Less_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LessLess_VectorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinearColorLerpUsingHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_LinePlaneIntersection_OriginNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Loge();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeBox2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePlaneFromPointAndNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakePulsatingValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotationFromAxes();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromXZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromYZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZ();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeRotFromZY();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MakeVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeClamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MapRangeUnclamped();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Max();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MaxOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Min();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinimumAreaRectangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfByteArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfFloatArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MinOfIntArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MirrorVectorByNormal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_LinearColorLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_RotatorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_TimespanFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Multiply_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyByPi();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_MultiplyMultiply_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NearlyEqual_TransformTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NegateVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Normal2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizedDeltaRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NormalizeToRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Not_PreBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_BoolBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ClassClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_NameName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_ObjectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_RotatorRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_NotEqual_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Now();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Or_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Percent_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_PointsAreCoplanar();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectPointOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToPlane();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ProjectVectorOnToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RadiansToDegrees();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolWithWeight();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomBoolWithWeightFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomFloatInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRange();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomIntegerInRangeFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomPointInBoundingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomRotatorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorFromStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInCone();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_REase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetFloatSpringState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_ResetVectorSpringState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RGBToHSV_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotateAngleAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_RotatorFromAxisAndAngle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Round();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SeedRandomStream();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectTransform();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SelectVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SetRandomStreamSeed();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_SignOfInteger();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Sqrt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Square();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_ByteByte();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeDateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_DateTimeTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_FloatFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_IntInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_TimespanTimespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_Vector2DVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Subtract_VectorVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Tan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMaxValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanMinValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanRatio();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TimespanZeroValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Today();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformDirection();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_TransformLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_UtcNow();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VEase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Vector2DInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VectorSpringInterp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VInterpTo_Constant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VLerp();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSize2DSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_VSizeSquared();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetMathLibrary_Xor_IntInt();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetMathLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_BitIsMarked();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearAllBits();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_ClearBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetEnumeratorValueFromIndex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetFirstUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetRandomUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_GetValidValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasMarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_HasUnmarkedBit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetNodeHelperLibrary_MarkBit();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetNodeHelperLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDrawToRenderTargetContext();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_BeginDrawCanvasToRenderTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_ClearRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_CreateRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_DrawMaterialToRenderTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_EndDrawCanvasToRenderTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_ExportRenderTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetRenderingLibrary_ExportTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetRenderingLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetRenderingLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Bool();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Color();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Int();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_IntVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Name();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Object();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Rotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_BuildString_Vector2d();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Concat_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Contains();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_BoolToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ByteToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ColorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_FloatToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_IntVectorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_NameToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_ObjectToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_RotatorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToFloat();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToInt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToRotator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToVector();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_StringToVector2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_TransformToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_Vector2dToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Conv_VectorToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_CullArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EndsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_EqualEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_FindSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterArrayFromString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetCharacterAsNumber();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_GetSubstring();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_IsNumeric();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_JoinStringArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Left();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_LeftPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Len();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_MatchesWildcard();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Mid();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StriStri();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_NotEqual_StrStr();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ParseIntoArray();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Replace();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ReplaceInline();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Reverse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Right();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightChop();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_RightPad();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Split();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_StartsWith();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TimeSecondsToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToLower();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_ToUpper();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_Trim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetStringLibrary_TrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetStringLibrary();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFormatArgumentType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextGender();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERoundingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFormatArgumentData();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrency_Integer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsCurrencyBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDate_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsDateTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsPercent_Float();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimespan_Timespan();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimeZoneDate_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimeZoneDateTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_AsTimeZoneTime_DateTime();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_BoolToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ByteToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ColorToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_FloatToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_IntToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_NameToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_ObjectToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_RotatorToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_StringToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TextToString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_TransformToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_Vector2dToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Conv_VectorToText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_EqualEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_FindTextInLocalizationTable();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_Format();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_GetEmptyText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_IgnoreCase_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_NotEqual_TextText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsCultureInvariant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsEmpty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextIsTransient();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPreceding();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimPrecedingAndTrailing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UKismetTextLibrary_TextTrimTrailing();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UKismetTextLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshVertexPainterKismetLibrary_PaintVerticesLerpAlongAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshVertexPainterKismetLibrary_PaintVerticesSingleColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMeshVertexPainterKismetLibrary_RemovePaintedVertices();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshVertexPainterKismetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshVertexPainterKismetLibrary();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_FNavigationSystemRunMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToActorSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_FindPathToLocationSynchronously();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomPointInNavigableRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_GetRandomReachablePointInRadius();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_IsNavigationBeingBuilt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_IsNavigationBeingBuiltOrLocked();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_NavigationRaycast();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_OnNavigationBoundsUpdated();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ProjectPointToNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_RegisterNavigationInvoker();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetGeometryGatheringMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_SimpleMoveToLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationSystem_UnregisterNavigationInvoker();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationSystem();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerFunctionLibrary_EnableAutoLoadingSplashScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerFunctionLibrary_HideSplashScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerFunctionLibrary_SetSplashScreen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStereoLayerFunctionLibrary_ShowSplashScreen();
	ENGINE_API class UClass* Z_Construct_UClass_UStereoLayerFunctionLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStereoLayerFunctionLibrary();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UVisualLoggerKismetLibrary_LogText();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerKismetLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintCookedComponentInstancingData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentChangedPropertyInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventGraphFastCallPair();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerToUberGraphFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDebuggingInfoForSingleFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNodeToCodeAssociation();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseWatch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseWatch();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimBlueprintDebugData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationFrameSnapshot();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStateMachineDebugData();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimBlueprintGeneratedClass();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBodyCollisionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPhysicsType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionTraceFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKShapeElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKConvexElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKBoxElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphereElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKSphylElem();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKAggregateGeom();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAggregateGeometry2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoxElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCircleElement2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FConvexElement2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup2D();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalAnimationProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsAsset();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalBodySetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalBodySetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBranchFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBoneMaskFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBookMark2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBreakpoint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBuilderPoly();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBrushBuilder();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UButtonStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnim();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetDuration();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_SetScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraAnimInst_Stop();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraAnimInst();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_BlueprintModifyPostProcess();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_DisableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_EnableModifier();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_GetViewTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCameraModifier_IsDisabled();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraModifier_CameraShake();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWrappedStringElement();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextSizingParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Deproject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBorder();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawLine();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawMaterialTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawPolygon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawText();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTexture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_DrawTriangle();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_Project();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_StrLen();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvas_K2_TextSize();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvas();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UControlChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVoiceChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugIt();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItGo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_BugItStringCreator();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ChangeSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_CheatScript();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DamageTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweep();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepCapture();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepChannel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepClear();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepComplex();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepPawn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DebugCapsuleSweepSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAll();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyAllPawnsExceptTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyPawns();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DestroyTarget();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DisableDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpChatState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpOnlineSessionState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpPartyState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_DumpVoiceMutingState();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_EnableDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FlushLog();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Fly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_FreezeFrame();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Ghost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_God();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_InvertMouse();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_LogLoc();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_OnlyLoadLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_PlayersOnly();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_RebuildNavigation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ReceiveEndPlay();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ReceiveInitCheatManager();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ServerToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetMouseSensitivityToDefault();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetNavDrawDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_SetWorldOrigin();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Slomo();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelIn();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_StreamLevelOut();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Summon();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Teleport();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_TestCollisionDistance();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleAILogging();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ToggleDebugCamera();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewClass();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewPlayer();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_ViewSelf();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCheatManager_Walk();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCheckBoxStyleAsset();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPluginCommandlet();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USmokeTestCommandlet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAutoCompleteNode();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UConsole();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveLinearColor_GetLinearColorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveLinearColor();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveVector_GetVectorValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_CurveEdPresetCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedCurveValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveSourceInterface_GetBindingName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveSourceInterface_GetCurves();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCurveSourceInterface_GetCurveValue();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveSourceInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveSourceInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveTableRowHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDataAsset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPreviewMeshCollectionEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UPreviewMeshCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPreviewMeshCollection();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTireType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleChunkParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFractureMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleFractureSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeveloperSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimationSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioQualitySettings();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomProfile();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomChannelSetup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionResponseTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollisionProfileName();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCollisionProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStreamingSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGarbageCollectionSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshSimplificationSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshSimplificationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetworkSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFrictionCombineMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsLockedAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESettingsDOF();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicalSurfaceName();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAutoExposureMethodUI();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEarlyZPass();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomDepthStencil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMobileMSAASampleCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositingSampleCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClearSceneOptions();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URendererSettings();
	ENGINE_API class UClass* Z_Construct_UClass_URendererOverrideSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URendererOverrideSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUIScalingRule();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ERenderFocusRule();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserInterfaceSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfileManager();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueVoice();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDialogueContextMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueWave();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_DistributionParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistributionLookupTable();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionFloat();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFloatDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloat();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionFloatUniformCurve();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorMirrorFlags();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDistributionVectorLockFlags();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRawDistributionVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4Distribution();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorDistribution();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVector();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorParticleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorConstantCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniform();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDistributionVectorUniformCurve();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDPICustomScalingRule();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDynamicBlueprintBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintComponentDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UComponentDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputActionDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputActionDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputAxisKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputVectorAxisDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputKeyDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputKeyDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlueprintInputTouchDelegateBinding();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputTouchDelegateBinding();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGraphReference();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphNode_Documentation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECanCreateConnectionResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction_NewNode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEdGraphSchemaAction();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEdGraphSchema();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UImportantToggleSettingInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEndUserSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelCollection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartAsyncSimulationFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEndPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStartPhysicsTickFunction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelViewportInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConsoleType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETransitionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFullyLoadPackageType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStructRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClassRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGameNameRedirect();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScreenMessageString();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDropNoteInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStatColorMapEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FWorldContext();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedNetDriver();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNetDriverDefinition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelStreamingStatus();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFullyLoadedPackagesInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineHandlerComponentFactory_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineHandlerComponentFactory();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UExporter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontImportCharacterSet();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontImportOptionsData();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFontImportOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFontCacheType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontCharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFont();
	ENGINE_API class UClass* Z_Construct_UClass_UFontFace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFontFace();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnGameUserSettingsUINeedsUpdate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWindowMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ApplyHardwareBenchmarkResults();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ApplyNonResolutionSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ApplyResolutionSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ApplySettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ConfirmVideoMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_EnableHDRDisplayOutput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetAntiAliasingQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetAudioQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetDefaultResolution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetDefaultResolutionScale();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetDefaultWindowMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetDefaultWindowPosition();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetDesktopResolution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetFoliageQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetFrameRateLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetFullscreenMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetGameUserSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetLastConfirmedFullscreenMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetLastConfirmedScreenResolution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetOverallScalabilityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetPostProcessingQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetPreferredFullscreenMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetResolutionScaleInformation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetResolutionScaleInformationEx();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetScreenResolution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetShadowQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetTextureQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetViewDistanceQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_GetVisualEffectQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_IsDirty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_IsFullscreenModeDirty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_IsScreenResolutionDirty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_IsVSyncDirty();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_IsVSyncEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_LoadSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ResetToCurrentSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_RevertVideoMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_RunHardwareBenchmark();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SaveSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetAntiAliasingQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetAudioQualityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetBenchmarkFallbackValues();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetFoliageQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetFrameRateLimit();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetFullscreenMode();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetOverallScalabilityLevel();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetPostProcessingQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetResolutionScaleNormalized();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetResolutionScaleValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetResolutionScaleValueEx();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetScreenResolution();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetShadowQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetTextureQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetToDefaults();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetViewDistanceQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetVisualEffectQuality();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SetVSyncEnabled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_SupportsHDRDisplayOutput();
	ENGINE_API class UFunction* Z_Construct_UFunction_UGameUserSettings_ValidateSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FActiveHapticFeedbackEffect();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Base_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Base();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Buffer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Buffer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHapticFeedbackDetails_Curve();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Curve_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_Curve();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_SoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UHapticFeedbackEffect_SoundWave();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentOverrideRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInheritableComponentHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputActionKeyMapping();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisConfigEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputAxisProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_ClearSmoothing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxis();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_InvertAxisKey();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetBind();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlayerInput_SetMouseSensitivity();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayerInput();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInputSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdTab();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCurveEdEntry();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpCurveEdSetup();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpData();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Classes();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpFilter_Custom();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpEdSelKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCameraPreviewInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstCamera();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpGroupInstDirector();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackActiveCondition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubTrackGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSupportedSubTrackInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoolTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackBoolProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectorTrackCut();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackDirector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEventTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimControlTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackFloatProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpTrackMoveRotMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInterpLookupPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMove();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EInterpMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackMoveAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackLinearColorProp();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleReplayTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackParticleReplay();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrackToggleAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FToggleTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackColorScale();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVectorProp();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackCondition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVisibilityTrackAction();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVisibilityTrackKey();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInst();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAnimControl();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstAudioMaster();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorScale();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstDirector();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFade();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatAnimBPParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatParticleParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstMove();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstParticleReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstBoolProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstFloatProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstLinearColorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorProp();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSlomo();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstSound();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstToggle();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVectorMaterialParam();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInterpTrackInstVisibility();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UIntSerialization();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLayerActorStats();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULayer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_CreateInstance();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_GetLevelScriptActor();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelLoaded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsLevelVisible();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreaming_IsStreamingStatePending();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreaming();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingAlwaysLoaded();
	ENGINE_API class UFunction* Z_Construct_UFunction_ULevelStreamingKismet_LoadLevelInstance();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingKismet();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULevelStreamingPersistent();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmappedSurfaceCollection();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightmassPrimitiveSettingsObject();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FClientReceiveData();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalMessage();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UEngineMessage();
	ENGINE_API class UClass* Z_Construct_UClass_UMapBuildDataRegistry_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMapBuildDataRegistry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpression();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAbs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAdd();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAppendVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArccosine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArccosine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArccosineFast_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArccosineFast();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArcsine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArcsine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArcsineFast_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArcsineFast();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent2();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent2Fast_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangent2Fast();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangentFast_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionArctangentFast();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlackBody();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialAttributeBlend();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlendMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBlendMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCeil();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EClampMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClamp();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComment();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionComponentMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCosine();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCustomInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClearCoatNormalCustomOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionClearCoatNormalCustomOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTangentOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTangentOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDX();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDDY();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalDerivative_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalDerivative();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalLifetimeOpacity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalLifetimeOpacity();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthFade();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDesaturation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDivide();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDotProduct();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFloor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFmod();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFrac();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFresnel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EFunctionInputType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGetMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGetMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionGIReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionIf();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLightVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialProxyReplace_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMaterialProxyReplace();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMax();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMin();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionMultiply();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENoiseFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionNormalize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionOneMinus();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPanner();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRandom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPower();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedNormal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedNormal();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreviousFrameSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionPreviousFrameSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReroute_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionReroute();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRound_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionRound();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSaturate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSaturate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESceneTextureId();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSetMaterialAttributes_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSetMaterialAttributes();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphereMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticBool();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionSubtract();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTangent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTangent();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObject();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSample();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTextureProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTime();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTruncate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTruncate();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorNoiseFunction();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVectorNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewProperty();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionViewSize();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialFunction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaterialDomain();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceConstant();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyInterpParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollection();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMatineeInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMorphTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Default();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_LowHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Null();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavArea_Obstacle();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavCollision();
	ENGINE_API class UClass* Z_Construct_UClass_UNavEdgeProviderInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavEdgeProviderInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationDataChunk();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastNavMeshDataChunk();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled();
	ENGINE_API class UFunction* Z_Construct_UFunction_UNavigationPath_IsValid();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPath();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavigationPathGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavLinkTrivial();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNavNodeInterface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPacketSimulationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPackageMapClient();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UNetConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetConnection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLevelNameAndTime();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoNetDriver();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UObjectReferencer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_EmptyOnlineDelegate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UOnlineBlueprintCallProxyBase_Activate();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineBlueprintCallProxyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineBlueprintCallProxyBase();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineEngineInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineEngineInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UOnlineSession();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleEmitter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSpriteEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleLODLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSystemInsignificanceReaction();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSignificanceLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EModuleType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModule();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAcceleration();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorLine();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorParticle();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPoint();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_BeamModifierType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamModifier();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamNoise();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleBeamTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCameraOffset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollision();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleCollisionGPU();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColor_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventGenerator();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillBox();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleKillHeight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetimeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLightBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLight_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationDirect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModulePivotOffset();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSourceMovement();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMaterialBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbitBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrbit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOpacitySourceMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount();
	ENGINE_API class UClass* Z_Construct_UClass_USubUVAnimation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubUVAnimation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleSortMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRequired();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSize_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawn();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUV();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleSubUVMovie();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTrailSource();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBeam2Method();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityBase();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityCone();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleModuleEventSendToGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemReplay();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDemoPendingNetGame();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicalMaterial();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsCollisionHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsConstraintTemplate();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPhysicsSerializer();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCloudStorageBase();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UInGameAdManager();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMicroTransactionBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTwitterIntegrationBase();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue();
	ENGINE_API class UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UChildConnection();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPolys();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterBase();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ELegendPosition();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReporterGraph();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EConstraintTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EControlConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNode();
	ENGINE_API class UClass* Z_Construct_UClass_URig_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_URig();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USimpleConstructionScript();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USCS_Node();
	ENGINE_API class UClass* Z_Construct_UClass_USelection_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USelection();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDestructibleMesh();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshReductionSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshReductionSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation();
	ENGINE_API class UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshSocket();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureGroup();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ETextureMipCount();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureAddress();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureFilter();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureSource();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture();
	ENGINE_API class UClass* Z_Construct_UClass_USlateTextureAtlasInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateTextureAtlasInterface();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundConcurrencySettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundConcurrency_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundConcurrency();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDialogueSoundWaveProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ESoundGroup();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundGroups();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDecompressionType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundWaveProcedural();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundClass();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectPreset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectPreset();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectSourcePreset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectSourcePreset();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectSubmixPreset_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundEffectSubmixPreset();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundMix();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAssetReferencer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWavePlayer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeAttenuation();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeBranch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeConcatenator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDelay();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDialoguePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeParamCrossFade();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeDoppler();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeEnveloper();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeGroupControl();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeLooping();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMature();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeMixer();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulator();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ModulationParamMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeModulatorContinuous();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeOscillator();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeQualityLevel();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeRandom();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSoundClass();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeSwitch();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNodeWaveParam();
	ENGINE_API class UClass* Z_Construct_UClass_USoundSubmix_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundSubmix();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EOptimizationType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EImportanceLevel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ENormalMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMaterialRemapIndex();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMaterial();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetBounds();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetNumLODs();
	ENGINE_API class UFunction* Z_Construct_UFunction_UStaticMesh_GetNumSections();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshSocket();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVertexAttributeStreamType();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAttributeStream_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVertexAttributeStream();
	ENGINE_API class UClass* Z_Construct_UClass_USubDSurface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubDSurface();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USubsurfaceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextPropertyTestObject();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX();
	ENGINE_API class UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ULightMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UShadowMapTexture2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLightProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2DDynamic();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureCube();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate();
	ENGINE_API class UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCanvasRenderTarget2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTargetCube();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureLODSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UDeviceProfile();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UThumbnailInfo();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTimelineTemplate();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTouchInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedEnum();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UUserDefinedStruct();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorField();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldAnimated();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVectorFieldStatic();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerAutomationTests();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UWorldComposition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationRecordingSettings();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPostCopyOperation();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EPinHidingMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FExposedValueCopyRecord();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyMeshSpaceAdditive();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SubInput();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SubInstance();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FIntegralKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FNameCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStringCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStringCurveKey();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FMemberReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EVertexPaintAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugItemType();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimInstanceProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FQueuedDrawDebugItem();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimPhysCollisionType();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimPhysTwistAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSingleNodeInstanceProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SingleNode();
	ENGINE_API class UPackage* Z_Construct_UPackage__Script_Engine();
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMapBuildDataRegistry);
	UScriptStruct* Z_Construct_UScriptStruct_FExpressionOutput()
	{
		struct FExpressionOutput
		{
			FString OutputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ExpressionOutput"), sizeof(FExpressionOutput), Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExpressionOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FExpressionOutput), ALIGNOF(FExpressionOutput));
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskA, FExpressionOutput), 0x0010000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskB, FExpressionOutput), 0x0010000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskG, FExpressionOutput), 0x0010000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskR, FExpressionOutput), 0x0010000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Mask, FExpressionOutput), 0x0010000000000000);
			UProperty* NewProp_OutputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OutputName, FExpressionOutput), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that represents an expression's output."));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_OutputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExpressionOutput_CRC() { return 3064314516U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialAttributesInput()
	{
		struct FExpressionInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		struct FMaterialAttributesInput : public FExpressionInput
		{
			int32 PropertyConnectedBitmask;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialAttributesInput"), sizeof(FMaterialAttributesInput), Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialAttributesInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FExpressionInput(), NULL, EStructFlags(0x00000008), sizeof(FMaterialAttributesInput), ALIGNOF(FMaterialAttributesInput));
			UProperty* NewProp_PropertyConnectedBitmask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PropertyConnectedBitmask"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PropertyConnectedBitmask, FMaterialAttributesInput), 0x0010000000002000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_PropertyConnectedBitmask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialAttributesInput_CRC() { return 2800060421U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExpressionInput()
	{
		struct FExpressionInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExpressionInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ExpressionInput"), sizeof(FExpressionInput), Get_Z_Construct_UScriptStruct_FExpressionInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExpressionInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FExpressionInput), ALIGNOF(FExpressionInput));
			UProperty* NewProp_ExpressionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ExpressionName, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskA, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskB, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskG, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskR, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Mask, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InputName, FExpressionInput), 0x0010000000000000);
			UProperty* NewProp_OutputIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OutputIndex, FExpressionInput), 0x0010000000000000);
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_Expression = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Expression"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Expression, FExpressionInput), 0x0010000800000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_ExpressionName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_ExpressionName, TEXT("ToolTip"), TEXT("Material expression name that this input is connected to, or None if not connected. Used only in cooked builds"));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("optional FName of the input.\nNote that this is the only member which is not derived from the output currently connected."));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ToolTip"), TEXT("Index into Expression's outputs array that this input is connected to."));
			MetaData->SetValue(NewProp_Expression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
			MetaData->SetValue(NewProp_Expression, TEXT("ToolTip"), TEXT("UMaterial expression that this input is connected to, or NULL if not connected."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExpressionInput_CRC() { return 3124675593U; }
	UClass* Z_Construct_UClass_UMaterialExpression_NoRegister()
	{
		return UMaterialExpression::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpression()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpression::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Outputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Outputs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Outputs, UMaterialExpression), 0x0010000000000000);
				UProperty* NewProp_Outputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Outputs, TEXT("Outputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionOutput());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MenuCategories = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuCategories"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MenuCategories, UMaterialExpression), 0x0010000800000000);
				UProperty* NewProp_MenuCategories_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MenuCategories, TEXT("MenuCategories"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowOutputs, UMaterialExpression, uint8);
				UProperty* NewProp_bShowOutputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowOutputs"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowOutputs, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowOutputs, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowInputs, UMaterialExpression, uint8);
				UProperty* NewProp_bShowInputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowInputs"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowInputs, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowInputs, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShaderInputData, UMaterialExpression, uint8);
				UProperty* NewProp_bShaderInputData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShaderInputData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShaderInputData, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShaderInputData, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollapsed, UMaterialExpression, uint8);
				UProperty* NewProp_bCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollapsed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollapsed, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCollapsed, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHidePreviewWindow, UMaterialExpression, uint8);
				UProperty* NewProp_bHidePreviewWindow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHidePreviewWindow"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHidePreviewWindow, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bHidePreviewWindow, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowOutputNameOnPin, UMaterialExpression, uint8);
				UProperty* NewProp_bShowOutputNameOnPin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowOutputNameOnPin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowOutputNameOnPin, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowOutputNameOnPin, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCommentBubbleVisible, UMaterialExpression, uint8);
				UProperty* NewProp_bCommentBubbleVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCommentBubbleVisible"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCommentBubbleVisible, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCommentBubbleVisible, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsParameterExpression, UMaterialExpression, uint8);
				UProperty* NewProp_bIsParameterExpression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsParameterExpression"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsParameterExpression, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsParameterExpression, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNeedToUpdatePreview, UMaterialExpression, uint8);
				UProperty* NewProp_bNeedToUpdatePreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNeedToUpdatePreview"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNeedToUpdatePreview, UMaterialExpression), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bNeedToUpdatePreview, UMaterialExpression), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRealtimePreview, UMaterialExpression, uint8);
				UProperty* NewProp_bRealtimePreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRealtimePreview"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRealtimePreview, UMaterialExpression), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bRealtimePreview, UMaterialExpression), sizeof(uint8), false);
				UProperty* NewProp_BorderColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BorderColor, UMaterialExpression), 0x0010000000000000, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_Desc = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Desc"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Desc, UMaterialExpression), 0x0010000000000001);
				UProperty* NewProp_Function = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Function"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Function, UMaterialExpression), 0x0010000000000000, Z_Construct_UClass_UMaterialFunction_NoRegister());
				UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, UMaterialExpression), 0x0010000000000000, Z_Construct_UClass_UMaterial_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MaterialExpressionGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaterialExpressionGuid, UMaterialExpression), 0x0010000800000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_GraphNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GraphNode, UMaterialExpression), 0x0010000800002000, Z_Construct_UClass_UEdGraphNode_NoRegister());
				UProperty* NewProp_MaterialExpressionEditorY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionEditorY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaterialExpressionEditorY, UMaterialExpression), 0x0010000800000000);
				UProperty* NewProp_MaterialExpressionEditorX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialExpressionEditorX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaterialExpressionEditorX, UMaterialExpression), 0x0010000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpression.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Outputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Outputs, TEXT("ToolTip"), TEXT("The expression's outputs, which are set in default properties by derived classes."));
				MetaData->SetValue(NewProp_MenuCategories, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MenuCategories, TEXT("ToolTip"), TEXT("Localized categories to sort this expression into..."));
				MetaData->SetValue(NewProp_bShowOutputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowOutputs, TEXT("ToolTip"), TEXT("Whether to draw the expression's outputs."));
				MetaData->SetValue(NewProp_bShowInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowInputs, TEXT("ToolTip"), TEXT("Whether to draw the expression's inputs."));
				MetaData->SetValue(NewProp_bShaderInputData, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShaderInputData, TEXT("ToolTip"), TEXT("Whether the node represents an input to the shader or not.  Used to color the node's background."));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ToolTip"), TEXT("If true, show a collapsed version of the node"));
				MetaData->SetValue(NewProp_bHidePreviewWindow, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bHidePreviewWindow, TEXT("ToolTip"), TEXT("If true, do not render the preview window for the expression"));
				MetaData->SetValue(NewProp_bShowOutputNameOnPin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bShowOutputNameOnPin, TEXT("ToolTip"), TEXT("If true, use the output name as the label for the pin"));
				MetaData->SetValue(NewProp_bCommentBubbleVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bCommentBubbleVisible, TEXT("ToolTip"), TEXT("If true, the comment bubble will be visible in the graph editor"));
				MetaData->SetValue(NewProp_bIsParameterExpression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bIsParameterExpression, TEXT("ToolTip"), TEXT("Indicates that this is a 'parameter' type of expression and should always be loaded (ie not cooked away) because we might want the default parameter."));
				MetaData->SetValue(NewProp_bNeedToUpdatePreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bNeedToUpdatePreview, TEXT("ToolTip"), TEXT("If true, we should update the preview next render. This is set when changing bRealtimePreview."));
				MetaData->SetValue(NewProp_bRealtimePreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_bRealtimePreview, TEXT("ToolTip"), TEXT("Set to true by RecursiveUpdateRealtimePreview() if the expression's preview needs to be updated in realtime in the material editor."));
				MetaData->SetValue(NewProp_BorderColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_BorderColor, TEXT("ToolTip"), TEXT("Color of the expression's border outline."));
				MetaData->SetValue(NewProp_Desc, TEXT("Category"), TEXT("MaterialExpression"));
				MetaData->SetValue(NewProp_Desc, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Desc, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Desc, TEXT("ToolTip"), TEXT("A description that level designers can add (shows in the material editor UI)."));
				MetaData->SetValue(NewProp_Function, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Function, TEXT("ToolTip"), TEXT("The material function that this expression is being used with, if any.\nThis will be NULL if the expression belongs to a function that is currently being edited,"));
				MetaData->SetValue(NewProp_Material, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_Material, TEXT("ToolTip"), TEXT("The material that this expression is currently being compiled in.\nThis is not necessarily the object which owns this expression, for example a preview material compiling a material function's expressions."));
				MetaData->SetValue(NewProp_MaterialExpressionGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MaterialExpressionGuid, TEXT("ToolTip"), TEXT("GUID to uniquely identify this node, to help the tutorials out"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ToolTip"), TEXT("Expression's Graph representation"));
				MetaData->SetValue(NewProp_MaterialExpressionEditorY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
				MetaData->SetValue(NewProp_MaterialExpressionEditorX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpression.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpression(Z_Construct_UClass_UMaterialExpression, &UMaterialExpression::StaticClass, TEXT("UMaterialExpression"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpression);
	UClass* Z_Construct_UClass_UMaterialExpressionAbs_NoRegister()
	{
		return UMaterialExpressionAbs::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAbs()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAbs::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionAbs), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAbs.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Link to the input expression to be evaluated"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAbs(Z_Construct_UClass_UMaterialExpressionAbs, &UMaterialExpressionAbs::StaticClass, TEXT("UMaterialExpressionAbs"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAbs);
	UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS_NoRegister()
	{
		return UMaterialExpressionActorPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionActorPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionActorPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionActorPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionActorPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionActorPositionWS(Z_Construct_UClass_UMaterialExpressionActorPositionWS, &UMaterialExpressionActorPositionWS::StaticClass, TEXT("UMaterialExpressionActorPositionWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionActorPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionAdd_NoRegister()
	{
		return UMaterialExpressionAdd::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAdd()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAdd::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionAdd), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionAdd), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionAdd), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionAdd), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionAdd"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionAdd"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAdd.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAdd(Z_Construct_UClass_UMaterialExpressionAdd, &UMaterialExpressionAdd::StaticClass, TEXT("UMaterialExpressionAdd"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAdd);
	UClass* Z_Construct_UClass_UMaterialExpressionAppendVector_NoRegister()
	{
		return UMaterialExpressionAppendVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAppendVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAppendVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionAppendVector), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionAppendVector), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAppendVector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAppendVector(Z_Construct_UClass_UMaterialExpressionAppendVector, &UMaterialExpressionAppendVector::StaticClass, TEXT("UMaterialExpressionAppendVector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAppendVector);
	UClass* Z_Construct_UClass_UMaterialExpressionArccosine_NoRegister()
	{
		return UMaterialExpressionArccosine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArccosine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArccosine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArccosine), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArccosine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArccosine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArccosine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArccosine(Z_Construct_UClass_UMaterialExpressionArccosine, &UMaterialExpressionArccosine::StaticClass, TEXT("UMaterialExpressionArccosine"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArccosine);
	UClass* Z_Construct_UClass_UMaterialExpressionArccosineFast_NoRegister()
	{
		return UMaterialExpressionArccosineFast::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArccosineFast()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArccosineFast::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArccosineFast), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArccosineFast.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArccosineFast.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArccosineFast.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArccosineFast(Z_Construct_UClass_UMaterialExpressionArccosineFast, &UMaterialExpressionArccosineFast::StaticClass, TEXT("UMaterialExpressionArccosineFast"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArccosineFast);
	UClass* Z_Construct_UClass_UMaterialExpressionArcsine_NoRegister()
	{
		return UMaterialExpressionArcsine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArcsine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArcsine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArcsine), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArcsine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArcsine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArcsine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArcsine(Z_Construct_UClass_UMaterialExpressionArcsine, &UMaterialExpressionArcsine::StaticClass, TEXT("UMaterialExpressionArcsine"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArcsine);
	UClass* Z_Construct_UClass_UMaterialExpressionArcsineFast_NoRegister()
	{
		return UMaterialExpressionArcsineFast::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArcsineFast()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArcsineFast::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArcsineFast), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArcsineFast.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArcsineFast.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArcsineFast.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArcsineFast(Z_Construct_UClass_UMaterialExpressionArcsineFast, &UMaterialExpressionArcsineFast::StaticClass, TEXT("UMaterialExpressionArcsineFast"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArcsineFast);
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent_NoRegister()
	{
		return UMaterialExpressionArctangent::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArctangent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArctangent), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArctangent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArctangent(Z_Construct_UClass_UMaterialExpressionArctangent, &UMaterialExpressionArctangent::StaticClass, TEXT("UMaterialExpressionArctangent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArctangent);
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent2_NoRegister()
	{
		return UMaterialExpressionArctangent2::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent2()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArctangent2::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(X, UMaterialExpressionArctangent2), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Y, UMaterialExpressionArctangent2), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArctangent2.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2.h"));
				MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2.h"));
				MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArctangent2(Z_Construct_UClass_UMaterialExpressionArctangent2, &UMaterialExpressionArctangent2::StaticClass, TEXT("UMaterialExpressionArctangent2"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArctangent2);
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent2Fast_NoRegister()
	{
		return UMaterialExpressionArctangent2Fast::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArctangent2Fast()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArctangent2Fast::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(X, UMaterialExpressionArctangent2Fast), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Y, UMaterialExpressionArctangent2Fast), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArctangent2Fast.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2Fast.h"));
				MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2Fast.h"));
				MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangent2Fast.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArctangent2Fast(Z_Construct_UClass_UMaterialExpressionArctangent2Fast, &UMaterialExpressionArctangent2Fast::StaticClass, TEXT("UMaterialExpressionArctangent2Fast"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArctangent2Fast);
	UClass* Z_Construct_UClass_UMaterialExpressionArctangentFast_NoRegister()
	{
		return UMaterialExpressionArctangentFast::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionArctangentFast()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionArctangentFast::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionArctangentFast), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionArctangentFast.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangentFast.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionArctangentFast.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionArctangentFast(Z_Construct_UClass_UMaterialExpressionArctangentFast, &UMaterialExpressionArctangentFast::StaticClass, TEXT("UMaterialExpressionArctangentFast"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionArctangentFast);
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor_NoRegister()
	{
		return UMaterialExpressionAtmosphericFogColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAtmosphericFogColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WorldPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldPosition, UMaterialExpressionAtmosphericFogColor), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAtmosphericFogColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericFogColor.h"));
				MetaData->SetValue(NewProp_WorldPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericFogColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAtmosphericFogColor(Z_Construct_UClass_UMaterialExpressionAtmosphericFogColor, &UMaterialExpressionAtmosphericFogColor::StaticClass, TEXT("UMaterialExpressionAtmosphericFogColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAtmosphericFogColor);
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightColor_NoRegister()
	{
		return UMaterialExpressionAtmosphericLightColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAtmosphericLightColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAtmosphericLightColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericLightColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAtmosphericLightColor(Z_Construct_UClass_UMaterialExpressionAtmosphericLightColor, &UMaterialExpressionAtmosphericLightColor::StaticClass, TEXT("UMaterialExpressionAtmosphericLightColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAtmosphericLightColor);
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightVector_NoRegister()
	{
		return UMaterialExpressionAtmosphericLightVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAtmosphericLightVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAtmosphericLightVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAtmosphericLightVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAtmosphericLightVector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAtmosphericLightVector(Z_Construct_UClass_UMaterialExpressionAtmosphericLightVector, &UMaterialExpressionAtmosphericLightVector::StaticClass, TEXT("UMaterialExpressionAtmosphericLightVector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAtmosphericLightVector);
	UClass* Z_Construct_UClass_UMaterialExpressionBlackBody_NoRegister()
	{
		return UMaterialExpressionBlackBody::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBlackBody()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionBlackBody::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Temp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Temp"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Temp, UMaterialExpressionBlackBody), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(NewProp_Temp, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlackBody.h"));
				MetaData->SetValue(NewProp_Temp, TEXT("ToolTip"), TEXT("Temperature"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBlackBody(Z_Construct_UClass_UMaterialExpressionBlackBody, &UMaterialExpressionBlackBody::StaticClass, TEXT("UMaterialExpressionBlackBody"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBlackBody);
	UEnum* Z_Construct_UEnum_Engine_EMaterialAttributeBlend()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialAttributeBlend_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialAttributeBlend"), 0, Get_Z_Construct_UEnum_Engine_EMaterialAttributeBlend_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialAttributeBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialAttributeBlend::Blend")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialAttributeBlend::UseA")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialAttributeBlend::UseB")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialAttributeBlend::EMaterialAttributeBlend_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EMaterialAttributeBlend::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialAttributeBlend_CRC() { return 1821473475U; }
	UClass* Z_Construct_UClass_UMaterialExpressionBlendMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionBlendMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBlendMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionBlendMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VertexAttributeBlendType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexAttributeBlendType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(VertexAttributeBlendType, UMaterialExpressionBlendMaterialAttributes), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialAttributeBlend());
				UProperty* NewProp_PixelAttributeBlendType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PixelAttributeBlendType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PixelAttributeBlendType, UMaterialExpressionBlendMaterialAttributes), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialAttributeBlend());
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Alpha, UMaterialExpressionBlendMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionBlendMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionBlendMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(NewProp_VertexAttributeBlendType, TEXT("Category"), TEXT("MaterialAttributes"));
				MetaData->SetValue(NewProp_VertexAttributeBlendType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(NewProp_VertexAttributeBlendType, TEXT("ToolTip"), TEXT("Optionally skip blending attributes of this type."));
				MetaData->SetValue(NewProp_PixelAttributeBlendType, TEXT("Category"), TEXT("MaterialAttributes"));
				MetaData->SetValue(NewProp_PixelAttributeBlendType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(NewProp_PixelAttributeBlendType, TEXT("ToolTip"), TEXT("Optionally skip blending attributes of this type."));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBlendMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBlendMaterialAttributes(Z_Construct_UClass_UMaterialExpressionBlendMaterialAttributes, &UMaterialExpressionBlendMaterialAttributes::StaticClass, TEXT("UMaterialExpressionBlendMaterialAttributes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBlendMaterialAttributes);
	UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionBreakMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionBreakMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialAttributes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaterialAttributes, UMaterialExpressionBreakMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBreakMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBreakMaterialAttributes.h"));
				MetaData->SetValue(NewProp_MaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBreakMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBreakMaterialAttributes(Z_Construct_UClass_UMaterialExpressionBreakMaterialAttributes, &UMaterialExpressionBreakMaterialAttributes::StaticClass, TEXT("UMaterialExpressionBreakMaterialAttributes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBreakMaterialAttributes);
	UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset_NoRegister()
	{
		return UMaterialExpressionBumpOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionBumpOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionBumpOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionBumpOffset), 0x0010000000000001);
				UProperty* NewProp_ReferencePlane = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencePlane"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReferencePlane, UMaterialExpressionBumpOffset), 0x0010000000000001);
				UProperty* NewProp_HeightRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HeightRatio, UMaterialExpressionBumpOffset), 0x0010000000000001);
				UProperty* NewProp_HeightRatioInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightRatioInput"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HeightRatioInput, UMaterialExpressionBumpOffset), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Height, UMaterialExpressionBumpOffset), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionBumpOffset), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_ReferencePlane, TEXT("ToolTip"), TEXT("Perceived height as a fraction of width."));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("Category"), TEXT("MaterialExpressionBumpOffset"));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_HeightRatio, TEXT("OverridingInputProperty"), TEXT("HeightRatioInput"));
				MetaData->SetValue(NewProp_HeightRatioInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_HeightRatioInput, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionBumpOffset.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionBumpOffset(Z_Construct_UClass_UMaterialExpressionBumpOffset, &UMaterialExpressionBumpOffset::StaticClass, TEXT("UMaterialExpressionBumpOffset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionBumpOffset);
	UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS_NoRegister()
	{
		return UMaterialExpressionCameraPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCameraPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCameraPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCameraPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCameraPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCameraPositionWS(Z_Construct_UClass_UMaterialExpressionCameraPositionWS, &UMaterialExpressionCameraPositionWS::StaticClass, TEXT("UMaterialExpressionCameraPositionWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCameraPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS_NoRegister()
	{
		return UMaterialExpressionCameraVectorWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCameraVectorWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCameraVectorWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCameraVectorWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCameraVectorWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCameraVectorWS(Z_Construct_UClass_UMaterialExpressionCameraVectorWS, &UMaterialExpressionCameraVectorWS::StaticClass, TEXT("UMaterialExpressionCameraVectorWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCameraVectorWS);
	UClass* Z_Construct_UClass_UMaterialExpressionCeil_NoRegister()
	{
		return UMaterialExpressionCeil::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCeil()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCeil::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionCeil), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCeil.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCeil.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCeil.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCeil(Z_Construct_UClass_UMaterialExpressionCeil, &UMaterialExpressionCeil::StaticClass, TEXT("UMaterialExpressionCeil"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCeil);
	UEnum* Z_Construct_UEnum_Engine_EClampMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EClampMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EClampMode"), 0, Get_Z_Construct_UEnum_Engine_EClampMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EClampMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMODE_Clamp")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMODE_ClampMin")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMODE_ClampMax")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMODE_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EClampMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EClampMode_CRC() { return 4042709156U; }
	UClass* Z_Construct_UClass_UMaterialExpressionClamp_NoRegister()
	{
		return UMaterialExpressionClamp::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionClamp()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionClamp::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDefault"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDefault, UMaterialExpressionClamp), 0x0010000000000001);
				UProperty* NewProp_MinDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDefault"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinDefault, UMaterialExpressionClamp), 0x0010000000000001);
				UProperty* NewProp_ClampMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClampMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClampMode, UMaterialExpressionClamp), 0x0010000000000001, Z_Construct_UEnum_Engine_EClampMode());
				UProperty* NewProp_Max = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Max"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Max, UMaterialExpressionClamp), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Min = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Min"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Min, UMaterialExpressionClamp), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionClamp), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MaxDefault, TEXT("OverridingInputProperty"), TEXT("Max"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_MinDefault, TEXT("OverridingInputProperty"), TEXT("Min"));
				MetaData->SetValue(NewProp_ClampMode, TEXT("Category"), TEXT("MaterialExpressionClamp"));
				MetaData->SetValue(NewProp_ClampMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Max, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Max, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Max, TEXT("ToolTip"), TEXT("Defaults to 'MaxDefault' if not specified"));
				MetaData->SetValue(NewProp_Min, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
				MetaData->SetValue(NewProp_Min, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Min, TEXT("ToolTip"), TEXT("Defaults to 'MinDefault' if not specified"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClamp.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionClamp(Z_Construct_UClass_UMaterialExpressionClamp, &UMaterialExpressionClamp::StaticClass, TEXT("UMaterialExpressionClamp"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionClamp);
	UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter_NoRegister()
	{
		return UMaterialExpressionCollectionParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCollectionParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCollectionParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParameterId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParameterId, UMaterialExpressionCollectionParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionCollectionParameter), 0x0010000000000001);
				UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Collection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Collection, UMaterialExpressionCollectionParameter), 0x0010000000000001, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterId, TEXT("ToolTip"), TEXT("Id that is set from the name, and used to handle renaming of collection parameters."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionCollectionParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("Name of the parameter being referenced."));
				MetaData->SetValue(NewProp_Collection, TEXT("Category"), TEXT("MaterialExpressionCollectionParameter"));
				MetaData->SetValue(NewProp_Collection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCollectionParameter.h"));
				MetaData->SetValue(NewProp_Collection, TEXT("ToolTip"), TEXT("The Parameter Collection to use."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCollectionParameter(Z_Construct_UClass_UMaterialExpressionCollectionParameter, &UMaterialExpressionCollectionParameter::StaticClass, TEXT("UMaterialExpressionCollectionParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCollectionParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionComment_NoRegister()
	{
		return UMaterialExpressionComment::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionComment()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionComment::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CommentColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CommentColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CommentColor, UMaterialExpressionComment), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Text, UMaterialExpressionComment), 0x0010000000000001);
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeY, UMaterialExpressionComment), 0x0010000000000000);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeX, UMaterialExpressionComment), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("Category"), TEXT("MaterialExpressionComment"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_CommentColor, TEXT("ToolTip"), TEXT("Color to style comment with"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("MaterialExpressionComment"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComment.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionComment(Z_Construct_UClass_UMaterialExpressionComment, &UMaterialExpressionComment::StaticClass, TEXT("UMaterialExpressionComment"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionComment);
	UClass* Z_Construct_UClass_UMaterialExpressionComponentMask_NoRegister()
	{
		return UMaterialExpressionComponentMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionComponentMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionComponentMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(A, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(A, UMaterialExpressionComponentMask), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(A, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(B, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(B, UMaterialExpressionComponentMask), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(B, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(G, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("G"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(G, UMaterialExpressionComponentMask), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(G, UMaterialExpressionComponentMask), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(R, UMaterialExpressionComponentMask, uint8);
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(R, UMaterialExpressionComponentMask), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(R, UMaterialExpressionComponentMask), sizeof(uint8), false);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionComponentMask), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_A, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_B, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_G, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_G, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionComponentMask"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionComponentMask.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionComponentMask(Z_Construct_UClass_UMaterialExpressionComponentMask, &UMaterialExpressionComponentMask::StaticClass, TEXT("UMaterialExpressionComponentMask"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionComponentMask);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant_NoRegister()
	{
		return UMaterialExpressionConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(R, UMaterialExpressionConstant), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionConstant"));
				MetaData->SetValue(NewProp_R, TEXT("DisplayName"), TEXT("Value"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant(Z_Construct_UClass_UMaterialExpressionConstant, &UMaterialExpressionConstant::StaticClass, TEXT("UMaterialExpressionConstant"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector_NoRegister()
	{
		return UMaterialExpressionConstant2Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant2Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionConstant2Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_G = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("G"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(G, UMaterialExpressionConstant2Vector), 0x0010000000000001);
				UProperty* NewProp_R = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("R"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(R, UMaterialExpressionConstant2Vector), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(NewProp_G, TEXT("Category"), TEXT("MaterialExpressionConstant2Vector"));
				MetaData->SetValue(NewProp_G, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
				MetaData->SetValue(NewProp_R, TEXT("Category"), TEXT("MaterialExpressionConstant2Vector"));
				MetaData->SetValue(NewProp_R, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant2Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant2Vector(Z_Construct_UClass_UMaterialExpressionConstant2Vector, &UMaterialExpressionConstant2Vector::StaticClass, TEXT("UMaterialExpressionConstant2Vector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant2Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector_NoRegister()
	{
		return UMaterialExpressionConstant3Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant3Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionConstant3Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Constant, UMaterialExpressionConstant3Vector), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant3Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant3Vector.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("MaterialExpressionConstant3Vector"));
				MetaData->SetValue(NewProp_Constant, TEXT("DontUpdateWhileEditing"), TEXT(""));
				MetaData->SetValue(NewProp_Constant, TEXT("HideAlphaChannel"), TEXT(""));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant3Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant3Vector(Z_Construct_UClass_UMaterialExpressionConstant3Vector, &UMaterialExpressionConstant3Vector::StaticClass, TEXT("UMaterialExpressionConstant3Vector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant3Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector_NoRegister()
	{
		return UMaterialExpressionConstant4Vector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstant4Vector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionConstant4Vector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Constant, UMaterialExpressionConstant4Vector), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstant4Vector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant4Vector.h"));
				MetaData->SetValue(NewProp_Constant, TEXT("Category"), TEXT("MaterialExpressionConstant4Vector"));
				MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstant4Vector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstant4Vector(Z_Construct_UClass_UMaterialExpressionConstant4Vector, &UMaterialExpressionConstant4Vector::StaticClass, TEXT("UMaterialExpressionConstant4Vector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstant4Vector);
	UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale_NoRegister()
	{
		return UMaterialExpressionConstantBiasScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionConstantBiasScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionConstantBiasScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Scale, UMaterialExpressionConstantBiasScale), 0x0010000000000001);
				UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, UMaterialExpressionConstantBiasScale), 0x0010000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionConstantBiasScale), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("MaterialExpressionConstantBiasScale"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Bias, TEXT("Category"), TEXT("MaterialExpressionConstantBiasScale"));
				MetaData->SetValue(NewProp_Bias, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionConstantBiasScale.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionConstantBiasScale(Z_Construct_UClass_UMaterialExpressionConstantBiasScale, &UMaterialExpressionConstantBiasScale::StaticClass, TEXT("UMaterialExpressionConstantBiasScale"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionConstantBiasScale);
	UClass* Z_Construct_UClass_UMaterialExpressionCosine_NoRegister()
	{
		return UMaterialExpressionCosine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCosine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCosine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionCosine), 0x0010000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionCosine), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionCosine"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCosine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCosine(Z_Construct_UClass_UMaterialExpressionCosine, &UMaterialExpressionCosine::StaticClass, TEXT("UMaterialExpressionCosine"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCosine);
	UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct_NoRegister()
	{
		return UMaterialExpressionCrossProduct::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCrossProduct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCrossProduct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionCrossProduct), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionCrossProduct), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCrossProduct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCrossProduct(Z_Construct_UClass_UMaterialExpressionCrossProduct, &UMaterialExpressionCrossProduct::StaticClass, TEXT("UMaterialExpressionCrossProduct"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCrossProduct);
	UEnum* Z_Construct_UEnum_Engine_ECustomMaterialOutputType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ECustomMaterialOutputType"), 0, Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECustomMaterialOutputType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMOT_Float1")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMOT_Float2")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMOT_Float3")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMOT_Float4")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CMOT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ECustomMaterialOutputType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECustomMaterialOutputType_CRC() { return 4229564463U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCustomInput()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCustomInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CustomInput"), sizeof(FCustomInput), Get_Z_Construct_UScriptStruct_FCustomInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CustomInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCustomInput>, EStructFlags(0x00000001));
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, FCustomInput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InputName, FCustomInput), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
			MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("Category"), TEXT("CustomInput"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCustomInput_CRC() { return 2526541181U; }
	UClass* Z_Construct_UClass_UMaterialExpressionCustom_NoRegister()
	{
		return UMaterialExpressionCustom::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCustom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCustom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionCustom), 0x0010000000000001);
				UProperty* NewProp_Inputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Inputs, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCustomInput());
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionCustom), 0x0010000000000001);
				UProperty* NewProp_OutputType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OutputType, UMaterialExpressionCustom), 0x0010000000000001, Z_Construct_UEnum_Engine_ECustomMaterialOutputType());
				UProperty* NewProp_Code = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Code"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Code, UMaterialExpressionCustom), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_OutputType, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_OutputType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Code, TEXT("Category"), TEXT("MaterialExpressionCustom"));
				MetaData->SetValue(NewProp_Code, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustom.h"));
				MetaData->SetValue(NewProp_Code, TEXT("MultiLine"), TEXT("TRUE"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCustom(Z_Construct_UClass_UMaterialExpressionCustom, &UMaterialExpressionCustom::StaticClass, TEXT("UMaterialExpressionCustom"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCustom);
	UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput_NoRegister()
	{
		return UMaterialExpressionCustomOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionCustomOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionCustomOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionCustomOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionCustomOutput.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionCustomOutput(Z_Construct_UClass_UMaterialExpressionCustomOutput, &UMaterialExpressionCustomOutput::StaticClass, TEXT("UMaterialExpressionCustomOutput"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionCustomOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionClearCoatNormalCustomOutput_NoRegister()
	{
		return UMaterialExpressionClearCoatNormalCustomOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionClearCoatNormalCustomOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionCustomOutput();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionClearCoatNormalCustomOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionClearCoatNormalCustomOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionClearCoatNormalCustomOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClearCoatNormalCustomOutput.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionClearCoatNormalCustomOutput.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("true"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionClearCoatNormalCustomOutput(Z_Construct_UClass_UMaterialExpressionClearCoatNormalCustomOutput, &UMaterialExpressionClearCoatNormalCustomOutput::StaticClass, TEXT("UMaterialExpressionClearCoatNormalCustomOutput"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionClearCoatNormalCustomOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionTangentOutput_NoRegister()
	{
		return UMaterialExpressionTangentOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTangentOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionCustomOutput();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTangentOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTangentOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTangentOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTangentOutput.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTangentOutput.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("true"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTangentOutput(Z_Construct_UClass_UMaterialExpressionTangentOutput, &UMaterialExpressionTangentOutput::StaticClass, TEXT("UMaterialExpressionTangentOutput"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTangentOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionDDX_NoRegister()
	{
		return UMaterialExpressionDDX::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDDX()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDDX::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionDDX), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDX.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The value we want to compute ddx/ddy from"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDDX(Z_Construct_UClass_UMaterialExpressionDDX, &UMaterialExpressionDDX::StaticClass, TEXT("UMaterialExpressionDDX"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDDX);
	UClass* Z_Construct_UClass_UMaterialExpressionDDY_NoRegister()
	{
		return UMaterialExpressionDDY::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDDY()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDDY::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionDDY), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDDY.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The value we want to compute ddx/ddy from"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDDY(Z_Construct_UClass_UMaterialExpressionDDY, &UMaterialExpressionDDY::StaticClass, TEXT("UMaterialExpressionDDY"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDDY);
	UClass* Z_Construct_UClass_UMaterialExpressionDecalDerivative_NoRegister()
	{
		return UMaterialExpressionDecalDerivative::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDecalDerivative()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDecalDerivative::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDecalDerivative.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalDerivative.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDecalDerivative(Z_Construct_UClass_UMaterialExpressionDecalDerivative, &UMaterialExpressionDecalDerivative::StaticClass, TEXT("UMaterialExpressionDecalDerivative"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDecalDerivative);
	UClass* Z_Construct_UClass_UMaterialExpressionDecalLifetimeOpacity_NoRegister()
	{
		return UMaterialExpressionDecalLifetimeOpacity::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDecalLifetimeOpacity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDecalLifetimeOpacity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDecalLifetimeOpacity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalLifetimeOpacity.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDecalLifetimeOpacity(Z_Construct_UClass_UMaterialExpressionDecalLifetimeOpacity, &UMaterialExpressionDecalLifetimeOpacity::StaticClass, TEXT("UMaterialExpressionDecalLifetimeOpacity"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDecalLifetimeOpacity);
	UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel_NoRegister()
	{
		return UMaterialExpressionDecalMipmapLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDecalMipmapLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstHeight, UMaterialExpressionDecalMipmapLevel), 0x0010000000000001);
				UProperty* NewProp_ConstWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstWidth, UMaterialExpressionDecalMipmapLevel), 0x0010000000000001);
				UProperty* NewProp_TextureSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TextureSize, UMaterialExpressionDecalMipmapLevel), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("Category"), TEXT("MaterialExpressionDecalMipmapLevel"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstHeight, TEXT("OverridingInputProperty"), TEXT("TextureSize"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("Category"), TEXT("MaterialExpressionDecalMipmapLevel"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("OverridingInputProperty"), TEXT("TextureSize"));
				MetaData->SetValue(NewProp_ConstWidth, TEXT("ToolTip"), TEXT("only used if TextureSize is not hooked up"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDecalMipmapLevel.h"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_TextureSize, TEXT("ToolTip"), TEXT("Defaults to '(Const Width, Const Height)' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDecalMipmapLevel(Z_Construct_UClass_UMaterialExpressionDecalMipmapLevel, &UMaterialExpressionDecalMipmapLevel::StaticClass, TEXT("UMaterialExpressionDecalMipmapLevel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDecalMipmapLevel);
	UClass* Z_Construct_UClass_UMaterialExpressionDepthFade_NoRegister()
	{
		return UMaterialExpressionDepthFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDepthFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDepthFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FadeDistanceDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeDistanceDefault"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeDistanceDefault, UMaterialExpressionDepthFade), 0x0010000000000001);
				UProperty* NewProp_OpacityDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityDefault"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OpacityDefault, UMaterialExpressionDepthFade), 0x0010000000000001);
				UProperty* NewProp_FadeDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FadeDistance, UMaterialExpressionDepthFade), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InOpacity, UMaterialExpressionDepthFade), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("Category"), TEXT("MaterialExpressionDepthFade"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("OverridingInputProperty"), TEXT("FadeDistance"));
				MetaData->SetValue(NewProp_FadeDistanceDefault, TEXT("ToolTip"), TEXT("World space distance over which the fade should take place.  This is used when FadeDistance is unconnected."));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("Category"), TEXT("MaterialExpressionDepthFade"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("OverridingInputProperty"), TEXT("InOpacity"));
				MetaData->SetValue(NewProp_OpacityDefault, TEXT("ToolTip"), TEXT("Opacity which will be scaled by the result of the fade.  This is used when InOpacity is unconnected."));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_FadeDistance, TEXT("ToolTip"), TEXT("Defaults to 'FadeDistanceDefault' if not specified"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthFade.h"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_InOpacity, TEXT("ToolTip"), TEXT("Defaults to 'OpacityDefault' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDepthFade(Z_Construct_UClass_UMaterialExpressionDepthFade, &UMaterialExpressionDepthFade::StaticClass, TEXT("UMaterialExpressionDepthFade"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDepthFade);
	UEnum* Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDepthOfFieldFunctionValue"), 0, Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDepthOfFieldFunctionValue"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TDOF_NearAndFarMask")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TDOF_NearMask")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TDOF_FarMask")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TDOF_CircleOfConfusionRadius")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TDOF_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EDepthOfFieldFunctionValue");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_CircleOfConfusionRadius.ToolTip"), TEXT("in pixels, only works for CircleDOF, use Abs for the actual radius as the sign of the value indicates near out of focus, positive indicates far out of focus"));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_FarMask.ToolTip"), TEXT("0:in Focus or Near .. 1:Far."));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_NearAndFarMask.ToolTip"), TEXT("0:in Focus .. 1:Near or Far."));
			MetaData->SetValue(ReturnEnum, TEXT("TDOF_NearMask.ToolTip"), TEXT("0:in Focus or Far .. 1:Near."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Note: The index is used to map the enum to different code in the shader"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue_CRC() { return 1328066147U; }
	UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction_NoRegister()
	{
		return UMaterialExpressionDepthOfFieldFunction::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDepthOfFieldFunction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Depth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Depth"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Depth, UMaterialExpressionDepthOfFieldFunction), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_FunctionValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FunctionValue, UMaterialExpressionDepthOfFieldFunction), 0x0010000000000001, Z_Construct_UEnum_Engine_EDepthOfFieldFunctionValue());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_Depth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_Depth, TEXT("ToolTip"), TEXT("usually nothing or PixelDepth"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("Category"), TEXT("MaterialExpressionDepthOfFieldFunction"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDepthOfFieldFunction.h"));
				MetaData->SetValue(NewProp_FunctionValue, TEXT("ToolTip"), TEXT("Determines the mapping place to use on the terrain."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDepthOfFieldFunction(Z_Construct_UClass_UMaterialExpressionDepthOfFieldFunction, &UMaterialExpressionDepthOfFieldFunction::StaticClass, TEXT("UMaterialExpressionDepthOfFieldFunction"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDepthOfFieldFunction);
	UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ_NoRegister()
	{
		return UMaterialExpressionDeriveNormalZ::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDeriveNormalZ()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDeriveNormalZ::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InXY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InXY"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InXY, UMaterialExpressionDeriveNormalZ), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDeriveNormalZ.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDeriveNormalZ.h"));
				MetaData->SetValue(NewProp_InXY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDeriveNormalZ.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDeriveNormalZ(Z_Construct_UClass_UMaterialExpressionDeriveNormalZ, &UMaterialExpressionDeriveNormalZ::StaticClass, TEXT("UMaterialExpressionDeriveNormalZ"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDeriveNormalZ);
	UClass* Z_Construct_UClass_UMaterialExpressionDesaturation_NoRegister()
	{
		return UMaterialExpressionDesaturation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDesaturation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDesaturation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LuminanceFactors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LuminanceFactors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LuminanceFactors, UMaterialExpressionDesaturation), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Fraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Fraction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Fraction, UMaterialExpressionDesaturation), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionDesaturation), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_LuminanceFactors, TEXT("Category"), TEXT("MaterialExpressionDesaturation"));
				MetaData->SetValue(NewProp_LuminanceFactors, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Fraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDesaturation.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Outputs: Lerp(Input,dot(Input,LuminanceFactors)),Fraction)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDesaturation(Z_Construct_UClass_UMaterialExpressionDesaturation, &UMaterialExpressionDesaturation::StaticClass, TEXT("UMaterialExpressionDesaturation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDesaturation);
	UClass* Z_Construct_UClass_UMaterialExpressionDistance_NoRegister()
	{
		return UMaterialExpressionDistance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDistance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDistance), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDistance), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistance.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistance(Z_Construct_UClass_UMaterialExpressionDistance, &UMaterialExpressionDistance::StaticClass, TEXT("UMaterialExpressionDistance"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistance);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade_NoRegister()
	{
		return UMaterialExpressionDistanceCullFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceCullFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDistanceCullFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceCullFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceCullFade.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceCullFade(Z_Construct_UClass_UMaterialExpressionDistanceCullFade, &UMaterialExpressionDistanceCullFade::StaticClass, TEXT("UMaterialExpressionDistanceCullFade"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceCullFade);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient_NoRegister()
	{
		return UMaterialExpressionDistanceFieldGradient::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDistanceFieldGradient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionDistanceFieldGradient), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceFieldGradient.h"));
				MetaData->SetValue(NewProp_Position, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("Defaults to current world position if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceFieldGradient(Z_Construct_UClass_UMaterialExpressionDistanceFieldGradient, &UMaterialExpressionDistanceFieldGradient::StaticClass, TEXT("UMaterialExpressionDistanceFieldGradient"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceFieldGradient);
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface_NoRegister()
	{
		return UMaterialExpressionDistanceToNearestSurface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDistanceToNearestSurface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionDistanceToNearestSurface), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDistanceToNearestSurface.h"));
				MetaData->SetValue(NewProp_Position, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("Defaults to current world position if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDistanceToNearestSurface(Z_Construct_UClass_UMaterialExpressionDistanceToNearestSurface, &UMaterialExpressionDistanceToNearestSurface::StaticClass, TEXT("UMaterialExpressionDistanceToNearestSurface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDistanceToNearestSurface);
	UClass* Z_Construct_UClass_UMaterialExpressionDivide_NoRegister()
	{
		return UMaterialExpressionDivide::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDivide()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDivide::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionDivide), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionDivide), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDivide), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDivide), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionDivide"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionDivide"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDivide.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDivide(Z_Construct_UClass_UMaterialExpressionDivide, &UMaterialExpressionDivide::StaticClass, TEXT("UMaterialExpressionDivide"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDivide);
	UClass* Z_Construct_UClass_UMaterialExpressionDotProduct_NoRegister()
	{
		return UMaterialExpressionDotProduct::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDotProduct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDotProduct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionDotProduct), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionDotProduct), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDotProduct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDotProduct(Z_Construct_UClass_UMaterialExpressionDotProduct, &UMaterialExpressionDotProduct::StaticClass, TEXT("UMaterialExpressionDotProduct"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDotProduct);
	UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter_NoRegister()
	{
		return UMaterialExpressionDynamicParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionDynamicParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionDynamicParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionDynamicParameter), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ParamNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ParamNames, UMaterialExpressionDynamicParameter), 0x0010000000000041);
				UProperty* NewProp_ParamNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParamNames, TEXT("ParamNames"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionDynamicParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("Category"), TEXT("MaterialExpressionDynamicParameter"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionDynamicParameter.h"));
				MetaData->SetValue(NewProp_ParamNames, TEXT("ToolTip"), TEXT("The names of the parameters.\nThese will show up in Cascade when editing a particle system\nthat uses the material it is in..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionDynamicParameter(Z_Construct_UClass_UMaterialExpressionDynamicParameter, &UMaterialExpressionDynamicParameter::StaticClass, TEXT("UMaterialExpressionDynamicParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionDynamicParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation_NoRegister()
	{
		return UMaterialExpressionEyeAdaptation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionEyeAdaptation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionEyeAdaptation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionEyeAdaptation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionEyeAdaptation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Provides access to the EyeAdaptation render target."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionEyeAdaptation(Z_Construct_UClass_UMaterialExpressionEyeAdaptation, &UMaterialExpressionEyeAdaptation::StaticClass, TEXT("UMaterialExpressionEyeAdaptation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionEyeAdaptation);
	UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch_NoRegister()
	{
		return UMaterialExpressionFeatureLevelSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFeatureLevelSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionFeatureLevelSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_Inputs->ArrayDim = CPP_ARRAY_DIM(Inputs, UMaterialExpressionFeatureLevelSwitch);
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionFeatureLevelSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFeatureLevelSwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Default connection, used when a certain feature level doesn't have an override."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFeatureLevelSwitch(Z_Construct_UClass_UMaterialExpressionFeatureLevelSwitch, &UMaterialExpressionFeatureLevelSwitch::StaticClass, TEXT("UMaterialExpressionFeatureLevelSwitch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFeatureLevelSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionFloor_NoRegister()
	{
		return UMaterialExpressionFloor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFloor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFloor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionFloor), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFloor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFloor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFloor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFloor(Z_Construct_UClass_UMaterialExpressionFloor, &UMaterialExpressionFloor::StaticClass, TEXT("UMaterialExpressionFloor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFloor);
	UClass* Z_Construct_UClass_UMaterialExpressionFmod_NoRegister()
	{
		return UMaterialExpressionFmod::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFmod()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFmod::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionFmod), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionFmod), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFmod.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFmod(Z_Construct_UClass_UMaterialExpressionFmod, &UMaterialExpressionFmod::StaticClass, TEXT("UMaterialExpressionFmod"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFmod);
	UClass* Z_Construct_UClass_UMaterialExpressionFontSample_NoRegister()
	{
		return UMaterialExpressionFontSample::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFontSample()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFontSample::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FontTexturePage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FontTexturePage"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FontTexturePage, UMaterialExpressionFontSample), 0x0010000000000001);
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Font, UMaterialExpressionFontSample), 0x0010000000000001, Z_Construct_UClass_UFont_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("Category"), TEXT("MaterialExpressionFontSample"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_FontTexturePage, TEXT("ToolTip"), TEXT("allow access to the various font pages"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("MaterialExpressionFontSample"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSample.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("font resource that will be sampled"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFontSample(Z_Construct_UClass_UMaterialExpressionFontSample, &UMaterialExpressionFontSample::StaticClass, TEXT("UMaterialExpressionFontSample"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFontSample);
	UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter_NoRegister()
	{
		return UMaterialExpressionFontSampleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFontSampleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionFontSample();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFontSampleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionFontSampleParameter), 0x0010000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionFontSampleParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionFontSampleParameter), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionFontSampleParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionFontSampleParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFontSampleParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("name to be referenced when we want to find and set thsi parameter"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFontSampleParameter(Z_Construct_UClass_UMaterialExpressionFontSampleParameter, &UMaterialExpressionFontSampleParameter::StaticClass, TEXT("UMaterialExpressionFontSampleParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFontSampleParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionFrac_NoRegister()
	{
		return UMaterialExpressionFrac::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFrac()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFrac::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionFrac), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFrac.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFrac.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFrac.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFrac(Z_Construct_UClass_UMaterialExpressionFrac, &UMaterialExpressionFrac::StaticClass, TEXT("UMaterialExpressionFrac"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFrac);
	UClass* Z_Construct_UClass_UMaterialExpressionFresnel_NoRegister()
	{
		return UMaterialExpressionFresnel::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFresnel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFresnel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterialExpressionFresnel), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_BaseReflectFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseReflectFraction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BaseReflectFraction, UMaterialExpressionFresnel), 0x0010000000000001);
				UProperty* NewProp_BaseReflectFractionIn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseReflectFractionIn"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BaseReflectFractionIn, UMaterialExpressionFresnel), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Exponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Exponent, UMaterialExpressionFresnel), 0x0010000000000001);
				UProperty* NewProp_ExponentIn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExponentIn"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExponentIn, UMaterialExpressionFresnel), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Normal, TEXT("ToolTip"), TEXT("Defaults to Pixel World Normal if not specified"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("Category"), TEXT("MaterialExpressionFresnel"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("OverridingInputProperty"), TEXT("BaseReflectFractionIn"));
				MetaData->SetValue(NewProp_BaseReflectFraction, TEXT("ToolTip"), TEXT("Specifies the fraction of specular reflection when the surfaces is viewed from straight on.\nA value of 1 effectively disables Fresnel."));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_BaseReflectFractionIn, TEXT("ToolTip"), TEXT("Defaults to 'BaseReflectFraction' if not specified"));
				MetaData->SetValue(NewProp_Exponent, TEXT("Category"), TEXT("MaterialExpressionFresnel"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_Exponent, TEXT("OverridingInputProperty"), TEXT("ExponentIn"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ToolTip"), TEXT("The exponent to pass into the pow() function"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFresnel.h"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_ExponentIn, TEXT("ToolTip"), TEXT("Defaults to 'Exponent' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFresnel(Z_Construct_UClass_UMaterialExpressionFresnel, &UMaterialExpressionFresnel::StaticClass, TEXT("UMaterialExpressionFresnel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFresnel);
	UEnum* Z_Construct_UEnum_Engine_EFunctionInputType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EFunctionInputType"), 0, Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFunctionInputType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_Scalar")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_Vector2")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_Vector3")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_Vector4")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_Texture2D")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_TextureCube")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_StaticBool")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_MaterialAttributes")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("FunctionInput_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EFunctionInputType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Supported input types"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EFunctionInputType_CRC() { return 1312578116U; }
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister()
	{
		return UMaterialExpressionFunctionInput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionInput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFunctionInput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCompilingFunctionPreview, UMaterialExpressionFunctionInput, uint8);
				UProperty* NewProp_bCompilingFunctionPreview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCompilingFunctionPreview"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCompilingFunctionPreview, UMaterialExpressionFunctionInput), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bCompilingFunctionPreview, UMaterialExpressionFunctionInput), sizeof(uint8), false);
				UProperty* NewProp_SortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SortPriority, UMaterialExpressionFunctionInput), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput, uint8);
				UProperty* NewProp_bUsePreviewValueAsDefault = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePreviewValueAsDefault"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUsePreviewValueAsDefault, UMaterialExpressionFunctionInput), sizeof(uint8), false);
				UProperty* NewProp_PreviewValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PreviewValue, UMaterialExpressionFunctionInput), 0x0010000000000001, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_InputType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InputType, UMaterialExpressionFunctionInput), 0x0010000000000001, Z_Construct_UEnum_Engine_EFunctionInputType());
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Id, UMaterialExpressionFunctionInput), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionFunctionInput), 0x0010000000000001);
				UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InputName, UMaterialExpressionFunctionInput), 0x0010000000000001);
				UProperty* NewProp_Preview = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Preview"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Preview, UMaterialExpressionFunctionInput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bCompilingFunctionPreview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bCompilingFunctionPreview, TEXT("ToolTip"), TEXT("true when this expression is being compiled in a function preview,\nfalse when this expression is being compiled into a material that uses the function.\nOnly valid in Compile()"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ToolTip"), TEXT("Controls where the input is displayed relative to the other inputs."));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_bUsePreviewValueAsDefault, TEXT("ToolTip"), TEXT("Whether to use the preview value or texture as the default value for this input."));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("OverridingInputProperty"), TEXT("Preview"));
				MetaData->SetValue(NewProp_PreviewValue, TEXT("ToolTip"), TEXT("Value used to preview this input when editing the material function."));
				MetaData->SetValue(NewProp_InputType, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_InputType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_InputType, TEXT("ToolTip"), TEXT("Type of this input.\nInput code chunks will be cast to this type, and a compiler error will be emitted if the cast fails."));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Id of this input, used to maintain references through name changes."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("The input's description, which will be used as a tooltip on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_InputName, TEXT("Category"), TEXT("MaterialExpressionFunctionInput"));
				MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("The input's name, which will be drawn on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_Preview, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionInput.h"));
				MetaData->SetValue(NewProp_Preview, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Preview, TEXT("ToolTip"), TEXT("Used for previewing when editing the function, or when bUsePreviewValueAsDefault is enabled."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFunctionInput(Z_Construct_UClass_UMaterialExpressionFunctionInput, &UMaterialExpressionFunctionInput::StaticClass, TEXT("UMaterialExpressionFunctionInput"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFunctionInput);
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister()
	{
		return UMaterialExpressionFunctionOutput::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionFunctionOutput()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionFunctionOutput::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Id, UMaterialExpressionFunctionOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLastPreviewed, UMaterialExpressionFunctionOutput, uint8);
				UProperty* NewProp_bLastPreviewed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLastPreviewed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLastPreviewed, UMaterialExpressionFunctionOutput), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bLastPreviewed, UMaterialExpressionFunctionOutput), sizeof(uint8), false);
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionFunctionOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_SortPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SortPriority, UMaterialExpressionFunctionOutput), 0x0010000000000001);
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialExpressionFunctionOutput), 0x0010000000000001);
				UProperty* NewProp_OutputName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OutputName, UMaterialExpressionFunctionOutput), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Id of this input, used to maintain references through name changes."));
				MetaData->SetValue(NewProp_bLastPreviewed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_bLastPreviewed, TEXT("ToolTip"), TEXT("Whether this output was previewed the last time this function was edited."));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Stores the expression in the material function connected to this output."));
				MetaData->SetValue(NewProp_SortPriority, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_SortPriority, TEXT("ToolTip"), TEXT("Controls where the output is displayed relative to the other outputs."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_Description, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("The output's description, which will be used as a tooltip on the connector in function call expressions that use this function."));
				MetaData->SetValue(NewProp_OutputName, TEXT("Category"), TEXT("MaterialExpressionFunctionOutput"));
				MetaData->SetValue(NewProp_OutputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionFunctionOutput.h"));
				MetaData->SetValue(NewProp_OutputName, TEXT("ToolTip"), TEXT("The output's name, which will be drawn on the connector in function call expressions that use this function."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionFunctionOutput(Z_Construct_UClass_UMaterialExpressionFunctionOutput, &UMaterialExpressionFunctionOutput::StaticClass, TEXT("UMaterialExpressionFunctionOutput"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionFunctionOutput);
	UClass* Z_Construct_UClass_UMaterialExpressionGetMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionGetMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionGetMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionGetMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AttributeGetTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttributeGetTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AttributeGetTypes, UMaterialExpressionGetMaterialAttributes), 0x0010000000000001);
				UProperty* NewProp_AttributeGetTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AttributeGetTypes, TEXT("AttributeGetTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialAttributes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaterialAttributes, UMaterialExpressionGetMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionGetMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGetMaterialAttributes.h"));
				MetaData->SetValue(NewProp_AttributeGetTypes, TEXT("Category"), TEXT("MaterialAttributes"));
				MetaData->SetValue(NewProp_AttributeGetTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGetMaterialAttributes.h"));
				MetaData->SetValue(NewProp_MaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGetMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionGetMaterialAttributes(Z_Construct_UClass_UMaterialExpressionGetMaterialAttributes, &UMaterialExpressionGetMaterialAttributes::StaticClass, TEXT("UMaterialExpressionGetMaterialAttributes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionGetMaterialAttributes);
	UClass* Z_Construct_UClass_UMaterialExpressionGIReplace_NoRegister()
	{
		return UMaterialExpressionGIReplace::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionGIReplace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionGIReplace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DynamicIndirect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DynamicIndirect"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DynamicIndirect, UMaterialExpressionGIReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_StaticIndirect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticIndirect"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StaticIndirect, UMaterialExpressionGIReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionGIReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_DynamicIndirect, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_DynamicIndirect, TEXT("ToolTip"), TEXT("Used for dynamic indirect lighting e.g. Light Propagation Volumes"));
				MetaData->SetValue(NewProp_StaticIndirect, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_StaticIndirect, TEXT("ToolTip"), TEXT("Used for baked indirect lighting e.g. Lightmass"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionGIReplace.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Used for direct lighting computations e.g. real-time shaders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionGIReplace(Z_Construct_UClass_UMaterialExpressionGIReplace, &UMaterialExpressionGIReplace::StaticClass, TEXT("UMaterialExpressionGIReplace"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionGIReplace);
	UClass* Z_Construct_UClass_UMaterialExpressionIf_NoRegister()
	{
		return UMaterialExpressionIf::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionIf()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionIf::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstAEqualsB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstAEqualsB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstAEqualsB_DEPRECATED, UMaterialExpressionIf), 0x0010000020000000);
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionIf), 0x0010000000000001);
				UProperty* NewProp_EqualsThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EqualsThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EqualsThreshold, UMaterialExpressionIf), 0x0010000000000001);
				UProperty* NewProp_ALessThanB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ALessThanB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ALessThanB, UMaterialExpressionIf), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AEqualsB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AEqualsB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AEqualsB, UMaterialExpressionIf), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AGreaterThanB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AGreaterThanB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AGreaterThanB, UMaterialExpressionIf), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionIf), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionIf), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstAEqualsB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionIf"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_EqualsThreshold, TEXT("Category"), TEXT("MaterialExpressionIf"));
				MetaData->SetValue(NewProp_EqualsThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_ALessThanB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_AEqualsB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_AEqualsB, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_AEqualsB, TEXT("ToolTip"), TEXT("Defaults to 'A > B' if not specified"));
				MetaData->SetValue(NewProp_AGreaterThanB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionIf.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionIf(Z_Construct_UClass_UMaterialExpressionIf, &UMaterialExpressionIf::StaticClass, TEXT("UMaterialExpressionIf"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionIf);
	UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs_NoRegister()
	{
		return UMaterialExpressionLightmapUVs::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightmapUVs()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionLightmapUVs::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightmapUVs.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmapUVs.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightmapUVs(Z_Construct_UClass_UMaterialExpressionLightmapUVs, &UMaterialExpressionLightmapUVs::StaticClass, TEXT("UMaterialExpressionLightmapUVs"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightmapUVs);
	UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace_NoRegister()
	{
		return UMaterialExpressionLightmassReplace::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightmassReplace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionLightmassReplace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Lightmass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Lightmass"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Lightmass, UMaterialExpressionLightmassReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Realtime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Realtime"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Realtime, UMaterialExpressionLightmassReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(NewProp_Lightmass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
				MetaData->SetValue(NewProp_Realtime, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightmassReplace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightmassReplace(Z_Construct_UClass_UMaterialExpressionLightmassReplace, &UMaterialExpressionLightmassReplace::StaticClass, TEXT("UMaterialExpressionLightmassReplace"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightmassReplace);
	UClass* Z_Construct_UClass_UMaterialExpressionLightVector_NoRegister()
	{
		return UMaterialExpressionLightVector::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLightVector()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionLightVector::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLightVector.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLightVector.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLightVector(Z_Construct_UClass_UMaterialExpressionLightVector, &UMaterialExpressionLightVector::StaticClass, TEXT("UMaterialExpressionLightVector"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLightVector);
	UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate_NoRegister()
	{
		return UMaterialExpressionLinearInterpolate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLinearInterpolate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionLinearInterpolate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstAlpha, UMaterialExpressionLinearInterpolate), 0x0010000000000001);
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionLinearInterpolate), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionLinearInterpolate), 0x0010000000000001);
				UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Alpha, UMaterialExpressionLinearInterpolate), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionLinearInterpolate), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionLinearInterpolate), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("OverridingInputProperty"), TEXT("Alpha"));
				MetaData->SetValue(NewProp_ConstAlpha, TEXT("ToolTip"), TEXT("only used if Alpha is not hooked up"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionLinearInterpolate"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_Alpha, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Defaults to 'ConstAlpha' if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLinearInterpolate.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLinearInterpolate(Z_Construct_UClass_UMaterialExpressionLinearInterpolate, &UMaterialExpressionLinearInterpolate::StaticClass, TEXT("UMaterialExpressionLinearInterpolate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLinearInterpolate);
	UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2_NoRegister()
	{
		return UMaterialExpressionLogarithm2::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionLogarithm2()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionLogarithm2::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(X, UMaterialExpressionLogarithm2), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionLogarithm2.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLogarithm2.h"));
				MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionLogarithm2.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionLogarithm2(Z_Construct_UClass_UMaterialExpressionLogarithm2, &UMaterialExpressionLogarithm2::StaticClass, TEXT("UMaterialExpressionLogarithm2"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionLogarithm2);
	UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionMakeMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMakeMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PixelDepthOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PixelDepthOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PixelDepthOffset, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_CustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomizedUVs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomizedUVs, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_CustomizedUVs->ArrayDim = CPP_ARRAY_DIM(CustomizedUVs, UMaterialExpressionMakeMaterialAttributes);
				UProperty* NewProp_Refraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Refraction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Refraction, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_AmbientOcclusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmbientOcclusion"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AmbientOcclusion, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_ClearCoatRoughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoatRoughness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearCoatRoughness, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_ClearCoat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoat"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearCoat, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_TessellationMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TessellationMultiplier, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_WorldDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldDisplacement, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_WorldPositionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldPositionOffset, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_OpacityMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMask"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OpacityMask, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Opacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Opacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Opacity, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_EmissiveColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmissiveColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmissiveColor, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Roughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roughness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Roughness, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Specular = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Specular"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Specular, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Metallic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metallic"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Metallic, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_BaseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BaseColor, UMaterialExpressionMakeMaterialAttributes), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_PixelDepthOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Refraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_ClearCoatRoughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_ClearCoat, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_OpacityMask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Roughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Specular, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Metallic, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
				MetaData->SetValue(NewProp_BaseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMakeMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMakeMaterialAttributes(Z_Construct_UClass_UMaterialExpressionMakeMaterialAttributes, &UMaterialExpressionMakeMaterialAttributes::StaticClass, TEXT("UMaterialExpressionMakeMaterialAttributes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMakeMaterialAttributes);
	UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionOutput()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("FunctionExpressionOutput"), sizeof(FFunctionExpressionOutput), Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FunctionExpressionOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFunctionExpressionOutput>, EStructFlags(0x00000001));
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, FFunctionExpressionOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionOutput());
			UProperty* NewProp_ExpressionOutputId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionOutputId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionOutputId, FFunctionExpressionOutput), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ExpressionOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ExpressionOutput, FFunctionExpressionOutput), 0x0010000000002000, Z_Construct_UClass_UMaterialExpressionFunctionOutput_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that stores information about a function output which is needed to maintain connections and implement the function call."));
			MetaData->SetValue(NewProp_Output, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_Output, TEXT("ToolTip"), TEXT("Actual output struct which stores information about how this output is connected in the material."));
			MetaData->SetValue(NewProp_ExpressionOutputId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionOutputId, TEXT("ToolTip"), TEXT("Id of the FunctionOutput, used to link ExpressionOutput."));
			MetaData->SetValue(NewProp_ExpressionOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionOutput, TEXT("ToolTip"), TEXT("Reference to the FunctionOutput in the material function.\nThis is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionOutput_CRC() { return 2787471592U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFunctionExpressionInput()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("FunctionExpressionInput"), sizeof(FFunctionExpressionInput), Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FunctionExpressionInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFunctionExpressionInput>, EStructFlags(0x00000001));
			UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, FFunctionExpressionInput), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
			UProperty* NewProp_ExpressionInputId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionInputId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionInputId, FFunctionExpressionInput), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ExpressionInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionInput"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ExpressionInput, FFunctionExpressionInput), 0x0010000000002000, Z_Construct_UClass_UMaterialExpressionFunctionInput_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that stores information about a function input which is needed to maintain connections and implement the function call."));
			MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Actual input struct which stores information about how this input is connected in the material."));
			MetaData->SetValue(NewProp_ExpressionInputId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionInputId, TEXT("ToolTip"), TEXT("Id of the FunctionInput, used to link ExpressionInput."));
			MetaData->SetValue(NewProp_ExpressionInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
			MetaData->SetValue(NewProp_ExpressionInput, TEXT("ToolTip"), TEXT("Reference to the FunctionInput in the material function.\nThis is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFunctionExpressionInput_CRC() { return 176646166U; }
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall_NoRegister()
	{
		return UMaterialExpressionMaterialFunctionCall::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMaterialFunctionCall::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FunctionOutputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionOutputs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FunctionOutputs, UMaterialExpressionMaterialFunctionCall), 0x0010000000000000);
				UProperty* NewProp_FunctionOutputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionOutputs, TEXT("FunctionOutputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFunctionExpressionOutput());
				UProperty* NewProp_FunctionInputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionInputs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FunctionInputs, UMaterialExpressionMaterialFunctionCall), 0x0010000000000000);
				UProperty* NewProp_FunctionInputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionInputs, TEXT("FunctionInputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFunctionExpressionInput());
				UProperty* NewProp_MaterialFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaterialFunction, UMaterialExpressionMaterialFunctionCall), 0x0010000000000001, Z_Construct_UClass_UMaterialFunction_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionOutputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionOutputs, TEXT("ToolTip"), TEXT("Array of all the function outputs that this function exposes."));
				MetaData->SetValue(NewProp_FunctionInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_FunctionInputs, TEXT("ToolTip"), TEXT("Array of all the function inputs that this function exposes."));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("Category"), TEXT("MaterialExpressionMaterialFunctionCall"));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialFunctionCall.h"));
				MetaData->SetValue(NewProp_MaterialFunction, TEXT("ToolTip"), TEXT("The function to call."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMaterialFunctionCall(Z_Construct_UClass_UMaterialExpressionMaterialFunctionCall, &UMaterialExpressionMaterialFunctionCall::StaticClass, TEXT("UMaterialExpressionMaterialFunctionCall"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMaterialFunctionCall);
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialProxyReplace_NoRegister()
	{
		return UMaterialExpressionMaterialProxyReplace::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMaterialProxyReplace()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMaterialProxyReplace::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaterialProxy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialProxy"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaterialProxy, UMaterialExpressionMaterialProxyReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Realtime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Realtime"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Realtime, UMaterialExpressionMaterialProxyReplace), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMaterialProxyReplace.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialProxyReplace.h"));
				MetaData->SetValue(NewProp_MaterialProxy, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialProxyReplace.h"));
				MetaData->SetValue(NewProp_Realtime, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMaterialProxyReplace.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMaterialProxyReplace(Z_Construct_UClass_UMaterialExpressionMaterialProxyReplace, &UMaterialExpressionMaterialProxyReplace::StaticClass, TEXT("UMaterialExpressionMaterialProxyReplace"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMaterialProxyReplace);
	UClass* Z_Construct_UClass_UMaterialExpressionMax_NoRegister()
	{
		return UMaterialExpressionMax::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMax()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMax::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMax), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMax), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMax), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMax), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMax"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMax"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMax.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMax(Z_Construct_UClass_UMaterialExpressionMax, &UMaterialExpressionMax::StaticClass, TEXT("UMaterialExpressionMax"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMax);
	UClass* Z_Construct_UClass_UMaterialExpressionMin_NoRegister()
	{
		return UMaterialExpressionMin::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMin()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMin::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMin), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMin), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMin), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMin), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMin"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMin"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMin.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMin(Z_Construct_UClass_UMaterialExpressionMin, &UMaterialExpressionMin::StaticClass, TEXT("UMaterialExpressionMin"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMin);
	UClass* Z_Construct_UClass_UMaterialExpressionMultiply_NoRegister()
	{
		return UMaterialExpressionMultiply::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionMultiply()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionMultiply::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionMultiply), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionMultiply), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionMultiply), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionMultiply), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionMultiply"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionMultiply"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionMultiply.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionMultiply(Z_Construct_UClass_UMaterialExpressionMultiply, &UMaterialExpressionMultiply::StaticClass, TEXT("UMaterialExpressionMultiply"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionMultiply);
	UEnum* Z_Construct_UEnum_Engine_ENoiseFunction()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENoiseFunction"), 0, Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENoiseFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_SimplexTex")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_GradientTex")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_GradientTex3D")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_GradientALU")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_ValueALU")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_VoronoiALU")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NOISEFUNCTION_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ENoiseFunction");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientALU.DisplayName"), TEXT("Gradient - Computational"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientALU.ToolTip"), TEXT("High quality for direct use and bumps\nNon-tiled: ~80 instructions per level, no textures\nTiling: ~143 instructions per level, no textures"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientTex.DisplayName"), TEXT("Gradient - Texture Based"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientTex.ToolTip"), TEXT("High quality for direct use and bumps\nNon-tiled: ~61 instructions per level, 8 texture lookups\nTiling: ~74 instructions per level, 8 texture lookups\nEven \"non-tiled\" mode has a repeat of 128. Useful Repeat Size range <= 128\nFormerly labeled as Perlin noise"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientTex3D.DisplayName"), TEXT("Fast Gradient - 3D Texture"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_GradientTex3D.ToolTip"), TEXT("High quality for direct use, BAD for bumps; doesn't work on Mobile\n~16 instructions per level, 1 texture lookup\nAlways tiles with a repeat of 16, \"Tiling\" mode is not an option for Fast Gradient noise"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_SimplexTex.DisplayName"), TEXT("Simplex - Texture Based"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_SimplexTex.ToolTip"), TEXT("High quality for direct use and bumps\n~77 instructions per level, 4 texture lookups\nCannot tile"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_ValueALU.DisplayName"), TEXT("Value - Computational"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_ValueALU.ToolTip"), TEXT("Low quality, but pure computation\nNon-tiled: ~53 instructions per level, no textures\nTiling: ~118 instructions per level, no textures\nFormerly mis-labeled as Gradient noise"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_VoronoiALU.DisplayName"), TEXT("Voronoi"));
			MetaData->SetValue(ReturnEnum, TEXT("NOISEFUNCTION_VoronoiALU.ToolTip"), TEXT("Also known as Worley or Cellular noise\nQuality=1 searches 8 cells, Quality=2 searches 16 cells\nQuality=3 searches 27 cells, Quality=4 searches 32 cells\nAll are about 20 instructions per cell searched"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ENoiseFunction_CRC() { return 59277372U; }
	UClass* Z_Construct_UClass_UMaterialExpressionNoise_NoRegister()
	{
		return UMaterialExpressionNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RepeatSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RepeatSize"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(RepeatSize, UMaterialExpressionNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTiling, UMaterialExpressionNoise, uint8);
				UProperty* NewProp_bTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTiling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTiling, UMaterialExpressionNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTiling, UMaterialExpressionNoise), sizeof(uint8), false);
				UProperty* NewProp_LevelScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LevelScale, UMaterialExpressionNoise), 0x0010000000000001);
				UProperty* NewProp_OutputMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutputMax, UMaterialExpressionNoise), 0x0010000000000001);
				UProperty* NewProp_OutputMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutputMin, UMaterialExpressionNoise), 0x0010000000000001);
				UProperty* NewProp_Levels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Levels"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Levels, UMaterialExpressionNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTurbulence, UMaterialExpressionNoise, uint8);
				UProperty* NewProp_bTurbulence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTurbulence"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTurbulence, UMaterialExpressionNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTurbulence, UMaterialExpressionNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NoiseFunction, UMaterialExpressionNoise), 0x0010000000000001, Z_Construct_UEnum_Engine_ENoiseFunction());
				UProperty* NewProp_Quality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Quality"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Quality, UMaterialExpressionNoise), 0x0010000000000001);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Scale, UMaterialExpressionNoise), 0x0010000000000001);
				UProperty* NewProp_FilterWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FilterWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FilterWidth, UMaterialExpressionNoise), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionNoise), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_RepeatSize, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_RepeatSize, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_RepeatSize, TEXT("ToolTip"), TEXT("How many units in each tile (if Tiling is on)"));
				MetaData->SetValue(NewProp_RepeatSize, TEXT("UIMin"), TEXT("4"));
				MetaData->SetValue(NewProp_bTiling, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_bTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_bTiling, TEXT("ToolTip"), TEXT("Whether to use tiling noise pattern, useful for baking to seam-free repeating textures"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("ToolTip"), TEXT("usually 2 but higher values allow efficient use of few levels"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("UIMax"), TEXT("8"));
				MetaData->SetValue(NewProp_LevelScale, TEXT("UIMin"), TEXT("2"));
				MetaData->SetValue(NewProp_OutputMax, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_OutputMax, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_OutputMin, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_OutputMin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Levels, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Levels, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Levels, TEXT("ToolTip"), TEXT("1 = fast but little detail, .. larger numbers cost more performance"));
				MetaData->SetValue(NewProp_Levels, TEXT("UIMax"), TEXT("10"));
				MetaData->SetValue(NewProp_Levels, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_bTurbulence, TEXT("ToolTip"), TEXT("How multiple frequencies are getting combined"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("DisplayName"), TEXT("Function"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ToolTip"), TEXT("Noise function, affects performance and look"));
				MetaData->SetValue(NewProp_Quality, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Quality, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Quality, TEXT("ToolTip"), TEXT("Lower numbers are faster and lower quality, higher numbers are slower and higher quality"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMax"), TEXT("4"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("MaterialExpressionNoise"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("can also be done with a multiply on the Position"));
				MetaData->SetValue(NewProp_FilterWidth, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_FilterWidth, TEXT("ToolTip"), TEXT("scalar, to clamp the Levels at pixel level, can be computed like this: max(length(ddx(Position)), length(ddy(Position))"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNoise.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("2 to 3 dimensional vector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionNoise(Z_Construct_UClass_UMaterialExpressionNoise, &UMaterialExpressionNoise::StaticClass, TEXT("UMaterialExpressionNoise"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionNoise);
	UClass* Z_Construct_UClass_UMaterialExpressionNormalize_NoRegister()
	{
		return UMaterialExpressionNormalize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionNormalize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionNormalize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorInput"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorInput, UMaterialExpressionNormalize), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionNormalize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNormalize.h"));
				MetaData->SetValue(NewProp_VectorInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionNormalize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionNormalize(Z_Construct_UClass_UMaterialExpressionNormalize, &UMaterialExpressionNormalize::StaticClass, TEXT("UMaterialExpressionNormalize"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionNormalize);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds_NoRegister()
	{
		return UMaterialExpressionObjectBounds::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectBounds()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionObjectBounds::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectBounds.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectBounds.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectBounds(Z_Construct_UClass_UMaterialExpressionObjectBounds, &UMaterialExpressionObjectBounds::StaticClass, TEXT("UMaterialExpressionObjectBounds"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectBounds);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation_NoRegister()
	{
		return UMaterialExpressionObjectOrientation::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectOrientation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionObjectOrientation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectOrientation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectOrientation.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectOrientation(Z_Construct_UClass_UMaterialExpressionObjectOrientation, &UMaterialExpressionObjectOrientation::StaticClass, TEXT("UMaterialExpressionObjectOrientation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectOrientation);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS_NoRegister()
	{
		return UMaterialExpressionObjectPositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectPositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionObjectPositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectPositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectPositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectPositionWS(Z_Construct_UClass_UMaterialExpressionObjectPositionWS, &UMaterialExpressionObjectPositionWS::StaticClass, TEXT("UMaterialExpressionObjectPositionWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectPositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius_NoRegister()
	{
		return UMaterialExpressionObjectRadius::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionObjectRadius()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionObjectRadius::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionObjectRadius.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionObjectRadius.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionObjectRadius(Z_Construct_UClass_UMaterialExpressionObjectRadius, &UMaterialExpressionObjectRadius::StaticClass, TEXT("UMaterialExpressionObjectRadius"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionObjectRadius);
	UClass* Z_Construct_UClass_UMaterialExpressionOneMinus_NoRegister()
	{
		return UMaterialExpressionOneMinus::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionOneMinus()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionOneMinus::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionOneMinus), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionOneMinus.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionOneMinus.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionOneMinus.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionOneMinus(Z_Construct_UClass_UMaterialExpressionOneMinus, &UMaterialExpressionOneMinus::StaticClass, TEXT("UMaterialExpressionOneMinus"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionOneMinus);
	UClass* Z_Construct_UClass_UMaterialExpressionPanner_NoRegister()
	{
		return UMaterialExpressionPanner::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPanner()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPanner::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFractionalPart, UMaterialExpressionPanner, bool);
				UProperty* NewProp_bFractionalPart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFractionalPart"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFractionalPart, UMaterialExpressionPanner), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bFractionalPart, UMaterialExpressionPanner), sizeof(bool), true);
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionPanner), 0x0010000000000001);
				UProperty* NewProp_SpeedY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpeedY, UMaterialExpressionPanner), 0x0010000000000001);
				UProperty* NewProp_SpeedX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpeedX, UMaterialExpressionPanner), 0x0010000000000001);
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Speed, UMaterialExpressionPanner), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Time, UMaterialExpressionPanner), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionPanner), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_bFractionalPart, TEXT("ToolTip"), TEXT("Output only the fractional part of the pan calculation for greater precision.\nOutput is greater than or equal to 0 and less than 1."));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_SpeedY, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_SpeedY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_SpeedX, TEXT("Category"), TEXT("MaterialExpressionPanner"));
				MetaData->SetValue(NewProp_SpeedX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Speed, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Speed, TEXT("ToolTip"), TEXT("Vector2 speed scale, if specified"));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Time, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Defaults to Game Time if not specified"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPanner.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPanner(Z_Construct_UClass_UMaterialExpressionPanner, &UMaterialExpressionPanner::StaticClass, TEXT("UMaterialExpressionPanner"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPanner);
	UClass* Z_Construct_UClass_UMaterialExpressionParameter_NoRegister()
	{
		return UMaterialExpressionParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionParameter), 0x0010000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionParameter), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParameter.h"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the parameter"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParameter(Z_Construct_UClass_UMaterialExpressionParameter, &UMaterialExpressionParameter::StaticClass, TEXT("UMaterialExpressionParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter_NoRegister()
	{
		return UMaterialExpressionScalarParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionScalarParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionScalarParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SliderMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SliderMax, UMaterialExpressionScalarParameter), 0x0010000000000001);
				UProperty* NewProp_SliderMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SliderMin, UMaterialExpressionScalarParameter), 0x0010000000000001);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionScalarParameter), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMax, TEXT("ToolTip"), TEXT("Sets the upper bound for the slider on this parameter in the material instance editor.\nThe slider will be disabled if SliderMax <= SliderMin."));
				MetaData->SetValue(NewProp_SliderMin, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_SliderMin, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
				MetaData->SetValue(NewProp_SliderMin, TEXT("ToolTip"), TEXT("Sets the lower bound for the slider on this parameter in the material instance editor."));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionScalarParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScalarParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionScalarParameter(Z_Construct_UClass_UMaterialExpressionScalarParameter, &UMaterialExpressionScalarParameter::StaticClass, TEXT("UMaterialExpressionScalarParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionScalarParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter_NoRegister()
	{
		return UMaterialExpressionStaticBoolParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBoolParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionStaticBoolParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultValue, UMaterialExpressionStaticBoolParameter, uint8);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultValue, UMaterialExpressionStaticBoolParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultValue, UMaterialExpressionStaticBoolParameter), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticBoolParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBoolParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionStaticBoolParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBoolParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticBoolParameter(Z_Construct_UClass_UMaterialExpressionStaticBoolParameter, &UMaterialExpressionStaticBoolParameter::StaticClass, TEXT("UMaterialExpressionStaticBoolParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticBoolParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter_NoRegister()
	{
		return UMaterialExpressionStaticSwitchParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionStaticBoolParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionStaticSwitchParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionStaticSwitchParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionStaticSwitchParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitchParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticSwitchParameter(Z_Construct_UClass_UMaterialExpressionStaticSwitchParameter, &UMaterialExpressionStaticSwitchParameter::StaticClass, TEXT("UMaterialExpressionStaticSwitchParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticSwitchParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter_NoRegister()
	{
		return UMaterialExpressionStaticComponentMaskParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionStaticComponentMaskParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultA, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultA, UMaterialExpressionStaticComponentMaskParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultA, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultB, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultB, UMaterialExpressionStaticComponentMaskParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultB, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultG, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultG = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultG"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultG, UMaterialExpressionStaticComponentMaskParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultG, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultR, UMaterialExpressionStaticComponentMaskParameter, uint8);
				UProperty* NewProp_DefaultR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultR, UMaterialExpressionStaticComponentMaskParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultR, UMaterialExpressionStaticComponentMaskParameter), sizeof(uint8), false);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionStaticComponentMaskParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultA, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultB, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultG, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_DefaultR, TEXT("Category"), TEXT("MaterialExpressionStaticComponentMaskParameter"));
				MetaData->SetValue(NewProp_DefaultR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticComponentMaskParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticComponentMaskParameter(Z_Construct_UClass_UMaterialExpressionStaticComponentMaskParameter, &UMaterialExpressionStaticComponentMaskParameter::StaticClass, TEXT("UMaterialExpressionStaticComponentMaskParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticComponentMaskParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter_NoRegister()
	{
		return UMaterialExpressionVectorParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVectorParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionVectorParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, UMaterialExpressionVectorParameter), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVectorParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorParameter.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionVectorParameter"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVectorParameter(Z_Construct_UClass_UMaterialExpressionVectorParameter, &UMaterialExpressionVectorParameter::StaticClass, TEXT("UMaterialExpressionVectorParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVectorParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleColor_NoRegister()
	{
		return UMaterialExpressionParticleColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleColor(Z_Construct_UClass_UMaterialExpressionParticleColor, &UMaterialExpressionParticleColor::StaticClass, TEXT("UMaterialExpressionParticleColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleColor);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection_NoRegister()
	{
		return UMaterialExpressionParticleDirection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleDirection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleDirection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleDirection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleDirection.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleDirection(Z_Construct_UClass_UMaterialExpressionParticleDirection, &UMaterialExpressionParticleDirection::StaticClass, TEXT("UMaterialExpressionParticleDirection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleDirection);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV_NoRegister()
	{
		return UMaterialExpressionParticleMacroUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMacroUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleMacroUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleMacroUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleMacroUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleMacroUV(Z_Construct_UClass_UMaterialExpressionParticleMacroUV, &UMaterialExpressionParticleMacroUV::StaticClass, TEXT("UMaterialExpressionParticleMacroUV"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleMacroUV);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade_NoRegister()
	{
		return UMaterialExpressionParticleMotionBlurFade::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleMotionBlurFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleMotionBlurFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleMotionBlurFade.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleMotionBlurFade(Z_Construct_UClass_UMaterialExpressionParticleMotionBlurFade, &UMaterialExpressionParticleMotionBlurFade::StaticClass, TEXT("UMaterialExpressionParticleMotionBlurFade"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleMotionBlurFade);
	UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS_NoRegister()
	{
		return UMaterialExpressionParticlePositionWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticlePositionWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticlePositionWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticlePositionWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticlePositionWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticlePositionWS(Z_Construct_UClass_UMaterialExpressionParticlePositionWS, &UMaterialExpressionParticlePositionWS::StaticClass, TEXT("UMaterialExpressionParticlePositionWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticlePositionWS);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius_NoRegister()
	{
		return UMaterialExpressionParticleRadius::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRadius()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleRadius::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleRadius.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleRadius.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleRadius(Z_Construct_UClass_UMaterialExpressionParticleRadius, &UMaterialExpressionParticleRadius::StaticClass, TEXT("UMaterialExpressionParticleRadius"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleRadius);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRandom_NoRegister()
	{
		return UMaterialExpressionParticleRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleRandom(Z_Construct_UClass_UMaterialExpressionParticleRandom, &UMaterialExpressionParticleRandom::StaticClass, TEXT("UMaterialExpressionParticleRandom"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleRandom);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime_NoRegister()
	{
		return UMaterialExpressionParticleRelativeTime::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleRelativeTime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleRelativeTime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleRelativeTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleRelativeTime.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleRelativeTime(Z_Construct_UClass_UMaterialExpressionParticleRelativeTime, &UMaterialExpressionParticleRelativeTime::StaticClass, TEXT("UMaterialExpressionParticleRelativeTime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleRelativeTime);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSize_NoRegister()
	{
		return UMaterialExpressionParticleSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSize(Z_Construct_UClass_UMaterialExpressionParticleSize, &UMaterialExpressionParticleSize::StaticClass, TEXT("UMaterialExpressionParticleSize"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSize);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed_NoRegister()
	{
		return UMaterialExpressionParticleSpeed::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSpeed()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleSpeed::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSpeed.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSpeed.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSpeed(Z_Construct_UClass_UMaterialExpressionParticleSpeed, &UMaterialExpressionParticleSpeed::StaticClass, TEXT("UMaterialExpressionParticleSpeed"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSpeed);
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount_NoRegister()
	{
		return UMaterialExpressionPerInstanceFadeAmount::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPerInstanceFadeAmount::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPerInstanceFadeAmount.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPerInstanceFadeAmount.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPerInstanceFadeAmount(Z_Construct_UClass_UMaterialExpressionPerInstanceFadeAmount, &UMaterialExpressionPerInstanceFadeAmount::StaticClass, TEXT("UMaterialExpressionPerInstanceFadeAmount"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPerInstanceFadeAmount);
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom_NoRegister()
	{
		return UMaterialExpressionPerInstanceRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPerInstanceRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPerInstanceRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPerInstanceRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPerInstanceRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPerInstanceRandom(Z_Construct_UClass_UMaterialExpressionPerInstanceRandom, &UMaterialExpressionPerInstanceRandom::StaticClass, TEXT("UMaterialExpressionPerInstanceRandom"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPerInstanceRandom);
	UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth_NoRegister()
	{
		return UMaterialExpressionPixelDepth::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPixelDepth()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPixelDepth::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPixelDepth.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPixelDepth.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPixelDepth(Z_Construct_UClass_UMaterialExpressionPixelDepth, &UMaterialExpressionPixelDepth::StaticClass, TEXT("UMaterialExpressionPixelDepth"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPixelDepth);
	UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS_NoRegister()
	{
		return UMaterialExpressionPixelNormalWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPixelNormalWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPixelNormalWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPixelNormalWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPixelNormalWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPixelNormalWS(Z_Construct_UClass_UMaterialExpressionPixelNormalWS, &UMaterialExpressionPixelNormalWS::StaticClass, TEXT("UMaterialExpressionPixelNormalWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPixelNormalWS);
	UClass* Z_Construct_UClass_UMaterialExpressionPower_NoRegister()
	{
		return UMaterialExpressionPower::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPower()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPower::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstExponent, UMaterialExpressionPower), 0x0010000000000001);
				UProperty* NewProp_Exponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Exponent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Exponent, UMaterialExpressionPower), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Base"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Base, UMaterialExpressionPower), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("Category"), TEXT("MaterialExpressionPower"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("OverridingInputProperty"), TEXT("Exponent"));
				MetaData->SetValue(NewProp_ConstExponent, TEXT("ToolTip"), TEXT("only used if Exponent is not hooked up"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
				MetaData->SetValue(NewProp_Exponent, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Exponent, TEXT("ToolTip"), TEXT("Defaults to 'ConstExponent' if not specified"));
				MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPower.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPower(Z_Construct_UClass_UMaterialExpressionPower, &UMaterialExpressionPower::StaticClass, TEXT("UMaterialExpressionPower"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPower);
	UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask_NoRegister()
	{
		return UMaterialExpressionPrecomputedAOMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPrecomputedAOMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPrecomputedAOMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPrecomputedAOMask.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPrecomputedAOMask(Z_Construct_UClass_UMaterialExpressionPrecomputedAOMask, &UMaterialExpressionPrecomputedAOMask::StaticClass, TEXT("UMaterialExpressionPrecomputedAOMask"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPrecomputedAOMask);
	UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedNormal_NoRegister()
	{
		return UMaterialExpressionPreSkinnedNormal::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedNormal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPreSkinnedNormal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPreSkinnedNormal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPreSkinnedNormal.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPreSkinnedNormal(Z_Construct_UClass_UMaterialExpressionPreSkinnedNormal, &UMaterialExpressionPreSkinnedNormal::StaticClass, TEXT("UMaterialExpressionPreSkinnedNormal"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPreSkinnedNormal);
	UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedPosition_NoRegister()
	{
		return UMaterialExpressionPreSkinnedPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPreSkinnedPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPreSkinnedPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPreSkinnedPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPreSkinnedPosition.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPreSkinnedPosition(Z_Construct_UClass_UMaterialExpressionPreSkinnedPosition, &UMaterialExpressionPreSkinnedPosition::StaticClass, TEXT("UMaterialExpressionPreSkinnedPosition"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPreSkinnedPosition);
	UClass* Z_Construct_UClass_UMaterialExpressionPreviousFrameSwitch_NoRegister()
	{
		return UMaterialExpressionPreviousFrameSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionPreviousFrameSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionPreviousFrameSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PreviousFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviousFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PreviousFrame, UMaterialExpressionPreviousFrameSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_CurrentFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CurrentFrame, UMaterialExpressionPreviousFrameSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionPreviousFrameSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPreviousFrameSwitch.h"));
				MetaData->SetValue(NewProp_PreviousFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPreviousFrameSwitch.h"));
				MetaData->SetValue(NewProp_CurrentFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionPreviousFrameSwitch.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionPreviousFrameSwitch(Z_Construct_UClass_UMaterialExpressionPreviousFrameSwitch, &UMaterialExpressionPreviousFrameSwitch::StaticClass, TEXT("UMaterialExpressionPreviousFrameSwitch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionPreviousFrameSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch_NoRegister()
	{
		return UMaterialExpressionQualitySwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionQualitySwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionQualitySwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionQualitySwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				NewProp_Inputs->ArrayDim = CPP_ARRAY_DIM(Inputs, UMaterialExpressionQualitySwitch);
				UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Default"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Default, UMaterialExpressionQualitySwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionQualitySwitch.h"));
				MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("Default connection, used when a specific quality level input is missing."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionQualitySwitch(Z_Construct_UClass_UMaterialExpressionQualitySwitch, &UMaterialExpressionQualitySwitch::StaticClass, TEXT("UMaterialExpressionQualitySwitch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionQualitySwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS_NoRegister()
	{
		return UMaterialExpressionReflectionVectorWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionReflectionVectorWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionReflectionVectorWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS, uint8);
				UProperty* NewProp_bNormalizeCustomWorldNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNormalizeCustomWorldNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bNormalizeCustomWorldNormal, UMaterialExpressionReflectionVectorWS), sizeof(uint8), false);
				UProperty* NewProp_CustomWorldNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomWorldNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomWorldNormal, UMaterialExpressionReflectionVectorWS), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("Category"), TEXT("UMaterialExpressionReflectionVectorWS"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("DisplayName"), TEXT("Normalize custom world normal"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_bNormalizeCustomWorldNormal, TEXT("ToolTip"), TEXT("(true): The specified world normal will be normalized. (false): WorldNormal will just be used as is, faster but possible artifacts if normal length isn't 1"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReflectionVectorWS.h"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_CustomWorldNormal, TEXT("ToolTip"), TEXT("Defaults to Reflection Vector if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionReflectionVectorWS(Z_Construct_UClass_UMaterialExpressionReflectionVectorWS, &UMaterialExpressionReflectionVectorWS::StaticClass, TEXT("UMaterialExpressionReflectionVectorWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionReflectionVectorWS);
	UClass* Z_Construct_UClass_UMaterialExpressionReroute_NoRegister()
	{
		return UMaterialExpressionReroute::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionReroute()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionReroute::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionReroute), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Reroute"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionReroute.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReroute.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionReroute.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Link to the input expression to be evaluated"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionReroute(Z_Construct_UClass_UMaterialExpressionReroute, &UMaterialExpressionReroute::StaticClass, TEXT("UMaterialExpressionReroute"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionReroute);
	UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis_NoRegister()
	{
		return UMaterialExpressionRotateAboutAxis::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionRotateAboutAxis()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionRotateAboutAxis::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionRotateAboutAxis), 0x0010000000000001);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionRotateAboutAxis), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_PivotPoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PivotPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PivotPoint, UMaterialExpressionRotateAboutAxis), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_RotationAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationAngle, UMaterialExpressionRotateAboutAxis), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_NormalizedRotationAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalizedRotationAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NormalizedRotationAxis, UMaterialExpressionRotateAboutAxis), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionRotateAboutAxis"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_PivotPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_RotationAngle, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
				MetaData->SetValue(NewProp_NormalizedRotationAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotateAboutAxis.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionRotateAboutAxis(Z_Construct_UClass_UMaterialExpressionRotateAboutAxis, &UMaterialExpressionRotateAboutAxis::StaticClass, TEXT("UMaterialExpressionRotateAboutAxis"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionRotateAboutAxis);
	UClass* Z_Construct_UClass_UMaterialExpressionRotator_NoRegister()
	{
		return UMaterialExpressionRotator::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionRotator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionRotator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionRotator), 0x0010000000000001);
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Speed, UMaterialExpressionRotator), 0x0010000000000001);
				UProperty* NewProp_CenterY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CenterY, UMaterialExpressionRotator), 0x0010000000000001);
				UProperty* NewProp_CenterX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CenterX, UMaterialExpressionRotator), 0x0010000000000001);
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Time, UMaterialExpressionRotator), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinate, UMaterialExpressionRotator), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinate is not hooked up"));
				MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_CenterY, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_CenterY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_CenterX, TEXT("Category"), TEXT("MaterialExpressionRotator"));
				MetaData->SetValue(NewProp_CenterX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Time, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Defaults to Game Time if not specified"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRotator.h"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinate, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionRotator(Z_Construct_UClass_UMaterialExpressionRotator, &UMaterialExpressionRotator::StaticClass, TEXT("UMaterialExpressionRotator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionRotator);
	UClass* Z_Construct_UClass_UMaterialExpressionRound_NoRegister()
	{
		return UMaterialExpressionRound::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionRound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionRound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionRound), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionRound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRound.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionRound.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionRound(Z_Construct_UClass_UMaterialExpressionRound, &UMaterialExpressionRound::StaticClass, TEXT("UMaterialExpressionRound"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionRound);
	UClass* Z_Construct_UClass_UMaterialExpressionSaturate_NoRegister()
	{
		return UMaterialExpressionSaturate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSaturate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSaturate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSaturate), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSaturate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSaturate.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSaturate.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSaturate(Z_Construct_UClass_UMaterialExpressionSaturate, &UMaterialExpressionSaturate::StaticClass, TEXT("UMaterialExpressionSaturate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSaturate);
	UEnum* Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialSceneAttributeInputMode"), 0, Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialSceneAttributeInputMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialSceneAttributeInputMode::Coordinates")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialSceneAttributeInputMode::OffsetFraction")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaterialSceneAttributeInputMode::EMaterialSceneAttributeInputMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EMaterialSceneAttributeInputMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode_CRC() { return 1761446080U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSceneColor_NoRegister()
	{
		return UMaterialExpressionSceneColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSceneColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstInput"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConstInput, UMaterialExpressionSceneColor), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_OffsetFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetFraction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OffsetFraction_DEPRECATED, UMaterialExpressionSceneColor), 0x0010000020000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSceneColor), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InputMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InputMode, UMaterialExpressionSceneColor), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("Category"), TEXT("MaterialExpressionSceneColor"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ToolTip"), TEXT("only used if Input is not hooked up"));
				MetaData->SetValue(NewProp_OffsetFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Defaults to 'ConstInput' if not specified"));
				MetaData->SetValue(NewProp_InputMode, TEXT("Category"), TEXT("MaterialExpressionSceneColor"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneColor.h"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ToolTip"), TEXT("Coordinates - UV coordinates to apply to the scene color lookup.\nOffsetFraction -      An offset to apply to the scene color lookup in a 2d fraction of the screen."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneColor(Z_Construct_UClass_UMaterialExpressionSceneColor, &UMaterialExpressionSceneColor::StaticClass, TEXT("UMaterialExpressionSceneColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneColor);
	UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth_NoRegister()
	{
		return UMaterialExpressionSceneDepth::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneDepth()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSceneDepth::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstInput"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConstInput, UMaterialExpressionSceneDepth), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinates_DEPRECATED, UMaterialExpressionSceneDepth), 0x0010000020000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSceneDepth), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_InputMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InputMode, UMaterialExpressionSceneDepth), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialSceneAttributeInputMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("Category"), TEXT("MaterialExpressionSceneDepth"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_ConstInput, TEXT("ToolTip"), TEXT("only used if Input is not hooked up"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_Input, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("Defaults to 'ConstInput' if not specified"));
				MetaData->SetValue(NewProp_InputMode, TEXT("Category"), TEXT("MaterialExpressionSceneDepth"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneDepth.h"));
				MetaData->SetValue(NewProp_InputMode, TEXT("ToolTip"), TEXT("Coordinates - UV coordinates to apply to the scene depth lookup.\nOffsetFraction - An offset to apply to the scene depth lookup in a 2d fraction of the screen."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneDepth(Z_Construct_UClass_UMaterialExpressionSceneDepth, &UMaterialExpressionSceneDepth::StaticClass, TEXT("UMaterialExpressionSceneDepth"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneDepth);
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize_NoRegister()
	{
		return UMaterialExpressionSceneTexelSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexelSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSceneTexelSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneTexelSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexelSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneTexelSize(Z_Construct_UClass_UMaterialExpressionSceneTexelSize, &UMaterialExpressionSceneTexelSize::StaticClass, TEXT("UMaterialExpressionSceneTexelSize"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneTexelSize);
	UEnum* Z_Construct_UEnum_Engine_ESceneTextureId()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESceneTextureId"), 0, Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESceneTextureId"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_SceneColor")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_SceneDepth")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_DiffuseColor")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_SpecularColor")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_SubsurfaceColor")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_BaseColor")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_Specular")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_Metallic")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_WorldNormal")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_SeparateTranslucency")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_Opacity")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_Roughness")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_MaterialAO")), 12));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_CustomDepth")), 13));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput0")), 14));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput1")), 15));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput2")), 16));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput3")), 17));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput4")), 18));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput5")), 19));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_PostProcessInput6")), 20));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_DecalMask")), 21));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_ShadingModel")), 22));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_AmbientOcclusion")), 23));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_CustomStencil")), 24));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_StoredBaseColor")), 25));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_StoredSpecular")), 26));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PPI_MAX")), 27));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESceneTextureId");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_AmbientOcclusion.DisplayName"), TEXT("Ambient Occlusion"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_AmbientOcclusion.ToolTip"), TEXT("Ambient Occlusion, single channel"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_BaseColor.DisplayName"), TEXT("BaseColor (for lighting)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_BaseColor.ToolTip"), TEXT("Material base, RGB color (GBuffer), can be modified on read by the ShadingModel, consider StoredBasedColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomDepth.DisplayName"), TEXT("CustomDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomDepth.ToolTip"), TEXT("Scene depth, single channel, contains the linear depth of the opaque objects rendered with CustomDepth (mesh property)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomStencil.DisplayName"), TEXT("CustomStencil"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_CustomStencil.ToolTip"), TEXT("Scene stencil, contains CustomStencil mesh property of the opaque objects rendered with CustomDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DecalMask.DisplayName"), TEXT("Decal Mask"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DecalMask.ToolTip"), TEXT("Decal Mask, single bit (was moved to stencil for better performance, not accessible at the moment)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DiffuseColor.DisplayName"), TEXT("DiffuseColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_DiffuseColor.ToolTip"), TEXT("Material diffuse, RGB color (computed from GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_MaterialAO.DisplayName"), TEXT("MaterialAO"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_MaterialAO.ToolTip"), TEXT("Material ambient occlusion, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Metallic.DisplayName"), TEXT("Metallic"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Metallic.ToolTip"), TEXT("Material metallic, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Opacity.DisplayName"), TEXT("Opacity"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Opacity.ToolTip"), TEXT("Material opacity, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput0.DisplayName"), TEXT("PostProcessInput0"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput0.ToolTip"), TEXT("Input #0 of this postprocess pass, usually the only one hooked up"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput1.DisplayName"), TEXT("PostProcessInput1"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput1.ToolTip"), TEXT("Input #1 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput2.DisplayName"), TEXT("PostProcessInput2"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput2.ToolTip"), TEXT("Input #2 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput3.DisplayName"), TEXT("PostProcessInput3"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput3.ToolTip"), TEXT("Input #3 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput4.DisplayName"), TEXT("PostProcessInput4"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput4.ToolTip"), TEXT("Input #4 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput5.DisplayName"), TEXT("PostProcessInput5"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput5.ToolTip"), TEXT("Input #5 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput6.DisplayName"), TEXT("PostProcessInput6"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_PostProcessInput6.ToolTip"), TEXT("Input #6 of this postprocess pass, usually not used"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Roughness.DisplayName"), TEXT("Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Roughness.ToolTip"), TEXT("Material roughness, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneColor.DisplayName"), TEXT("SceneColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneColor.ToolTip"), TEXT("Scene color, normal post process passes should use PostProcessInput0"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneDepth.DisplayName"), TEXT("SceneDepth"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SceneDepth.ToolTip"), TEXT("Scene depth, single channel, contains the linear depth of the opaque objects"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SeparateTranslucency.DisplayName"), TEXT("SeparateTranslucency"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SeparateTranslucency.ToolTip"), TEXT("Not yet supported"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_ShadingModel.DisplayName"), TEXT("Shading Model"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_ShadingModel.ToolTip"), TEXT("Shading model"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Specular.DisplayName"), TEXT("Specular (for lighting)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_Specular.ToolTip"), TEXT("Material specular, single channel (GBuffer), can be modified on read by the ShadingModel, consider StoredSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SpecularColor.DisplayName"), TEXT("SpecularColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SpecularColor.ToolTip"), TEXT("Material specular, RGB color (computed from GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_StoredBaseColor.DisplayName"), TEXT("BaseColor (as stored in GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_StoredBaseColor.ToolTip"), TEXT("Material base, RGB color (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_StoredSpecular.DisplayName"), TEXT("Specular (as stored in GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_StoredSpecular.ToolTip"), TEXT("Material specular, single channel (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SubsurfaceColor.DisplayName"), TEXT("SubsurfaceColor"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_SubsurfaceColor.ToolTip"), TEXT("Material subsurface, RGB color (GBuffer, only for some ShadingModels)"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_WorldNormal.DisplayName"), TEXT("WorldNormal"));
			MetaData->SetValue(ReturnEnum, TEXT("PPI_WorldNormal.ToolTip"), TEXT("Normal, RGB in -1..1 range, not normalized (GBuffer)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("like EPassInputId but can expose more e.g. GBuffer"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESceneTextureId_CRC() { return 3996095297U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture_NoRegister()
	{
		return UMaterialExpressionSceneTexture::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSceneTexture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSceneTexture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFiltered, UMaterialExpressionSceneTexture, bool);
				UProperty* NewProp_bFiltered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFiltered"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFiltered, UMaterialExpressionSceneTexture), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bFiltered, UMaterialExpressionSceneTexture), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampUVs, UMaterialExpressionSceneTexture, bool);
				UProperty* NewProp_bClampUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampUVs"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampUVs, UMaterialExpressionSceneTexture), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampUVs, UMaterialExpressionSceneTexture), sizeof(bool), true);
				UProperty* NewProp_SceneTextureId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneTextureId"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SceneTextureId, UMaterialExpressionSceneTexture), 0x0010000000000001, Z_Construct_UEnum_Engine_ESceneTextureId());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinates, UMaterialExpressionSceneTexture), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("DisplayName"), TEXT("Filtered"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bFiltered, TEXT("ToolTip"), TEXT("Whether to use point sampled texture lookup (default) or using [bi-linear] filtered (can be slower, avoid faceted lock with distortions), some SceneTextures cannot be filtered"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("DisplayName"), TEXT("Clamp UVs"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_bClampUVs, TEXT("ToolTip"), TEXT("Clamps texture coordinates to the range 0 to 1. Incurs a performance cost."));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("Category"), TEXT("UMaterialExpressionSceneTexture"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("DisplayName"), TEXT("Scene Texture Id"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_SceneTextureId, TEXT("ToolTip"), TEXT("Which scene texture (screen aligned texture) we want to make a lookup into"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSceneTexture.h"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ToolTip"), TEXT("Ignored if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSceneTexture(Z_Construct_UClass_UMaterialExpressionSceneTexture, &UMaterialExpressionSceneTexture::StaticClass, TEXT("UMaterialExpressionSceneTexture"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSceneTexture);
	UEnum* Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialExpressionScreenPositionMapping"), 0, Get_Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialExpressionScreenPositionMapping"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MESP_SceneTextureUV")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MESP_ViewportUV")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MESP_Max")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialExpressionScreenPositionMapping");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MESP_SceneTextureUV.DisplayName"), TEXT("SceneTextureUV"));
			MetaData->SetValue(ReturnEnum, TEXT("MESP_SceneTextureUV.ToolTip"), TEXT("A UV in the 0..1 range for use with the ScreeTnexture material expression."));
			MetaData->SetValue(ReturnEnum, TEXT("MESP_ViewportUV.DisplayName"), TEXT("ViewportUV"));
			MetaData->SetValue(ReturnEnum, TEXT("MESP_ViewportUV.ToolTip"), TEXT("A UV in the 0..1 range that maps to the local viewport"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScreenPosition.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping_CRC() { return 1894986258U; }
	UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition_NoRegister()
	{
		return UMaterialExpressionScreenPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionScreenPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionScreenPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Mapping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mapping"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Mapping, UMaterialExpressionScreenPosition), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialExpressionScreenPositionMapping());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionScreenPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScreenPosition.h"));
				MetaData->SetValue(NewProp_Mapping, TEXT("Category"), TEXT("UMaterialExpressionScreenPosition"));
				MetaData->SetValue(NewProp_Mapping, TEXT("DisplayName"), TEXT("Mapping"));
				MetaData->SetValue(NewProp_Mapping, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionScreenPosition.h"));
				MetaData->SetValue(NewProp_Mapping, TEXT("ToolTip"), TEXT("View input property to be accessed"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionScreenPosition(Z_Construct_UClass_UMaterialExpressionScreenPosition, &UMaterialExpressionScreenPosition::StaticClass, TEXT("UMaterialExpressionScreenPosition"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionScreenPosition);
	UClass* Z_Construct_UClass_UMaterialExpressionSetMaterialAttributes_NoRegister()
	{
		return UMaterialExpressionSetMaterialAttributes::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSetMaterialAttributes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSetMaterialAttributes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AttributeSetTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttributeSetTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AttributeSetTypes, UMaterialExpressionSetMaterialAttributes), 0x0010000000000001);
				UProperty* NewProp_AttributeSetTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AttributeSetTypes, TEXT("AttributeSetTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_Inputs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Inputs, UMaterialExpressionSetMaterialAttributes), 0x0010000000000000);
				UProperty* NewProp_Inputs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Inputs, TEXT("Inputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSetMaterialAttributes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSetMaterialAttributes.h"));
				MetaData->SetValue(NewProp_AttributeSetTypes, TEXT("Category"), TEXT("MaterialAttributes"));
				MetaData->SetValue(NewProp_AttributeSetTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSetMaterialAttributes.h"));
				MetaData->SetValue(NewProp_Inputs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSetMaterialAttributes.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSetMaterialAttributes(Z_Construct_UClass_UMaterialExpressionSetMaterialAttributes, &UMaterialExpressionSetMaterialAttributes::StaticClass, TEXT("UMaterialExpressionSetMaterialAttributes"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSetMaterialAttributes);
	UClass* Z_Construct_UClass_UMaterialExpressionSine_NoRegister()
	{
		return UMaterialExpressionSine::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionSine), 0x0010000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSine), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionSine"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSine(Z_Construct_UClass_UMaterialExpressionSine, &UMaterialExpressionSine::StaticClass, TEXT("UMaterialExpressionSine"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSine);
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeLODType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeedTreeLODType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeLODType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STLOD_Pop")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STLOD_Smooth")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STLOD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESpeedTreeLODType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STLOD_Pop.DisplayName"), TEXT("Pop"));
			MetaData->SetValue(ReturnEnum, TEXT("STLOD_Smooth.DisplayName"), TEXT("Smooth"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeLODType_CRC() { return 320557922U; }
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeWindType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeedTreeWindType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeWindType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_Fastest")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_Fast")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_Better")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_Best")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_Palm")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_BestPlus")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STW_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESpeedTreeWindType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Best.DisplayName"), TEXT("Best"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_BestPlus.DisplayName"), TEXT("BestPlus"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Better.DisplayName"), TEXT("Better"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Fast.DisplayName"), TEXT("Fast"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Fastest.DisplayName"), TEXT("Fastest"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("STW_Palm.DisplayName"), TEXT("Palm"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeWindType_CRC() { return 1159522133U; }
	UEnum* Z_Construct_UEnum_Engine_ESpeedTreeGeometryType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeedTreeGeometryType"), 0, Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeedTreeGeometryType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_Branch")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_Frond")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_Leaf")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_FacingLeaf")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_Billboard")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("STG_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESpeedTreeGeometryType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Billboard.DisplayName"), TEXT("Billboard"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Branch.DisplayName"), TEXT("Branch"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_FacingLeaf.DisplayName"), TEXT("Facing Leaf"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Frond.DisplayName"), TEXT("Frond"));
			MetaData->SetValue(ReturnEnum, TEXT("STG_Leaf.DisplayName"), TEXT("Leaf"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESpeedTreeGeometryType_CRC() { return 737305197U; }
	UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree_NoRegister()
	{
		return UMaterialExpressionSpeedTree::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSpeedTree()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSpeedTree::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccurateWindVelocities, UMaterialExpressionSpeedTree, bool);
				UProperty* NewProp_bAccurateWindVelocities = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAccurateWindVelocities"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccurateWindVelocities, UMaterialExpressionSpeedTree), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bAccurateWindVelocities, UMaterialExpressionSpeedTree), sizeof(bool), true);
				UProperty* NewProp_BillboardThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BillboardThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BillboardThreshold, UMaterialExpressionSpeedTree), 0x0010000000000001);
				UProperty* NewProp_LODType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LODType, UMaterialExpressionSpeedTree), 0x0010000000000001, Z_Construct_UEnum_Engine_ESpeedTreeLODType());
				UProperty* NewProp_WindType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(WindType, UMaterialExpressionSpeedTree), 0x0010000000000001, Z_Construct_UEnum_Engine_ESpeedTreeWindType());
				UProperty* NewProp_GeometryType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GeometryType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GeometryType, UMaterialExpressionSpeedTree), 0x0010000000000001, Z_Construct_UEnum_Engine_ESpeedTreeGeometryType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("DisplayName"), TEXT("Accurate Wind Velocities"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_bAccurateWindVelocities, TEXT("ToolTip"), TEXT("Support accurate velocities from wind. This will incur extra cost per vertex."));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("DisplayName"), TEXT("Billboard Threshold"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("ToolTip"), TEXT("The threshold for triangles to be removed from the bilboard mesh when not facing the camera (0 = none pass, 1 = all pass)."));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BillboardThreshold, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LODType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_LODType, TEXT("DisplayName"), TEXT("LOD Type"));
				MetaData->SetValue(NewProp_LODType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_LODType, TEXT("ToolTip"), TEXT("The type of LOD to use"));
				MetaData->SetValue(NewProp_WindType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_WindType, TEXT("DisplayName"), TEXT("Wind Type"));
				MetaData->SetValue(NewProp_WindType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_WindType, TEXT("ToolTip"), TEXT("The type of wind effect used on this tree. This can only go as high as it was in the SpeedTree Modeler, but you can set it to a lower option for lower quality wind and faster rendering."));
				MetaData->SetValue(NewProp_GeometryType, TEXT("Category"), TEXT("MaterialExpressionSpeedTree"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("DisplayName"), TEXT("Geometry Type"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSpeedTree.h"));
				MetaData->SetValue(NewProp_GeometryType, TEXT("ToolTip"), TEXT("The type of SpeedTree geometry on which this material will be used"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSpeedTree(Z_Construct_UClass_UMaterialExpressionSpeedTree, &UMaterialExpressionSpeedTree::StaticClass, TEXT("UMaterialExpressionSpeedTree"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSpeedTree);
	UClass* Z_Construct_UClass_UMaterialExpressionSphereMask_NoRegister()
	{
		return UMaterialExpressionSphereMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSphereMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSphereMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HardnessPercent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HardnessPercent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HardnessPercent, UMaterialExpressionSphereMask), 0x0010000000000001);
				UProperty* NewProp_AttenuationRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AttenuationRadius, UMaterialExpressionSphereMask), 0x0010000000000001);
				UProperty* NewProp_Hardness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Hardness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Hardness, UMaterialExpressionSphereMask), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Radius, UMaterialExpressionSphereMask), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionSphereMask), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionSphereMask), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("Category"), TEXT("MaterialExpressionSphereMask"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ClampMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("DisplayName"), TEXT("Hardness"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("OverridingInputProperty"), TEXT("Hardness"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("ToolTip"), TEXT("in percent 0%=soft .. 100%=hard"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("UIMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_HardnessPercent, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("Category"), TEXT("MaterialExpressionSphereMask"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("DisplayName"), TEXT("Radius"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("OverridingInputProperty"), TEXT("Radius"));
				MetaData->SetValue(NewProp_AttenuationRadius, TEXT("ToolTip"), TEXT("in the unit that A and B are measured"));
				MetaData->SetValue(NewProp_Hardness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_Hardness, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Hardness, TEXT("ToolTip"), TEXT("Defaults to 'HardnessPercent' if not specified"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("Defaults to 'AttenuationRadius' if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("1 to 4 dimensional vector, should be the same type as A"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphereMask.h"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("1 to 4 dimensional vector, should be the same type as B"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSphereMask(Z_Construct_UClass_UMaterialExpressionSphereMask, &UMaterialExpressionSphereMask::StaticClass, TEXT("UMaterialExpressionSphereMask"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSphereMask);
	UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity_NoRegister()
	{
		return UMaterialExpressionSphericalParticleOpacity::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSphericalParticleOpacity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstantDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstantDensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstantDensity, UMaterialExpressionSphericalParticleOpacity), 0x0010000000000001);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Density, UMaterialExpressionSphericalParticleOpacity), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("Category"), TEXT("MaterialExpressionSphericalParticleOpacity"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("OverridingInputProperty"), TEXT("Density"));
				MetaData->SetValue(NewProp_ConstantDensity, TEXT("ToolTip"), TEXT("Constant density of the particle sphere.  Will be overridden if Density is connected."));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSphericalParticleOpacity.h"));
				MetaData->SetValue(NewProp_Density, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Defaults to 'ConstantDensity' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSphericalParticleOpacity(Z_Construct_UClass_UMaterialExpressionSphericalParticleOpacity, &UMaterialExpressionSphericalParticleOpacity::StaticClass, TEXT("UMaterialExpressionSphericalParticleOpacity"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSphericalParticleOpacity);
	UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot_NoRegister()
	{
		return UMaterialExpressionSquareRoot::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSquareRoot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSquareRoot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionSquareRoot), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSquareRoot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSquareRoot.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSquareRoot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSquareRoot(Z_Construct_UClass_UMaterialExpressionSquareRoot, &UMaterialExpressionSquareRoot::StaticClass, TEXT("UMaterialExpressionSquareRoot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSquareRoot);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBool_NoRegister()
	{
		return UMaterialExpressionStaticBool::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticBool()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionStaticBool::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Value, UMaterialExpressionStaticBool, uint8);
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Value, UMaterialExpressionStaticBool), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Value, UMaterialExpressionStaticBool), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticBool.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBool.h"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("MaterialExpressionStaticBool"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticBool.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticBool(Z_Construct_UClass_UMaterialExpressionStaticBool, &UMaterialExpressionStaticBool::StaticClass, TEXT("UMaterialExpressionStaticBool"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticBool);
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch_NoRegister()
	{
		return UMaterialExpressionStaticSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionStaticSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionStaticSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, UMaterialExpressionStaticSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionStaticSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionStaticSwitch), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DefaultValue, UMaterialExpressionStaticSwitch, uint8);
				UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DefaultValue, UMaterialExpressionStaticSwitch), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DefaultValue, UMaterialExpressionStaticSwitch), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_Value, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Ignored if not specified"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("MaterialExpressionStaticSwitch"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionStaticSwitch.h"));
				MetaData->SetValue(NewProp_DefaultValue, TEXT("OverridingInputProperty"), TEXT("Value"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionStaticSwitch(Z_Construct_UClass_UMaterialExpressionStaticSwitch, &UMaterialExpressionStaticSwitch::StaticClass, TEXT("UMaterialExpressionStaticSwitch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionStaticSwitch);
	UClass* Z_Construct_UClass_UMaterialExpressionSubtract_NoRegister()
	{
		return UMaterialExpressionSubtract::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionSubtract()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionSubtract::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstB"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstB, UMaterialExpressionSubtract), 0x0010000000000001);
				UProperty* NewProp_ConstA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstA"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstA, UMaterialExpressionSubtract), 0x0010000000000001);
				UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, UMaterialExpressionSubtract), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, UMaterialExpressionSubtract), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("Category"), TEXT("MaterialExpressionSubtract"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstB, TEXT("OverridingInputProperty"), TEXT("B"));
				MetaData->SetValue(NewProp_ConstB, TEXT("ToolTip"), TEXT("only used if B is not hooked up"));
				MetaData->SetValue(NewProp_ConstA, TEXT("Category"), TEXT("MaterialExpressionSubtract"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_ConstA, TEXT("OverridingInputProperty"), TEXT("A"));
				MetaData->SetValue(NewProp_ConstA, TEXT("ToolTip"), TEXT("only used if A is not hooked up"));
				MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_B, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_B, TEXT("ToolTip"), TEXT("Defaults to 'ConstB' if not specified"));
				MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionSubtract.h"));
				MetaData->SetValue(NewProp_A, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_A, TEXT("ToolTip"), TEXT("Defaults to 'ConstA' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionSubtract(Z_Construct_UClass_UMaterialExpressionSubtract, &UMaterialExpressionSubtract::StaticClass, TEXT("UMaterialExpressionSubtract"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionSubtract);
	UClass* Z_Construct_UClass_UMaterialExpressionTangent_NoRegister()
	{
		return UMaterialExpressionTangent::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTangent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTangent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionTangent), 0x0010000000000001);
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTangent), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTangent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTangent.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionTangent"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTangent.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTangent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTangent(Z_Construct_UClass_UMaterialExpressionTangent, &UMaterialExpressionTangent::StaticClass, TEXT("UMaterialExpressionTangent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTangent);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureBase_NoRegister()
	{
		return UMaterialExpressionTextureBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase, uint8);
				UProperty* NewProp_IsDefaultMeshpaintTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsDefaultMeshpaintTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(IsDefaultMeshpaintTexture, UMaterialExpressionTextureBase), sizeof(uint8), false);
				UProperty* NewProp_SamplerType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SamplerType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SamplerType, UMaterialExpressionTextureBase), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialSamplerType());
				UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, UMaterialExpressionTextureBase), 0x0010000000000001, Z_Construct_UClass_UTexture_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_IsDefaultMeshpaintTexture, TEXT("ToolTip"), TEXT("Is default selected texture when using mesh paint mode texture painting"));
				MetaData->SetValue(NewProp_SamplerType, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_SamplerType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
				MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("MaterialExpressionTextureBase"));
				MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureBase(Z_Construct_UClass_UMaterialExpressionTextureBase, &UMaterialExpressionTextureBase::StaticClass, TEXT("UMaterialExpressionTextureBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureBase);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObject_NoRegister()
	{
		return UMaterialExpressionTextureObject::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureObject(Z_Construct_UClass_UMaterialExpressionTextureObject, &UMaterialExpressionTextureObject::StaticClass, TEXT("UMaterialExpressionTextureObject"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureObject);
	UEnum* Z_Construct_UEnum_Engine_ETextureMipValueMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureMipValueMode"), 0, Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureMipValueMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMVM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMVM_MipLevel")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMVM_MipBias")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMVM_Derivative")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMVM_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETextureMipValueMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_Derivative.DisplayName"), TEXT("Derivative (explicit derivative to compute mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_Derivative.ToolTip"), TEXT("Explicitly compute the sample's DDX and DDY for anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipBias.DisplayName"), TEXT("MipBias (relative to the computed mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipBias.ToolTip"), TEXT("Bias the hardware computed sample's mip level. Disables anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipLevel.DisplayName"), TEXT("MipLevel (absolute, 0 is full resolution)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_MipLevel.ToolTip"), TEXT("Explicitly compute the sample's mip level. Disables anisotropic filtering."));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_None.DisplayName"), TEXT("None (use computed mip level)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMVM_None.ToolTip"), TEXT("Use hardware computed sample's mip level with automatic anisotropic filtering support."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("defines how MipValue is used"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureMipValueMode_CRC() { return 1528928727U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSample_NoRegister()
	{
		return UMaterialExpressionTextureSample::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSample()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureSample::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConstMipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstMipValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ConstMipValue, UMaterialExpressionTextureSample), 0x0010000000000001);
				UProperty* NewProp_ConstCoordinate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstCoordinate"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ConstCoordinate, UMaterialExpressionTextureSample), 0x0010000000000001);
				UProperty* NewProp_SamplerSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SamplerSource"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SamplerSource, UMaterialExpressionTextureSample), 0x0010000000000001, Z_Construct_UEnum_Engine_ESamplerSourceMode());
				UProperty* NewProp_MipValueMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipValueMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MipValueMode, UMaterialExpressionTextureSample), 0x0010000000000001, Z_Construct_UEnum_Engine_ETextureMipValueMode());
				UProperty* NewProp_CoordinatesDY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinatesDY"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CoordinatesDY, UMaterialExpressionTextureSample), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_CoordinatesDX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinatesDX"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CoordinatesDX, UMaterialExpressionTextureSample), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_MipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MipValue, UMaterialExpressionTextureSample), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_TextureObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureObject"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TextureObject, UMaterialExpressionTextureSample), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
				UProperty* NewProp_Coordinates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Coordinates"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Coordinates, UMaterialExpressionTextureSample), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstMipValue, TEXT("ToolTip"), TEXT("only used if MipValue is not hooked up"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_ConstCoordinate, TEXT("ToolTip"), TEXT("only used if Coordinates is not hooked up"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_SamplerSource, TEXT("ToolTip"), TEXT("Controls where the sampler for this texture lookup will come from.\nChoose 'from texture asset' to make use of the UTexture addressing settings,\nOtherwise use one of the global samplers, which will not consume a sampler slot.\nThis allows materials to use more than 16 unique textures on SM5 platforms."));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("Category"), TEXT("MaterialExpressionTextureSample"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("DisplayName"), TEXT("MipValueMode"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_MipValueMode, TEXT("ToolTip"), TEXT("Defines how the MipValue property is applied to the texture lookup"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("RequiredInput"), TEXT("true"));
				MetaData->SetValue(NewProp_CoordinatesDY, TEXT("ToolTip"), TEXT("Coordinates derivative over the Y axis"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("RequiredInput"), TEXT("true"));
				MetaData->SetValue(NewProp_CoordinatesDX, TEXT("ToolTip"), TEXT("Coordinates derivative over the X axis"));
				MetaData->SetValue(NewProp_MipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_MipValue, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_MipValue, TEXT("ToolTip"), TEXT("Defaults to 'ConstMipValue' if not specified"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ToolTip"), TEXT("Defaults to 'Texture' if not specified"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSample.h"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_Coordinates, TEXT("ToolTip"), TEXT("Defaults to 'ConstCoordinate' if not specified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSample(Z_Construct_UClass_UMaterialExpressionTextureSample, &UMaterialExpressionTextureSample::StaticClass, TEXT("UMaterialExpressionTextureSample"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSample);
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV_NoRegister()
	{
		return UMaterialExpressionParticleSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionParticleSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSample();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionParticleSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlend, UMaterialExpressionParticleSubUV, uint8);
				UProperty* NewProp_bBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlend, UMaterialExpressionParticleSubUV), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bBlend, UMaterialExpressionParticleSubUV), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionParticleSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSubUV.h"));
				MetaData->SetValue(NewProp_bBlend, TEXT("Category"), TEXT("MaterialExpressionParticleSubUV"));
				MetaData->SetValue(NewProp_bBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionParticleSubUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionParticleSubUV(Z_Construct_UClass_UMaterialExpressionParticleSubUV, &UMaterialExpressionParticleSubUV::StaticClass, TEXT("UMaterialExpressionParticleSubUV"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionParticleSubUV);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSample();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Group, UMaterialExpressionTextureSampleParameter), 0x0010000000000001);
				UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, UMaterialExpressionTextureSampleParameter), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, UMaterialExpressionTextureSampleParameter), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameter"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The name of the parameter Group to display in MaterialInstance Editor. Default is None group"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
				MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ToolTip"), TEXT("GUID that should be unique within the material, this is used for parameter renaming."));
				MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameter"));
				MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameter(Z_Construct_UClass_UMaterialExpressionTextureSampleParameter, &UMaterialExpressionTextureSampleParameter::StaticClass, TEXT("UMaterialExpressionTextureSampleParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter_NoRegister()
	{
		return UMaterialExpressionTextureObjectParameter::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureObjectParameter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureObjectParameter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object MaterialExpressionTextureSample Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureObjectParameter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureObjectParameter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureObjectParameter(Z_Construct_UClass_UMaterialExpressionTextureObjectParameter, &UMaterialExpressionTextureObjectParameter::StaticClass, TEXT("UMaterialExpressionTextureObjectParameter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureObjectParameter);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameter2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameter2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameter2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameter2D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameter2D(Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D, &UMaterialExpressionTextureSampleParameter2D::StaticClass, TEXT("UMaterialExpressionTextureSampleParameter2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameter2D);
	UEnum* Z_Construct_UEnum_Engine_ETextureColorChannel()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureColorChannel"), 0, Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureColorChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TCC_Red")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TCC_Green")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TCC_Blue")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TCC_Alpha")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TCC_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETextureColorChannel");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureColorChannel_CRC() { return 4246632277U; }
	UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask_NoRegister()
	{
		return UMaterialExpressionAntialiasedTextureMask::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionAntialiasedTextureMask::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Channel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Channel, UMaterialExpressionAntialiasedTextureMask), 0x0010000000000001, Z_Construct_UEnum_Engine_ETextureColorChannel());
				UProperty* NewProp_Threshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Threshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Threshold, UMaterialExpressionAntialiasedTextureMask), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Channel, TEXT("Category"), TEXT("MaterialExpressionAntialiasedTextureMask"));
				MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Threshold, TEXT("Category"), TEXT("MaterialExpressionAntialiasedTextureMask"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionAntialiasedTextureMask.h"));
				MetaData->SetValue(NewProp_Threshold, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Threshold, TEXT("UIMin"), TEXT("0.0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionAntialiasedTextureMask(Z_Construct_UClass_UMaterialExpressionAntialiasedTextureMask, &UMaterialExpressionAntialiasedTextureMask::StaticClass, TEXT("UMaterialExpressionAntialiasedTextureMask"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionAntialiasedTextureMask);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameterSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameterSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlend, UMaterialExpressionTextureSampleParameterSubUV, uint8);
				UProperty* NewProp_bBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlend, UMaterialExpressionTextureSampleParameterSubUV), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bBlend, UMaterialExpressionTextureSampleParameterSubUV), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
				MetaData->SetValue(NewProp_bBlend, TEXT("Category"), TEXT("MaterialExpressionTextureSampleParameterSubUV"));
				MetaData->SetValue(NewProp_bBlend, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterSubUV.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameterSubUV(Z_Construct_UClass_UMaterialExpressionTextureSampleParameterSubUV, &UMaterialExpressionTextureSampleParameterSubUV::StaticClass, TEXT("UMaterialExpressionTextureSampleParameterSubUV"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameterSubUV);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube_NoRegister()
	{
		return UMaterialExpressionTextureSampleParameterCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpressionTextureSampleParameter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureSampleParameterCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureSampleParameterCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureSampleParameterCube.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureSampleParameterCube(Z_Construct_UClass_UMaterialExpressionTextureSampleParameterCube, &UMaterialExpressionTextureSampleParameterCube::StaticClass, TEXT("UMaterialExpressionTextureSampleParameterCube"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureSampleParameterCube);
	UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate_NoRegister()
	{
		return UMaterialExpressionTextureCoordinate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureCoordinate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureCoordinate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UnMirrorV, UMaterialExpressionTextureCoordinate, uint8);
				UProperty* NewProp_UnMirrorV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnMirrorV"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UnMirrorV, UMaterialExpressionTextureCoordinate), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(UnMirrorV, UMaterialExpressionTextureCoordinate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UnMirrorU, UMaterialExpressionTextureCoordinate, uint8);
				UProperty* NewProp_UnMirrorU = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnMirrorU"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UnMirrorU, UMaterialExpressionTextureCoordinate), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(UnMirrorU, UMaterialExpressionTextureCoordinate), sizeof(uint8), false);
				UProperty* NewProp_VTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VTiling"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VTiling, UMaterialExpressionTextureCoordinate), 0x0010000000000001);
				UProperty* NewProp_UTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UTiling"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UTiling, UMaterialExpressionTextureCoordinate), 0x0010000000000001);
				UProperty* NewProp_CoordinateIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CoordinateIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CoordinateIndex, UMaterialExpressionTextureCoordinate), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorV, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UnMirrorV, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UnMirrorU, TEXT("ToolTip"), TEXT("Would like to unmirror U or V\n- if the texture is mirrored and if you would like to undo mirroring for this texture sample, use this to unmirror"));
				MetaData->SetValue(NewProp_VTiling, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_VTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_VTiling, TEXT("ToolTip"), TEXT("Controls how much the texture tiles vertically, by scaling the V component of the vertex UVs by the specified amount."));
				MetaData->SetValue(NewProp_UTiling, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_UTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_UTiling, TEXT("ToolTip"), TEXT("Controls how much the texture tiles horizontally, by scaling the U component of the vertex UVs by the specified amount."));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("Category"), TEXT("MaterialExpressionTextureCoordinate"));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureCoordinate.h"));
				MetaData->SetValue(NewProp_CoordinateIndex, TEXT("ToolTip"), TEXT("Texture coordinate index"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureCoordinate(Z_Construct_UClass_UMaterialExpressionTextureCoordinate, &UMaterialExpressionTextureCoordinate::StaticClass, TEXT("UMaterialExpressionTextureCoordinate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureCoordinate);
	UEnum* Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialExposedTextureProperty"), 0, Get_Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialExposedTextureProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMTM_TextureSize")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMTM_TexelSize")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMTM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialExposedTextureProperty");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureProperty.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TMTM_TexelSize.DisplayName"), TEXT("Texel Size"));
			MetaData->SetValue(ReturnEnum, TEXT("TMTM_TexelSize.ToolTip"), TEXT("The texture's texel size in the UV space (1 / Texture Size)"));
			MetaData->SetValue(ReturnEnum, TEXT("TMTM_TextureSize.DisplayName"), TEXT("Texture Size"));
			MetaData->SetValue(ReturnEnum, TEXT("TMTM_TextureSize.ToolTip"), TEXT("The texture's size."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Selects the texture property to output"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty_CRC() { return 1566031197U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTextureProperty_NoRegister()
	{
		return UMaterialExpressionTextureProperty::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTextureProperty()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTextureProperty::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Property = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Property"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Property, UMaterialExpressionTextureProperty), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialExposedTextureProperty());
				UProperty* NewProp_TextureObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureObject"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TextureObject, UMaterialExpressionTextureProperty), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTextureProperty.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("Category"), TEXT("UMaterialExpressionTextureProperty"));
				MetaData->SetValue(NewProp_Property, TEXT("DisplayName"), TEXT("Texture Property"));
				MetaData->SetValue(NewProp_Property, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("ToolTip"), TEXT("Texture property to be accessed"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTextureProperty.h"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("RequiredInput"), TEXT("false"));
				MetaData->SetValue(NewProp_TextureObject, TEXT("ToolTip"), TEXT("Texture Object to access the property from."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTextureProperty(Z_Construct_UClass_UMaterialExpressionTextureProperty, &UMaterialExpressionTextureProperty::StaticClass, TEXT("UMaterialExpressionTextureProperty"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTextureProperty);
	UClass* Z_Construct_UClass_UMaterialExpressionTime_NoRegister()
	{
		return UMaterialExpressionTime::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Period, UMaterialExpressionTime), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_Period, UMaterialExpressionTime, uint8);
				UProperty* NewProp_bOverride_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_Period"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_Period, UMaterialExpressionTime), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_Period, UMaterialExpressionTime), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnorePause, UMaterialExpressionTime, uint8);
				UProperty* NewProp_bIgnorePause = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnorePause"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnorePause, UMaterialExpressionTime), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnorePause, UMaterialExpressionTime), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("MaterialExpressionTime"));
				MetaData->SetValue(NewProp_Period, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Period, TEXT("editcondition"), TEXT("bOverride_Period"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("Period at which to wrap around time"));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("Category"), TEXT("MaterialExpressionTime"));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_bOverride_Period, TEXT("ToolTip"), TEXT("Enables or disables the Period value."));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("Category"), TEXT("MaterialExpressionTime"));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTime.h"));
				MetaData->SetValue(NewProp_bIgnorePause, TEXT("ToolTip"), TEXT("This time continues advancing regardless of whether the game is paused."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTime(Z_Construct_UClass_UMaterialExpressionTime, &UMaterialExpressionTime::StaticClass, TEXT("UMaterialExpressionTime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTime);
	UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialVectorCoordTransform"), 0, Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialVectorCoordTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_Tangent")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_Local")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_World")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_View")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_Camera")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_ParticleWorld")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORM_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialVectorCoordTransform");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Camera.DisplayName"), TEXT("Camera Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Camera.ToolTip"), TEXT("Camera space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Local.ToolTip"), TEXT("Local space (relative to the rendered object, = object space)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_ParticleWorld.DisplayName"), TEXT("Mesh particle space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_ParticleWorld.ToolTip"), TEXT("Particle space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Tangent.DisplayName"), TEXT("Tangent Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_Tangent.ToolTip"), TEXT("Tangent space (relative to the surface)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_View.ToolTip"), TEXT("View space (relative to the camera/eye, = camera space, differs from camera space in the shadow passes)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_World.DisplayName"), TEXT("World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORM_World.ToolTip"), TEXT("World space, a unit is 1cm"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform_CRC() { return 862149385U; }
	UEnum* Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialVectorCoordTransformSource"), 0, Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialVectorCoordTransformSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_Tangent")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_Local")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_World")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_View")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_Camera")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_ParticleWorld")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMSOURCE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialVectorCoordTransformSource");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Camera.DisplayName"), TEXT("Camera Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Camera.ToolTip"), TEXT("Camera space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Local.ToolTip"), TEXT("Local space (relative to the rendered object, = object space)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_ParticleWorld.DisplayName"), TEXT("Mesh particle space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_ParticleWorld.ToolTip"), TEXT("Particle space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Tangent.DisplayName"), TEXT("Tangent Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_Tangent.ToolTip"), TEXT("Tangent space (relative to the surface)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_View.ToolTip"), TEXT("View space (relative to the camera/eye, = camera space, differs from camera space in the shadow passes)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_World.DisplayName"), TEXT("World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMSOURCE_World.ToolTip"), TEXT("World space, a unit is 1cm"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource_CRC() { return 2565039116U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTransform_NoRegister()
	{
		return UMaterialExpressionTransform::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTransform()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTransform::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransformType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TransformType, UMaterialExpressionTransform), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialVectorCoordTransform());
				UProperty* NewProp_TransformSourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformSourceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TransformSourceType, UMaterialExpressionTransform), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialVectorCoordTransformSource());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTransform), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("Category"), TEXT("MaterialExpressionTransform"));
				MetaData->SetValue(NewProp_TransformType, TEXT("DisplayName"), TEXT("Destination"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ToolTip"), TEXT("Destination coordinate space of the FVector"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("Category"), TEXT("MaterialExpressionTransform"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ToolTip"), TEXT("Source coordinate space of the FVector"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransform.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("input expression for this transform"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTransform(Z_Construct_UClass_UMaterialExpressionTransform, &UMaterialExpressionTransform::StaticClass, TEXT("UMaterialExpressionTransform"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTransform);
	UEnum* Z_Construct_UEnum_Engine_EMaterialPositionTransformSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialPositionTransformSource"), 0, Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialPositionTransformSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_Local")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_World")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_TranslatedWorld")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_View")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_Camera")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_Particle")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRANSFORMPOSSOURCE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialPositionTransformSource");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Camera.DisplayName"), TEXT("Camera Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Camera.ToolTip"), TEXT("Camera space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Local.DisplayName"), TEXT("Local Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Local.ToolTip"), TEXT("Local space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Particle.DisplayName"), TEXT("Mesh Particle Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_Particle.ToolTip"), TEXT("Particle space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_TranslatedWorld.DisplayName"), TEXT("Camera Relative World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_TranslatedWorld.ToolTip"), TEXT("Camera relative world space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_View.DisplayName"), TEXT("View Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_View.ToolTip"), TEXT("View space (differs from camera space in the shadow passes)"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_World.DisplayName"), TEXT("Absolute World Space"));
			MetaData->SetValue(ReturnEnum, TEXT("TRANSFORMPOSSOURCE_World.ToolTip"), TEXT("Absolute world space"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialPositionTransformSource_CRC() { return 2184045727U; }
	UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition_NoRegister()
	{
		return UMaterialExpressionTransformPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTransformPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTransformPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransformType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TransformType, UMaterialExpressionTransformPosition), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialPositionTransformSource());
				UProperty* NewProp_TransformSourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformSourceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TransformSourceType, UMaterialExpressionTransformPosition), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialPositionTransformSource());
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTransformPosition), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("Category"), TEXT("MaterialExpressionTransformPosition"));
				MetaData->SetValue(NewProp_TransformType, TEXT("DisplayName"), TEXT("Destination"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformType, TEXT("ToolTip"), TEXT("type of transform to apply to the input expression"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("Category"), TEXT("MaterialExpressionTransformPosition"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_TransformSourceType, TEXT("ToolTip"), TEXT("source format of the position that will be transformed"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTransformPosition.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ToolTip"), TEXT("input expression for this transform"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTransformPosition(Z_Construct_UClass_UMaterialExpressionTransformPosition, &UMaterialExpressionTransformPosition::StaticClass, TEXT("UMaterialExpressionTransformPosition"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTransformPosition);
	UClass* Z_Construct_UClass_UMaterialExpressionTruncate_NoRegister()
	{
		return UMaterialExpressionTruncate::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTruncate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTruncate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Input = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Input"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Input, UMaterialExpressionTruncate), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTruncate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTruncate.h"));
				MetaData->SetValue(NewProp_Input, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTruncate.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTruncate(Z_Construct_UClass_UMaterialExpressionTruncate, &UMaterialExpressionTruncate::StaticClass, TEXT("UMaterialExpressionTruncate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTruncate);
	UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign_NoRegister()
	{
		return UMaterialExpressionTwoSidedSign::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionTwoSidedSign()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionTwoSidedSign::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionTwoSidedSign.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionTwoSidedSign.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionTwoSidedSign(Z_Construct_UClass_UMaterialExpressionTwoSidedSign, &UMaterialExpressionTwoSidedSign::StaticClass, TEXT("UMaterialExpressionTwoSidedSign"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionTwoSidedSign);
	UEnum* Z_Construct_UEnum_Engine_EVectorNoiseFunction()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVectorNoiseFunction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVectorNoiseFunction"), 0, Get_Z_Construct_UEnum_Engine_EVectorNoiseFunction_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVectorNoiseFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_CellnoiseALU")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_VectorALU")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_GradientALU")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_CurlALU")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_VoronoiALU")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VNF_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVectorNoiseFunction");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_CellnoiseALU.DisplayName"), TEXT("Cellnoise"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_CellnoiseALU.ToolTip"), TEXT("Random color for each unit cell in 3D space.\nRGB output range 0 to 1\nR only = 9 instructions, RGB = 11 instructions"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_CurlALU.DisplayName"), TEXT("Perlin Curl"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_CurlALU.ToolTip"), TEXT("Curl of Perlin noise, useful for 3D flow directions.\nRGB = signed curl vector\n~162 instructions"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_GradientALU.DisplayName"), TEXT("Perlin Gradient"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_GradientALU.ToolTip"), TEXT("Gradient of Perlin noise, useful for bumps.\nRGB = Gradient of scalar noise (signed 3D vector)\nA = Base scalar noise with range -1 to 1\nA only = ~83 instructions, RGBA = ~106 instructions"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_VectorALU.DisplayName"), TEXT("Perlin 3D Noise"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_VectorALU.ToolTip"), TEXT("Perlin-style noise with 3D vector/color output.\nRGB output range -1 to 1\nR only = ~83 instructions, RGB = ~125 instructions"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_VoronoiALU.DisplayName"), TEXT("Voronoi"));
			MetaData->SetValue(ReturnEnum, TEXT("VNF_VoronoiALU.ToolTip"), TEXT("Also known as Worley or Cellular noise.\nRGB = *position* of closest point at center of Voronoi cell\nA = distance to closest point with range 0 to about 4\nQuality levels 1-4 search 8, 16, 27 & 32 cells\nAll ~20 instructions per cell searched"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVectorNoiseFunction_CRC() { return 473496037U; }
	UClass* Z_Construct_UClass_UMaterialExpressionVectorNoise_NoRegister()
	{
		return UMaterialExpressionVectorNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVectorNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionVectorNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TileSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TileSize"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(TileSize, UMaterialExpressionVectorNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTiling, UMaterialExpressionVectorNoise, uint8);
				UProperty* NewProp_bTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTiling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTiling, UMaterialExpressionVectorNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTiling, UMaterialExpressionVectorNoise), sizeof(uint8), false);
				UProperty* NewProp_Quality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Quality"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Quality, UMaterialExpressionVectorNoise), 0x0010000000000001);
				UProperty* NewProp_NoiseFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NoiseFunction, UMaterialExpressionVectorNoise), 0x0010000000000001, Z_Construct_UEnum_Engine_EVectorNoiseFunction());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UMaterialExpressionVectorNoise), 0x0010000000000000, Z_Construct_UScriptStruct_FExpressionInput());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_TileSize, TEXT("Category"), TEXT("MaterialExpressionVectorNoise"));
				MetaData->SetValue(NewProp_TileSize, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_TileSize, TEXT("ToolTip"), TEXT("How many units in each tile (if Tiling is on)\nFor Perlin noise functions, Tile Size must be a multiple of three"));
				MetaData->SetValue(NewProp_TileSize, TEXT("UIMin"), TEXT("4"));
				MetaData->SetValue(NewProp_bTiling, TEXT("Category"), TEXT("MaterialExpressionVectorNoise"));
				MetaData->SetValue(NewProp_bTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_bTiling, TEXT("ToolTip"), TEXT("Whether tile the noise pattern, useful for baking to seam-free repeating textures"));
				MetaData->SetValue(NewProp_Quality, TEXT("Category"), TEXT("MaterialExpressionVectorNoise"));
				MetaData->SetValue(NewProp_Quality, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_Quality, TEXT("ToolTip"), TEXT("For noise functions where applicable, lower numbers are faster and lower quality, higher numbers are slower and higher quality"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMax"), TEXT("4"));
				MetaData->SetValue(NewProp_Quality, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("Category"), TEXT("MaterialExpressionVectorNoise"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("DisplayName"), TEXT("Function"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_NoiseFunction, TEXT("ToolTip"), TEXT("Noise function, affects performance and look"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVectorNoise.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("2 to 3 dimensional vector"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVectorNoise(Z_Construct_UClass_UMaterialExpressionVectorNoise, &UMaterialExpressionVectorNoise::StaticClass, TEXT("UMaterialExpressionVectorNoise"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVectorNoise);
	UClass* Z_Construct_UClass_UMaterialExpressionVertexColor_NoRegister()
	{
		return UMaterialExpressionVertexColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVertexColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionVertexColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVertexColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVertexColor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVertexColor(Z_Construct_UClass_UMaterialExpressionVertexColor, &UMaterialExpressionVertexColor::StaticClass, TEXT("UMaterialExpressionVertexColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVertexColor);
	UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS_NoRegister()
	{
		return UMaterialExpressionVertexNormalWS::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionVertexNormalWS()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionVertexNormalWS::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionVertexNormalWS.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionVertexNormalWS.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionVertexNormalWS(Z_Construct_UClass_UMaterialExpressionVertexNormalWS, &UMaterialExpressionVertexNormalWS::StaticClass, TEXT("UMaterialExpressionVertexNormalWS"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionVertexNormalWS);
	UEnum* Z_Construct_UEnum_Engine_EMaterialExposedViewProperty()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialExposedViewProperty"), 0, Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialExposedViewProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_BufferSize")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_FieldOfView")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_TanHalfFieldOfView")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_ViewSize")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_WorldSpaceViewPosition")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_WorldSpaceCameraPosition")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MEVP_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialExposedViewProperty");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_BufferSize.DisplayName"), TEXT("Render Target Size"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_BufferSize.ToolTip"), TEXT("Horizontal and vertical size of the view's buffer in pixels"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_FieldOfView.DisplayName"), TEXT("Field Of View"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_FieldOfView.ToolTip"), TEXT("Horizontal and vertical field of view angles in radian"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_TanHalfFieldOfView.DisplayName"), TEXT("Tan(0.5 * Field Of View)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_TanHalfFieldOfView.ToolTip"), TEXT("Tan(FieldOfView * 0.5)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_ViewSize.DisplayName"), TEXT("View Size"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_ViewSize.ToolTip"), TEXT("Horizontal and vertical size of the view in pixels"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceCameraPosition.DisplayName"), TEXT("Camera Position (Absolute World Space)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceCameraPosition.ToolTip"), TEXT("Absolute world space camera position"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceViewPosition.DisplayName"), TEXT("View Position (Absolute World Space)"));
			MetaData->SetValue(ReturnEnum, TEXT("MEVP_WorldSpaceViewPosition.ToolTip"), TEXT("Absolute world space view position (differs from the camera position in the shadow passes)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialExposedViewProperty_CRC() { return 2239679018U; }
	UClass* Z_Construct_UClass_UMaterialExpressionViewProperty_NoRegister()
	{
		return UMaterialExpressionViewProperty::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionViewProperty()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionViewProperty::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Property = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Property"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Property, UMaterialExpressionViewProperty), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialExposedViewProperty());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("Category"), TEXT("UMaterialExpressionViewProperty"));
				MetaData->SetValue(NewProp_Property, TEXT("DisplayName"), TEXT("View Property"));
				MetaData->SetValue(NewProp_Property, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewProperty.h"));
				MetaData->SetValue(NewProp_Property, TEXT("ToolTip"), TEXT("View input property to be accessed"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionViewProperty(Z_Construct_UClass_UMaterialExpressionViewProperty, &UMaterialExpressionViewProperty::StaticClass, TEXT("UMaterialExpressionViewProperty"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionViewProperty);
	UClass* Z_Construct_UClass_UMaterialExpressionViewSize_NoRegister()
	{
		return UMaterialExpressionViewSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionViewSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionViewSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20002080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionViewSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionViewSize.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionViewSize(Z_Construct_UClass_UMaterialExpressionViewSize, &UMaterialExpressionViewSize::StaticClass, TEXT("UMaterialExpressionViewSize"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionViewSize);
	UEnum* Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EWorldPositionIncludedOffsets"), 0, Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWorldPositionIncludedOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("WPT_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("WPT_ExcludeAllShaderOffsets")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("WPT_CameraRelative")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("WPT_CameraRelativeNoOffsets")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("WPT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EWorldPositionIncludedOffsets");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Specifies which shader generated offsets should included in the world position (displacement/WPO etc.)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelative.DisplayName"), TEXT("Camera Relative World Position (Including Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelative.ToolTip"), TEXT("Camera relative world position with all material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelativeNoOffsets.DisplayName"), TEXT("Camera Relative World Position (Excluding Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_CameraRelativeNoOffsets.ToolTip"), TEXT("Camera relative world position with no material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_Default.DisplayName"), TEXT("Absolute World Position (Including Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_Default.ToolTip"), TEXT("Absolute world position with all material shader offsets applied"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_ExcludeAllShaderOffsets.DisplayName"), TEXT("Absolute World Position (Excluding Material Shader Offsets)"));
			MetaData->SetValue(ReturnEnum, TEXT("WPT_ExcludeAllShaderOffsets.ToolTip"), TEXT("Absolute world position with no material shader offsets applied"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets_CRC() { return 3358917639U; }
	UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition_NoRegister()
	{
		return UMaterialExpressionWorldPosition::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialExpressionWorldPosition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialExpression();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialExpressionWorldPosition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20082080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WorldPositionShaderOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionShaderOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(WorldPositionShaderOffset, UMaterialExpressionWorldPosition), 0x0010000000000001, Z_Construct_UEnum_Engine_EWorldPositionIncludedOffsets());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialExpressionWorldPosition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("Category"), TEXT("UMaterialExpressionWorldPosition"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("DisplayName"), TEXT("Shader Offsets"));
				MetaData->SetValue(NewProp_WorldPositionShaderOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialExpressionWorldPosition.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialExpressionWorldPosition(Z_Construct_UClass_UMaterialExpressionWorldPosition, &UMaterialExpressionWorldPosition::StaticClass, TEXT("UMaterialExpressionWorldPosition"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialExpressionWorldPosition);
	UClass* Z_Construct_UClass_UMaterialFunction_NoRegister()
	{
		return UMaterialFunction::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialFunction()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialFunction::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ThumbnailInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThumbnailInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailInfo, UMaterialFunction), 0x00120008000a0009, Z_Construct_UClass_UThumbnailInfo_NoRegister());
				UProperty* NewProp_CombinedOutputTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CombinedOutputTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(CombinedOutputTypes, UMaterialFunction), 0x0010010800000000);
				UProperty* NewProp_CombinedInputTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CombinedInputTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(CombinedInputTypes, UMaterialFunction), 0x0010010800000000);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReentrantFlag, UMaterialFunction, uint8);
				UProperty* NewProp_bReentrantFlag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReentrantFlag"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReentrantFlag, UMaterialFunction), 0x0040000000002000, CPP_BOOL_PROPERTY_BITMASK(bReentrantFlag, UMaterialFunction), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PreviewMaterial, UMaterialFunction), 0x0010000800002000, Z_Construct_UClass_UMaterial_NoRegister());
				UProperty* NewProp_FunctionEditorComments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionEditorComments"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FunctionEditorComments, UMaterialFunction), 0x0010000800000000);
				UProperty* NewProp_FunctionEditorComments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionEditorComments, TEXT("FunctionEditorComments"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UMaterialExpressionComment_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FunctionExpressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FunctionExpressions"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FunctionExpressions, UMaterialFunction), 0x0010000000000000);
				UProperty* NewProp_FunctionExpressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FunctionExpressions, TEXT("FunctionExpressions"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_LibraryCategoriesText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LibraryCategoriesText"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LibraryCategoriesText, UMaterialFunction), 0x0010010800000001);
				UProperty* NewProp_LibraryCategoriesText_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LibraryCategoriesText, TEXT("LibraryCategoriesText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
				UProperty* NewProp_LibraryCategories = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LibraryCategories"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LibraryCategories_DEPRECATED, UMaterialFunction), 0x0010010820000000);
				UProperty* NewProp_LibraryCategories_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LibraryCategories, TEXT("LibraryCategories"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000820000000);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExposeToLibrary, UMaterialFunction, uint8);
				UProperty* NewProp_bExposeToLibrary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExposeToLibrary"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExposeToLibrary, UMaterialFunction), 0x0010010000000001, CPP_BOOL_PROPERTY_BITMASK(bExposeToLibrary, UMaterialFunction), sizeof(uint8), false);
				UProperty* NewProp_Description = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Description"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Description, UMaterialFunction), 0x0010010000000001);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ParentFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentFunction, UMaterialFunction), 0x0010000800002000, Z_Construct_UClass_UMaterialFunction_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterialFunction), 0x0010000000200000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Material Function is a collection of material expressions that can be reused in different materials"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("Category"), TEXT("Thumbnail"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ToolTip"), TEXT("Information for thumbnail rendering"));
				MetaData->SetValue(NewProp_CombinedOutputTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_CombinedInputTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bReentrantFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bReentrantFlag, TEXT("ToolTip"), TEXT("Transient flag used to track re-entrance in recursive functions like IsDependent."));
				MetaData->SetValue(NewProp_PreviewMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionEditorComments, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionEditorComments, TEXT("ToolTip"), TEXT("Array of comments associated with this material; viewed in the material editor."));
				MetaData->SetValue(NewProp_FunctionExpressions, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_FunctionExpressions, TEXT("ToolTip"), TEXT("Array of material expressions, excluding Comments.  Used by the material editor."));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_LibraryCategoriesText, TEXT("ToolTip"), TEXT("Categories that this function belongs to in the material function library.\nIdeally categories should be chosen carefully so that there are not too many."));
				MetaData->SetValue(NewProp_LibraryCategories, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_LibraryCategories, TEXT("ToolTip"), TEXT("Categories that this function belongs to in the material function library.\nIdeally categories should be chosen carefully so that there are not too many."));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_bExposeToLibrary, TEXT("ToolTip"), TEXT("Whether to list this function in the material function library, which is a window in the material editor that lists categorized functions."));
				MetaData->SetValue(NewProp_Description, TEXT("Category"), TEXT("MaterialFunction"));
				MetaData->SetValue(NewProp_Description, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_Description, TEXT("ToolTip"), TEXT("Description of the function which will be displayed as a tooltip wherever the function is used."));
				MetaData->SetValue(NewProp_ParentFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_ParentFunction, TEXT("ToolTip"), TEXT("Used in the material editor, points to the function asset being edited, which this function is just a preview for."));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialFunction.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Used by materials using this function to know when to recompile."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialFunction(Z_Construct_UClass_UMaterialFunction, &UMaterialFunction::StaticClass, TEXT("UMaterialFunction"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialFunction);
	UEnum* Z_Construct_UEnum_Engine_EMaterialDecalResponse()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialDecalResponse"), 0, Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialDecalResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_ColorNormalRoughness")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_Color")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_ColorNormal")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_ColorRoughness")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_Normal")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_NormalRoughness")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_Roughness")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MDR_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialDecalResponse");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Color.DisplayName"), TEXT("Color"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Color.ToolTip"), TEXT("Receive Decals, applies color DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormal.DisplayName"), TEXT("Color Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormal.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormalRoughness.DisplayName"), TEXT("Color Normal Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorNormalRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorRoughness.DisplayName"), TEXT("Color Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_ColorRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_None.ToolTip"), TEXT("Do not receive decals (Later we still can read the DBuffer channels to customize the effect, this frees up some interpolators)."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Normal.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_NormalRoughness.DisplayName"), TEXT("Normal Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_NormalRoughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Roughness.DisplayName"), TEXT("Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("MDR_Roughness.ToolTip"), TEXT("Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines how the material reacts on DBuffer decals, later we can expose more variants between None and Default."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialDecalResponse_CRC() { return 1739987633U; }
	UEnum* Z_Construct_UEnum_Engine_EMaterialDomain()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaterialDomain"), 0, Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaterialDomain"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_Surface")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_DeferredDecal")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_LightFunction")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_PostProcess")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_UI")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MD_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMaterialDomain");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("MD_DeferredDecal.DisplayName"), TEXT("Deferred Decal"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_DeferredDecal.ToolTip"), TEXT("The material's attributes describe a deferred decal, and will be mapped onto the decal's frustum."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_LightFunction.DisplayName"), TEXT("Light Function"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_LightFunction.ToolTip"), TEXT("The material's attributes describe a light's distribution."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_PostProcess.DisplayName"), TEXT("Post Process"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_PostProcess.ToolTip"), TEXT("The material will be used in a custom post process pass."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_Surface.DisplayName"), TEXT("Surface"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_Surface.ToolTip"), TEXT("The material's attributes describe a 3d surface."));
			MetaData->SetValue(ReturnEnum, TEXT("MD_UI.DisplayName"), TEXT("User Interface"));
			MetaData->SetValue(ReturnEnum, TEXT("MD_UI.ToolTip"), TEXT("The material will be used for UMG or Slate UI"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines the domain of a material."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaterialDomain_CRC() { return 3016689535U; }
	UEnum* Z_Construct_UEnum_Engine_EDecalBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDecalBlendMode"), 0, Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDecalBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_Translucent")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_Stain")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_Normal")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_Emissive")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_ColorNormalRoughness")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_Color")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_ColorNormal")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_ColorRoughness")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_Normal")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_NormalRoughness")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_DBuffer_Roughness")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_Volumetric_DistanceFunction")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DBM_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EDecalBlendMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Color.DisplayName"), TEXT("DBuffer Translucent Color"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Color.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormal.DisplayName"), TEXT("DBuffer Translucent Color,Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormal.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Color if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormalRoughness.DisplayName"), TEXT("DBuffer Translucent Color,Normal,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorNormalRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_TranslucentNormal if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorRoughness.DisplayName"), TEXT("DBuffer Translucent Color,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_ColorRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Normal.DisplayName"), TEXT("DBuffer Translucent Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Normal.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_NormalRoughness.DisplayName"), TEXT("DBuffer Translucent Normal,Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_NormalRoughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Roughness if normal is not hooked up)."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Roughness.DisplayName"), TEXT("DBuffer Translucent Roughness"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_DBuffer_Roughness.ToolTip"), TEXT("Non metal, put into DBuffer to work for baked lighting as well."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Emissive.DisplayName"), TEXT("Emissive"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Emissive.ToolTip"), TEXT("Additive emissive only."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Normal.ToolTip"), TEXT("Only blend normal, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Stain.DisplayName"), TEXT("Stain"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Stain.ToolTip"), TEXT("Modulate BaseColor, blend rest, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Translucent.DisplayName"), TEXT("Translucent"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Translucent.ToolTip"), TEXT("Blend full material, updating the GBuffer, does not work for baked lighting."));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Volumetric_DistanceFunction.DisplayName"), TEXT("Volumetric Distance Function (experimental)"));
			MetaData->SetValue(ReturnEnum, TEXT("DBM_Volumetric_DistanceFunction.ToolTip"), TEXT("Output signed distance in Opacity depending on LightVector. Note: Can be costly, no shadow casting but receiving, no per pixel normal yet, no quality settings yet"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines how the GBuffer channels are getting manipulated by a decal material pass. Actual index is used to control shader parameters so don't change order."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDecalBlendMode_CRC() { return 2660666571U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialParameterCollectionInfo"), sizeof(FMaterialParameterCollectionInfo), Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialParameterCollectionInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialParameterCollectionInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_ParameterCollection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterCollection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParameterCollection, FMaterialParameterCollectionInfo), 0x0010000000000000, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
			UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StateId, FMaterialParameterCollectionInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores information about a parameter collection that this material references, used to know when the material needs to be recompiled."));
			MetaData->SetValue(NewProp_ParameterCollection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ParameterCollection, TEXT("ToolTip"), TEXT("The collection which this material has a dependency on."));
			MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Id that the collection had when this material was last compiled."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo_CRC() { return 2690183480U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialFunctionInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialFunctionInfo"), sizeof(FMaterialFunctionInfo), Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialFunctionInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialFunctionInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Function = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Function"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Function, FMaterialFunctionInfo), 0x0010000000000000, Z_Construct_UClass_UMaterialFunction_NoRegister());
			UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StateId, FMaterialFunctionInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores information about a function that this material references, used to know when the material needs to be recompiled."));
			MetaData->SetValue(NewProp_Function, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Function, TEXT("ToolTip"), TEXT("The function which this material has a dependency on."));
			MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Id that the function had when this material was last compiled."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialFunctionInfo_CRC() { return 4064967019U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVector2MaterialInput()
	{
		struct FMaterialInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		struct FVector2MaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			float ConstantX;
			float ConstantY;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("Vector2MaterialInput"), sizeof(FVector2MaterialInput), Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Vector2MaterialInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FVector2MaterialInput), ALIGNOF(FVector2MaterialInput));
			UProperty* NewProp_ConstantY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantY"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstantY, FVector2MaterialInput), 0x0010000000000000);
			UProperty* NewProp_ConstantX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantX"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConstantX, FVector2MaterialInput), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FVector2MaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FVector2MaterialInput), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FVector2MaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ConstantY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ConstantX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVector2MaterialInput_CRC() { return 4271866060U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVectorMaterialInput()
	{
		struct FMaterialInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		struct FVectorMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			FVector Constant;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("VectorMaterialInput"), sizeof(FVectorMaterialInput), Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorMaterialInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FVectorMaterialInput), ALIGNOF(FVectorMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Constant, FVectorMaterialInput), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FVectorMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FVectorMaterialInput), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FVectorMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVectorMaterialInput_CRC() { return 1868781425U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScalarMaterialInput()
	{
		struct FMaterialInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		struct FScalarMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			float Constant;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ScalarMaterialInput"), sizeof(FScalarMaterialInput), Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScalarMaterialInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FScalarMaterialInput), ALIGNOF(FScalarMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Constant, FScalarMaterialInput), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FScalarMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FScalarMaterialInput), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FScalarMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScalarMaterialInput_CRC() { return 2539157520U; }
	UScriptStruct* Z_Construct_UScriptStruct_FColorMaterialInput()
	{
		struct FMaterialInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		struct FColorMaterialInput : public FMaterialInput
		{
			uint8 UseConstant:1;
			FColor Constant;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ColorMaterialInput"), sizeof(FColorMaterialInput), Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ColorMaterialInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FMaterialInput(), NULL, EStructFlags(0x00000008), sizeof(FColorMaterialInput), ALIGNOF(FColorMaterialInput));
			UProperty* NewProp_Constant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constant"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Constant, FColorMaterialInput), 0x0010000000000000, Z_Construct_UScriptStruct_FColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseConstant, FColorMaterialInput, uint8);
			UProperty* NewProp_UseConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseConstant, FColorMaterialInput), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(UseConstant, FColorMaterialInput), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Constant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_UseConstant, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FColorMaterialInput_CRC() { return 2995076378U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialInput()
	{
		struct FMaterialInput
		{
#if WITH_EDITORONLY_DATA
			UMaterialExpression* Expression;
#endif // WITH_EDITORONLY_DATA
			int32 OutputIndex;
			FString InputName;
			int32 Mask;
			int32 MaskR;
			int32 MaskG;
			int32 MaskB;
			int32 MaskA;
			FName ExpressionName;
		};

		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialInput"), sizeof(FMaterialInput), Get_Z_Construct_UScriptStruct_FMaterialInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, NULL, EStructFlags(0x00000008), sizeof(FMaterialInput), ALIGNOF(FMaterialInput));
			UProperty* NewProp_ExpressionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ExpressionName, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_MaskA = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskA"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskA, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_MaskB = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskB"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskB, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_MaskG = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskG"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskG, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_MaskR = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaskR"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaskR, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_Mask = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mask"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Mask, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_InputName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InputName, FMaterialInput), 0x0010000000000000);
			UProperty* NewProp_OutputIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(OutputIndex, FMaterialInput), 0x0010000000000000);
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_Expression = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Expression"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Expression, FMaterialInput), 0x0010000800000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ExpressionName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_ExpressionName, TEXT("ToolTip"), TEXT("Material expression name that this input is connected to, or None if not connected. Used only in cooked builds"));
			MetaData->SetValue(NewProp_MaskA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskB, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskG, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_MaskR, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Mask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_InputName, TEXT("ToolTip"), TEXT("Optional name of the input.\nNote that this is the only member which is not derived from the output currently connected."));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_OutputIndex, TEXT("ToolTip"), TEXT("Index into Expression's outputs array that this input is connected to."));
			MetaData->SetValue(NewProp_Expression, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
			MetaData->SetValue(NewProp_Expression, TEXT("ToolTip"), TEXT("Material expression that this input is connected to, or NULL if not connected."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialInput_CRC() { return 3488618139U; }
	UClass* Z_Construct_UClass_UMaterial_NoRegister()
	{
		return UMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInterface();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ReferencedTextureGuids = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReferencedTextureGuids, UMaterial), 0x0040000800000000);
				UProperty* NewProp_ReferencedTextureGuids_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedTextureGuids, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ExpressionTextureReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExpressionTextureReferences"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ExpressionTextureReferences, UMaterial), 0x0040000000002000);
				UProperty* NewProp_ExpressionTextureReferences_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ExpressionTextureReferences, TEXT("ExpressionTextureReferences"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_RefractionDepthBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefractionDepthBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RefractionDepthBias, UMaterial), 0x0010000000000001);
				UProperty* NewProp_RefractionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RefractionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RefractionMode, UMaterial), 0x0010000000000001, Z_Construct_UEnum_Engine_ERefractionMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(BlendableOutputAlpha, UMaterial, bool);
				UProperty* NewProp_BlendableOutputAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendableOutputAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BlendableOutputAlpha, UMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(BlendableOutputAlpha, UMaterial), sizeof(bool), true);
				UProperty* NewProp_BlendablePriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendablePriority"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BlendablePriority, UMaterial), 0x0010000000000005);
				UProperty* NewProp_BlendableLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendableLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BlendableLocation, UMaterial), 0x0010000000000005, Z_Construct_UEnum_Engine_EBlendableLocation());
				UProperty* NewProp_UsageFlagWarnings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UsageFlagWarnings"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(UsageFlagWarnings, UMaterial), 0x0010000000202000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMaterialEditorStatsMaterial, UMaterial, uint8);
				UProperty* NewProp_bIsMaterialEditorStatsMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMaterialEditorStatsMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMaterialEditorStatsMaterial, UMaterial), 0x0010000000202000, CPP_BOOL_PROPERTY_BITMASK(bIsMaterialEditorStatsMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowDevelopmentShaderCompile, UMaterial, uint8);
				UProperty* NewProp_bAllowDevelopmentShaderCompile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowDevelopmentShaderCompile"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowDevelopmentShaderCompile, UMaterial), 0x0010000000202000, CPP_BOOL_PROPERTY_BITMASK(bAllowDevelopmentShaderCompile, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseTranslucencyVertexFog, UMaterial, uint8);
				UProperty* NewProp_bUseTranslucencyVertexFog = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseTranslucencyVertexFog"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseTranslucencyVertexFog, UMaterial), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseTranslucencyVertexFog, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMaterialAttributes, UMaterial, uint8);
				UProperty* NewProp_bUseMaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMaterialAttributes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMaterialAttributes, UMaterial), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseMaterialAttributes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPreviewMaterial, UMaterial, uint8);
				UProperty* NewProp_bIsPreviewMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPreviewMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPreviewMaterial, UMaterial), 0x0010000000202000, CPP_BOOL_PROPERTY_BITMASK(bIsPreviewMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMasked_DEPRECATED, UMaterial, uint8);
				UProperty* NewProp_bIsMasked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMasked"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMasked_DEPRECATED, UMaterial), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsMasked_DEPRECATED, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanMaskedBeAssumedOpaque, UMaterial, uint8);
				UProperty* NewProp_bCanMaskedBeAssumedOpaque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanMaskedBeAssumedOpaque"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanMaskedBeAssumedOpaque, UMaterial), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCanMaskedBeAssumedOpaque, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_MaterialParameterCollectionInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialParameterCollectionInfos"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MaterialParameterCollectionInfos, UMaterial), 0x0010000000000000);
				UProperty* NewProp_MaterialParameterCollectionInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialParameterCollectionInfos, TEXT("MaterialParameterCollectionInfos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialParameterCollectionInfo());
				UProperty* NewProp_MaterialFunctionInfos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialFunctionInfos"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MaterialFunctionInfos, UMaterial), 0x0010000000000000);
				UProperty* NewProp_MaterialFunctionInfos_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialFunctionInfos, TEXT("MaterialFunctionInfos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FMaterialFunctionInfo());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorComments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorComments"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(EditorComments, UMaterial), 0x0010000800000000);
				UProperty* NewProp_EditorComments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EditorComments, TEXT("EditorComments"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UMaterialExpressionComment_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Expressions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Expressions"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Expressions, UMaterial), 0x0010000000000000);
				UProperty* NewProp_Expressions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Expressions, TEXT("Expressions"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialExpression_NoRegister());
				UProperty* NewProp_EditorYaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EditorYaw, UMaterial), 0x0010000000000000);
				UProperty* NewProp_EditorPitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorPitch"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EditorPitch, UMaterial), 0x0010000000000000);
				UProperty* NewProp_EditorY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EditorY, UMaterial), 0x0010000000000000);
				UProperty* NewProp_EditorX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EditorX, UMaterial), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOutputVelocityOnBasePass, UMaterial, uint8);
				UProperty* NewProp_bOutputVelocityOnBasePass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOutputVelocityOnBasePass"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOutputVelocityOnBasePass, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bOutputVelocityOnBasePass, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Wireframe, UMaterial, uint8);
				UProperty* NewProp_Wireframe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Wireframe"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Wireframe, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(Wireframe, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_MaxDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDisplacement, UMaterial), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableAdaptiveTessellation, UMaterial, uint8);
				UProperty* NewProp_bEnableAdaptiveTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableAdaptiveTessellation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableAdaptiveTessellation, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bEnableAdaptiveTessellation, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCrackFreeDisplacement, UMaterial, uint8);
				UProperty* NewProp_bEnableCrackFreeDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableCrackFreeDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCrackFreeDisplacement, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bEnableCrackFreeDisplacement, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_D3D11TessellationMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("D3D11TessellationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(D3D11TessellationMode, UMaterial), 0x0010000000000015, Z_Construct_UEnum_Engine_EMaterialTessellationMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNormalCurvatureToRoughness, UMaterial, uint8);
				UProperty* NewProp_bNormalCurvatureToRoughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNormalCurvatureToRoughness"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNormalCurvatureToRoughness, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bNormalCurvatureToRoughness, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePlanarForwardReflections, UMaterial, uint8);
				UProperty* NewProp_bUsePlanarForwardReflections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePlanarForwardReflections"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePlanarForwardReflections, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsePlanarForwardReflections, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseHQForwardReflections, UMaterial, uint8);
				UProperty* NewProp_bUseHQForwardReflections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseHQForwardReflections"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseHQForwardReflections, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUseHQForwardReflections, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLightmapDirectionality, UMaterial, uint8);
				UProperty* NewProp_bUseLightmapDirectionality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLightmapDirectionality"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLightmapDirectionality, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUseLightmapDirectionality, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseFullPrecision, UMaterial, uint8);
				UProperty* NewProp_bUseFullPrecision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseFullPrecision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseFullPrecision, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUseFullPrecision, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFullyRough, UMaterial, uint8);
				UProperty* NewProp_bFullyRough = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFullyRough"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFullyRough, UMaterial), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bFullyRough, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutomaticallySetUsageInEditor, UMaterial, uint8);
				UProperty* NewProp_bAutomaticallySetUsageInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutomaticallySetUsageInEditor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutomaticallySetUsageInEditor, UMaterial), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bAutomaticallySetUsageInEditor, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithUI_DEPRECATED, UMaterial, uint8);
				UProperty* NewProp_bUsedWithUI = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithUI"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithUI_DEPRECATED, UMaterial), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bUsedWithUI_DEPRECATED, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithClothing, UMaterial, uint8);
				UProperty* NewProp_bUsedWithClothing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithClothing"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithClothing, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithClothing, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsesDistortion, UMaterial, uint8);
				UProperty* NewProp_bUsesDistortion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsesDistortion"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsesDistortion, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsesDistortion, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithInstancedStaticMeshes, UMaterial, uint8);
				UProperty* NewProp_bUsedWithInstancedStaticMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithInstancedStaticMeshes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithInstancedStaticMeshes, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithInstancedStaticMeshes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithSplineMeshes, UMaterial, uint8);
				UProperty* NewProp_bUsedWithSplineMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithSplineMeshes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithSplineMeshes, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithSplineMeshes, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithMorphTargets, UMaterial, uint8);
				UProperty* NewProp_bUsedWithMorphTargets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithMorphTargets"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithMorphTargets, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithMorphTargets, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithStaticLighting, UMaterial, uint8);
				UProperty* NewProp_bUsedWithStaticLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithStaticLighting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithStaticLighting, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithStaticLighting, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithMeshParticles, UMaterial, uint8);
				UProperty* NewProp_bUsedWithMeshParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithMeshParticles"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithMeshParticles, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithMeshParticles, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithBeamTrails, UMaterial, uint8);
				UProperty* NewProp_bUsedWithBeamTrails = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithBeamTrails"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithBeamTrails, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithBeamTrails, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithParticleSprites, UMaterial, uint8);
				UProperty* NewProp_bUsedWithParticleSprites = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithParticleSprites"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithParticleSprites, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithParticleSprites, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithEditorCompositing, UMaterial, uint8);
				UProperty* NewProp_bUsedWithEditorCompositing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithEditorCompositing"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithEditorCompositing, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithEditorCompositing, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedWithSkeletalMesh, UMaterial, uint8);
				UProperty* NewProp_bUsedWithSkeletalMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedWithSkeletalMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedWithSkeletalMesh, UMaterial), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bUsedWithSkeletalMesh, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsedAsSpecialEngineMaterial, UMaterial, uint8);
				UProperty* NewProp_bUsedAsSpecialEngineMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsedAsSpecialEngineMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsedAsSpecialEngineMaterial, UMaterial), 0x0010000000200000, CPP_BOOL_PROPERTY_BITMASK(bUsedAsSpecialEngineMaterial, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlockGI, UMaterial, uint8);
				UProperty* NewProp_bBlockGI = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBlockGI"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlockGI, UMaterial), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bBlockGI, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmissiveForDynamicAreaLighting, UMaterial, uint8);
				UProperty* NewProp_bUseEmissiveForDynamicAreaLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmissiveForDynamicAreaLighting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmissiveForDynamicAreaLighting, UMaterial), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bUseEmissiveForDynamicAreaLighting, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentSpaceNormal, UMaterial, uint8);
				UProperty* NewProp_bTangentSpaceNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentSpaceNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentSpaceNormal, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentSpaceNormal, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateSphericalParticleNormals, UMaterial, uint8);
				UProperty* NewProp_bGenerateSphericalParticleNormals = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateSphericalParticleNormals"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateSphericalParticleNormals, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bGenerateSphericalParticleNormals, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableDepthTest, UMaterial, uint8);
				UProperty* NewProp_bDisableDepthTest = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableDepthTest"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableDepthTest, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bDisableDepthTest, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_TranslucentShadowStartOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentShadowStartOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentShadowStartOffset, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucentMultipleScatteringExtinction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMultipleScatteringExtinction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TranslucentMultipleScatteringExtinction, UMaterial), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TranslucentBackscatteringExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentBackscatteringExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentBackscatteringExponent, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucentSelfShadowSecondOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowSecondOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowSecondOpacity, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucentSelfShadowSecondDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowSecondDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowSecondDensityScale, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucentSelfShadowDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentSelfShadowDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentSelfShadowDensityScale, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucentShadowDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentShadowDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucentShadowDensityScale, UMaterial), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AllowTranslucentCustomDepthWrites, UMaterial, uint8);
				UProperty* NewProp_AllowTranslucentCustomDepthWrites = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllowTranslucentCustomDepthWrites"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AllowTranslucentCustomDepthWrites, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(AllowTranslucentCustomDepthWrites, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_TranslucencyDirectionalLightingIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencyDirectionalLightingIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslucencyDirectionalLightingIntensity, UMaterial), 0x0010000000000001);
				UProperty* NewProp_TranslucencyLightingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucencyLightingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TranslucencyLightingMode, UMaterial), 0x0010000000000001, Z_Construct_UEnum_Engine_ETranslucencyLightingMode());
				UProperty* NewProp_NumCustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumCustomizedUVs"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumCustomizedUVs, UMaterial), 0x0010040000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowNegativeEmissiveColor, UMaterial, uint8);
				UProperty* NewProp_bAllowNegativeEmissiveColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowNegativeEmissiveColor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowNegativeEmissiveColor, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bAllowNegativeEmissiveColor, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DitherOpacityMask, UMaterial, uint8);
				UProperty* NewProp_DitherOpacityMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DitherOpacityMask"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DitherOpacityMask, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(DitherOpacityMask, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DitheredLODTransition, UMaterial, uint8);
				UProperty* NewProp_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DitheredLODTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DitheredLODTransition, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(DitheredLODTransition, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TwoSided, UMaterial, uint8);
				UProperty* NewProp_TwoSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwoSided"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TwoSided, UMaterial), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(TwoSided, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScreenSpaceReflections, UMaterial, uint8);
				UProperty* NewProp_bScreenSpaceReflections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScreenSpaceReflections"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScreenSpaceReflections, UMaterial), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bScreenSpaceReflections, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableResponsiveAA, UMaterial, uint8);
				UProperty* NewProp_bEnableResponsiveAA = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableResponsiveAA"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableResponsiveAA, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableResponsiveAA, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableMobileSeparateTranslucency, UMaterial, uint8);
				UProperty* NewProp_bEnableMobileSeparateTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableMobileSeparateTranslucency"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableMobileSeparateTranslucency, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableMobileSeparateTranslucency, UMaterial), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableSeparateTranslucency, UMaterial, uint8);
				UProperty* NewProp_bEnableSeparateTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableSeparateTranslucency"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableSeparateTranslucency, UMaterial), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableSeparateTranslucency, UMaterial), sizeof(uint8), false);
				UProperty* NewProp_PixelDepthOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PixelDepthOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PixelDepthOffset, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_MaterialAttributes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialAttributes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaterialAttributes, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FMaterialAttributesInput());
				UProperty* NewProp_CustomizedUVs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomizedUVs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomizedUVs, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FVector2MaterialInput());
				NewProp_CustomizedUVs->ArrayDim = CPP_ARRAY_DIM(CustomizedUVs, UMaterial);
				UProperty* NewProp_Refraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Refraction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Refraction, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_AmbientOcclusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmbientOcclusion"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AmbientOcclusion, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_ClearCoatRoughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoatRoughness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearCoatRoughness, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_ClearCoat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearCoat"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearCoat, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_TessellationMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TessellationMultiplier, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_WorldDisplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldDisplacement, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_WorldPositionOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WorldPositionOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldPositionOffset, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMaskClipValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OpacityMaskClipValue, UMaterial), 0x0010040000000001);
				UProperty* NewProp_ShadingModel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadingModel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ShadingModel, UMaterial), 0x0040010000000001, Z_Construct_UEnum_Engine_EMaterialShadingModel());
				UProperty* NewProp_MaterialDecalResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialDecalResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MaterialDecalResponse, UMaterial), 0x0010050000000015, Z_Construct_UEnum_Engine_EMaterialDecalResponse());
				UProperty* NewProp_DecalBlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecalBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DecalBlendMode, UMaterial), 0x0010000000000001, Z_Construct_UEnum_Engine_EDecalBlendMode());
				UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BlendMode, UMaterial), 0x0010010000000015, Z_Construct_UEnum_Engine_EBlendMode());
				UProperty* NewProp_MaterialDomain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialDomain"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MaterialDomain, UMaterial), 0x0010010000000015, Z_Construct_UEnum_Engine_EMaterialDomain());
				UProperty* NewProp_OpacityMask = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacityMask"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OpacityMask, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Opacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Opacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Opacity, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_EmissiveColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmissiveColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmissiveColor, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Normal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Normal, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FVectorMaterialInput());
				UProperty* NewProp_Roughness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roughness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Roughness, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Specular = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Specular"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Specular, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_Metallic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Metallic"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Metallic, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FScalarMaterialInput());
				UProperty* NewProp_BaseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BaseColor, UMaterial), 0x0010000000000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_SpecularColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpecularColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpecularColor_DEPRECATED, UMaterial), 0x0010000020000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_DiffuseColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DiffuseColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DiffuseColor_DEPRECATED, UMaterial), 0x0010000020000000, Z_Construct_UScriptStruct_FColorMaterialInput());
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, UMaterial), 0x0010000000000001, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/Material.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Material is an asset which can be applied to a mesh to control the visual look of the scene.\nWhen light from the scene hits the surface, the shading model of the material is used to calculate how that light interacts with the surface.\n\nWarning: Creating new materials directly increases shader compile times!  Consider creating a Material Instance off of an existing material instead."));
				MetaData->SetValue(NewProp_ReferencedTextureGuids, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ExpressionTextureReferences, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ExpressionTextureReferences, TEXT("ToolTip"), TEXT("Cached texture references from all expressions in the material (including nested functions).\nThis is used to link uniform texture expressions which were stored in the DDC with the UTextures that they reference."));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Guid that uniquely identifies this material.\nAny changes to the state of the material that do not appear separately in the shadermap DDC keys must cause this guid to be regenerated!\nFor example, a modification to the Expressions array.\nCode changes that cause the guid to be regenerated on load should be avoided, as that requires a resave of the content to stop recompiling every load."));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("Category"), TEXT("Refraction"));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_RefractionDepthBias, TEXT("ToolTip"), TEXT("This is the refraction depth bias, larger values offset distortion to prevent closer objects from rendering into the distorted surface at acute viewing angles but increases the disconnect between surface and where the refraction starts."));
				MetaData->SetValue(NewProp_RefractionMode, TEXT("Category"), TEXT("Refraction"));
				MetaData->SetValue(NewProp_RefractionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_RefractionMode, TEXT("ToolTip"), TEXT("Controls how the Refraction input is interpreted and how the refraction offset into scene color is computed for this material."));
				MetaData->SetValue(NewProp_BlendableOutputAlpha, TEXT("Category"), TEXT("PostProcessMaterial"));
				MetaData->SetValue(NewProp_BlendableOutputAlpha, TEXT("DisplayName"), TEXT("Output Alpha"));
				MetaData->SetValue(NewProp_BlendableOutputAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendableOutputAlpha, TEXT("ToolTip"), TEXT("If this is enabled, the blendable will output alpha"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("Category"), TEXT("PostProcessMaterial"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("DisplayName"), TEXT("Blendable Priority"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendablePriority, TEXT("ToolTip"), TEXT("If multiple nodes with the same  type are inserted at the same point, this defined order and if they get combined, only used if domain is PostProcess"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("Category"), TEXT("PostProcessMaterial"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("DisplayName"), TEXT("Blendable Location"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendableLocation, TEXT("ToolTip"), TEXT("Where the node is inserted in the (post processing) graph, only used if domain is PostProcess"));
				MetaData->SetValue(NewProp_UsageFlagWarnings, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_UsageFlagWarnings, TEXT("ToolTip"), TEXT("true if we have printed a warning about material usage for a given usage flag."));
				MetaData->SetValue(NewProp_bIsMaterialEditorStatsMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsMaterialEditorStatsMaterial, TEXT("ToolTip"), TEXT("true if this is a special material used for stats by the material editor."));
				MetaData->SetValue(NewProp_bAllowDevelopmentShaderCompile, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bAllowDevelopmentShaderCompile, TEXT("ToolTip"), TEXT("If true the compilation environment will be changed to remove the global COMPILE_SHADERS_FOR_DEVELOPMENT flag."));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseTranslucencyVertexFog, TEXT("ToolTip"), TEXT("When true, translucent materials are fogged. Defaults to true."));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseMaterialAttributes, TEXT("ToolTip"), TEXT("when true, the material attributes pin is used instead of the regular pins."));
				MetaData->SetValue(NewProp_bIsPreviewMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsPreviewMaterial, TEXT("ToolTip"), TEXT("true if Material is the preview material used in the material editor."));
				MetaData->SetValue(NewProp_bIsMasked, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bIsMasked, TEXT("ToolTip"), TEXT("true if Material is masked and uses custom opacity"));
				MetaData->SetValue(NewProp_bCanMaskedBeAssumedOpaque, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bCanMaskedBeAssumedOpaque, TEXT("ToolTip"), TEXT("true if this Material can be assumed Opaque when set to masked."));
				MetaData->SetValue(NewProp_MaterialParameterCollectionInfos, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialParameterCollectionInfos, TEXT("ToolTip"), TEXT("Array of all parameter collections this material depends on."));
				MetaData->SetValue(NewProp_MaterialFunctionInfos, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialFunctionInfos, TEXT("ToolTip"), TEXT("Array of all functions this material depends on."));
				MetaData->SetValue(NewProp_EditorComments, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorComments, TEXT("ToolTip"), TEXT("Array of comments associated with this material; viewed in the material editor."));
				MetaData->SetValue(NewProp_Expressions, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Expressions, TEXT("ToolTip"), TEXT("Array of material expressions, excluding Comments.  Used by the material editor."));
				MetaData->SetValue(NewProp_EditorYaw, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorPitch, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorY, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EditorX, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("DisplayName"), TEXT("Support accurate velocities from Vertex Deformation"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bOutputVelocityOnBasePass, TEXT("ToolTip"), TEXT("Skips outputting velocity during the base pass."));
				MetaData->SetValue(NewProp_Wireframe, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_Wireframe, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Wireframe, TEXT("ToolTip"), TEXT("Enables a wireframe view of the mesh the material is applied to."));
				MetaData->SetValue(NewProp_MaxDisplacement, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("DisplayName"), TEXT("Adaptive Tessellation"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableAdaptiveTessellation, TEXT("ToolTip"), TEXT("Enables adaptive tessellation, which tries to maintain a uniform number of pixels per triangle."));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("DisplayName"), TEXT("Crack Free Displacement"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableCrackFreeDisplacement, TEXT("ToolTip"), TEXT("Prevents cracks in the surface of the mesh when using tessellation."));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("Category"), TEXT("Tessellation"));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_D3D11TessellationMode, TEXT("ToolTip"), TEXT("The type of tessellation to apply to this object.  Note D3D11 required for anything except MTM_NoTessellation."));
				MetaData->SetValue(NewProp_bNormalCurvatureToRoughness, TEXT("Category"), TEXT("ForwardShading"));
				MetaData->SetValue(NewProp_bNormalCurvatureToRoughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bNormalCurvatureToRoughness, TEXT("ToolTip"), TEXT("Reduce roughness based on screen space normal changes."));
				MetaData->SetValue(NewProp_bUsePlanarForwardReflections, TEXT("Category"), TEXT("ForwardShading"));
				MetaData->SetValue(NewProp_bUsePlanarForwardReflections, TEXT("DisplayName"), TEXT("Planar Reflections"));
				MetaData->SetValue(NewProp_bUsePlanarForwardReflections, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsePlanarForwardReflections, TEXT("ToolTip"), TEXT("Enables planar reflection when using the forward renderer or mobile. Enabling this setting reduces the number of samplers available to the material as one more sampler will be used for the planar reflection."));
				MetaData->SetValue(NewProp_bUseHQForwardReflections, TEXT("Category"), TEXT("ForwardShading"));
				MetaData->SetValue(NewProp_bUseHQForwardReflections, TEXT("DisplayName"), TEXT("High Quality Reflections"));
				MetaData->SetValue(NewProp_bUseHQForwardReflections, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseHQForwardReflections, TEXT("ToolTip"), TEXT("* Forward renderer: enables multiple parallax-corrected reflection captures that blend together.\n* Mobile renderer: blend between nearest 3 reflection captures, but reduces the number of samplers available to the material as two more samplers will be used for reflection cubemaps."));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseLightmapDirectionality, TEXT("ToolTip"), TEXT("Use lightmap directionality and per pixel normals. If disabled, lighting from lightmaps will be flat but cheaper."));
				MetaData->SetValue(NewProp_bUseFullPrecision, TEXT("Category"), TEXT("Mobile"));
				MetaData->SetValue(NewProp_bUseFullPrecision, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseFullPrecision, TEXT("ToolTip"), TEXT("Forces this material to use full (highp) precision in the pixel shader.\nThis is slower than the default (mediump) but can be used to work around precision-related rendering errors.\nThis setting has no effect on older mobile devices that do not support high precision."));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bFullyRough, TEXT("ToolTip"), TEXT("Forces the material to be completely rough. Saves a number of instructions and one sampler."));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bAutomaticallySetUsageInEditor, TEXT("ToolTip"), TEXT("Whether to automatically set usage flags based on what the material is applied to in the editor.\nIt can be useful to disable this on a base material with many instances, where adding another usage flag accidentally (eg bUsedWithSkeletalMeshes) can add a lot of shader permutations."));
				MetaData->SetValue(NewProp_bUsedWithUI, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithUI, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with Slate UI and UMG\nThis will result in the shaders required to support UI materials being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithClothing, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with clothing\nThis will result in the shaders required to support clothing being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsesDistortion, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with distortion\nThis will result in the shaders required to support distortion being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithInstancedStaticMeshes, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with instanced static meshes\nThis will result in the shaders required to support instanced static meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithSplineMeshes, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with spline meshes\nThis will result in the shaders required to support spline meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithMorphTargets, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with morph targets\nThis will result in the shaders required to support morph targets being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithStaticLighting, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with static lighting\nThis will result in the shaders required to support static lighting being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithMeshParticles, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with mesh particles\nThis will result in the shaders required to support mesh particles being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithBeamTrails, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with beam trails\nThis will result in the shaders required to support beam trails being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithParticleSprites, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with particle sprites\nThis will result in the shaders required to support particle sprites being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithEditorCompositing, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with editor compositing\nThis will result in the shaders required to support editor compositing being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("Category"), TEXT("Usage"));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedWithSkeletalMesh, TEXT("ToolTip"), TEXT("Indicates that the material and its instances can be use with skeletal meshes.\nThis will result in the shaders required to support skeletal meshes being compiled which will increase shader compile time and memory usage."));
				MetaData->SetValue(NewProp_bUsedAsSpecialEngineMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUsedAsSpecialEngineMaterial, TEXT("ToolTip"), TEXT("This is a special usage flag that allows a material to be assignable to any primitive type.\nThis is useful for materials used by code to implement certain viewmodes, for example the default material or lighting only material.\nThe cost is that nearly 20x more shaders will be compiled for the material than the average material, which will greatly increase shader compile time and memory usage.\nThis flag should only be enabled when absolutely necessary, and is purposefully not exposed to the UI to prevent abuse."));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("DisplayName"), TEXT("Block Global Illumination"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bBlockGI, TEXT("ToolTip"), TEXT("If enabled, the material's opacity defines how much GI is blocked when using the LightPropagationVolume feature"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("DisplayName"), TEXT("Emissive (Dynamic Area Light)"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bUseEmissiveForDynamicAreaLighting, TEXT("ToolTip"), TEXT("If enabled, the material's emissive colour is injected into the LightPropagationVolume"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bTangentSpaceNormal, TEXT("ToolTip"), TEXT("Whether the material takes a tangent space normal or a world space normal as input.\n(TangentSpace requires extra instructions but is often more convenient)."));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bGenerateSphericalParticleNormals, TEXT("ToolTip"), TEXT("Whether to generate spherical normals for particles that use this material."));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bDisableDepthTest, TEXT("ToolTip"), TEXT("Whether to draw on top of opaque pixels even if behind them. This only has meaning for translucency."));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("DisplayName"), TEXT("Start Offset"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentShadowStartOffset, TEXT("ToolTip"), TEXT("Local space distance to bias the translucent shadow.  Positive values move the shadow away from the light."));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("DisplayName"), TEXT("Multiple Scattering Extinction"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentMultipleScatteringExtinction, TEXT("ToolTip"), TEXT("Colored extinction factor used to approximate multiple scattering in dense volumes.\nThis is only used when the object is casting a volumetric translucent shadow."));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("DisplayName"), TEXT("Backscattering Exponent"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentBackscatteringExponent, TEXT("ToolTip"), TEXT("Controls how diffuse the material's backscattering is when using the MSM_Subsurface shading model.\nLarger exponents give a less diffuse look (smaller, brighter backscattering highlight).\nThis is only used when the object is casting a volumetric translucent shadow from a directional light."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("DisplayName"), TEXT("Second Opacity"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondOpacity, TEXT("ToolTip"), TEXT("Controls the strength of the second self shadow gradient."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("DisplayName"), TEXT("Second Density Scale"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowSecondDensityScale, TEXT("ToolTip"), TEXT("Used to make a second self shadow gradient, to add interesting shading in the shadow of the first."));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("DisplayName"), TEXT("Self Shadow Density Scale"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentSelfShadowDensityScale, TEXT("ToolTip"), TEXT("Scale used to make translucent self-shadowing more or less opaque than the material's shadow on other objects.\nThis is only used when the object is casting a volumetric translucent shadow."));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("Category"), TEXT("TranslucencySelfShadowing"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("DisplayName"), TEXT("Shadow Density Scale"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucentShadowDensityScale, TEXT("ToolTip"), TEXT("Scale used to make translucent shadows more or less opaque than the material's actual opacity."));
				MetaData->SetValue(NewProp_AllowTranslucentCustomDepthWrites, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_AllowTranslucentCustomDepthWrites, TEXT("DisplayName"), TEXT("Allow Custom Depth Writes"));
				MetaData->SetValue(NewProp_AllowTranslucentCustomDepthWrites, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_AllowTranslucentCustomDepthWrites, TEXT("ToolTip"), TEXT("Allows a translucenct material to be used with custom depth writing by compiling additional shaders."));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("DisplayName"), TEXT("Directional Lighting Intensity"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucencyDirectionalLightingIntensity, TEXT("ToolTip"), TEXT("Useful for artificially increasing the influence of the normal on the lighting result for translucency.\nA value larger than 1 increases the influence of the normal, a value smaller than 1 makes the lighting more ambient."));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("DisplayName"), TEXT("Lighting Mode"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TranslucencyLightingMode, TEXT("ToolTip"), TEXT("Sets the lighting mode that will be used on this material if it is translucent."));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_NumCustomizedUVs, TEXT("ToolTip"), TEXT("Number of customized UV inputs to display.  Unconnected customized UV inputs will just pass through the vertex UVs."));
				MetaData->SetValue(NewProp_bAllowNegativeEmissiveColor, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_bAllowNegativeEmissiveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bAllowNegativeEmissiveColor, TEXT("ToolTip"), TEXT("Whether the material should allow outputting negative emissive color values.  Only allowed on unlit materials."));
				MetaData->SetValue(NewProp_DitherOpacityMask, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_DitherOpacityMask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DitherOpacityMask, TEXT("ToolTip"), TEXT("Dither opacity mask. When combined with Temporal AA this can be used as a form of limited translucency which supports all lighting features."));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("DisplayName"), TEXT("Dithered LOD Transition"));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ToolTip"), TEXT("Whether meshes rendered with the material should support dithered LOD transitions."));
				MetaData->SetValue(NewProp_TwoSided, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TwoSided, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces."));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("DisplayName"), TEXT("Screen Space Reflections"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bScreenSpaceReflections, TEXT("ToolTip"), TEXT("SSR on translucency"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("DisplayName"), TEXT("Responsive AA"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableResponsiveAA, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered using responsive anti-aliasing. Improves sharpness of small moving particles such as sparks.\nOnly use for small moving features because it will cause aliasing of the background."));
				MetaData->SetValue(NewProp_bEnableMobileSeparateTranslucency, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bEnableMobileSeparateTranslucency, TEXT("DisplayName"), TEXT("Mobile Separate Translucency"));
				MetaData->SetValue(NewProp_bEnableMobileSeparateTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableMobileSeparateTranslucency, TEXT("ToolTip"), TEXT("Indicates that the translucent material should not be affected by bloom or DOF. (Note: Depth testing is not available)"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("Category"), TEXT("Translucency"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("DisplayName"), TEXT("Separate Translucency"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_bEnableSeparateTranslucency, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered in the SeparateTranslucency Pass (not affected by DOF, requires bAllowSeparateTranslucency to be set in .ini)."));
				MetaData->SetValue(NewProp_PixelDepthOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialAttributes, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_CustomizedUVs, TEXT("ToolTip"), TEXT("These inputs are evaluated in the vertex shader and allow artists to do arbitrary vertex shader operations and access them in the pixel shader.\nWhen unconnected or hidden they default to passing through the vertex UVs."));
				MetaData->SetValue(NewProp_Refraction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Refraction, TEXT("ToolTip"), TEXT("output refraction index for translucent rendering\nAir:1.0 Water:1.333 Ice:1.3 Glass:~1.6 Diamond:2.42"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_AmbientOcclusion, TEXT("ToolTip"), TEXT("output ambient occlusion to the GBuffer"));
				MetaData->SetValue(NewProp_ClearCoatRoughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ClearCoat, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ToolTip"), TEXT("Inner material color, only used for ShadingModel=Subsurface"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_TessellationMultiplier, TEXT("ToolTip"), TEXT("Multiplies the tessellation factors applied when a tessellation mode is set."));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_WorldDisplacement, TEXT("ToolTip"), TEXT("Offset in world space applied to tessellated vertices."));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_WorldPositionOffset, TEXT("ToolTip"), TEXT("Adds to world position in the vertex shader."));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("If BlendMode is BLEND_Masked, the surface is not rendered where OpacityMask < OpacityMaskClipValue."));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_ShadingModel, TEXT("ToolTip"), TEXT("Determines how inputs are combined to create the material's final color."));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("DisplayName"), TEXT("Decal Response (DBuffer)"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialDecalResponse, TEXT("ToolTip"), TEXT("Defines how the material reacts on DBuffer decals (Affects look, performance and texture/sample usage).\nNon DBuffer Decals can be disabled on the primitive (e.g. static mesh)"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DecalBlendMode, TEXT("ToolTip"), TEXT("Defines how the GBuffer chanels are getting manipulated by a decal material pass. (only with MaterialDomain == MD_DeferredDecal)"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("Determines how the material's color is blended with background colors."));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_MaterialDomain, TEXT("ToolTip"), TEXT("The domain that the material's attributes will be evaluated in.\nCertain pieces of material functionality are only valid in certain domains, for example vertex normal is only valid on a surface."));
				MetaData->SetValue(NewProp_OpacityMask, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Opacity, TEXT("ToolTip"), TEXT("Transmission."));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_EmissiveColor, TEXT("ToolTip"), TEXT("Emission."));
				MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Roughness, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Specular, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_Metallic, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_BaseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DiffuseColor, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_DiffuseColor, TEXT("ToolTip"), TEXT("Reflection."));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/Material.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ToolTip"), TEXT("Physical material to use for this graphics material. Used for sounds, effects etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterial(Z_Construct_UClass_UMaterial, &UMaterial::StaticClass, TEXT("UMaterial"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterial);
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialInstanceBasePropertyOverrides"), sizeof(FMaterialInstanceBasePropertyOverrides), Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialInstanceBasePropertyOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialInstanceBasePropertyOverrides>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides, uint8);
			UProperty* NewProp_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DitheredLODTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TwoSided, FMaterialInstanceBasePropertyOverrides, uint8);
			UProperty* NewProp_TwoSided = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwoSided"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TwoSided, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(TwoSided, FMaterialInstanceBasePropertyOverrides), sizeof(uint8), false);
			UProperty* NewProp_ShadingModel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadingModel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ShadingModel, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, Z_Construct_UEnum_Engine_EMaterialShadingModel());
			UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BlendMode, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, Z_Construct_UEnum_Engine_EBlendMode());
			UProperty* NewProp_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OpacityMaskClipValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_TwoSided = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_TwoSided"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_TwoSided, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_DitheredLODTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_DitheredLODTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_DitheredLODTransition, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_ShadingModel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_ShadingModel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_ShadingModel, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_BlendMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_BlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_BlendMode, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides, bool);
			UProperty* NewProp_bOverride_OpacityMaskClipValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_OpacityMaskClipValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverride_OpacityMaskClipValue, FMaterialInstanceBasePropertyOverrides), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Properties from the base material that can be overridden in material instances."));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("editcondition"), TEXT("bOverride_DitheredLODTransition"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_DitheredLODTransition, TEXT("ToolTip"), TEXT("Whether the material should support a dithered LOD transition when used with the foliage system."));
			MetaData->SetValue(NewProp_TwoSided, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("editcondition"), TEXT("bOverride_TwoSided"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_TwoSided, TEXT("ToolTip"), TEXT("Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces."));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("editcondition"), TEXT("bOverride_ShadingModel"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_ShadingModel, TEXT("ToolTip"), TEXT("The shading model"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("editcondition"), TEXT("bOverride_BlendMode"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("The blend mode"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("editcondition"), TEXT("bOverride_OpacityMaskClipValue"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("NoSpinbox"), TEXT("TRUE"));
			MetaData->SetValue(NewProp_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("If BlendMode is BLEND_Masked, the surface is not rendered where OpacityMask < OpacityMaskClipValue."));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_TwoSided, TEXT("ToolTip"), TEXT("Enables override of the two sided property."));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_DitheredLODTransition, TEXT("ToolTip"), TEXT("Enables override of the two sided property."));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_ShadingModel, TEXT("ToolTip"), TEXT("Enables override of the shading model."));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_BlendMode, TEXT("ToolTip"), TEXT("Enables override of the blend mode."));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("Category"), TEXT("Material"));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceBasePropertyOverrides.h"));
			MetaData->SetValue(NewProp_bOverride_OpacityMaskClipValue, TEXT("ToolTip"), TEXT("Enables override of the opacity mask clip value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides_CRC() { return 423635299U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVectorParameterValue()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("VectorParameterValue"), sizeof(FVectorParameterValue), Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VectorParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FVectorParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FVectorParameterValue), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParameterValue, FVectorParameterValue), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FVectorParameterValue), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable vector parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("VectorParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("VectorParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVectorParameterValue_CRC() { return 878779134U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextureParameterValue()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TextureParameterValue"), sizeof(FTextureParameterValue), Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FTextureParameterValue), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParameterValue, FTextureParameterValue), 0x0010000000000005, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FTextureParameterValue), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable texture parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("TextureParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("TextureParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureParameterValue_CRC() { return 742768828U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScalarParameterValue()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ScalarParameterValue"), sizeof(FScalarParameterValue), Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScalarParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FScalarParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FScalarParameterValue), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ParameterValue, FScalarParameterValue), 0x0010000000000005);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FScalarParameterValue), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable scalar parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("Category"), TEXT("ScalarParameterValue"));
			MetaData->SetValue(NewProp_ParameterValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ScalarParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScalarParameterValue_CRC() { return 663631044U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFontParameterValue()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("FontParameterValue"), sizeof(FFontParameterValue), Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFontParameterValue>, EStructFlags(0x00000001));
			UProperty* NewProp_ExpressionGUID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpressionGUID"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExpressionGUID, FFontParameterValue), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_FontPage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontPage"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FontPage, FFontParameterValue), 0x0010000000000005);
			UProperty* NewProp_FontValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FontValue, FFontParameterValue), 0x0010000000000005, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FFontParameterValue), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Editable font parameter."));
			MetaData->SetValue(NewProp_ExpressionGUID, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_FontPage, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_FontPage, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_FontValue, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_FontValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("FontParameterValue"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFontParameterValue_CRC() { return 2861530190U; }
	UClass* Z_Construct_UClass_UMaterialInstance_NoRegister()
	{
		return UMaterialInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInterface();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ReferencedTextureGuids = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReferencedTextureGuids, UMaterialInstance), 0x0040000800000000);
				UProperty* NewProp_ReferencedTextureGuids_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedTextureGuids, TEXT("ReferencedTextureGuids"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_BasePropertyOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePropertyOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BasePropertyOverrides, UMaterialInstance), 0x0010000000000015, Z_Construct_UScriptStruct_FMaterialInstanceBasePropertyOverrides());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideBaseProperties_DEPRECATED, UMaterialInstance, bool);
				UProperty* NewProp_bOverrideBaseProperties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideBaseProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideBaseProperties_DEPRECATED, UMaterialInstance), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bOverrideBaseProperties_DEPRECATED, UMaterialInstance), sizeof(bool), true);
				UProperty* NewProp_VectorParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VectorParameterValues, UMaterialInstance), 0x0010000000000015);
				UProperty* NewProp_VectorParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorParameterValues, TEXT("VectorParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVectorParameterValue());
				UProperty* NewProp_TextureParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TextureParameterValues, UMaterialInstance), 0x0010000000000015);
				UProperty* NewProp_TextureParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TextureParameterValues, TEXT("TextureParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTextureParameterValue());
				UProperty* NewProp_ScalarParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScalarParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ScalarParameterValues, UMaterialInstance), 0x0010000000000015);
				UProperty* NewProp_ScalarParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScalarParameterValues, TEXT("ScalarParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FScalarParameterValue());
				UProperty* NewProp_FontParameterValues = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FontParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FontParameterValues, UMaterialInstance), 0x0010000000000015);
				UProperty* NewProp_FontParameterValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FontParameterValues, TEXT("FontParameterValues"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFontParameterValue());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideSubsurfaceProfile, UMaterialInstance, uint8);
				UProperty* NewProp_bOverrideSubsurfaceProfile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideSubsurfaceProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideSubsurfaceProfile, UMaterialInstance), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bOverrideSubsurfaceProfile, UMaterialInstance), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasStaticPermutationResource, UMaterialInstance, uint8);
				UProperty* NewProp_bHasStaticPermutationResource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasStaticPermutationResource"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasStaticPermutationResource, UMaterialInstance), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bHasStaticPermutationResource, UMaterialInstance), sizeof(uint8), false);
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, UMaterialInstance), 0x0010010000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_PhysMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PhysMaterial, UMaterialInstance), 0x0010000000000005, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_ReferencedTextureGuids, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_BasePropertyOverrides, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_BasePropertyOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bOverrideBaseProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_VectorParameterValues, TEXT("ToolTip"), TEXT("Vector parameters."));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_TextureParameterValues, TEXT("ToolTip"), TEXT("Texture parameters."));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_ScalarParameterValues, TEXT("ToolTip"), TEXT("Scalar parameters."));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_FontParameterValues, TEXT("ToolTip"), TEXT("Font parameters."));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bOverrideSubsurfaceProfile, TEXT("ToolTip"), TEXT("Defines if SubsurfaceProfile from this instance is used or it uses the parent one."));
				MetaData->SetValue(NewProp_bHasStaticPermutationResource, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_bHasStaticPermutationResource, TEXT("ToolTip"), TEXT("Indicates whether the instance has static permutation resources (which are required when static parameters are present)\nRead directly from the rendering thread, can only be modified with the use of a FMaterialUpdateContext.\nWhen true, StaticPermutationMaterialResources will always be valid and non-null."));
				MetaData->SetValue(NewProp_Parent, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ToolTip"), TEXT("Parent material."));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("Category"), TEXT("MaterialInstance"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstance.h"));
				MetaData->SetValue(NewProp_PhysMaterial, TEXT("ToolTip"), TEXT("Physical material to use for this graphics material. Used for sounds, effects etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstance(Z_Construct_UClass_UMaterialInstance, &UMaterialInstance::StaticClass, TEXT("UMaterialInstance"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstance);
	UClass* Z_Construct_UClass_UMaterialInstanceConstant_NoRegister()
	{
		return UMaterialInstanceConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstanceConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInstance();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialInstanceConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ParameterStateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParameterStateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParameterStateId, UMaterialInstanceConstant), 0x0010000800000000, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstanceConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Material Instances may be used to change the appearance of a material without incurring an expensive recompilation of the material.\nGeneral modification of the material cannot be supported without recompilation, so the instances are limited to changing the values of\npredefined material parameters. The parameters are statically defined in the compiled material by a unique name, type and default value."));
				MetaData->SetValue(NewProp_ParameterStateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceConstant.h"));
				MetaData->SetValue(NewProp_ParameterStateId, TEXT("ToolTip"), TEXT("Unique ID for this material instance's parameter set\nUpdated on changes in the editor to allow those changes to be detected"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstanceConstant(Z_Construct_UClass_UMaterialInstanceConstant, &UMaterialInstanceConstant::StaticClass, TEXT("UMaterialInstanceConstant"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstanceConstant);
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyInterpParameters()
	{
		struct MaterialInstanceDynamic_eventCopyInterpParameters_Parms
		{
			UMaterialInstance* Source;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CopyInterpParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(MaterialInstanceDynamic_eventCopyInterpParameters_Parms));
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Source, MaterialInstanceDynamic_eventCopyInterpParameters_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CopyInterpParameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Copies over parameters given a material instance (only copy from the instance, not following the hierarchy)\nmuch faster than K2_CopyMaterialInstanceParameters(),\nThe output is the object itself (this).\n@param Source ignores the call if 0"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides()
	{
		struct MaterialInstanceDynamic_eventCopyParameterOverrides_Parms
		{
			UMaterialInstance* MaterialInstance;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CopyParameterOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventCopyParameterOverrides_Parms));
			UProperty* NewProp_MaterialInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaterialInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaterialInstance, MaterialInstanceDynamic_eventCopyParameterOverrides_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CopyParameterOverrides"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Copy parameter values from another material instance. This will copy only\nparameters explicitly overridden in that material instance!!"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters()
	{
		struct MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms
		{
			UMaterialInterface* Source;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_CopyMaterialInstanceParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms));
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Source, MaterialInstanceDynamic_eventK2_CopyMaterialInstanceParameters_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("CopyMaterialInstanceParameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Copies over parameters given a material interface (copy each instance following the hierarchy)\nVery slow implementation, avoid using at runtime. Hopefully we can replace ity later with something like CopyInterpParameters()\nThe output is the object itself (this)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms
		{
			FName ParameterName;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetScalarParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms), 0x0010000000000580);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetScalarParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetScalarParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current scalar (float) parameter value from an MID"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms
		{
			FName ParameterName;
			UTexture* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetTextureParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetTextureParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetTextureParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current MID texture parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue()
	{
		struct MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms
		{
			FName ParameterName;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_GetVectorParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventK2_GetVectorParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVectorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("GetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current MID vector parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams()
	{
		struct MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms
		{
			UMaterialInstance* SourceA;
			UMaterialInstance* SourceB;
			float Alpha;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("K2_InterpolateMaterialInstanceParams"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms));
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0010000000000080);
			UProperty* NewProp_SourceB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceB"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SourceB, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			UProperty* NewProp_SourceA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SourceA"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SourceA, MaterialInstanceDynamic_eventK2_InterpolateMaterialInstanceParams_Parms), 0x0010000000000080, Z_Construct_UClass_UMaterialInstance_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("InterpolateMaterialInstanceParameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Interpolates the scalar and vector parameters of this material instance based on two other material instances, and an alpha blending factor\nThe output is the object itself (this).\nSupports the case SourceA==this || SourceB==this\nBoth material have to be from the same base material\n@param SourceA value that is used for Alpha=0, silently ignores the case if 0\n@param SourceB value that is used for Alpha=1, silently ignores the case if 0\n@param Alpha usually in the range 0..1, values outside the range extrapolate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetScalarParameterValue_Parms
		{
			FName ParameterName;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScalarParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventSetScalarParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetScalarParameterValue_Parms), 0x0010000000000080);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetScalarParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetFloatParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a MID scalar (float) parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetTextureParameterValue_Parms
		{
			FName ParameterName;
			UTexture* Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTextureParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MaterialInstanceDynamic_eventSetTextureParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetTextureParameterValue_Parms), 0x0010000000000080, Z_Construct_UClass_UTexture_NoRegister());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetTextureParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an MID texture parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue()
	{
		struct MaterialInstanceDynamic_eventSetVectorParameterValue_Parms
		{
			FName ParameterName;
			FLinearColor Value;
		};
		UObject* Outer=Z_Construct_UClass_UMaterialInstanceDynamic();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVectorParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(MaterialInstanceDynamic_eventSetVectorParameterValue_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Value, MaterialInstanceDynamic_eventSetVectorParameterValue_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, MaterialInstanceDynamic_eventSetVectorParameterValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Material"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("SetColorParameterValue"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an MID vector parameter value"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister()
	{
		return UMaterialInstanceDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialInstanceDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMaterialInstance();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialInstanceDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20902080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyInterpParameters());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyInterpParameters(), "CopyInterpParameters"); // 1467324350
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_CopyParameterOverrides(), "CopyParameterOverrides"); // 2769924065
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters(), "K2_CopyMaterialInstanceParameters"); // 3479030033
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetScalarParameterValue(), "K2_GetScalarParameterValue"); // 2736937571
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetTextureParameterValue(), "K2_GetTextureParameterValue"); // 1850815754
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_GetVectorParameterValue(), "K2_GetVectorParameterValue"); // 1062573880
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams(), "K2_InterpolateMaterialInstanceParams"); // 3392711191
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_SetScalarParameterValue(), "SetScalarParameterValue"); // 68112422
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_SetTextureParameterValue(), "SetTextureParameterValue"); // 161417291
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMaterialInstanceDynamic_SetVectorParameterValue(), "SetVectorParameterValue"); // 1202537782
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialInstanceDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialInstanceDynamic.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialInstanceDynamic(Z_Construct_UClass_UMaterialInstanceDynamic, &UMaterialInstanceDynamic::StaticClass, TEXT("UMaterialInstanceDynamic"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialInstanceDynamic);
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionVectorParameter()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CollectionVectorParameter"), sizeof(FCollectionVectorParameter), Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionVectorParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FCollectionParameterBase(), new UScriptStruct::TCppStructOps<FCollectionVectorParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultValue, FCollectionVectorParameter), 0x0010000000000001, Z_Construct_UScriptStruct_FLinearColor());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A vector parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionVectorParameter_CRC() { return 2437745865U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionScalarParameter()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CollectionScalarParameter"), sizeof(FCollectionScalarParameter), Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionScalarParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FCollectionParameterBase(), new UScriptStruct::TCppStructOps<FCollectionScalarParameter>, EStructFlags(0x00000001));
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DefaultValue, FCollectionScalarParameter), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A scalar parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionScalarParameter_CRC() { return 2350183985U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCollectionParameterBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CollectionParameterBase"), sizeof(FCollectionParameterBase), Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CollectionParameterBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCollectionParameterBase>, EStructFlags(0x00000001));
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Id, FCollectionParameterBase), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FCollectionParameterBase), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base struct for collection parameters"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("Uniquely identifies the parameter, used for fixing up materials that reference this parameter when renaming."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("Parameter"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the parameter.  Changing this name will break any blueprints that reference the parameter."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCollectionParameterBase_CRC() { return 2332273050U; }
	UClass* Z_Construct_UClass_UMaterialParameterCollection_NoRegister()
	{
		return UMaterialParameterCollection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialParameterCollection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialParameterCollection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VectorParameters, UMaterialParameterCollection), 0x0010000000000001);
				UProperty* NewProp_VectorParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorParameters, TEXT("VectorParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCollectionVectorParameter());
				UProperty* NewProp_ScalarParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScalarParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ScalarParameters, UMaterialParameterCollection), 0x0010000000000001);
				UProperty* NewProp_ScalarParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ScalarParameters, TEXT("ScalarParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCollectionScalarParameter());
				UProperty* NewProp_StateId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StateId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StateId, UMaterialParameterCollection), 0x0010000000200000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Asset class that contains a list of parameter names and their default values.\nAny number of materials can reference these parameters and get new values when the parameter values are changed."));
				MetaData->SetValue(NewProp_VectorParameters, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_VectorParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_ScalarParameters, TEXT("Category"), TEXT("Material"));
				MetaData->SetValue(NewProp_ScalarParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollection.h"));
				MetaData->SetValue(NewProp_StateId, TEXT("ToolTip"), TEXT("Used by materials using this collection to know when to recompile."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialParameterCollection(Z_Construct_UClass_UMaterialParameterCollection, &UMaterialParameterCollection::StaticClass, TEXT("UMaterialParameterCollection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialParameterCollection);
	UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance_NoRegister()
	{
		return UMaterialParameterCollectionInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UMaterialParameterCollectionInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMaterialParameterCollectionInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(World, UMaterialParameterCollectionInstance), 0x0020080000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_Collection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Collection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Collection, UMaterialParameterCollectionInstance), 0x0020080000000000, Z_Construct_UClass_UMaterialParameterCollection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class that stores per-world instance parameter data for a given UMaterialParameterCollection resource.\nInstances of this class are always transient."));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("World that owns this instance."));
				MetaData->SetValue(NewProp_Collection, TEXT("ModuleRelativePath"), TEXT("Classes/Materials/MaterialParameterCollectionInstance.h"));
				MetaData->SetValue(NewProp_Collection, TEXT("ToolTip"), TEXT("Collection resource this instance is based off of."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMaterialParameterCollectionInstance(Z_Construct_UClass_UMaterialParameterCollectionInstance, &UMaterialParameterCollectionInstance::StaticClass, TEXT("UMaterialParameterCollectionInstance"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMaterialParameterCollectionInstance);
	UClass* Z_Construct_UClass_UMatineeInterface_NoRegister()
	{
		return UMatineeInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMatineeInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMatineeInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20004081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Matinee/MatineeInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMatineeInterface(Z_Construct_UClass_UMatineeInterface, &UMatineeInterface::StaticClass, TEXT("UMatineeInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMatineeInterface);
	UClass* Z_Construct_UClass_UMorphTarget_NoRegister()
	{
		return UMorphTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UMorphTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMorphTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BaseSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseSkelMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BaseSkelMesh, UMorphTarget), 0x0010010000000000, Z_Construct_UClass_USkeletalMesh_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/MorphTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/MorphTarget.h"));
				MetaData->SetValue(NewProp_BaseSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/MorphTarget.h"));
				MetaData->SetValue(NewProp_BaseSkelMesh, TEXT("ToolTip"), TEXT("USkeletalMesh that this vertex animation works on."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMorphTarget(Z_Construct_UClass_UMorphTarget, &UMorphTarget::StaticClass, TEXT("UMorphTarget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMorphTarget);
	UClass* Z_Construct_UClass_UNavArea_Default_NoRegister()
	{
		return UNavArea_Default::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Default()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavArea_Default::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Default.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Default.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Regular navigation area, applied to entire navigation data by default"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Default(Z_Construct_UClass_UNavArea_Default, &UNavArea_Default::StaticClass, TEXT("UNavArea_Default"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Default);
	UClass* Z_Construct_UClass_UNavArea_LowHeight_NoRegister()
	{
		return UNavArea_LowHeight::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_LowHeight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavArea_LowHeight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_LowHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_LowHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Special area that can be generated in spaces with insufficient free height above. Cannot be traversed by anyone."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_LowHeight(Z_Construct_UClass_UNavArea_LowHeight, &UNavArea_LowHeight::StaticClass, TEXT("UNavArea_LowHeight"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_LowHeight);
	UClass* Z_Construct_UClass_UNavArea_Null_NoRegister()
	{
		return UNavArea_Null::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Null()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavArea_Null::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Null.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Null.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("In general represents an empty area, that cannot be traversed by anyone. Ever."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Null(Z_Construct_UClass_UNavArea_Null, &UNavArea_Null::StaticClass, TEXT("UNavArea_Null"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Null);
	UClass* Z_Construct_UClass_UNavArea_Obstacle_NoRegister()
	{
		return UNavArea_Obstacle::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavArea_Obstacle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavArea_Obstacle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300084;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavArea_Obstacle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavArea_Obstacle.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("In general represents a high cost area, that shouldn't be traversed by anyone unless no other path exist."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavArea_Obstacle(Z_Construct_UClass_UNavArea_Obstacle, &UNavArea_Obstacle::StaticClass, TEXT("UNavArea_Obstacle"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavArea_Obstacle);
	UClass* Z_Construct_UClass_UNavAreaMeta_NoRegister()
	{
		return UNavAreaMeta::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavAreaMeta()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavArea();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavAreaMeta::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300085;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavAreaMeta.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class containing definition of a navigation area"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavAreaMeta(Z_Construct_UClass_UNavAreaMeta, &UNavAreaMeta::StaticClass, TEXT("UNavAreaMeta"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavAreaMeta);
	UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent_NoRegister()
	{
		return UNavAreaMeta_SwitchByAgent::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavAreaMeta_SwitchByAgent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavAreaMeta();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavAreaMeta_SwitchByAgent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20300085;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Agent15Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent15Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent15Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent14Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent14Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent14Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent13Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent13Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent13Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent12Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent12Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent12Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent11Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent11Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent11Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent10Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent10Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent10Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent9Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent9Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent9Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent8Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent8Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent8Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent7Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent7Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent7Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent6Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent6Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent6Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent5Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent5Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent5Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent4Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent4Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent4Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent3Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent3Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent3Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent2Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent2Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent2Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent1Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent1Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent1Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_Agent0Area = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Agent0Area"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(Agent0Area, UNavAreaMeta_SwitchByAgent), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class containing definition of a navigation area"));
				MetaData->SetValue(NewProp_Agent15Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent15Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent14Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent14Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent13Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent13Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent12Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent12Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent11Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent11Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent10Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent10Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent9Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent9Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent8Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent8Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent7Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent7Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent6Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent6Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent5Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent5Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent4Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent4Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent3Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent3Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent2Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent2Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent1Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent1Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
				MetaData->SetValue(NewProp_Agent0Area, TEXT("Category"), TEXT("AgentTypes"));
				MetaData->SetValue(NewProp_Agent0Area, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavAreas/NavAreaMeta_SwitchByAgent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavAreaMeta_SwitchByAgent(Z_Construct_UClass_UNavAreaMeta_SwitchByAgent, &UNavAreaMeta_SwitchByAgent::StaticClass, TEXT("UNavAreaMeta_SwitchByAgent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavAreaMeta_SwitchByAgent);
	UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionBox()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NavCollisionBox"), sizeof(FNavCollisionBox), Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavCollisionBox"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavCollisionBox>, EStructFlags(0x00000001));
			UProperty* NewProp_Extent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Extent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Extent, FNavCollisionBox), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offset, FNavCollisionBox), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Extent, TEXT("Category"), TEXT("Box"));
			MetaData->SetValue(NewProp_Extent, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Box"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavCollisionBox_CRC() { return 1495514392U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNavCollisionCylinder()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NavCollisionCylinder"), sizeof(FNavCollisionCylinder), Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavCollisionCylinder"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNavCollisionCylinder>, EStructFlags(0x00000001));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Height, FNavCollisionCylinder), 0x0010000000000001);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, FNavCollisionCylinder), 0x0010000000000001);
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offset, FNavCollisionCylinder), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Cylinder"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavCollisionCylinder_CRC() { return 2848977618U; }
	UClass* Z_Construct_UClass_UNavCollision_NoRegister()
	{
		return UNavCollision::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavCollision()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavCollision::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGatherConvexGeometry, UNavCollision, uint8);
				UProperty* NewProp_bGatherConvexGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGatherConvexGeometry"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGatherConvexGeometry, UNavCollision), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bGatherConvexGeometry, UNavCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDynamicObstacle, UNavCollision, uint8);
				UProperty* NewProp_bIsDynamicObstacle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsDynamicObstacle"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDynamicObstacle, UNavCollision), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bIsDynamicObstacle, UNavCollision), sizeof(uint8), false);
				UProperty* NewProp_AreaClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AreaClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(AreaClass, UNavCollision), 0x0014000000000001, Z_Construct_UClass_UNavArea_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_BoxCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoxCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoxCollision, UNavCollision), 0x0010000000000001);
				UProperty* NewProp_BoxCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoxCollision, TEXT("BoxCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNavCollisionBox());
				UProperty* NewProp_CylinderCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CylinderCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CylinderCollision, UNavCollision), 0x0010000000000001);
				UProperty* NewProp_CylinderCollision_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CylinderCollision, TEXT("CylinderCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNavCollisionCylinder());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavCollision.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bGatherConvexGeometry, TEXT("ToolTip"), TEXT("If set, convex collisions will be exported offline for faster runtime navmesh building (increases memory usage)"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_bIsDynamicObstacle, TEXT("ToolTip"), TEXT("If set, mesh will be used as dynamic obstacle (don't create navmesh on top, much faster adding/removing)"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_AreaClass, TEXT("ToolTip"), TEXT("navigation area type (empty = default obstacle)"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_BoxCollision, TEXT("ToolTip"), TEXT("list of nav collision boxes"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavCollision.h"));
				MetaData->SetValue(NewProp_CylinderCollision, TEXT("ToolTip"), TEXT("list of nav collision cylinders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavCollision(Z_Construct_UClass_UNavCollision, &UNavCollision::StaticClass, TEXT("UNavCollision"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavCollision);
	UClass* Z_Construct_UClass_UNavEdgeProviderInterface_NoRegister()
	{
		return UNavEdgeProviderInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavEdgeProviderInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavEdgeProviderInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavEdgeProviderInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavEdgeProviderInterface(Z_Construct_UClass_UNavEdgeProviderInterface, &UNavEdgeProviderInterface::StaticClass, TEXT("UNavEdgeProviderInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavEdgeProviderInterface);
	UClass* Z_Construct_UClass_UNavigationDataChunk_NoRegister()
	{
		return UNavigationDataChunk::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationDataChunk()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavigationDataChunk::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NavigationDataName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavigationDataName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NavigationDataName, UNavigationDataChunk), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(NewProp_NavigationDataName, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationDataChunk.h"));
				MetaData->SetValue(NewProp_NavigationDataName, TEXT("ToolTip"), TEXT("Name of NavigationData actor that owns this chunk"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationDataChunk(Z_Construct_UClass_UNavigationDataChunk, &UNavigationDataChunk::StaticClass, TEXT("UNavigationDataChunk"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationDataChunk);
	UClass* Z_Construct_UClass_URecastNavMeshDataChunk_NoRegister()
	{
		return URecastNavMeshDataChunk::StaticClass();
	}
	UClass* Z_Construct_UClass_URecastNavMeshDataChunk()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavigationDataChunk();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = URecastNavMeshDataChunk::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/RecastNavMeshDataChunk.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/RecastNavMeshDataChunk.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URecastNavMeshDataChunk(Z_Construct_UClass_URecastNavMeshDataChunk, &URecastNavMeshDataChunk::StaticClass, TEXT("URecastNavMeshDataChunk"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(URecastNavMeshDataChunk);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature()
	{
		struct _Script_Engine_eventOnNavigationPathUpdated_Parms
		{
			UNavigationPath* AffectedPath;
			TEnumAsByte<ENavPathEvent::Type> PathEvent;
		};
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnNavigationPathUpdated__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnNavigationPathUpdated_Parms));
			UProperty* NewProp_PathEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PathEvent, _Script_Engine_eventOnNavigationPathUpdated_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_ENavPathEvent());
			UProperty* NewProp_AffectedPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AffectedPath"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AffectedPath, _Script_Engine_eventOnNavigationPathUpdated_Parms), 0x0010000000000080, Z_Construct_UClass_UNavigationPath_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing()
	{
		struct NavigationPath_eventEnableDebugDrawing_Parms
		{
			bool bShouldDrawDebugData;
			FLinearColor PathColor;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableDebugDrawing"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(NavigationPath_eventEnableDebugDrawing_Parms));
			UProperty* NewProp_PathColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PathColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PathColor, NavigationPath_eventEnableDebugDrawing_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms, bool);
			UProperty* NewProp_bShouldDrawDebugData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bShouldDrawDebugData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bShouldDrawDebugData, NavigationPath_eventEnableDebugDrawing_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PathColor"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation()
	{
		struct NavigationPath_eventEnableRecalculationOnInvalidation_Parms
		{
			TEnumAsByte<ENavigationOptionFlag::Type> DoRecalculation;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableRecalculationOnInvalidation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(NavigationPath_eventEnableRecalculationOnInvalidation_Parms));
			UProperty* NewProp_DoRecalculation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DoRecalculation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DoRecalculation, NavigationPath_eventEnableRecalculationOnInvalidation_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_ENavigationOptionFlag());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("if enabled path will request recalculation if it gets invalidated due to a change to underlying navigation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetDebugString()
	{
		struct NavigationPath_eventGetDebugString_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDebugString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetDebugString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetDebugString_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Debug"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("UObject end"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetPathCost()
	{
		struct NavigationPath_eventGetPathCost_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPathCost"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetPathCost_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetPathCost_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_GetPathLength()
	{
		struct NavigationPath_eventGetPathLength_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPathLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventGetPathLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NavigationPath_eventGetPathLength_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsPartial()
	{
		struct NavigationPath_eventIsPartial_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPartial"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsPartial_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsPartial_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsPartial_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsPartial_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsStringPulled()
	{
		struct NavigationPath_eventIsStringPulled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsStringPulled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsStringPulled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsStringPulled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsStringPulled_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsStringPulled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNavigationPath_IsValid()
	{
		struct NavigationPath_eventIsValid_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNavigationPath();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NavigationPath_eventIsValid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, NavigationPath_eventIsValid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, NavigationPath_eventIsValid_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, NavigationPath_eventIsValid_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("AI|Navigation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UNavigationPath_NoRegister()
	{
		return UNavigationPath::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationPath()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavigationPath::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetDebugString());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetPathCost());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_GetPathLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsPartial());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsStringPulled());
				OuterClass->LinkChild(Z_Construct_UFunction_UNavigationPath_IsValid());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RecalculateOnInvalidation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RecalculateOnInvalidation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RecalculateOnInvalidation, UNavigationPath), 0x0010000000000014, Z_Construct_UEnum_Engine_ENavigationOptionFlag());
				UProperty* NewProp_PathPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PathPoints, UNavigationPath), 0x0010000000000014);
				UProperty* NewProp_PathPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PathPoints, TEXT("PathPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PathUpdatedNotifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PathUpdatedNotifier"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(PathUpdatedNotifier, UNavigationPath), 0x0010000010080000, Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_EnableDebugDrawing(), "EnableDebugDrawing"); // 1097336826
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_EnableRecalculationOnInvalidation(), "EnableRecalculationOnInvalidation"); // 3663810481
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_GetDebugString(), "GetDebugString"); // 2043991919
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_GetPathCost(), "GetPathCost"); // 3797946338
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_GetPathLength(), "GetPathLength"); // 3934462928
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_IsPartial(), "IsPartial"); // 538999589
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_IsStringPulled(), "IsStringPulled"); // 2394742356
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNavigationPath_IsValid(), "IsValid"); // 322927100
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("UObject wrapper for FNavigationPath"));
				MetaData->SetValue(NewProp_RecalculateOnInvalidation, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_RecalculateOnInvalidation, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(NewProp_PathPoints, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_PathPoints, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
				MetaData->SetValue(NewProp_PathUpdatedNotifier, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPath.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationPath(Z_Construct_UClass_UNavigationPath, &UNavigationPath::StaticClass, TEXT("UNavigationPath"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationPath);
	UClass* Z_Construct_UClass_UNavigationPathGenerator_NoRegister()
	{
		return UNavigationPathGenerator::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavigationPathGenerator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavigationPathGenerator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavigationPathGenerator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavigationPathGenerator(Z_Construct_UClass_UNavigationPathGenerator, &UNavigationPathGenerator::StaticClass, TEXT("UNavigationPathGenerator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavigationPathGenerator);
	UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea_NoRegister()
	{
		return URecastFilter_UseDefaultArea::StaticClass();
	}
	UClass* Z_Construct_UClass_URecastFilter_UseDefaultArea()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavigationQueryFilter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = URecastFilter_UseDefaultArea::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavFilters/RecastFilter_UseDefaultArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavFilters/RecastFilter_UseDefaultArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Regular navigation area, applied to entire navigation data by default"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URecastFilter_UseDefaultArea(Z_Construct_UClass_URecastFilter_UseDefaultArea, &URecastFilter_UseDefaultArea::StaticClass, TEXT("URecastFilter_UseDefaultArea"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(URecastFilter_UseDefaultArea);
	UClass* Z_Construct_UClass_UNavLinkTrivial_NoRegister()
	{
		return UNavLinkTrivial::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavLinkTrivial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNavLinkDefinition();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavLinkTrivial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AI/Navigation/NavLinkTrivial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavLinkTrivial.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavLinkTrivial(Z_Construct_UClass_UNavLinkTrivial, &UNavLinkTrivial::StaticClass, TEXT("UNavLinkTrivial"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavLinkTrivial);
	UClass* Z_Construct_UClass_UNavNodeInterface_NoRegister()
	{
		return UNavNodeInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UNavNodeInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNavNodeInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/AI/Navigation/NavNodeInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNavNodeInterface(Z_Construct_UClass_UNavNodeInterface, &UNavNodeInterface::StaticClass, TEXT("UNavNodeInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNavNodeInterface);
	UScriptStruct* Z_Construct_UScriptStruct_FPacketSimulationSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPacketSimulationSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PacketSimulationSettings"), sizeof(FPacketSimulationSettings), Get_Z_Construct_UScriptStruct_FPacketSimulationSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PacketSimulationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPacketSimulationSettings>, EStructFlags(0x00000201));
			UProperty* NewProp_PktLagVariance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PktLagVariance"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PktLagVariance, FPacketSimulationSettings), 0x0010000000000001);
			UProperty* NewProp_PktLag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PktLag"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PktLag, FPacketSimulationSettings), 0x0010000000000001);
			UProperty* NewProp_PktDup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PktDup"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PktDup, FPacketSimulationSettings), 0x0010000000000001);
			UProperty* NewProp_PktOrder = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PktOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PktOrder, FPacketSimulationSettings), 0x0010000000000001);
			UProperty* NewProp_PktLoss = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PktLoss"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PktLoss, FPacketSimulationSettings), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Holds the packet simulation settings in one place"));
			MetaData->SetValue(NewProp_PktLagVariance, TEXT("Category"), TEXT("Simulation Settings"));
			MetaData->SetValue(NewProp_PktLagVariance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
			MetaData->SetValue(NewProp_PktLag, TEXT("Category"), TEXT("Simulation Settings"));
			MetaData->SetValue(NewProp_PktLag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
			MetaData->SetValue(NewProp_PktDup, TEXT("Category"), TEXT("Simulation Settings"));
			MetaData->SetValue(NewProp_PktDup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
			MetaData->SetValue(NewProp_PktOrder, TEXT("Category"), TEXT("Simulation Settings"));
			MetaData->SetValue(NewProp_PktOrder, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
			MetaData->SetValue(NewProp_PktLoss, TEXT("Category"), TEXT("Simulation Settings"));
			MetaData->SetValue(NewProp_PktLoss, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPacketSimulationSettings_CRC() { return 1624013034U; }
	UClass* Z_Construct_UClass_UNetDriver_NoRegister()
	{
		return UNetDriver::StaticClass();
	}
	UClass* Z_Construct_UClass_UNetDriver()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNetDriver::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008D;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, UNetDriver), 0x0010000000000000);
				UProperty* NewProp_NetDriverName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetDriverName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NetDriverName, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_RemoteRoleProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemoteRoleProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RemoteRoleProperty, UNetDriver), 0x0010000000000000, UProperty::StaticClass());
				UProperty* NewProp_RoleProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoleProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RoleProperty, UNetDriver), 0x0010000000000000, UProperty::StaticClass());
				UProperty* NewProp_NetConnectionClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetConnectionClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(NetConnectionClass, UNetDriver), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(World, UNetDriver), 0x0010000000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_ClientConnections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClientConnections"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ClientConnections, UNetDriver), 0x0010000000000000);
				UProperty* NewProp_ClientConnections_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClientConnections, TEXT("ClientConnections"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UNetConnection_NoRegister());
				UProperty* NewProp_ServerConnection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerConnection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ServerConnection, UNetDriver), 0x0010000000000000, Z_Construct_UClass_UNetConnection_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoTimeouts, UNetDriver, bool);
				UProperty* NewProp_bNoTimeouts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoTimeouts"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoTimeouts, UNetDriver), 0x0010000000004000, CPP_BOOL_PROPERTY_BITMASK(bNoTimeouts, UNetDriver), sizeof(bool), true);
				UProperty* NewProp_ConnectionTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConnectionTimeout"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConnectionTimeout, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_InitialConnectTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialConnectTimeout"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InitialConnectTimeout, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_KeepAliveTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KeepAliveTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(KeepAliveTime, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_RelevantTimeout = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelevantTimeout"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RelevantTimeout, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_SpawnPrioritySeconds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnPrioritySeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpawnPrioritySeconds, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_ServerTravelPause = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ServerTravelPause"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ServerTravelPause, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_MaxClientRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxClientRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxClientRate, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_MaxInternetClientRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInternetClientRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxInternetClientRate, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_NetServerMaxTickRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetServerMaxTickRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NetServerMaxTickRate, UNetDriver), 0x0010000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampListenServerTickRate, UNetDriver, uint8);
				UProperty* NewProp_bClampListenServerTickRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampListenServerTickRate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampListenServerTickRate, UNetDriver), 0x0010000000004000, CPP_BOOL_PROPERTY_BITMASK(bClampListenServerTickRate, UNetDriver), sizeof(uint8), false);
				UProperty* NewProp_MaxDownloadSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDownloadSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxDownloadSize, UNetDriver), 0x0010000000004000);
				UProperty* NewProp_NetConnectionClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetConnectionClassName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NetConnectionClassName, UNetDriver), 0x0010000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Accumulated time for the net driver, updated by Tick"));
				MetaData->SetValue(NewProp_NetDriverName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetDriverName, TEXT("ToolTip"), TEXT("Used to specify the net driver to filter actors with (NAME_None || NAME_GameNetDriver is the default net driver)"));
				MetaData->SetValue(NewProp_RemoteRoleProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RemoteRoleProperty, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_RoleProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RoleProperty, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetConnectionClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetConnectionClass, TEXT("ToolTip"), TEXT("The loaded UClass of the net connection type to use"));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("World this net driver is associated with"));
				MetaData->SetValue(NewProp_ClientConnections, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ClientConnections, TEXT("ToolTip"), TEXT("Array of connections to clients (this net driver is a host)"));
				MetaData->SetValue(NewProp_ServerConnection, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ServerConnection, TEXT("ToolTip"), TEXT("Connection to the server (this net driver is a client)"));
				MetaData->SetValue(NewProp_bNoTimeouts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_bNoTimeouts, TEXT("ToolTip"), TEXT("If true, ignore timeouts completely.  Should be used only in development"));
				MetaData->SetValue(NewProp_ConnectionTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ConnectionTimeout, TEXT("ToolTip"), TEXT("Amount of time to wait before considering an established connection timed out.\nTypically shorter than the time to wait on a new connection because this connection\nshould already have been setup and any interruption should be trapped quicker."));
				MetaData->SetValue(NewProp_InitialConnectTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_InitialConnectTimeout, TEXT("ToolTip"), TEXT("Amount of time to wait for a new net connection to be established before destroying the connection"));
				MetaData->SetValue(NewProp_KeepAliveTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_KeepAliveTime, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_RelevantTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_RelevantTimeout, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_SpawnPrioritySeconds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_SpawnPrioritySeconds, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ServerTravelPause, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_ServerTravelPause, TEXT("ToolTip"), TEXT("Amount of time a server will wait before traveling to next map, gives clients time to receive final RPCs on existing level @see NextSwitchCountdown"));
				MetaData->SetValue(NewProp_MaxClientRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxClientRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MaxInternetClientRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxInternetClientRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetServerMaxTickRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetServerMaxTickRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_bClampListenServerTickRate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_bClampListenServerTickRate, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_MaxDownloadSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_MaxDownloadSize, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_NetConnectionClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetDriver.h"));
				MetaData->SetValue(NewProp_NetConnectionClassName, TEXT("ToolTip"), TEXT("Used to specify the class to use for connections"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNetDriver(Z_Construct_UClass_UNetDriver, &UNetDriver::StaticClass, TEXT("UNetDriver"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNetDriver);
	UClass* Z_Construct_UClass_UPackageMapClient_NoRegister()
	{
		return UPackageMapClient::StaticClass();
	}
	UClass* Z_Construct_UClass_UPackageMapClient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UPackageMap::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPackageMapClient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PackageMapClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PackageMapClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPackageMapClient(Z_Construct_UClass_UPackageMapClient, &UPackageMapClient::StaticClass, TEXT("UPackageMapClient"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPackageMapClient);
	UClass* Z_Construct_UClass_UPlayer_NoRegister()
	{
		return UPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ConfiguredLanSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConfiguredLanSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ConfiguredLanSpeed, UPlayer), 0x0010000000044000);
				UProperty* NewProp_ConfiguredInternetSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConfiguredInternetSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ConfiguredInternetSpeed, UPlayer), 0x0010000000044000);
				UProperty* NewProp_CurrentNetSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentNetSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CurrentNetSpeed, UPlayer), 0x0010000000000000);
				UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, UPlayer), 0x0010000000002000, Z_Construct_UClass_APlayerController_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Player.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredLanSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredLanSpeed, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ConfiguredInternetSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_ConfiguredInternetSpeed, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_CurrentNetSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_CurrentNetSpeed, TEXT("ToolTip"), TEXT("the current speed of the connection"));
				MetaData->SetValue(NewProp_PlayerController, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Player.h"));
				MetaData->SetValue(NewProp_PlayerController, TEXT("ToolTip"), TEXT("The actor this player controls."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlayer(Z_Construct_UClass_UPlayer, &UPlayer::StaticClass, TEXT("UPlayer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlayer);
	UClass* Z_Construct_UClass_UNetConnection_NoRegister()
	{
		return UNetConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UNetConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlayer();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UNetConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008D;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ChannelsToTick = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChannelsToTick"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChannelsToTick, UNetConnection), 0x0040000000000000);
				UProperty* NewProp_ChannelsToTick_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChannelsToTick, TEXT("ChannelsToTick"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UChannel_NoRegister());
				UProperty* NewProp_LastReceiveTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastReceiveTime"), RF_Public|RF_Transient|RF_MarkAsNative) UDoubleProperty(CPP_PROPERTY_BASE(LastReceiveTime, UNetConnection), 0x0010000000000000);
				UProperty* NewProp_PlayerId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlayerId, UNetConnection), 0x0010000000000000, Z_Construct_UScriptStruct_FUniqueNetIdRepl());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(InternalAck, UNetConnection, uint8);
				UProperty* NewProp_InternalAck = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InternalAck"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InternalAck, UNetConnection), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(InternalAck, UNetConnection), sizeof(uint8), false);
				UProperty* NewProp_MaxPacket = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxPacket"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxPacket, UNetConnection), 0x0010000000000000);
				UProperty* NewProp_OwningActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwningActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OwningActor, UNetConnection), 0x0010000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_ViewTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ViewTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ViewTarget, UNetConnection), 0x0010000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_SentTemporaries = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SentTemporaries"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SentTemporaries, UNetConnection), 0x0010000000000000);
				UProperty* NewProp_SentTemporaries_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SentTemporaries, TEXT("SentTemporaries"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_OpenChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpenChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OpenChannels, UNetConnection), 0x0010000000000000);
				UProperty* NewProp_OpenChannels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OpenChannels, TEXT("OpenChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UChannel_NoRegister());
				UProperty* NewProp_PackageMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PackageMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PackageMap, UNetConnection), 0x0010000000000000, UPackageMap::StaticClass());
				UProperty* NewProp_Driver = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Driver"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Driver, UNetConnection), 0x0010000000000000, Z_Construct_UClass_UNetDriver_NoRegister());
				UProperty* NewProp_Children = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Children"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Children, UNetConnection), 0x0010000000002000);
				UProperty* NewProp_Children_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Children, TEXT("Children"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UChildConnection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/NetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_ChannelsToTick, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_ChannelsToTick, TEXT("ToolTip"), TEXT("The channels that need ticking. This will be a subset of OpenChannels, only including\nchannels that need to process either dormancy or queued bunches. Should be a significant\noptimization over ticking and calling virtual functions on the potentially hundreds of\nOpenChannels every frame."));
				MetaData->SetValue(NewProp_LastReceiveTime, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_LastReceiveTime, TEXT("ToolTip"), TEXT("Internal."));
				MetaData->SetValue(NewProp_PlayerId, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_PlayerId, TEXT("ToolTip"), TEXT("Net id of remote player on this connection. Only valid on client connections (server side)."));
				MetaData->SetValue(NewProp_InternalAck, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_InternalAck, TEXT("ToolTip"), TEXT("Maximum packet size."));
				MetaData->SetValue(NewProp_MaxPacket, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OwningActor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OwningActor, TEXT("ToolTip"), TEXT("Reference to controlling actor (usually PlayerController)"));
				MetaData->SetValue(NewProp_ViewTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_ViewTarget, TEXT("ToolTip"), TEXT("The actor that is currently being viewed/controlled by the owning controller"));
				MetaData->SetValue(NewProp_SentTemporaries, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_SentTemporaries, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_OpenChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_OpenChannels, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_PackageMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_PackageMap, TEXT("ToolTip"), TEXT("Package map between local and remote. (negotiates net serialization)"));
				MetaData->SetValue(NewProp_Driver, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_Driver, TEXT("ToolTip"), TEXT("Owning net driver"));
				MetaData->SetValue(NewProp_Children, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/NetConnection.h"));
				MetaData->SetValue(NewProp_Children, TEXT("ToolTip"), TEXT("child connections for secondary viewports"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNetConnection(Z_Construct_UClass_UNetConnection, &UNetConnection::StaticClass, TEXT("UNetConnection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNetConnection);
	UClass* Z_Construct_UClass_UDemoNetConnection_NoRegister()
	{
		return UDemoNetConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoNetConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetConnection();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDemoNetConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoNetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simulated network connection for recording and playing back game sessions."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoNetConnection(Z_Construct_UClass_UDemoNetConnection, &UDemoNetConnection::StaticClass, TEXT("UDemoNetConnection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoNetConnection);
	UScriptStruct* Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("RollbackNetStartupActorInfo"), sizeof(FRollbackNetStartupActorInfo), Get_Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RollbackNetStartupActorInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRollbackNetStartupActorInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Level"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Level, FRollbackNetStartupActorInfo), 0x0010000000000000, Z_Construct_UClass_ULevel_NoRegister());
			UProperty* NewProp_Archetype = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Archetype"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Archetype, FRollbackNetStartupActorInfo), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information about net startup actors that need to be rolled back by being destroyed and re-created"));
			MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
			MetaData->SetValue(NewProp_Archetype, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo_CRC() { return 1428910503U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLevelNameAndTime()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLevelNameAndTime_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("LevelNameAndTime"), sizeof(FLevelNameAndTime), Get_Z_Construct_UScriptStruct_FLevelNameAndTime_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LevelNameAndTime"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLevelNameAndTime>, EStructFlags(0x00000001));
			UProperty* NewProp_LevelChangeTimeInMS = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LevelChangeTimeInMS"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(LevelChangeTimeInMS, FLevelNameAndTime), 0x0010000000000000);
			UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LevelName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(LevelName, FLevelNameAndTime), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
			MetaData->SetValue(NewProp_LevelChangeTimeInMS, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
			MetaData->SetValue(NewProp_LevelName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLevelNameAndTime_CRC() { return 2896386667U; }
	UClass* Z_Construct_UClass_UDemoNetDriver_NoRegister()
	{
		return UDemoNetDriver::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoNetDriver()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetDriver();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDemoNetDriver::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RollbackNetStartupActors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollbackNetStartupActors"), RF_Public|RF_Transient|RF_MarkAsNative) UMapProperty(CPP_PROPERTY_BASE(RollbackNetStartupActors, UDemoNetDriver), 0x0010000000002000);
				UProperty* NewProp_RollbackNetStartupActors_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_RollbackNetStartupActors, TEXT("RollbackNetStartupActors_Key"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_RollbackNetStartupActors_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_RollbackNetStartupActors, TEXT("RollbackNetStartupActors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000000000000, Z_Construct_UScriptStruct_FRollbackNetStartupActorInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoNetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Simulated network driver for recording and playing back game sessions."));
				MetaData->SetValue(NewProp_RollbackNetStartupActors, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoNetDriver.h"));
				MetaData->SetValue(NewProp_RollbackNetStartupActors, TEXT("ToolTip"), TEXT("Net startup actors that need to be rolled back during scrubbing by being destroyed and re-spawned\nNOTE - DeletedNetStartupActors will take precedence here, and destroy the actor instead"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoNetDriver(Z_Construct_UClass_UDemoNetDriver, &UDemoNetDriver::StaticClass, TEXT("UDemoNetDriver"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoNetDriver);
	UClass* Z_Construct_UClass_UObjectLibrary_NoRegister()
	{
		return UObjectLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UObjectLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UObjectLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFullyLoaded, UObjectLibrary, bool);
				UProperty* NewProp_bIsFullyLoaded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFullyLoaded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFullyLoaded, UObjectLibrary), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bIsFullyLoaded, UObjectLibrary), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWeakReferences, UObjectLibrary, bool);
				UProperty* NewProp_bUseWeakReferences = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWeakReferences"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWeakReferences, UObjectLibrary), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bUseWeakReferences, UObjectLibrary), sizeof(bool), true);
				UProperty* NewProp_WeakObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeakObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(WeakObjects, UObjectLibrary), 0x0024080000000000);
				UProperty* NewProp_WeakObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_WeakObjects, TEXT("WeakObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_Objects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Objects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Objects, UObjectLibrary), 0x0020080000000001);
				UProperty* NewProp_Objects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Objects, TEXT("Objects"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasBlueprintClasses, UObjectLibrary, bool);
				UProperty* NewProp_bHasBlueprintClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasBlueprintClasses"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasBlueprintClasses, UObjectLibrary), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bHasBlueprintClasses, UObjectLibrary), sizeof(bool), true);
				UProperty* NewProp_ObjectBaseClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObjectBaseClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ObjectBaseClass, UObjectLibrary), 0x0010000000000001, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ObjectLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class that holds a library of Objects"));
				MetaData->SetValue(NewProp_bIsFullyLoaded, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bIsFullyLoaded, TEXT("ToolTip"), TEXT("True if we've already fully loaded this library, can't do it twice"));
				MetaData->SetValue(NewProp_bUseWeakReferences, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bUseWeakReferences, TEXT("ToolTip"), TEXT("If this library should use weak pointers"));
				MetaData->SetValue(NewProp_WeakObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_WeakObjects, TEXT("ToolTip"), TEXT("Weak pointers to objects"));
				MetaData->SetValue(NewProp_Objects, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_Objects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_Objects, TEXT("ToolTip"), TEXT("List of Objects in library"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_bHasBlueprintClasses, TEXT("ToolTip"), TEXT("True if this library holds blueprint classes, false if it holds other objects"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("AllowAbstract"), TEXT(""));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("Category"), TEXT("ObjectLibrary"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectLibrary.h"));
				MetaData->SetValue(NewProp_ObjectBaseClass, TEXT("ToolTip"), TEXT("Class that Objects must be of. If ContainsBlueprints is true, this is the native class that the blueprints are instances of and not UClass"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UObjectLibrary(Z_Construct_UClass_UObjectLibrary, &UObjectLibrary::StaticClass, TEXT("UObjectLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UObjectLibrary);
	UClass* Z_Construct_UClass_UObjectReferencer_NoRegister()
	{
		return UObjectReferencer::StaticClass();
	}
	UClass* Z_Construct_UClass_UObjectReferencer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UObjectReferencer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ReferencedObjects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReferencedObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReferencedObjects, UObjectReferencer), 0x0010000000000001);
				UProperty* NewProp_ReferencedObjects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReferencedObjects, TEXT("ReferencedObjects"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ObjectReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectReferencer.h"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("Category"), TEXT("ObjectReferencer"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ObjectReferencer.h"));
				MetaData->SetValue(NewProp_ReferencedObjects, TEXT("ToolTip"), TEXT("Array of objects being referenced."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UObjectReferencer(Z_Construct_UClass_UObjectReferencer, &UObjectReferencer::StaticClass, TEXT("UObjectReferencer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UObjectReferencer);
	UFunction* Z_Construct_UDelegateFunction_Engine_EmptyOnlineDelegate__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EmptyOnlineDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Net/OnlineBlueprintCallProxyBase.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOnlineBlueprintCallProxyBase_Activate()
	{
		UObject* Outer=Z_Construct_UClass_UOnlineBlueprintCallProxyBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Activate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Online"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Net/OnlineBlueprintCallProxyBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to trigger the actual online action once the delegates have been bound"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOnlineBlueprintCallProxyBase_NoRegister()
	{
		return UOnlineBlueprintCallProxyBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UOnlineBlueprintCallProxyBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UOnlineBlueprintCallProxyBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOnlineBlueprintCallProxyBase_Activate());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOnlineBlueprintCallProxyBase_Activate(), "Activate"); // 2957294888
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Net/OnlineBlueprintCallProxyBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Net/OnlineBlueprintCallProxyBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOnlineBlueprintCallProxyBase(Z_Construct_UClass_UOnlineBlueprintCallProxyBase, &UOnlineBlueprintCallProxyBase::StaticClass, TEXT("UOnlineBlueprintCallProxyBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOnlineBlueprintCallProxyBase);
	UClass* Z_Construct_UClass_UOnlineEngineInterface_NoRegister()
	{
		return UOnlineEngineInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UOnlineEngineInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UOnlineEngineInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Net/OnlineEngineInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Net/OnlineEngineInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Interface class between engine and OnlineSubsystem to remove dependencies between the two\nThe real work is implemented in UOnlineEngineInterfaceImpl in OnlineSubsystemUtils\nThe expectation is that this basic group of functions will not expand/change and that\nOnlineSubsystem can remain independent of the engine\n\nGames should not use this interface, use the OnlineSubsystem plugins directly\n\nBetter functionality descriptions can be found in the OnlineSubsystem interfaces\n\nAdding code here is discouraged, there is probably a better way, talk to the OGS team"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOnlineEngineInterface(Z_Construct_UClass_UOnlineEngineInterface, &UOnlineEngineInterface::StaticClass, TEXT("UOnlineEngineInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOnlineEngineInterface);
	UClass* Z_Construct_UClass_UOnlineSession_NoRegister()
	{
		return UOnlineSession::StaticClass();
	}
	UClass* Z_Construct_UClass_UOnlineSession()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UOnlineSession::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/OnlineSession.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/OnlineSession.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOnlineSession(Z_Construct_UClass_UOnlineSession, &UOnlineSession::StaticClass, TEXT("UOnlineSession"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOnlineSession);
	UEnum* Z_Construct_UEnum_Engine_EEmitterRenderMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEmitterRenderMode"), 0, Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterRenderMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_Normal")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_Point")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_Cross")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_LightsOnly")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_None")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ERM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EEmitterRenderMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Cross.DisplayName"), TEXT("Cross"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_LightsOnly.DisplayName"), TEXT("Lights Only"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("ERM_Point.DisplayName"), TEXT("Point"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Cascade-related"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterRenderMode_CRC() { return 2276495904U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleSubUVInterpMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSubUVInterpMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_Linear")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_Linear_Blend")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_Random")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_Random_Blend")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSUVIM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleSubUVInterpMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Linear_Blend.DisplayName"), TEXT("Linear Blend"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("PSUVIM_Random_Blend.DisplayName"), TEXT("Random Blend"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("SubUV-related"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod_CRC() { return 3395993812U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleBurstMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleBurstMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleBurstMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPBM_Instant")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPBM_Interpolated")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPBM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleBurstMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPBM_Instant.DisplayName"), TEXT("Instant"));
			MetaData->SetValue(ReturnEnum, TEXT("EPBM_Interpolated.DisplayName"), TEXT("Interpolated"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Burst emissions"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleBurstMethod_CRC() { return 921018651U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleBurst()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleBurst_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleBurst"), sizeof(FParticleBurst), Get_Z_Construct_UScriptStruct_FParticleBurst_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleBurst"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleBurst>, EStructFlags(0x00000001));
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, FParticleBurst), 0x0010000000000001);
			UProperty* NewProp_CountLow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CountLow"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CountLow, FParticleBurst), 0x0010000000000001);
			UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Count"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Count, FParticleBurst), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("The time at which to burst them (0..1: emitter lifetime)"));
			MetaData->SetValue(NewProp_CountLow, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_CountLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_CountLow, TEXT("ToolTip"), TEXT("If >= 0, use as a range [CountLow..Count]"));
			MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("ParticleBurst"));
			MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
			MetaData->SetValue(NewProp_Count, TEXT("ToolTip"), TEXT("The number of particles to burst"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleBurst_CRC() { return 887122961U; }
	UClass* Z_Construct_UClass_UParticleEmitter_NoRegister()
	{
		return UParticleEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SignificanceLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SignificanceLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(SignificanceLevel, UParticleEmitter), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleSignificanceLevel());
				UProperty* NewProp_SignificanceLevel_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_SignificanceLevel, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableWhenInsignficant, UParticleEmitter, uint8);
				UProperty* NewProp_bDisableWhenInsignficant = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableWhenInsignficant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableWhenInsignficant, UParticleEmitter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDisableWhenInsignficant, UParticleEmitter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisabledLODsKeepEmitterAlive, UParticleEmitter, uint8);
				UProperty* NewProp_bDisabledLODsKeepEmitterAlive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisabledLODsKeepEmitterAlive"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisabledLODsKeepEmitterAlive, UParticleEmitter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDisabledLODsKeepEmitterAlive, UParticleEmitter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCookedOut, UParticleEmitter, uint8);
				UProperty* NewProp_bCookedOut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCookedOut"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCookedOut, UParticleEmitter), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCookedOut, UParticleEmitter), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSoloing, UParticleEmitter, uint8);
				UProperty* NewProp_bIsSoloing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsSoloing"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSoloing, UParticleEmitter), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsSoloing, UParticleEmitter), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollapsed, UParticleEmitter, uint8);
				UProperty* NewProp_bCollapsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollapsed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollapsed, UParticleEmitter), 0x0010000800000001, CPP_BOOL_PROPERTY_BITMASK(bCollapsed, UParticleEmitter), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_DetailMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DetailMode, UParticleEmitter), 0x0010000000000001, Z_Construct_UEnum_Engine_EDetailMode());
				UProperty* NewProp_QualityLevelSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("QualityLevelSpawnRateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(QualityLevelSpawnRateScale, UParticleEmitter), 0x0010000000000001);
				UProperty* NewProp_MediumDetailSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MediumDetailSpawnRateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MediumDetailSpawnRateScale_DEPRECATED, UParticleEmitter), 0x0010000020000000);
				UProperty* NewProp_InitialAllocationCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialAllocationCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InitialAllocationCount, UParticleEmitter), 0x0010000000000001);
				UProperty* NewProp_PeakActiveParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeakActiveParticles"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PeakActiveParticles, UParticleEmitter), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ConvertedModules, UParticleEmitter, uint8);
				UProperty* NewProp_ConvertedModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConvertedModules"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ConvertedModules, UParticleEmitter), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(ConvertedModules, UParticleEmitter), sizeof(uint8), false);
				UProperty* NewProp_LODLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LODLevels, UParticleEmitter), 0x0010008000000008);
				UProperty* NewProp_LODLevels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LODLevels, TEXT("LODLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleLODLevel_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EmitterEditorColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterEditorColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmitterEditorColor, UParticleEmitter), 0x0010000800000001, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_EmitterRenderMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterRenderMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EmitterRenderMode, UParticleEmitter), 0x0010000000000001, Z_Construct_UEnum_Engine_EEmitterRenderMode());
				UProperty* NewProp_SubUVDataOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubUVDataOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubUVDataOffset, UParticleEmitter), 0x0010000000002000);
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleEmitter), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_SignificanceLevel, TEXT("Category"), TEXT("Significance"));
				MetaData->SetValue(NewProp_SignificanceLevel, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_SignificanceLevel, TEXT("ToolTip"), TEXT("The significance level required of this emitter's owner for this emitter to be active."));
				MetaData->SetValue(NewProp_bDisableWhenInsignficant, TEXT("Category"), TEXT("Significance"));
				MetaData->SetValue(NewProp_bDisableWhenInsignficant, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bDisableWhenInsignficant, TEXT("ToolTip"), TEXT("When true, emitters deemed insignificant will have their tick and render disabled Instantly. When false they will simple stop spawning new particles."));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bDisabledLODsKeepEmitterAlive, TEXT("ToolTip"), TEXT("When true, if the current LOD is disabled the emitter will be kept alive. Otherwise, the emitter will be considered complete if the current LOD is disabled."));
				MetaData->SetValue(NewProp_bCookedOut, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bCookedOut, TEXT("ToolTip"), TEXT("If true, then this emitter was 'cooked out' by the cooker.\nThis means it was completely disabled, but to preserve any\nindexing schemes, it is left in place."));
				MetaData->SetValue(NewProp_bIsSoloing, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bIsSoloing, TEXT("ToolTip"), TEXT("If true, then show only this emitter in the editor"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_bCollapsed, TEXT("ToolTip"), TEXT("This value indicates the emitter should be drawn 'collapsed' in Cascade"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_DetailMode, TEXT("ToolTip"), TEXT("If detail mode is >= system detail mode, primitive won't be rendered."));
				MetaData->SetValue(NewProp_QualityLevelSpawnRateScale, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_QualityLevelSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_MediumDetailSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_MediumDetailSpawnRateScale, TEXT("ToolTip"), TEXT("Scales the spawn rate of this emitter when the engine is running in medium or low detail mode.\nThis can be used to optimize particle draw cost in splitscreen.\nA value of 0 effectively disables this emitter outside of high detail mode,\nAnd this does not affect spawn per unit, unless the value is 0."));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_InitialAllocationCount, TEXT("ToolTip"), TEXT("Initial allocation count - overrides calculated peak count if > 0"));
				MetaData->SetValue(NewProp_PeakActiveParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_ConvertedModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels, TEXT("ToolTip"), TEXT("'Private' data - not required by the editor"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_LODLevels_Inner, TEXT("ToolTip"), TEXT("'Private' data - not required by the editor"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterEditorColor, TEXT("ToolTip"), TEXT("The color of the emitter in the curve editor and debug rendering modes."));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterRenderMode, TEXT("ToolTip"), TEXT("How to render the emitter particles. Can be one of the following:\n        ERM_Normal      - As the intended sprite/mesh\n        ERM_Point       - As a 2x2 pixel block with no scaling and the color set in EmitterEditorColor\n        ERM_Cross       - As a cross of lines, scaled to the size of the particle in EmitterEditorColor\n        ERM_None        - Do not render"));
				MetaData->SetValue(NewProp_SubUVDataOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Particle"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleEmitter(Z_Construct_UClass_UParticleEmitter, &UParticleEmitter::StaticClass, TEXT("UParticleEmitter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleEmitter);
	UEnum* Z_Construct_UEnum_Engine_EParticleScreenAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleScreenAlignment"), 0, Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleScreenAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_FacingCameraPosition")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_Square")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_Rectangle")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_Velocity")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_AwayFromCenter")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_TypeSpecific")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_FacingCameraDistanceBlend")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSA_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleScreenAlignment");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSpriteEmitter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleScreenAlignment_CRC() { return 1695081093U; }
	UClass* Z_Construct_UClass_UParticleSpriteEmitter_NoRegister()
	{
		return UParticleSpriteEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleSpriteEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleEmitter();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleSpriteEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20883080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleSpriteEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSpriteEmitter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleSpriteEmitter(Z_Construct_UClass_UParticleSpriteEmitter, &UParticleSpriteEmitter::StaticClass, TEXT("UParticleSpriteEmitter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleSpriteEmitter);
	UClass* Z_Construct_UClass_UParticleLODLevel_NoRegister()
	{
		return UParticleLODLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleLODLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleLODLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20883080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PeakActiveParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PeakActiveParticles"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PeakActiveParticles, UParticleLODLevel), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ConvertedModules, UParticleLODLevel, uint8);
				UProperty* NewProp_ConvertedModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConvertedModules"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ConvertedModules, UParticleLODLevel), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(ConvertedModules, UParticleLODLevel), sizeof(uint8), false);
				UProperty* NewProp_EventReceiverModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventReceiverModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(EventReceiverModules, UParticleLODLevel), 0x0010000000202000);
				UProperty* NewProp_EventReceiverModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EventReceiverModules, TEXT("EventReceiverModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister());
				UProperty* NewProp_OrbitModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrbitModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OrbitModules, UParticleLODLevel), 0x0010000000202000);
				UProperty* NewProp_OrbitModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OrbitModules, TEXT("OrbitModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleOrbit_NoRegister());
				UProperty* NewProp_UpdateModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(UpdateModules, UParticleLODLevel), 0x0010000000202000);
				UProperty* NewProp_UpdateModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_UpdateModules, TEXT("UpdateModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_SpawnModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SpawnModules, UParticleLODLevel), 0x0010000000202000);
				UProperty* NewProp_SpawnModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnModules, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_SpawningModules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawningModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SpawningModules, UParticleLODLevel), 0x0010000000202000);
				UProperty* NewProp_SpawningModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawningModules, TEXT("SpawningModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister());
				UProperty* NewProp_EventGenerator = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventGenerator"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EventGenerator, UParticleLODLevel), 0x0010000000000008, Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister());
				UProperty* NewProp_SpawnModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpawnModule, UParticleLODLevel), 0x0010000000000008, Z_Construct_UClass_UParticleModuleSpawn_NoRegister());
				UProperty* NewProp_TypeDataModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TypeDataModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TypeDataModule, UParticleLODLevel), 0x0010000000000008, Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister());
				UProperty* NewProp_Modules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Modules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Modules, UParticleLODLevel), 0x0010008000000008);
				UProperty* NewProp_Modules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Modules, TEXT("Modules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleModule_NoRegister());
				UProperty* NewProp_RequiredModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RequiredModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RequiredModule, UParticleLODLevel), 0x0012000000080008, Z_Construct_UClass_UParticleModuleRequired_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UParticleLODLevel, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UParticleLODLevel), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UParticleLODLevel), sizeof(uint8), false);
				UProperty* NewProp_Level = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Level"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Level, UParticleLODLevel), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleLODLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_PeakActiveParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_ConvertedModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventReceiverModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventReceiverModules, TEXT("ToolTip"), TEXT("Event receiver modules only!"));
				MetaData->SetValue(NewProp_OrbitModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_OrbitModules, TEXT("ToolTip"), TEXT("OrbitModules\n    These are used to do offsets of the sprite from the particle location."));
				MetaData->SetValue(NewProp_UpdateModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_UpdateModules, TEXT("ToolTip"), TEXT("UpdateModules - These are called when particles are updated."));
				MetaData->SetValue(NewProp_SpawnModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawnModules, TEXT("ToolTip"), TEXT("SpawnModules - These are called when particles are spawned."));
				MetaData->SetValue(NewProp_SpawningModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawningModules, TEXT("ToolTip"), TEXT("SpawningModules - These are called to determine how many particles to spawn."));
				MetaData->SetValue(NewProp_EventGenerator, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_EventGenerator, TEXT("ToolTip"), TEXT("The optional EventGenerator module."));
				MetaData->SetValue(NewProp_SpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_SpawnModule, TEXT("ToolTip"), TEXT("The SpawnRate/Burst module - required by all emitters."));
				MetaData->SetValue(NewProp_TypeDataModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_TypeDataModule, TEXT("ToolTip"), TEXT("Module<SINGULAR> used for emitter type \"extension\"."));
				MetaData->SetValue(NewProp_Modules, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Modules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Modules, TEXT("ToolTip"), TEXT("An array of particle modules that contain the adjusted data for the LOD level"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Modules_Inner, TEXT("ToolTip"), TEXT("An array of particle modules that contain the adjusted data for the LOD level"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_RequiredModule, TEXT("ToolTip"), TEXT("The required module for this LOD level"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("True if the LOD level is enabled, meaning it should be updated and rendered."));
				MetaData->SetValue(NewProp_Level, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleLODLevel.h"));
				MetaData->SetValue(NewProp_Level, TEXT("ToolTip"), TEXT("The index value of the LOD level"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleLODLevel(Z_Construct_UClass_UParticleLODLevel, &UParticleLODLevel::StaticClass, TEXT("UParticleLODLevel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleLODLevel);
	UEnum* Z_Construct_UEnum_Engine_EParticleSystemInsignificanceReaction()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSystemInsignificanceReaction_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleSystemInsignificanceReaction"), 0, Get_Z_Construct_UEnum_Engine_EParticleSystemInsignificanceReaction_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSystemInsignificanceReaction"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::Auto")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::Complete")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::DisableTick")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::DisableTickAndKill")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::Num")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSystemInsignificanceReaction::EParticleSystemInsignificanceReaction_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EParticleSystemInsignificanceReaction");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Auto.ToolTip"), TEXT("Looping systems will DisableTick. Non-looping systems will Complete."));
			MetaData->SetValue(ReturnEnum, TEXT("Complete.ToolTip"), TEXT("The system will be considered complete and will auto destroy if desired etc."));
			MetaData->SetValue(ReturnEnum, TEXT("DisableTick.ToolTip"), TEXT("The system will simply stop ticking. Tick will be re-enabled when any emitters become significant again. This is useful for persistent fx such as environmental fx."));
			MetaData->SetValue(ReturnEnum, TEXT("DisableTickAndKill.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("DisableTickAndKill.ToolTip"), TEXT("As DisableTick but will also kill all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/ParticleHelper.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Num.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("Num.ToolTip"), TEXT("Hidden for now until I make it useful i.e. Killing particles saves memory."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Determines what a particle system will do when all of it's emitters become insignificant."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSystemInsignificanceReaction_CRC() { return 3909293554U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSignificanceLevel()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSignificanceLevel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleSignificanceLevel"), 0, Get_Z_Construct_UEnum_Engine_EParticleSignificanceLevel_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSignificanceLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::Low")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::Medium")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::High")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::Critical")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::Num")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleSignificanceLevel::EParticleSignificanceLevel_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EParticleSignificanceLevel");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Critical.ToolTip"), TEXT("Critical emitter. Never culled."));
			MetaData->SetValue(ReturnEnum, TEXT("High.ToolTip"), TEXT("High significance emitter. Culled last."));
			MetaData->SetValue(ReturnEnum, TEXT("Low.ToolTip"), TEXT("Low significance emitter. Culled first."));
			MetaData->SetValue(ReturnEnum, TEXT("Medium.ToolTip"), TEXT("Medium significance emitter."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/ParticleHelper.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Num.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("A level of significance for a particle system. Used by game code to enable/disable emitters progressively as they move away from the camera or are occluded/off screen."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSignificanceLevel_CRC() { return 3265372565U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleSourceSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSourceSelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPSSM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPSSM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPSSM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleSourceSelectionMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Random.ToolTip"), TEXT("Random         - select a particle at random"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Sequential.DisplayName"), TEXT("Sequential"));
			MetaData->SetValue(ReturnEnum, TEXT("EPSSM_Sequential.ToolTip"), TEXT("Sequential     - select a particle in order"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Particle Selection Method, for any emitters that utilize particles\nas the source points."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod_CRC() { return 1471373134U; }
	UEnum* Z_Construct_UEnum_Engine_EModuleType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EModuleType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EModuleType"), 0, Get_Z_Construct_UEnum_Engine_EModuleType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EModuleType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_General")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_TypeData")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Beam")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Trail")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Spawn")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Required")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Event")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_Light")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_SubUV")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPMT_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EModuleType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Beam.DisplayName"), TEXT("Beam"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Beam.ToolTip"), TEXT("Beam - only applied to beam emitters"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Event.DisplayName"), TEXT("Event"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Event.ToolTip"), TEXT("Event - event related modules"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_General.DisplayName"), TEXT("General"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_General.ToolTip"), TEXT("General - all emitter types can use it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Light.DisplayName"), TEXT("Light"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Light.ToolTip"), TEXT("Light related modules"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Required.DisplayName"), TEXT("Required"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Required.ToolTip"), TEXT("Required - all emitter types REQUIRE it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Spawn.DisplayName"), TEXT("Spawn"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Spawn.ToolTip"), TEXT("Spawn - all emitter types REQUIRE it"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_SubUV.DisplayName"), TEXT("SubUV"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_SubUV.ToolTip"), TEXT("SubUV related modules"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Trail.DisplayName"), TEXT("Trail"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_Trail.ToolTip"), TEXT("Trail - only applied to trail emitters"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_TypeData.DisplayName"), TEXT("Type Data"));
			MetaData->SetValue(ReturnEnum, TEXT("EPMT_TypeData.ToolTip"), TEXT("TypeData - TypeData modules"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("ModuleType\n   Indicates the kind of emitter the module can be applied to.\n   ie, EPMT_Beam - only applies to beam emitters.\n\n   The TypeData field is present to speed up finding the TypeData module."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EModuleType_CRC() { return 4199532257U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleRandomSeedInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleRandomSeedInfo"), sizeof(FParticleRandomSeedInfo), Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleRandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleRandomSeedInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_RandomSeeds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RandomSeeds"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RandomSeeds, FParticleRandomSeedInfo), 0x0010000000000001);
			UProperty* NewProp_RandomSeeds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RandomSeeds, TEXT("RandomSeeds"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRandomlySelectSeedArray, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bRandomlySelectSeedArray = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRandomlySelectSeedArray"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRandomlySelectSeedArray, FParticleRandomSeedInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRandomlySelectSeedArray, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bResetSeedOnEmitterLooping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bResetSeedOnEmitterLooping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bResetSeedOnEmitterLooping, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInstanceSeedIsIndex, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bInstanceSeedIsIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInstanceSeedIsIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInstanceSeedIsIndex, FParticleRandomSeedInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInstanceSeedIsIndex, FParticleRandomSeedInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGetSeedFromInstance, FParticleRandomSeedInfo, uint8);
			UProperty* NewProp_bGetSeedFromInstance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bGetSeedFromInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGetSeedFromInstance, FParticleRandomSeedInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bGetSeedFromInstance, FParticleRandomSeedInfo), sizeof(uint8), false);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FParticleRandomSeedInfo), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_RandomSeeds, TEXT("ToolTip"), TEXT("The random seed values to utilize for the module.\nMore than 1 means the instance will randomly select one."));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bRandomlySelectSeedArray, TEXT("ToolTip"), TEXT("If true, then randomly select a seed entry from the RandomSeeds array"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bResetSeedOnEmitterLooping, TEXT("ToolTip"), TEXT("If true, then reset the seed upon the emitter looping.\nFor looping environmental effects this should likely be set to false to avoid\na repeating pattern."));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bInstanceSeedIsIndex, TEXT("ToolTip"), TEXT("If true, the seed value retrieved from the instance will be an\nindex into the array of seeds."));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_bGetSeedFromInstance, TEXT("ToolTip"), TEXT("If true, the module will attempt to get the seed from the owner\ninstance. If that fails, it will fall back to getting it from\nthe RandomSeeds array."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ParticleRandomSeedInfo"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name to expose to the placed instances for setting this seed"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleRandomSeedInfo_CRC() { return 2071578088U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleCurvePair()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleCurvePair"), sizeof(FParticleCurvePair), Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleCurvePair"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleCurvePair>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveObject, FParticleCurvePair), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_CurveName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(CurveName, FParticleCurvePair), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_CurveObject, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
			MetaData->SetValue(NewProp_CurveName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleCurvePair_CRC() { return 1020108292U; }
	UClass* Z_Construct_UClass_UParticleModule_NoRegister()
	{
		return UParticleModule::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModule()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModule::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ModuleEditorColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModuleEditorColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ModuleEditorColor, UParticleModule), 0x0010000800000001, Z_Construct_UScriptStruct_FColor());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LODValidity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODValidity"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LODValidity, UParticleModule), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRequiresLoopingNotification, UParticleModule, uint8);
				UProperty* NewProp_bRequiresLoopingNotification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRequiresLoopingNotification"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRequiresLoopingNotification, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bRequiresLoopingNotification, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsRandomSeed, UParticleModule, uint8);
				UProperty* NewProp_bSupportsRandomSeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsRandomSeed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsRandomSeed, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bSupportsRandomSeed, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LODDuplicate, UParticleModule, uint8);
				UProperty* NewProp_LODDuplicate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODDuplicate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LODDuplicate, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(LODDuplicate, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEditable, UParticleModule, uint8);
				UProperty* NewProp_bEditable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEditable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEditable, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bEditable, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UParticleModule, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupported3DDrawMode, UParticleModule, uint8);
				UProperty* NewProp_bSupported3DDrawMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupported3DDrawMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupported3DDrawMode, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bSupported3DDrawMode, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(b3DDrawMode, UParticleModule, uint8);
				UProperty* NewProp_b3DDrawMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("b3DDrawMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(b3DDrawMode, UParticleModule), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(b3DDrawMode, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCurvesAsColor, UParticleModule, uint8);
				UProperty* NewProp_bCurvesAsColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCurvesAsColor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCurvesAsColor, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCurvesAsColor, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdateForGPUEmitter, UParticleModule, uint8);
				UProperty* NewProp_bUpdateForGPUEmitter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdateForGPUEmitter"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdateForGPUEmitter, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdateForGPUEmitter, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFinalUpdateModule, UParticleModule, uint8);
				UProperty* NewProp_bFinalUpdateModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFinalUpdateModule"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFinalUpdateModule, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bFinalUpdateModule, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdateModule, UParticleModule, uint8);
				UProperty* NewProp_bUpdateModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdateModule"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdateModule, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUpdateModule, UParticleModule), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnModule, UParticleModule, uint8);
				UProperty* NewProp_bSpawnModule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnModule"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnModule, UParticleModule), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bSpawnModule, UParticleModule), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleModule.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_ModuleEditorColor, TEXT("ToolTip"), TEXT("The color to draw the modules curves in the curve editor.\n    If bCurvesAsColor is true, it overrides this value."));
				MetaData->SetValue(NewProp_LODValidity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_LODValidity, TEXT("ToolTip"), TEXT("The LOD levels this module is present in.\nBit-flags are used to indicate validity for a given LOD level.\nFor example, if\n        ((1 << Level) & LODValidity) != 0\nthen the module is used in that LOD."));
				MetaData->SetValue(NewProp_bRequiresLoopingNotification, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bRequiresLoopingNotification, TEXT("ToolTip"), TEXT("If true, the module should be told when looping"));
				MetaData->SetValue(NewProp_bSupportsRandomSeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSupportsRandomSeed, TEXT("ToolTip"), TEXT("If true, the module supports RandomSeed setting"));
				MetaData->SetValue(NewProp_LODDuplicate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_LODDuplicate, TEXT("ToolTip"), TEXT("If true, this flag indicates that auto-generation for LOD will result in\nan exact duplicate of the module, regardless of the percentage.\nIf false, it will result in a module with different settings."));
				MetaData->SetValue(NewProp_bEditable, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bEditable, TEXT("ToolTip"), TEXT("If true, the module has had editing enabled on it"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("If true, the module is enabled"));
				MetaData->SetValue(NewProp_bSupported3DDrawMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSupported3DDrawMode, TEXT("ToolTip"), TEXT("If true, the module supports rendering a 3D visualization helper"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("Category"), TEXT("Cascade"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_b3DDrawMode, TEXT("ToolTip"), TEXT("If true, the module should render its 3D visualization helper"));
				MetaData->SetValue(NewProp_bCurvesAsColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bCurvesAsColor, TEXT("ToolTip"), TEXT("If true, the module displays FVector curves as colors"));
				MetaData->SetValue(NewProp_bUpdateForGPUEmitter, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bUpdateForGPUEmitter, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during update and/or final update for GPU emitters"));
				MetaData->SetValue(NewProp_bFinalUpdateModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bFinalUpdateModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during final update"));
				MetaData->SetValue(NewProp_bUpdateModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bUpdateModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during Updating"));
				MetaData->SetValue(NewProp_bSpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModule.h"));
				MetaData->SetValue(NewProp_bSpawnModule, TEXT("ToolTip"), TEXT("If true, the module performs operations on particles during Spawning"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModule(Z_Construct_UClass_UParticleModule, &UParticleModule::StaticClass, TEXT("UParticleModule"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModule);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationBase_NoRegister()
	{
		return UParticleModuleAccelerationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAccelerationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysInWorldSpace, UParticleModuleAccelerationBase, uint8);
				UProperty* NewProp_bAlwaysInWorldSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysInWorldSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysInWorldSpace, UParticleModuleAccelerationBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysInWorldSpace, UParticleModuleAccelerationBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationBase.h"));
				MetaData->SetValue(NewProp_bAlwaysInWorldSpace, TEXT("ToolTip"), TEXT("If true, then treat the acceleration as world-space"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationBase(Z_Construct_UClass_UParticleModuleAccelerationBase, &UParticleModuleAccelerationBase::StaticClass, TEXT("UParticleModuleAccelerationBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationBase);
	UClass* Z_Construct_UClass_UParticleModuleAcceleration_NoRegister()
	{
		return UParticleModuleAcceleration::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAcceleration()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAcceleration::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyOwnerScale, UParticleModuleAcceleration, uint8);
				UProperty* NewProp_bApplyOwnerScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyOwnerScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyOwnerScale, UParticleModuleAcceleration), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyOwnerScale, UParticleModuleAcceleration), sizeof(uint8), false);
				UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Acceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Acceleration, UParticleModuleAcceleration), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ToolTip"), TEXT("If true, then apply the particle system components scale\nto the acceleration value."));
				MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAcceleration.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ToolTip"), TEXT("The initial acceleration of the particle.\nValue is obtained using the EmitterTime at particle spawn.\nEach frame, the current and base velocity of the particle\nis then updated using the formula\n        velocity += acceleration * DeltaTime\nwhere DeltaTime is the time passed since the last frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAcceleration(Z_Construct_UClass_UParticleModuleAcceleration, &UParticleModuleAcceleration::StaticClass, TEXT("UParticleModuleAcceleration"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAcceleration);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant_NoRegister()
	{
		return UParticleModuleAccelerationConstant::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationConstant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAccelerationConstant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Acceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Acceleration, UParticleModuleAccelerationConstant), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Const Acceleration"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("ParticleModuleAccelerationConstant"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationConstant.h"));
				MetaData->SetValue(NewProp_Acceleration, TEXT("ToolTip"), TEXT("Constant acceleration for particles in this system."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationConstant(Z_Construct_UClass_UParticleModuleAccelerationConstant, &UParticleModuleAccelerationConstant::StaticClass, TEXT("UParticleModuleAccelerationConstant"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationConstant);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag_NoRegister()
	{
		return UParticleModuleAccelerationDrag::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDrag()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAccelerationDrag::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DragCoefficientRaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragCoefficientRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DragCoefficientRaw, UParticleModuleAccelerationDrag), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_DragCoefficient = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragCoefficient"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DragCoefficient_DEPRECATED, UParticleModuleAccelerationDrag), 0x0010000020080008, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Drag"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(NewProp_DragCoefficientRaw, TEXT("Category"), TEXT("Drag"));
				MetaData->SetValue(NewProp_DragCoefficientRaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(NewProp_DragCoefficientRaw, TEXT("ToolTip"), TEXT("Per-particle drag coefficient. Evaluted using emitter time."));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDrag.h"));
				MetaData->SetValue(NewProp_DragCoefficient, TEXT("ToolTip"), TEXT("Per-particle drag coefficient. Evaluted using emitter time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationDrag(Z_Construct_UClass_UParticleModuleAccelerationDrag, &UParticleModuleAccelerationDrag::StaticClass, TEXT("UParticleModuleAccelerationDrag"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationDrag);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife_NoRegister()
	{
		return UParticleModuleAccelerationDragScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAccelerationDragScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DragScaleRaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragScaleRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DragScaleRaw, UParticleModuleAccelerationDragScaleOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_DragScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DragScale"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DragScale_DEPRECATED, UParticleModuleAccelerationDragScaleOverLife), 0x0010000020080008, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Drag Scale/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject Acceleration Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(NewProp_DragScaleRaw, TEXT("Category"), TEXT("Drag"));
				MetaData->SetValue(NewProp_DragScaleRaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(NewProp_DragScaleRaw, TEXT("ToolTip"), TEXT("Per-particle drag scale. Evaluted using particle relative time."));
				MetaData->SetValue(NewProp_DragScale, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_DragScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationDragScaleOverLife.h"));
				MetaData->SetValue(NewProp_DragScale, TEXT("ToolTip"), TEXT("Per-particle drag scale. Evaluted using particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationDragScaleOverLife(Z_Construct_UClass_UParticleModuleAccelerationDragScaleOverLife, &UParticleModuleAccelerationDragScaleOverLife::StaticClass, TEXT("UParticleModuleAccelerationDragScaleOverLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationDragScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime_NoRegister()
	{
		return UParticleModuleAccelerationOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAccelerationOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAccelerationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAccelerationOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AccelOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AccelOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AccelOverLife, UParticleModuleAccelerationOverLifetime), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Acceleration/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("Category"), TEXT("Acceleration"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Acceleration/ParticleModuleAccelerationOverLifetime.h"));
				MetaData->SetValue(NewProp_AccelOverLife, TEXT("ToolTip"), TEXT("The acceleration of the particle over its lifetime.\nValue is obtained using the RelativeTime of the partice.\nThe current and base velocity values of the particle\nare then updated using the formula\n        velocity += acceleration* DeltaTime\nwhere DeltaTime is the time passed since the last frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAccelerationOverLifetime(Z_Construct_UClass_UParticleModuleAccelerationOverLifetime, &UParticleModuleAccelerationOverLifetime::StaticClass, TEXT("UParticleModuleAccelerationOverLifetime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAccelerationOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleAttractorBase_NoRegister()
	{
		return UParticleModuleAttractorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAttractorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Attraction"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorBase(Z_Construct_UClass_UParticleModuleAttractorBase, &UParticleModuleAttractorBase::StaticClass, TEXT("UParticleModuleAttractorBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorBase);
	UClass* Z_Construct_UClass_UParticleModuleAttractorLine_NoRegister()
	{
		return UParticleModuleAttractorLine::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorLine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAttractorLine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorLine), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorLine), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EndPoint1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndPoint1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndPoint1, UParticleModuleAttractorLine), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_EndPoint0 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndPoint0"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndPoint0, UParticleModuleAttractorLine), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Line Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the line attractor."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The range of the line attractor."));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_EndPoint1, TEXT("ToolTip"), TEXT("The second endpoint of the line."));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorLine.h"));
				MetaData->SetValue(NewProp_EndPoint0, TEXT("ToolTip"), TEXT("The first endpoint of the line."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorLine(Z_Construct_UClass_UParticleModuleAttractorLine, &UParticleModuleAttractorLine::StaticClass, TEXT("UParticleModuleAttractorLine"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorLine);
	UEnum* Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAttractorParticleSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAttractorParticleSelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAPSM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAPSM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAPSM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EAttractorParticleSelectionMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EAPSM_Random.DisplayName"), TEXT("Random"));
			MetaData->SetValue(ReturnEnum, TEXT("EAPSM_Sequential.DisplayName"), TEXT("Sequential"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod_CRC() { return 150550899U; }
	UClass* Z_Construct_UClass_UParticleModuleAttractorParticle_NoRegister()
	{
		return UParticleModuleAttractorParticle::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorParticle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAttractorParticle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastSelIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastSelIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LastSelIndex, UParticleModuleAttractorParticle), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritSourceVel, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bInheritSourceVel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritSourceVel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritSourceVel, UParticleModuleAttractorParticle), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritSourceVel, UParticleModuleAttractorParticle), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenewSource, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bRenewSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenewSource"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenewSource, UParticleModuleAttractorParticle), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenewSource, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleAttractorParticle), 0x0010000000000001, Z_Construct_UEnum_Engine_EAttractorParticleSelectionMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectBaseVelocity, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bAffectBaseVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectBaseVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectBaseVelocity, UParticleModuleAttractorParticle), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectBaseVelocity, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorParticle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStrengthByDistance, UParticleModuleAttractorParticle, uint8);
				UProperty* NewProp_bStrengthByDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStrengthByDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStrengthByDistance, UParticleModuleAttractorParticle), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bStrengthByDistance, UParticleModuleAttractorParticle), sizeof(uint8), false);
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorParticle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleAttractorParticle), 0x0010000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Particle Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_LastSelIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bInheritSourceVel, TEXT("ToolTip"), TEXT("Whether the particle should inherit the source veloctiy if it expires."));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bRenewSource, TEXT("ToolTip"), TEXT("Whether the particle should grab a new particle if it's source expires."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method to use when selecting an attractor target particle from the emitter.\nOne of the following:\nRandom          - Randomly select a particle from the source emitter.\nSequential  - Select a particle using a sequential order."));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ToolTip"), TEXT("If true, the velocity adjustment will be applied to the base velocity."));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the attraction (negative values repel).\nParticle-life relative if StrengthByDistance is false."));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_bStrengthByDistance, TEXT("ToolTip"), TEXT("The strength curve is a function of distance or of time."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The radial range of the attraction around the source particle.\nParticle-life relative."));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorParticle.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The source emitter for attractors"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorParticle(Z_Construct_UClass_UParticleModuleAttractorParticle, &UParticleModuleAttractorParticle::StaticClass, TEXT("UParticleModuleAttractorParticle"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorParticle);
	UClass* Z_Construct_UClass_UParticleModuleAttractorPoint_NoRegister()
	{
		return UParticleModuleAttractorPoint::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorPoint()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAttractorPoint::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Z, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Z"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Z, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Z, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Y, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Y"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Y, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Y, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_X, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Negative_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_X"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_X, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_X, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Z, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Z"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Z, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Z, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Y, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Y"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Y, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Y, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_X, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_Positive_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_X"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_X, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_X, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWorldSpacePosition, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bUseWorldSpacePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWorldSpacePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWorldSpacePosition, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseWorldSpacePosition, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideVelocity, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bOverrideVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideVelocity, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideVelocity, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectBaseVelocity, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_bAffectBaseVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectBaseVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectBaseVelocity, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectBaseVelocity, UParticleModuleAttractorPoint), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(StrengthByDistance, UParticleModuleAttractorPoint, uint8);
				UProperty* NewProp_StrengthByDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrengthByDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(StrengthByDistance, UParticleModuleAttractorPoint), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(StrengthByDistance, UParticleModuleAttractorPoint), sizeof(uint8), false);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleAttractorPoint), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Range = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Range"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Range, UParticleModuleAttractorPoint), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleAttractorPoint), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Point Attractor"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ToolTip"), TEXT("Whether particles can move along the negative Z axis."));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ToolTip"), TEXT("Whether particles can move along the negative Y axis."));
				MetaData->SetValue(NewProp_Negative_X, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ToolTip"), TEXT("Whether particles can move along the negative X axis."));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ToolTip"), TEXT("Whether particles can move along the positive Z axis."));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ToolTip"), TEXT("Whether particles can move along the positive Y axis."));
				MetaData->SetValue(NewProp_Positive_X, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ToolTip"), TEXT("Whether particles can move along the positive X axis."));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bUseWorldSpacePosition, TEXT("ToolTip"), TEXT("If true, treat the position as world space.  So don't transform the the point to localspace."));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bOverrideVelocity, TEXT("ToolTip"), TEXT("If true, set the velocity."));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_bAffectBaseVelocity, TEXT("ToolTip"), TEXT("If true, the velocity adjustment will be applied to the base velocity."));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_StrengthByDistance, TEXT("ToolTip"), TEXT("The strength curve is a function of distance or of time."));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the point attractor."));
				MetaData->SetValue(NewProp_Range, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Range, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Range, TEXT("ToolTip"), TEXT("The radial range of the attractor."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Attractor"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPoint.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The position of the point attractor from the source of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorPoint(Z_Construct_UClass_UParticleModuleAttractorPoint, &UParticleModuleAttractorPoint::StaticClass, TEXT("UParticleModuleAttractorPoint"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorPoint);
	UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity_NoRegister()
	{
		return UParticleModuleAttractorPointGravity::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleAttractorPointGravity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleAttractorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleAttractorPointGravity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StrengthRaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrengthRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StrengthRaw, UParticleModuleAttractorPointGravity), 0x0010008002000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Strength_DEPRECATED, UParticleModuleAttractorPointGravity), 0x0010000020080008, Z_Construct_UClass_UDistributionFloat_NoRegister());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, UParticleModuleAttractorPointGravity), 0x0010000000000001);
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleAttractorPointGravity), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Point Gravity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_StrengthRaw, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_StrengthRaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_StrengthRaw, TEXT("ToolTip"), TEXT("The strength of the point source."));
				MetaData->SetValue(NewProp_Strength, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The strength of the point source."));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("The distance at which the influence of the point begins to falloff."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("PointGravitySource"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Attractor/ParticleModuleAttractorPointGravity.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The position of the point gravity source."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleAttractorPointGravity(Z_Construct_UClass_UParticleModuleAttractorPointGravity, &UParticleModuleAttractorPointGravity::StaticClass, TEXT("UParticleModuleAttractorPointGravity"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleAttractorPointGravity);
	UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("Beam2SourceTargetTangentMethod"), 0, Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Beam2SourceTargetTangentMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STTM_Direct")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STTM_UserSet")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STTM_Distribution")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STTM_Emitter")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STTM_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("Beam2SourceTargetTangentMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Direct.DisplayName"), TEXT("Direct"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Direct.ToolTip"), TEXT("Direct - a direct line between source and target."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Distribution.DisplayName"), TEXT("Distribution"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Distribution.ToolTip"), TEXT("Distribution - use the distribution."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Emitter.DisplayName"), TEXT("Emitter"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_Emitter.ToolTip"), TEXT("Emitter        - use the emitter direction."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_UserSet.DisplayName"), TEXT("User Set"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STTM_UserSet.ToolTip"), TEXT("UserSet        - use the user set value."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The method to use in determining the source/target tangent."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod_CRC() { return 2538713316U; }
	UEnum* Z_Construct_UEnum_Engine_Beam2SourceTargetMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("Beam2SourceTargetMethod"), 0, Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Beam2SourceTargetMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_UserSet")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_Emitter")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_Particle")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_Actor")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2STM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("Beam2SourceTargetMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Actor.DisplayName"), TEXT("Actor"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Actor.ToolTip"), TEXT("Actor          - use the actor as the source/target.\n    The name of the actor should be set in <Source/Target>Name."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Default.ToolTip"), TEXT("Default        - use the distribution.\n    This is the fallback for when other modes can't be resolved."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Emitter.DisplayName"), TEXT("Emitter"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Emitter.ToolTip"), TEXT("Emitter        - use the emitter position as the source/target."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Particle.DisplayName"), TEXT("Particle"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_Particle.ToolTip"), TEXT("Particle       - use the particles from a given emitter in the system.\n    The name of the emitter should be set in <Source/Target>Name."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_UserSet.DisplayName"), TEXT("User Set"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2STM_UserSet.ToolTip"), TEXT("UserSet        - use the user set value.\n    Primarily intended for weapon effects."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The method to use in determining the source/target."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_Beam2SourceTargetMethod_CRC() { return 2528710207U; }
	UClass* Z_Construct_UClass_UParticleModuleBeamBase_NoRegister()
	{
		return UParticleModuleBeamBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleBeamBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamBase(Z_Construct_UClass_UParticleModuleBeamBase, &UParticleModuleBeamBase::StaticClass, TEXT("UParticleModuleBeamBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamBase);
	UEnum* Z_Construct_UEnum_Engine_BeamModifierType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("BeamModifierType"), 0, Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamModifierType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2MT_Source")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2MT_Target")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2MT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("BeamModifierType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Source.DisplayName"), TEXT("Source"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Source.ToolTip"), TEXT("Modify the source of the beam."));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Target.DisplayName"), TEXT("Target"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2MT_Target.ToolTip"), TEXT("Modify the target of the beam."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("What to modify."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_BeamModifierType_CRC() { return 3773099883U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBeamModifierOptions()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BeamModifierOptions"), sizeof(FBeamModifierOptions), Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamModifierOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBeamModifierOptions>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLock, FBeamModifierOptions, uint8);
			UProperty* NewProp_bLock = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLock"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLock, FBeamModifierOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLock, FBeamModifierOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScale, FBeamModifierOptions, uint8);
			UProperty* NewProp_bScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScale, FBeamModifierOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bScale, FBeamModifierOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModify, FBeamModifierOptions, uint8);
			UProperty* NewProp_bModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bModify"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModify, FBeamModifierOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bModify, FBeamModifierOptions), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bLock, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bLock, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bLock, TEXT("ToolTip"), TEXT("If true, lock the modifier to the life of the particle."));
			MetaData->SetValue(NewProp_bScale, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bScale, TEXT("ToolTip"), TEXT("If true, scale the associated value by the given value."));
			MetaData->SetValue(NewProp_bModify, TEXT("Category"), TEXT("BeamModifierOptions"));
			MetaData->SetValue(NewProp_bModify, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
			MetaData->SetValue(NewProp_bModify, TEXT("ToolTip"), TEXT("If true, modify the value associated with this grouping."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBeamModifierOptions_CRC() { return 3775127937U; }
	UClass* Z_Construct_UClass_UParticleModuleBeamModifier_NoRegister()
	{
		return UParticleModuleBeamModifier::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamModifier()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleBeamModifier::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Strength, UParticleModuleBeamModifier), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StrengthOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrengthOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StrengthOptions, UParticleModuleBeamModifier), 0x0010000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsoluteTangent, UParticleModuleBeamModifier, uint8);
				UProperty* NewProp_bAbsoluteTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsoluteTangent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsoluteTangent, UParticleModuleBeamModifier), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsoluteTangent, UParticleModuleBeamModifier), sizeof(uint8), false);
				UProperty* NewProp_Tangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tangent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Tangent, UParticleModuleBeamModifier), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TangentOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TangentOptions, UParticleModuleBeamModifier), 0x0010000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, UParticleModuleBeamModifier), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_PositionOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PositionOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PositionOptions, UParticleModuleBeamModifier), 0x0010000000000001, Z_Construct_UScriptStruct_FBeamModifierOptions());
				UProperty* NewProp_ModifierType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ModifierType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ModifierType, UParticleModuleBeamModifier), 0x0010000000000001, Z_Construct_UEnum_Engine_BeamModifierType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam Modifier"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("Strength"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("The value to use when modifying the Strength."));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("Category"), TEXT("Strength"));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_StrengthOptions, TEXT("ToolTip"), TEXT("The options associated with the Strength."));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_bAbsoluteTangent, TEXT("ToolTip"), TEXT("If true, don't transform the tangent modifier into the tangent basis."));
				MetaData->SetValue(NewProp_Tangent, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_Tangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Tangent, TEXT("ToolTip"), TEXT("The value to use when modifying the Tangent."));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("Category"), TEXT("Tangent"));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_TangentOptions, TEXT("ToolTip"), TEXT("The options associated with the Tangent."));
				MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Position"));
				MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_Position, TEXT("ToolTip"), TEXT("The value to use when modifying the position."));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("Category"), TEXT("Position"));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_PositionOptions, TEXT("ToolTip"), TEXT("The options associated with the position."));
				MetaData->SetValue(NewProp_ModifierType, TEXT("Category"), TEXT("Modifier"));
				MetaData->SetValue(NewProp_ModifierType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamModifier.h"));
				MetaData->SetValue(NewProp_ModifierType, TEXT("ToolTip"), TEXT("Whether this module modifies the Source or the Target."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamModifier(Z_Construct_UClass_UParticleModuleBeamModifier, &UParticleModuleBeamModifier::StaticClass, TEXT("UParticleModuleBeamModifier"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamModifier);
	UClass* Z_Construct_UClass_UParticleModuleBeamNoise_NoRegister()
	{
		return UParticleModuleBeamNoise::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamNoise()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleBeamNoise::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NoiseScale, UParticleModuleBeamNoise), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyNoiseScale, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bApplyNoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyNoiseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyNoiseScale, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyNoiseScale, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_FrequencyDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyDistance, UParticleModuleBeamNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTargetNoise, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bTargetNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTargetNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTargetNoise, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTargetNoise, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTessellation"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NoiseTessellation, UParticleModuleBeamNoise), 0x0010000000000001);
				UProperty* NewProp_NoiseTangentStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTangentStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NoiseTangentStrength, UParticleModuleBeamNoise), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseNoiseTangents, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bUseNoiseTangents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseNoiseTangents"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseNoiseTangents, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseNoiseTangents, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseTension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseTension"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NoiseTension, UParticleModuleBeamNoise), 0x0010000000000001);
				UProperty* NewProp_NoiseLockTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseLockTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NoiseLockTime, UParticleModuleBeamNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOscillate, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bOscillate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOscillate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOscillate, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOscillate, UParticleModuleBeamNoise), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoiseLock, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bNoiseLock = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoiseLock"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoiseLock, UParticleModuleBeamNoise), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bNoiseLock, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseLockRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseLockRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NoiseLockRadius, UParticleModuleBeamNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSmooth, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bSmooth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSmooth"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSmooth, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSmooth, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NoiseSpeed, UParticleModuleBeamNoise), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNRScaleEmitterTime, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bNRScaleEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNRScaleEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNRScaleEmitterTime, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bNRScaleEmitterTime, UParticleModuleBeamNoise), sizeof(uint8), false);
				UProperty* NewProp_NoiseRangeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseRangeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NoiseRangeScale, UParticleModuleBeamNoise), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_NoiseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NoiseRange, UParticleModuleBeamNoise), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Frequency_LowRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Frequency_LowRange"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Frequency_LowRange, UParticleModuleBeamNoise), 0x0010000000000001);
				UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Frequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Frequency, UParticleModuleBeamNoise), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLowFreq_Enabled, UParticleModuleBeamNoise, uint8);
				UProperty* NewProp_bLowFreq_Enabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLowFreq_Enabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLowFreq_Enabled, UParticleModuleBeamNoise), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLowFreq_Enabled, UParticleModuleBeamNoise), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Noise"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ToolTip"), TEXT("The scale factor to apply to noise range.\nThe lookup value is determined by dividing the number of noise points present by the\nmaximum number of noise points (Frequency)."));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bApplyNoiseScale, TEXT("ToolTip"), TEXT("If true, apply the noise scale to the beam."));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_FrequencyDistance, TEXT("ToolTip"), TEXT("The distance at which to deposit noise points.\nIf 0.0, then use the static frequency value.\nIf not, distribute noise points at the given distance, up to the static Frequency value.\nAt that point, evenly distribute them along the beam."));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bTargetNoise, TEXT("ToolTip"), TEXT("Whether to apply noise to the target point (or end of line in distance mode...)\nIf true, the beam could potentially 'leave' the target..."));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTessellation, TEXT("ToolTip"), TEXT("The amount of tessellation between noise points."));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTangentStrength, TEXT("ToolTip"), TEXT("The strength of noise tangents, if enabled."));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bUseNoiseTangents, TEXT("ToolTip"), TEXT("If true, calculate tangents at each noise point."));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseTension, TEXT("ToolTip"), TEXT("The tension to apply to the tessellated noise line."));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseLockTime, TEXT("ToolTip"), TEXT("How long the  noise points should be locked - 0.0 indicates forever."));
				MetaData->SetValue(NewProp_bOscillate, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bOscillate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bOscillate, TEXT("ToolTip"), TEXT("Whether the noise points should be oscillate."));
				MetaData->SetValue(NewProp_bNoiseLock, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bNoiseLock, TEXT("ToolTip"), TEXT("INTERNAL - Whether the noise points should be locked."));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseLockRadius, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_bSmooth, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bSmooth, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bSmooth, TEXT("ToolTip"), TEXT("Whether the noise movement should be smooth or 'jerky'."));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseSpeed, TEXT("ToolTip"), TEXT("The speed with which to move each noise point."));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bNRScaleEmitterTime, TEXT("ToolTip"), TEXT("If true,  the NoiseRangeScale will be grabbed based on the emitter time.\nIf false, the NoiseRangeScale will be grabbed based on the particle time."));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseRangeScale, TEXT("ToolTip"), TEXT("A scale factor that will be applied to the noise range."));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_NoiseRange, TEXT("ToolTip"), TEXT("The noise point ranges."));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_Frequency_LowRange, TEXT("ToolTip"), TEXT("If not 0, then the frequency will select a random value in the range\n        [Frequency_LowRange..Frequency]"));
				MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("The frequency of noise points."));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("Category"), TEXT("LowFreq"));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamNoise.h"));
				MetaData->SetValue(NewProp_bLowFreq_Enabled, TEXT("ToolTip"), TEXT("Is low frequency noise enabled."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamNoise(Z_Construct_UClass_UParticleModuleBeamNoise, &UParticleModuleBeamNoise::StaticClass, TEXT("UParticleModuleBeamNoise"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamNoise);
	UClass* Z_Construct_UClass_UParticleModuleBeamSource_NoRegister()
	{
		return UParticleModuleBeamSource::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamSource()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleBeamSource::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceStength, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSourceStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceStength"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceStength, UParticleModuleBeamSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceStength, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceStrength, UParticleModuleBeamSource), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceTangent, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSourceTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceTangent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceTangent, UParticleModuleBeamSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceTangent, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceTangent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceTangent, UParticleModuleBeamSource), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_SourceTangentMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceTangentMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceTangentMethod, UParticleModuleBeamSource), 0x0010000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSource, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bLockSource = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSource"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSource, UParticleModuleBeamSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSource, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, UParticleModuleBeamSource), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSourceAbsolute, UParticleModuleBeamSource, uint8);
				UProperty* NewProp_bSourceAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSourceAbsolute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSourceAbsolute, UParticleModuleBeamSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSourceAbsolute, UParticleModuleBeamSource), sizeof(uint8), false);
				UProperty* NewProp_SourceName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourceName, UParticleModuleBeamSource), 0x0010000000000001);
				UProperty* NewProp_SourceMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceMethod, UParticleModuleBeamSource), 0x0010000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each beam."));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSourceTangent, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceTangent, TEXT("ToolTip"), TEXT("The tangent for the source point for each beam."));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceTangentMethod, TEXT("ToolTip"), TEXT("The method to use for the source tangent."));
				MetaData->SetValue(NewProp_bLockSource, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSource, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bLockSource, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_Source, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_Source, TEXT("ToolTip"), TEXT("Default source-point to use."));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_bSourceAbsolute, TEXT("ToolTip"), TEXT("Whether to treat the as an absolute position in world space."));
				MetaData->SetValue(NewProp_SourceName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each beam."));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamSource.h"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ToolTip"), TEXT("The method flag."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamSource(Z_Construct_UClass_UParticleModuleBeamSource, &UParticleModuleBeamSource::StaticClass, TEXT("UParticleModuleBeamSource"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamSource);
	UClass* Z_Construct_UClass_UParticleModuleBeamTarget_NoRegister()
	{
		return UParticleModuleBeamTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleBeamTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleBeamBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleBeamTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LockRadius, UParticleModuleBeamTarget), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTargetStength, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTargetStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTargetStength"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTargetStength, UParticleModuleBeamTarget), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTargetStength, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_TargetStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetStrength, UParticleModuleBeamTarget), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTargetTangent, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTargetTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTargetTangent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTargetTangent, UParticleModuleBeamTarget), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTargetTangent, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_TargetTangent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetTangent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetTangent, UParticleModuleBeamTarget), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TargetTangentMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetTangentMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TargetTangentMethod, UParticleModuleBeamTarget), 0x0010000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetTangentMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockTarget, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bLockTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockTarget, UParticleModuleBeamTarget), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockTarget, UParticleModuleBeamTarget), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTargetAbsolute, UParticleModuleBeamTarget, uint8);
				UProperty* NewProp_bTargetAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTargetAbsolute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTargetAbsolute, UParticleModuleBeamTarget), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTargetAbsolute, UParticleModuleBeamTarget), sizeof(uint8), false);
				UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Target, UParticleModuleBeamTarget), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_TargetName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TargetName, UParticleModuleBeamTarget), 0x0010000000000001);
				UProperty* NewProp_TargetMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TargetMethod, UParticleModuleBeamTarget), 0x0010000000000001, Z_Construct_UEnum_Engine_Beam2SourceTargetMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Target"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_LockRadius, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTargetStength, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the Target point for each beam."));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTargetTangent, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetTangent, TEXT("ToolTip"), TEXT("The tangent for the Target point for each beam."));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetTangentMethod, TEXT("ToolTip"), TEXT("The method to use for the Target tangent."));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bLockTarget, TEXT("ToolTip"), TEXT("Whether to lock the Target to the life of the particle."));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_bTargetAbsolute, TEXT("ToolTip"), TEXT("Whether to treat the as an absolute position in world space."));
				MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_Target, TEXT("ToolTip"), TEXT("Default target-point information to use if the beam method is endpoint."));
				MetaData->SetValue(NewProp_TargetName, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetName, TEXT("ToolTip"), TEXT("The target point sources of each beam, when using the end point method."));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("Category"), TEXT("Target"));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Beam/ParticleModuleBeamTarget.h"));
				MetaData->SetValue(NewProp_TargetMethod, TEXT("ToolTip"), TEXT("The method flag."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleBeamTarget(Z_Construct_UClass_UParticleModuleBeamTarget, &UParticleModuleBeamTarget::StaticClass, TEXT("UParticleModuleBeamTarget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleBeamTarget);
	UClass* Z_Construct_UClass_UParticleModuleCameraBase_NoRegister()
	{
		return UParticleModuleCameraBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCameraBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleCameraBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Camera"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Camera/ParticleModuleCameraBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCameraBase(Z_Construct_UClass_UParticleModuleCameraBase, &UParticleModuleCameraBase::StaticClass, TEXT("UParticleModuleCameraBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCameraBase);
	UEnum* Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleCameraOffsetUpdateMethod"), 0, Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCameraOffsetUpdateMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCOUM_DirectSet")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCOUM_Additive")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCOUM_Scalar")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCOUM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleCameraOffsetUpdateMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_Additive.DisplayName"), TEXT("Additive"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_DirectSet.DisplayName"), TEXT("Direct Set"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCOUM_Scalar.DisplayName"), TEXT("Scalar"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The update method for the offset"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod_CRC() { return 3440095072U; }
	UClass* Z_Construct_UClass_UParticleModuleCameraOffset_NoRegister()
	{
		return UParticleModuleCameraOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCameraOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCameraBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleCameraOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_UpdateMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(UpdateMethod, UParticleModuleCameraOffset), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleCameraOffsetUpdateMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnTimeOnly, UParticleModuleCameraOffset, uint8);
				UProperty* NewProp_bSpawnTimeOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnTimeOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnTimeOnly, UParticleModuleCameraOffset), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnTimeOnly, UParticleModuleCameraOffset), sizeof(uint8), false);
				UProperty* NewProp_CameraOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CameraOffset, UParticleModuleCameraOffset), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Camera Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_UpdateMethod, TEXT("ToolTip"), TEXT("How to update the offset for this module.\nDirectSet - Set the value directly (overwrite any previous setting)\nAdditive  - Add the offset of this module to the existing offset\nScalar    - Scale the existing offset by the value of this module"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ToolTip"), TEXT("If true, the offset will only be processed at spawn time"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Camera/ParticleModuleCameraOffset.h"));
				MetaData->SetValue(NewProp_CameraOffset, TEXT("ToolTip"), TEXT("The camera-relative offset to apply to sprite location"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCameraOffset(Z_Construct_UClass_UParticleModuleCameraOffset, &UParticleModuleCameraOffset::StaticClass, TEXT("UParticleModuleCameraOffset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCameraOffset);
	UEnum* Z_Construct_UEnum_Engine_EParticleCollisionComplete()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleCollisionComplete"), 0, Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCollisionComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_Kill")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_Freeze")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_HaltCollisions")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_FreezeTranslation")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_FreezeRotation")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_FreezeMovement")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPCC_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleCollisionComplete");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Freeze.DisplayName"), TEXT("Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Freeze.ToolTip"), TEXT("Freeze the particle in place"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeMovement.DisplayName"), TEXT("Freeze Movement"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeMovement.ToolTip"), TEXT("Stop all movement of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeRotation.DisplayName"), TEXT("Freeze Rotation"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeRotation.ToolTip"), TEXT("Stop rotations of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeTranslation.DisplayName"), TEXT("Freeze Translation"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_FreezeTranslation.ToolTip"), TEXT("Stop translations of the particle"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_HaltCollisions.DisplayName"), TEXT("Halt Collisions"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_HaltCollisions.ToolTip"), TEXT("Stop collision checks, but keep updating"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Kill.DisplayName"), TEXT("Kill"));
			MetaData->SetValue(ReturnEnum, TEXT("EPCC_Kill.ToolTip"), TEXT("Kill the particle when MaxCollisions is reached"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Flags indicating what to do with the particle when MaxCollisions is reached"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionComplete_CRC() { return 35226267U; }
	UClass* Z_Construct_UClass_UParticleModuleCollisionBase_NoRegister()
	{
		return UParticleModuleCollisionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollisionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleCollisionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollisionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollisionBase(Z_Construct_UClass_UParticleModuleCollisionBase, &UParticleModuleCollisionBase::StaticClass, TEXT("UParticleModuleCollisionBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollisionBase);
	UClass* Z_Construct_UClass_UParticleModuleCollision_NoRegister()
	{
		return UParticleModuleCollision::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollision()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCollisionBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleCollision::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxCollisionDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisionDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxCollisionDistance, UParticleModuleCollision), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSourceActor, UParticleModuleCollision, uint8);
				UProperty* NewProp_bIgnoreSourceActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreSourceActor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSourceActor, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSourceActor, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollideOnlyIfVisible, UParticleModuleCollision, uint8);
				UProperty* NewProp_bCollideOnlyIfVisible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollideOnlyIfVisible"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollideOnlyIfVisible, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCollideOnlyIfVisible, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDropDetail, UParticleModuleCollision, uint8);
				UProperty* NewProp_bDropDetail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDropDetail"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDropDetail, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDropDetail, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_DelayAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DelayAmount, UParticleModuleCollision), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_VerticalFudgeFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalFudgeFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VerticalFudgeFactor, UParticleModuleCollision), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision, uint8);
				UProperty* NewProp_bOnlyVerticalNormalsDecrementCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOnlyVerticalNormalsDecrementCount"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOnlyVerticalNormalsDecrementCount, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPawnsDoNotDecrementCount, UParticleModuleCollision, uint8);
				UProperty* NewProp_bPawnsDoNotDecrementCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPawnsDoNotDecrementCount"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPawnsDoNotDecrementCount, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bPawnsDoNotDecrementCount, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_DirScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DirScalar"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DirScalar, UParticleModuleCollision), 0x0010000000000001);
				UProperty* NewProp_ParticleMass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleMass"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParticleMass, UParticleModuleCollision), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreTriggerVolumes, UParticleModuleCollision, uint8);
				UProperty* NewProp_bIgnoreTriggerVolumes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreTriggerVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreTriggerVolumes, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreTriggerVolumes, UParticleModuleCollision), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyPhysics, UParticleModuleCollision, uint8);
				UProperty* NewProp_bApplyPhysics = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyPhysics"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyPhysics, UParticleModuleCollision), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyPhysics, UParticleModuleCollision), sizeof(uint8), false);
				UProperty* NewProp_CollisionTypes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CollisionTypes, UParticleModuleCollision), 0x0010000000000001);
				UProperty* NewProp_CollisionTypes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CollisionTypes, TEXT("CollisionTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_Engine_EObjectTypeQuery());
				UProperty* NewProp_CollisionCompletionOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionCompletionOption"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CollisionCompletionOption, UParticleModuleCollision), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleCollisionComplete());
				UProperty* NewProp_MaxCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxCollisions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaxCollisions, UParticleModuleCollision), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_DampingFactorRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DampingFactorRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DampingFactorRotation, UParticleModuleCollision), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_DampingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DampingFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DampingFactor, UParticleModuleCollision), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Actor Collision"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisionDistance, TEXT("ToolTip"), TEXT("Max distance at which particle collision will occur."));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bIgnoreSourceActor, TEXT("ToolTip"), TEXT("If true, then the source actor is ignored in collision checks.\nDefaults to true."));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bCollideOnlyIfVisible, TEXT("ToolTip"), TEXT("If true, Particle collision only if particle system is currently being rendered."));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bDropDetail, TEXT("ToolTip"), TEXT("If true, when the World->bDropDetail flag is set, the module will be ignored."));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DelayAmount, TEXT("ToolTip"), TEXT("How long to delay before checking a particle for collisions.\nValue is retrieved using the EmitterTime.\nDuring update, the particle flag IgnoreCollisions will be\nset until the particle RelativeTime has surpassed the\nDelayAmount."));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_VerticalFudgeFactor, TEXT("ToolTip"), TEXT("The fudge factor to use to determine vertical.\nTrue vertical will have a Hit.Normal.Z == 1.0\nThis will allow for Z components in the range of\n[1.0-VerticalFudgeFactor..1.0]\nto count as vertical collisions."));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bOnlyVerticalNormalsDecrementCount, TEXT("ToolTip"), TEXT("If true, then collisions that do not have a vertical hit\nnormal will still react, but UsedMaxCollisions count will\nnot be decremented. (ie., They don't 'count' as collisions)\nUseful for having particles come to rest on floors."));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bPawnsDoNotDecrementCount, TEXT("ToolTip"), TEXT("If true, then collisions with Pawns will still react, but\nthe UsedMaxCollisions count will not be decremented.\n(ie., They don't 'count' as collisions)\nNOTE: Having this on prevents the code from running in parallel."));
				MetaData->SetValue(NewProp_DirScalar, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DirScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DirScalar, TEXT("ToolTip"), TEXT("The directional scalar value - used to scale the bounds to\n'assist' in avoiding inter-penetration or large gaps."));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_ParticleMass, TEXT("ToolTip"), TEXT("The mass of the particle - for use when bApplyPhysics is true.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_bIgnoreTriggerVolumes, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bIgnoreTriggerVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bIgnoreTriggerVolumes, TEXT("ToolTip"), TEXT("Any trigger volumes that are hit will be ignored. NOTE: This can be turned off if the TrigerVolume physics object type is not in the CollisionTypes array.\nTurning this off is strongly recommended as having it on prevents the code from running off the game thread."));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_bApplyPhysics, TEXT("ToolTip"), TEXT("If true, physic will be applied between a particle and the\nobject it collides with.\nThis is one-way - particle --> object. The particle does\nnot have physics applied to it - it just generates an\nimpulse applied to the object it collides with.\nNOTE: having this on prevents the code from running off the game thread."));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_CollisionTypes, TEXT("ToolTip"), TEXT("Which ObjectTypes to collide with"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_CollisionCompletionOption, TEXT("ToolTip"), TEXT("What to do once a particles MaxCollisions is reached.\nOne of the following:\nEPCC_Kill\n        Kill the particle when MaxCollisions is reached\nEPCC_Freeze\n        Freeze in place, NO MORE UPDATES\nEPCC_HaltCollisions,\n        Stop collision checks, keep updating everything\nEPCC_FreezeTranslation,\n        Stop translations, keep updating everything else\nEPCC_FreezeRotation,\n        Stop rotations, keep updating everything else\nEPCC_FreezeMovement\n        Stop all movement, keep updating"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_MaxCollisions, TEXT("ToolTip"), TEXT("The maximum number of collisions a particle can have.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DampingFactorRotation, TEXT("ToolTip"), TEXT("How much to `slow' the rotation of the particle after a collision.\nValue is obtained using the EmitterTime at particle spawn."));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollision.h"));
				MetaData->SetValue(NewProp_DampingFactor, TEXT("ToolTip"), TEXT("How much to `slow' the velocity of the particle after a collision.\nValue is obtained using the EmitterTime at particle spawn."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollision(Z_Construct_UClass_UParticleModuleCollision, &UParticleModuleCollision::StaticClass, TEXT("UParticleModuleCollision"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollision);
	UEnum* Z_Construct_UEnum_Engine_EParticleCollisionResponse()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleCollisionResponse"), 0, Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleCollisionResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleCollisionResponse::Bounce")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleCollisionResponse::Stop")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleCollisionResponse::Kill")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleCollisionResponse::EParticleCollisionResponse_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EParticleCollisionResponse::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Bounce.ToolTip"), TEXT("The particle will bounce off of the surface."));
			MetaData->SetValue(ReturnEnum, TEXT("Kill.ToolTip"), TEXT("The particle will be killed."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Stop.ToolTip"), TEXT("The particle will stop on the surface."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How particles respond to collision events."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleCollisionResponse_CRC() { return 950721781U; }
	UClass* Z_Construct_UClass_UParticleModuleCollisionGPU_NoRegister()
	{
		return UParticleModuleCollisionGPU::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleCollisionGPU()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleCollisionBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleCollisionGPU::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CollisionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CollisionMode, UParticleModuleCollisionGPU), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleCollisionMode());
				UProperty* NewProp_Response = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Response"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Response, UParticleModuleCollisionGPU), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleCollisionResponse());
				UProperty* NewProp_RadiusBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RadiusBias, UParticleModuleCollisionGPU), 0x0010000000000001);
				UProperty* NewProp_RadiusScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RadiusScale, UParticleModuleCollisionGPU), 0x0010000000000001);
				UProperty* NewProp_RandomDistribution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomDistribution"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RandomDistribution, UParticleModuleCollisionGPU), 0x0010000000000001);
				UProperty* NewProp_RandomSpread = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSpread"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RandomSpread, UParticleModuleCollisionGPU), 0x0010000000000001);
				UProperty* NewProp_Friction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Friction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Friction, UParticleModuleCollisionGPU), 0x0010000000000001);
				UProperty* NewProp_ResilienceScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResilienceScaleOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ResilienceScaleOverLife, UParticleModuleCollisionGPU), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Resilience = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Resilience"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Resilience, UParticleModuleCollisionGPU), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Collision (Scene Depth)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_CollisionMode, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_CollisionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Response, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Response, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Response, TEXT("ToolTip"), TEXT("How particles respond to a collision event."));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RadiusBias, TEXT("ToolTip"), TEXT("Bias applied to the collision radius."));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ToolTip"), TEXT("Scale applied to the size of the particle to obtain the collision radius."));
				MetaData->SetValue(NewProp_RandomDistribution, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RandomDistribution, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RandomDistribution, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RandomDistribution, TEXT("ToolTip"), TEXT("Controls bouncing particles distribution (1 = uniform distribution; 2 = squared distribution)."));
				MetaData->SetValue(NewProp_RandomDistribution, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("ToolTip"), TEXT("Controls how wide the bouncing particles are distributed (0 = disabled)."));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RandomSpread, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Friction, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Friction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Friction, TEXT("ToolTip"), TEXT("Friction applied to all particles during a collision or while moving\nalong a surface."));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_ResilienceScaleOverLife, TEXT("ToolTip"), TEXT("Scales the bounciness of the particle over its life."));
				MetaData->SetValue(NewProp_Resilience, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Resilience, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Collision/ParticleModuleCollisionGPU.h"));
				MetaData->SetValue(NewProp_Resilience, TEXT("ToolTip"), TEXT("The bounciness of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleCollisionGPU(Z_Construct_UClass_UParticleModuleCollisionGPU, &UParticleModuleCollisionGPU::StaticClass, TEXT("UParticleModuleCollisionGPU"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleCollisionGPU);
	UClass* Z_Construct_UClass_UParticleModuleColorBase_NoRegister()
	{
		return UParticleModuleColorBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleColorBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorBase(Z_Construct_UClass_UParticleModuleColorBase, &UParticleModuleColorBase::StaticClass, TEXT("UParticleModuleColorBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorBase);
	UClass* Z_Construct_UClass_UParticleModuleColor_NoRegister()
	{
		return UParticleModuleColor::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleColor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampAlpha, UParticleModuleColor, uint8);
				UProperty* NewProp_bClampAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampAlpha, UParticleModuleColor), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampAlpha, UParticleModuleColor), sizeof(uint8), false);
				UProperty* NewProp_StartAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartAlpha, UParticleModuleColor), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartColor, UParticleModuleColor), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Color"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ToolTip"), TEXT("If true, the alpha value will be clamped to the [0..1] range."));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_StartAlpha, TEXT("ToolTip"), TEXT("Initial alpha for a particle as a function of Emitter time."));
				MetaData->SetValue(NewProp_StartColor, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_StartColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor.h"));
				MetaData->SetValue(NewProp_StartColor, TEXT("ToolTip"), TEXT("Initial color for a particle as a function of Emitter time."));
				MetaData->SetValue(NewProp_StartColor, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColor(Z_Construct_UClass_UParticleModuleColor, &UParticleModuleColor::StaticClass, TEXT("UParticleModuleColor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColor);
	UClass* Z_Construct_UClass_UParticleModuleColor_Seeded_NoRegister()
	{
		return UParticleModuleColor_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColor_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColor();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleColor_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleColor_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Color (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColor_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColor_Seeded(Z_Construct_UClass_UParticleModuleColor_Seeded, &UParticleModuleColor_Seeded::StaticClass, TEXT("UParticleModuleColor_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColor_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleColorOverLife_NoRegister()
	{
		return UParticleModuleColorOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleColorOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClampAlpha, UParticleModuleColorOverLife, uint8);
				UProperty* NewProp_bClampAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClampAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClampAlpha, UParticleModuleColorOverLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bClampAlpha, UParticleModuleColorOverLife), sizeof(uint8), false);
				UProperty* NewProp_AlphaOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaOverLife, UParticleModuleColorOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorOverLife, UParticleModuleColorOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Color Over Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_bClampAlpha, TEXT("ToolTip"), TEXT("If true, the alpha value will be clamped to the [0..1] range."));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_AlphaOverLife, TEXT("ToolTip"), TEXT("The alpha to apply to the particle, as a function of the particle RelativeTime."));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorOverLife.h"));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("ToolTip"), TEXT("The color to apply to the particle, as a function of the particle RelativeTime."));
				MetaData->SetValue(NewProp_ColorOverLife, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorOverLife(Z_Construct_UClass_UParticleModuleColorOverLife, &UParticleModuleColorOverLife::StaticClass, TEXT("UParticleModuleColorOverLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorOverLife);
	UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife_NoRegister()
	{
		return UParticleModuleColorScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleColorScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleColorBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleColorScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterTime, UParticleModuleColorScaleOverLife, uint8);
				UProperty* NewProp_bEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterTime, UParticleModuleColorScaleOverLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterTime, UParticleModuleColorScaleOverLife), sizeof(uint8), false);
				UProperty* NewProp_AlphaScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaScaleOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleOverLife, UParticleModuleColorScaleOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorScaleOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorScaleOverLife, UParticleModuleColorScaleOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Scale Color / Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_bEmitterTime, TEXT("ToolTip"), TEXT("Whether it is EmitterTime or ParticleTime related."));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_AlphaScaleOverLife, TEXT("ToolTip"), TEXT("The scale factor for the alpha."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("Category"), TEXT("Color"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Color/ParticleModuleColorScaleOverLife.h"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ToolTip"), TEXT("The scale factor for the color."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("TreatAsColor"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleColorScaleOverLife(Z_Construct_UClass_UParticleModuleColorScaleOverLife, &UParticleModuleColorScaleOverLife::StaticClass, TEXT("UParticleModuleColorScaleOverLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleColorScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleEventBase_NoRegister()
	{
		return UParticleModuleEventBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Event"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventBase(Z_Construct_UClass_UParticleModuleEventBase, &UParticleModuleEventBase::StaticClass, TEXT("UParticleModuleEventBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventBase);
	UScriptStruct* Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleEvent_GenerateInfo"), sizeof(FParticleEvent_GenerateInfo), Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleEvent_GenerateInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleEvent_GenerateInfo>, EStructFlags(0x00000005));
			UProperty* NewProp_ParticleModuleEventsToSendToGame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParticleModuleEventsToSendToGame"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ParticleModuleEventsToSendToGame, FParticleEvent_GenerateInfo), 0x0010008000000009);
			UProperty* NewProp_ParticleModuleEventsToSendToGame_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParticleModuleEventsToSendToGame, TEXT("ParticleModuleEventsToSendToGame"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister());
			UProperty* NewProp_CustomName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CustomName, FParticleEvent_GenerateInfo), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseOrbitOffset, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_bUseOrbitOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseOrbitOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseOrbitOffset, FParticleEvent_GenerateInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseOrbitOffset, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseReflectedImpactVector, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_UseReflectedImpactVector = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UseReflectedImpactVector"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseReflectedImpactVector, FParticleEvent_GenerateInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(UseReflectedImpactVector, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LastTimeOnly, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_LastTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastTimeOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LastTimeOnly, FParticleEvent_GenerateInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(LastTimeOnly, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(FirstTimeOnly, FParticleEvent_GenerateInfo, uint8);
			UProperty* NewProp_FirstTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FirstTimeOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(FirstTimeOnly, FParticleEvent_GenerateInfo), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(FirstTimeOnly, FParticleEvent_GenerateInfo), sizeof(uint8), false);
			UProperty* NewProp_ParticleFrequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParticleFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ParticleFrequency, FParticleEvent_GenerateInfo), 0x0010000000000001);
			UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Frequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Frequency, FParticleEvent_GenerateInfo), 0x0010000000000001);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Type, FParticleEvent_GenerateInfo), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleEventType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame, TEXT("ToolTip"), TEXT("The events we want to fire off when this event has been generated"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleModuleEventsToSendToGame_Inner, TEXT("ToolTip"), TEXT("The events we want to fire off when this event has been generated"));
			MetaData->SetValue(NewProp_CustomName, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_CustomName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_CustomName, TEXT("ToolTip"), TEXT("Should the event tag with a custom name? Leave blank for the default."));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_bUseOrbitOffset, TEXT("ToolTip"), TEXT("Use the orbit offset when computing the position at which the event occurred."));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_UseReflectedImpactVector, TEXT("ToolTip"), TEXT("Use the impact FVector not the hit normal (collision only)."));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_LastTimeOnly, TEXT("ToolTip"), TEXT("Only fire the last time (collision only)."));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_FirstTimeOnly, TEXT("ToolTip"), TEXT("Only fire the first time (collision only)."));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_ParticleFrequency, TEXT("ToolTip"), TEXT("Only fire the first time (collision only)."));
			MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("How often to trigger the event (<= 1 means EVERY time)."));
			MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("ParticleEvent_GenerateInfo"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("The type of event."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo_CRC() { return 3254102533U; }
	UClass* Z_Construct_UClass_UParticleModuleEventGenerator_NoRegister()
	{
		return UParticleModuleEventGenerator::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventGenerator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventGenerator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Events = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Events"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Events, UParticleModuleEventGenerator), 0x0010008002000009);
				UProperty* NewProp_Events_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Events, TEXT("Events"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000008, Z_Construct_UScriptStruct_FParticleEvent_GenerateInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Event Generator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventGenerator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
				MetaData->SetValue(NewProp_Events, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_Events, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventGenerator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventGenerator(Z_Construct_UClass_UParticleModuleEventGenerator, &UParticleModuleEventGenerator::StaticClass, TEXT("UParticleModuleEventGenerator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventGenerator);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase_NoRegister()
	{
		return UParticleModuleEventReceiverBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventReceiverBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EventName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EventName, UParticleModuleEventReceiverBase), 0x0010000000000001);
				UProperty* NewProp_EventGeneratorType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventGeneratorType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EventGeneratorType, UParticleModuleEventReceiverBase), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleEventType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_EventName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventName, TEXT("ToolTip"), TEXT("The name of the emitter of interest for generating the event."));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverBase.h"));
				MetaData->SetValue(NewProp_EventGeneratorType, TEXT("ToolTip"), TEXT("The type of event that will generate the kill."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverBase(Z_Construct_UClass_UParticleModuleEventReceiverBase, &UParticleModuleEventReceiverBase::StaticClass, TEXT("UParticleModuleEventReceiverBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverBase);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles_NoRegister()
	{
		return UParticleModuleEventReceiverKillParticles::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverKillParticles()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventReceiverBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventReceiverKillParticles::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopSpawning, UParticleModuleEventReceiverKillParticles, uint8);
				UProperty* NewProp_bStopSpawning = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStopSpawning"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopSpawning, UParticleModuleEventReceiverKillParticles), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bStopSpawning, UParticleModuleEventReceiverKillParticles), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("EventReceiver Kill All"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("Category"), TEXT("ParticleModuleEventReceiverKillParticles"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverKillParticles.h"));
				MetaData->SetValue(NewProp_bStopSpawning, TEXT("ToolTip"), TEXT("If true, stop this emitter from spawning as well."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverKillParticles(Z_Construct_UClass_UParticleModuleEventReceiverKillParticles, &UParticleModuleEventReceiverKillParticles::StaticClass, TEXT("UParticleModuleEventReceiverKillParticles"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverKillParticles);
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn_NoRegister()
	{
		return UParticleModuleEventReceiverSpawn::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventReceiverSpawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleEventReceiverBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventReceiverSpawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBanPhysicalMaterials, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bBanPhysicalMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBanPhysicalMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBanPhysicalMaterials, UParticleModuleEventReceiverSpawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bBanPhysicalMaterials, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				UProperty* NewProp_PhysicalMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicalMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PhysicalMaterials, UParticleModuleEventReceiverSpawn), 0x0010000000000001);
				UProperty* NewProp_PhysicalMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PhysicalMaterials, TEXT("PhysicalMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPhysicalMaterial_NoRegister());
				UProperty* NewProp_InheritVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritVelocityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InheritVelocityScale, UParticleModuleEventReceiverSpawn), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritVelocity, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bInheritVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritVelocity, UParticleModuleEventReceiverSpawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritVelocity, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePSysLocation, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bUsePSysLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePSysLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePSysLocation, UParticleModuleEventReceiverSpawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUsePSysLocation, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseParticleTime, UParticleModuleEventReceiverSpawn, uint8);
				UProperty* NewProp_bUseParticleTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseParticleTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseParticleTime, UParticleModuleEventReceiverSpawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseParticleTime, UParticleModuleEventReceiverSpawn), sizeof(uint8), false);
				UProperty* NewProp_SpawnCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnCount"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpawnCount, UParticleModuleEventReceiverSpawn), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("EventReceiver Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bBanPhysicalMaterials, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bBanPhysicalMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bBanPhysicalMaterials, TEXT("ToolTip"), TEXT("When true, the PhysicalMaterials list is used to ban specified materials for collision events but allow all others.\nWhen false, the PhysicalMaterials list is used to allow only specified materials for collision events and ban all others."));
				MetaData->SetValue(NewProp_PhysicalMaterials, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_PhysicalMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_PhysicalMaterials, TEXT("ToolTip"), TEXT("Array of physical materials that can be used to allow or ban a specific set of materials when receiving collision events."));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ToolTip"), TEXT("If bInheritVelocity is true, scale the velocity with this."));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bInheritVelocity, TEXT("ToolTip"), TEXT("If true, use the velocity of the dying particle as the start velocity of\nthe spawned particle."));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bUsePSysLocation, TEXT("ToolTip"), TEXT("If true, use the location of the particle system component for spawning.\nif false (default), use the location of the particle event."));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_bUseParticleTime, TEXT("ToolTip"), TEXT("For Death-based event receiving, if this is true, it indicates that the\nParticleTime of the event should be used to look-up the SpawnCount.\nOtherwise (and in all other events received), use the emitter time of\nthe event."));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventReceiverSpawn.h"));
				MetaData->SetValue(NewProp_SpawnCount, TEXT("ToolTip"), TEXT("The number of particles to spawn."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventReceiverSpawn(Z_Construct_UClass_UParticleModuleEventReceiverSpawn, &UParticleModuleEventReceiverSpawn::StaticClass, TEXT("UParticleModuleEventReceiverSpawn"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventReceiverSpawn);
	UClass* Z_Construct_UClass_UParticleModuleKillBase_NoRegister()
	{
		return UParticleModuleKillBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleKillBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillBase(Z_Construct_UClass_UParticleModuleKillBase, &UParticleModuleKillBase::StaticClass, TEXT("UParticleModuleKillBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillBase);
	UClass* Z_Construct_UClass_UParticleModuleKillBox_NoRegister()
	{
		return UParticleModuleKillBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleKillBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleKillBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAxisAlignedAndFixedSize, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bAxisAlignedAndFixedSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAxisAlignedAndFixedSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAxisAlignedAndFixedSize, UParticleModuleKillBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAxisAlignedAndFixedSize, UParticleModuleKillBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillInside, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bKillInside = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillInside"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillInside, UParticleModuleKillBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillInside, UParticleModuleKillBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsolute, UParticleModuleKillBox, uint8);
				UProperty* NewProp_bAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsolute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsolute, UParticleModuleKillBox), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsolute, UParticleModuleKillBox), sizeof(uint8), false);
				UProperty* NewProp_UpperRightCorner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpperRightCorner"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UpperRightCorner, UParticleModuleKillBox), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_LowerLeftCorner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowerLeftCorner"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LowerLeftCorner, UParticleModuleKillBox), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill Box"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAxisAlignedAndFixedSize, TEXT("ToolTip"), TEXT("If true, the box will always be axis aligned and non-scalable."));
				MetaData->SetValue(NewProp_bKillInside, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bKillInside, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bKillInside, TEXT("ToolTip"), TEXT("If true, particles INSIDE the box will be killed.\nIf false (the default), particles OUTSIDE the box will be killed."));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ToolTip"), TEXT("If true, the box coordinates are in world space./"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_UpperRightCorner, TEXT("ToolTip"), TEXT("The upper right corner of the box."));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillBox.h"));
				MetaData->SetValue(NewProp_LowerLeftCorner, TEXT("ToolTip"), TEXT("The lower left corner of the box."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillBox(Z_Construct_UClass_UParticleModuleKillBox, &UParticleModuleKillBox::StaticClass, TEXT("UParticleModuleKillBox"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillBox);
	UClass* Z_Construct_UClass_UParticleModuleKillHeight_NoRegister()
	{
		return UParticleModuleKillHeight::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleKillHeight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleKillBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleKillHeight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyPSysScale, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bApplyPSysScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyPSysScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyPSysScale, UParticleModuleKillHeight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyPSysScale, UParticleModuleKillHeight), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFloor, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bFloor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFloor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFloor, UParticleModuleKillHeight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bFloor, UParticleModuleKillHeight), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAbsolute, UParticleModuleKillHeight, uint8);
				UProperty* NewProp_bAbsolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAbsolute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAbsolute, UParticleModuleKillHeight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAbsolute, UParticleModuleKillHeight), sizeof(uint8), false);
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Height, UParticleModuleKillHeight), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Kill Height"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bApplyPSysScale, TEXT("ToolTip"), TEXT("If true, take the particle systems scale into account"));
				MetaData->SetValue(NewProp_bFloor, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bFloor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bFloor, TEXT("ToolTip"), TEXT("If true, the plane should be considered a floor - ie kill anything BELOW it.\nIf false, if is a ceiling - ie kill anything ABOVE it."));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_bAbsolute, TEXT("ToolTip"), TEXT("If true, the height should be treated as a world-space position."));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Kill"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Kill/ParticleModuleKillHeight.h"));
				MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("The height at which to kill the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleKillHeight(Z_Construct_UClass_UParticleModuleKillHeight, &UParticleModuleKillHeight::StaticClass, TEXT("UParticleModuleKillHeight"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleKillHeight);
	UClass* Z_Construct_UClass_UParticleModuleLifetimeBase_NoRegister()
	{
		return UParticleModuleLifetimeBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetimeBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLifetimeBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetimeBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetimeBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetimeBase(Z_Construct_UClass_UParticleModuleLifetimeBase, &UParticleModuleLifetimeBase::StaticClass, TEXT("UParticleModuleLifetimeBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetimeBase);
	UClass* Z_Construct_UClass_UParticleModuleLifetime_NoRegister()
	{
		return UParticleModuleLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLifetimeBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Lifetime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Lifetime"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Lifetime, UParticleModuleLifetime), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("Category"), TEXT("Lifetime"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime.h"));
				MetaData->SetValue(NewProp_Lifetime, TEXT("ToolTip"), TEXT("The lifetime of the particle, in seconds. Retrieved using the EmitterTime at the spawn of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetime(Z_Construct_UClass_UParticleModuleLifetime, &UParticleModuleLifetime::StaticClass, TEXT("UParticleModuleLifetime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetime);
	UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded_NoRegister()
	{
		return UParticleModuleLifetime_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLifetime_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLifetime();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLifetime_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLifetime_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lifetime (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Lifetime/ParticleModuleLifetime_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLifetime_Seeded(Z_Construct_UClass_UParticleModuleLifetime_Seeded, &UParticleModuleLifetime_Seeded::StaticClass, TEXT("UParticleModuleLifetime_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLifetime_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLightBase_NoRegister()
	{
		return UParticleModuleLightBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLightBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLightBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLightBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLightBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLightBase(Z_Construct_UClass_UParticleModuleLightBase, &UParticleModuleLightBase::StaticClass, TEXT("UParticleModuleLightBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLightBase);
	UClass* Z_Construct_UClass_UParticleModuleLight_NoRegister()
	{
		return UParticleModuleLight::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLightBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShadowCastingLights, UParticleModuleLight, bool);
				UProperty* NewProp_bShadowCastingLights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShadowCastingLights"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShadowCastingLights, UParticleModuleLight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bShadowCastingLights, UParticleModuleLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHighQualityLights, UParticleModuleLight, bool);
				UProperty* NewProp_bHighQualityLights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHighQualityLights"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHighQualityLights, UParticleModuleLight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bHighQualityLights, UParticleModuleLight), sizeof(bool), true);
				UProperty* NewProp_LightingChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LightingChannels, UParticleModuleLight), 0x0010040000000015, Z_Construct_UScriptStruct_FLightingChannels());
				UProperty* NewProp_LightExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LightExponent, UParticleModuleLight), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_RadiusScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RadiusScale, UParticleModuleLight), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BrightnessOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrightnessOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BrightnessOverLife, UParticleModuleLight), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_ColorScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorScaleOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorScaleOverLife, UParticleModuleLight), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_SpawnFraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnFraction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpawnFraction, UParticleModuleLight), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreviewLightRadius, UParticleModuleLight, bool);
				UProperty* NewProp_bPreviewLightRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreviewLightRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreviewLightRadius, UParticleModuleLight), 0x0010000000002001, CPP_BOOL_PROPERTY_BITMASK(bPreviewLightRadius, UParticleModuleLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectsTranslucency, UParticleModuleLight, bool);
				UProperty* NewProp_bAffectsTranslucency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAffectsTranslucency"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectsTranslucency, UParticleModuleLight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectsTranslucency, UParticleModuleLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseInverseSquaredFalloff, UParticleModuleLight, bool);
				UProperty* NewProp_bUseInverseSquaredFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseInverseSquaredFalloff"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseInverseSquaredFalloff, UParticleModuleLight), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseInverseSquaredFalloff, UParticleModuleLight), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bShadowCastingLights, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bShadowCastingLights, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bHighQualityLights, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bHighQualityLights, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_LightingChannels, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_LightingChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_LightingChannels, TEXT("ToolTip"), TEXT("Channels that this light should affect.\nOnly affect high quality lights\nThese channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing."));
				MetaData->SetValue(NewProp_LightExponent, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_LightExponent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_LightExponent, TEXT("ToolTip"), TEXT("Provides the light's exponent when inverse squared falloff is disabled."));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_RadiusScale, TEXT("ToolTip"), TEXT("Scales the particle's radius, to calculate the light's radius."));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_BrightnessOverLife, TEXT("ToolTip"), TEXT("Brightness scale for the light, which can be setup as a curve over the particle's lifetime."));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_ColorScaleOverLife, TEXT("ToolTip"), TEXT("Scale that is applied to the particle's color to calculate the light's color, and can be setup as a curve over the particle's lifetime."));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_SpawnFraction, TEXT("ToolTip"), TEXT("Fraction of particles in this emitter to create lights on."));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bPreviewLightRadius, TEXT("ToolTip"), TEXT("Will draw wireframe spheres to preview the light radius if enabled.\nNote: this is intended for previewing and the value will not be saved, it will always revert to disabled."));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bAffectsTranslucency, TEXT("ToolTip"), TEXT("Whether lights from this module should affect translucency.\nUse with caution.  Modules enabling this should only make a few particle lights at most, and the smaller they are, the less they will cost."));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight.h"));
				MetaData->SetValue(NewProp_bUseInverseSquaredFalloff, TEXT("ToolTip"), TEXT("Whether to use physically based inverse squared falloff from the light.  If unchecked, the LightExponent distribution will be used instead."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLight(Z_Construct_UClass_UParticleModuleLight, &UParticleModuleLight::StaticClass, TEXT("UParticleModuleLight"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLight);
	UClass* Z_Construct_UClass_UParticleModuleLight_Seeded_NoRegister()
	{
		return UParticleModuleLight_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLight_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLight();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLight_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLight_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Light (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Light/ParticleModuleLight_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLight_Seeded(Z_Construct_UClass_UParticleModuleLight_Seeded, &UParticleModuleLight_Seeded::StaticClass, TEXT("UParticleModuleLight_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLight_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationBase_NoRegister()
	{
		return UParticleModuleLocationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationBase(Z_Construct_UClass_UParticleModuleLocationBase, &UParticleModuleLocationBase::StaticClass, TEXT("UParticleModuleLocationBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationBase);
	UClass* Z_Construct_UClass_UParticleModuleLocation_NoRegister()
	{
		return UParticleModuleLocation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DistributeThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistributeThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistributeThreshold, UParticleModuleLocation), 0x0010000000000001);
				UProperty* NewProp_DistributeOverNPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistributeOverNPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistributeOverNPoints, UParticleModuleLocation), 0x0010000000000001);
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartLocation, UParticleModuleLocation), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeThreshold, TEXT("ToolTip"), TEXT("When DistributeOverNPoints is set to a non-zero value, this specifies the ratio of particles spawned\nthat should use the distribution.  (For example setting this to 1 will cause all the particles to\nbe distributed evenly whereas .75 would cause 1/4 of the particles to be randomly placed)."));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_DistributeOverNPoints, TEXT("ToolTip"), TEXT("When set to a non-zero value this will force the particles to only spawn on evenly distributed\npositions between the two points specified."));
				MetaData->SetValue(NewProp_StartLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ToolTip"), TEXT("The location the particle should be emitted.\nRelative in local space to the emitter by default.\nRelative in world space as a WorldOffset module or when the emitter's UseLocalSpace is off.\nRetrieved using the EmitterTime at the spawn of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocation(Z_Construct_UClass_UParticleModuleLocation, &UParticleModuleLocation::StaticClass, TEXT("UParticleModuleLocation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocation);
	UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded_NoRegister()
	{
		return UParticleModuleLocation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocation();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocation_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Location (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocation_Seeded(Z_Construct_UClass_UParticleModuleLocation_Seeded, &UParticleModuleLocation_Seeded::StaticClass, TEXT("UParticleModuleLocation_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_NoRegister()
	{
		return UParticleModuleLocationWorldOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocation();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationWorldOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("World Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationWorldOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationWorldOffset(Z_Construct_UClass_UParticleModuleLocationWorldOffset, &UParticleModuleLocationWorldOffset::StaticClass, TEXT("UParticleModuleLocationWorldOffset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationWorldOffset);
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded_NoRegister()
	{
		return UParticleModuleLocationWorldOffset_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationWorldOffset();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationWorldOffset_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationWorldOffset_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("World Offset (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationWorldOffset_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationWorldOffset_Seeded(Z_Construct_UClass_UParticleModuleLocationWorldOffset_Seeded, &UParticleModuleLocationWorldOffset_Seeded::StaticClass, TEXT("UParticleModuleLocationWorldOffset_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationWorldOffset_Seeded);
	UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELocationBoneSocketSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationBoneSocketSelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSEL_Sequential")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSEL_Random")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSEL_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ELocationBoneSocketSelectionMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod_CRC() { return 4083856906U; }
	UEnum* Z_Construct_UEnum_Engine_ELocationBoneSocketSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELocationBoneSocketSource"), 0, Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationBoneSocketSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSOURCE_Bones")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSOURCE_Sockets")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BONESOCKETSOURCE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ELocationBoneSocketSource");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationBoneSocketSource_CRC() { return 3466383780U; }
	UScriptStruct* Z_Construct_UScriptStruct_FLocationBoneSocketInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("LocationBoneSocketInfo"), sizeof(FLocationBoneSocketInfo), Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LocationBoneSocketInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLocationBoneSocketInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Offset, FLocationBoneSocketInfo), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoneSocketName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoneSocketName, FLocationBoneSocketInfo), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("LocationBoneSocketInfo"));
			MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_Offset, TEXT("ToolTip"), TEXT("The offset from the bone/socket to use"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("Category"), TEXT("LocationBoneSocketInfo"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
			MetaData->SetValue(NewProp_BoneSocketName, TEXT("ToolTip"), TEXT("The name of the bone/socket on the skeletal mesh"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLocationBoneSocketInfo_CRC() { return 3149931829U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket_NoRegister()
	{
		return UParticleModuleLocationBoneSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationBoneSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationBoneSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorSkelMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EditorSkelMesh, UParticleModuleLocationBoneSocket), 0x0010000800000001, Z_Construct_UClass_USkeletalMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NumPreSelectedIndices = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumPreSelectedIndices"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumPreSelectedIndices, UParticleModuleLocationBoneSocket), 0x0010000000000001);
				UProperty* NewProp_SkelMeshActorParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkelMeshActorParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SkelMeshActorParamName, UParticleModuleLocationBoneSocket), 0x0010000000000001);
				UProperty* NewProp_InheritVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritVelocityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InheritVelocityScale, UParticleModuleLocationBoneSocket), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritBoneVelocity, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bInheritBoneVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritBoneVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritBoneVelocity, UParticleModuleLocationBoneSocket), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritBoneVelocity, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrientMeshEmitters, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bOrientMeshEmitters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrientMeshEmitters"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrientMeshEmitters, UParticleModuleLocationBoneSocket), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrientMeshEmitters, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket, uint8);
				UProperty* NewProp_bUpdatePositionEachFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatePositionEachFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUpdatePositionEachFrame, UParticleModuleLocationBoneSocket), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleLocationBoneSocket), 0x0010000000000001, Z_Construct_UEnum_Engine_ELocationBoneSocketSelectionMethod());
				UProperty* NewProp_SourceLocations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SourceLocations, UParticleModuleLocationBoneSocket), 0x0010000000000001);
				UProperty* NewProp_SourceLocations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceLocations, TEXT("SourceLocations"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLocationBoneSocketInfo());
				UProperty* NewProp_UniversalOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniversalOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UniversalOffset, UParticleModuleLocationBoneSocket), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceType, UParticleModuleLocationBoneSocket), 0x0010000000000001, Z_Construct_UEnum_Engine_ELocationBoneSocketSource());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Bone/Socket Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ToolTip"), TEXT("The name of the skeletal mesh to use in the editor"));
				MetaData->SetValue(NewProp_NumPreSelectedIndices, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_NumPreSelectedIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_NumPreSelectedIndices, TEXT("ToolTip"), TEXT("When we have no source locations and we need to track bone velocities due to bInheritBoneVelocity, we pre select a set of bones to use each frame. This property determines how big the list is.\nToo low and the randomness of selection may suffer, too high and memory will be wasted."));
				MetaData->SetValue(NewProp_NumPreSelectedIndices, TEXT("UIMin"), TEXT("1"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ToolTip"), TEXT("The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game."));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ToolTip"), TEXT("A scale on how much of the bone's velocity a particle will inherit."));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ToolTip"), TEXT("If true, particles inherit the associated bone velocity when spawned"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ToolTip"), TEXT("If true, rotate mesh emitter meshes to orient w/ the socket"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ToolTip"), TEXT("If true, update the particle locations each frame with that of the bone/socket"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method by which to select the bone/socket to spawn at.\n\nSEL_Sequential                  - loop through the bone/socket array in order\nSEL_Random                              - randomly select a bone/socket from the array"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SourceLocations, TEXT("ToolTip"), TEXT("The name(s) of the bone/socket(s) to position at. If this is empty, the module will attempt to spawn from all bones or sockets."));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ToolTip"), TEXT("An offset to apply to each bone/socket"));
				MetaData->SetValue(NewProp_SourceType, TEXT("Category"), TEXT("BoneSocket"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationBoneSocket.h"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ToolTip"), TEXT("Whether the module uses Bones or Sockets for locations.\n\nBONESOCKETSOURCE_Bones          - Use Bones as the source locations.\nBONESOCKETSOURCE_Sockets        - Use Sockets as the source locations."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationBoneSocket(Z_Construct_UClass_UParticleModuleLocationBoneSocket, &UParticleModuleLocationBoneSocket::StaticClass, TEXT("UParticleModuleLocationBoneSocket"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationBoneSocket);
	UClass* Z_Construct_UClass_UParticleModuleLocationDirect_NoRegister()
	{
		return UParticleModuleLocationDirect::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationDirect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationDirect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Direction, UParticleModuleLocationDirect), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_ScaleFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScaleFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ScaleFactor, UParticleModuleLocationDirect), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_LocationOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocationOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocationOffset, UParticleModuleLocationDirect), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, UParticleModuleLocationDirect), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Direct Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("ToolTip"), TEXT("Currently unused."));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_ScaleFactor, TEXT("ToolTip"), TEXT("Scales the velocity of the object at a given point in the time-line."));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_LocationOffset, TEXT("ToolTip"), TEXT("An offset to apply to the position retrieved from the Location calculation.\nThe offset is retrieved using the EmitterTime.\nThe offset will remain constant over the life of the particle."));
				MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationDirect.h"));
				MetaData->SetValue(NewProp_Location, TEXT("ToolTip"), TEXT("The location of the particle at a give time. Retrieved using the particle RelativeTime.\nIMPORTANT: the particle location is set to this value, thereby over-writing any previous module impacts."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationDirect(Z_Construct_UClass_UParticleModuleLocationDirect, &UParticleModuleLocationDirect::StaticClass, TEXT("UParticleModuleLocationDirect"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationDirect);
	UEnum* Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELocationEmitterSelectionMethod"), 0, Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationEmitterSelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELESM_Random")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELESM_Sequential")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELESM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ELocationEmitterSelectionMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod_CRC() { return 436415466U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitter_NoRegister()
	{
		return UParticleModuleLocationEmitter::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationEmitter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InheritSourceRotationScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceRotationScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InheritSourceRotationScale, UParticleModuleLocationEmitter), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritSourceRotation, UParticleModuleLocationEmitter, uint8);
				UProperty* NewProp_bInheritSourceRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritSourceRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritSourceRotation, UParticleModuleLocationEmitter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritSourceRotation, UParticleModuleLocationEmitter), sizeof(uint8), false);
				UProperty* NewProp_InheritSourceVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceVelocityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InheritSourceVelocityScale, UParticleModuleLocationEmitter), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(InheritSourceVelocity, UParticleModuleLocationEmitter, uint8);
				UProperty* NewProp_InheritSourceVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritSourceVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InheritSourceVelocity, UParticleModuleLocationEmitter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(InheritSourceVelocity, UParticleModuleLocationEmitter), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleLocationEmitter), 0x0010000000000001, Z_Construct_UEnum_Engine_ELocationEmitterSelectionMethod());
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleLocationEmitter), 0x0010000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Emitter Initial Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceRotationScale, TEXT("ToolTip"), TEXT("Amount to scale the source rotation by when inheriting it."));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_bInheritSourceRotation, TEXT("ToolTip"), TEXT("If true, the spawned particle should inherit the rotation of the source particle."));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceVelocityScale, TEXT("ToolTip"), TEXT("Amount to scale the source velocity by when inheriting it."));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_InheritSourceVelocity, TEXT("ToolTip"), TEXT("If true, the spawned particle should inherit the velocity of the source particle."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("The method to use when selecting a spawn target particle from the emitter.\nCan be one of the following:\n        ELESM_Random            Randomly select a particle from the source emitter.\n        ELESM_Sequential        Step through each particle from the source emitter in order."));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitter.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter to use that the source location for particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationEmitter(Z_Construct_UClass_UParticleModuleLocationEmitter, &UParticleModuleLocationEmitter::StaticClass, TEXT("UParticleModuleLocationEmitter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationEmitter);
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect_NoRegister()
	{
		return UParticleModuleLocationEmitterDirect::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationEmitterDirect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationEmitterDirect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EmitterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EmitterName, UParticleModuleLocationEmitterDirect), 0x0010000002000009);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Emitter Direct Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationEmitterDirect.h"));
				MetaData->SetValue(NewProp_EmitterName, TEXT("ToolTip"), TEXT("The name of the emitter to use as a source for the location of the particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationEmitterDirect(Z_Construct_UClass_UParticleModuleLocationEmitterDirect, &UParticleModuleLocationEmitterDirect::StaticClass, TEXT("UParticleModuleLocationEmitterDirect"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationEmitterDirect);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase_NoRegister()
	{
		return UParticleModuleLocationPrimitiveBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartLocation, UParticleModuleLocationPrimitiveBase), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_VelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VelocityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VelocityScale, UParticleModuleLocationPrimitiveBase), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Velocity, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Velocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Velocity, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Velocity, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SurfaceOnly, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_SurfaceOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SurfaceOnly, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(SurfaceOnly, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Z, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Z"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Z, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Z, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_Y, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_Y"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_Y, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_Y, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Negative_X, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Negative_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Negative_X"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Negative_X, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Negative_X, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Z, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_Z = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Z"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Z, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Z, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_Y, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_Y = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_Y"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_Y, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_Y, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Positive_X, UParticleModuleLocationPrimitiveBase, uint8);
				UProperty* NewProp_Positive_X = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Positive_X"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Positive_X, UParticleModuleLocationPrimitiveBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Positive_X, UParticleModuleLocationPrimitiveBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_StartLocation, TEXT("ToolTip"), TEXT("The location of the bounding primitive relative to the position of the emitter."));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_VelocityScale, TEXT("ToolTip"), TEXT("The scale applied to the velocity. (Only used if 'Velocity' is checked)."));
				MetaData->SetValue(NewProp_Velocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ToolTip"), TEXT("Whether the particle should get its velocity from the position within the primitive."));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_SurfaceOnly, TEXT("ToolTip"), TEXT("Whether particles will only spawn on the surface of the primitive."));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_Z, TEXT("ToolTip"), TEXT("Whether the negative Zaxis is valid for spawning."));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_Y, TEXT("ToolTip"), TEXT("Whether the negative Y axis is valid for spawning."));
				MetaData->SetValue(NewProp_Negative_X, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Negative_X, TEXT("ToolTip"), TEXT("Whether the negative X axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_Z, TEXT("ToolTip"), TEXT("Whether the positive Z axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_Y, TEXT("ToolTip"), TEXT("Whether the positive Y axis is valid for spawning."));
				MetaData->SetValue(NewProp_Positive_X, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveBase.h"));
				MetaData->SetValue(NewProp_Positive_X, TEXT("ToolTip"), TEXT("Whether the positive X axis is valid for spawning."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveBase(Z_Construct_UClass_UParticleModuleLocationPrimitiveBase, &UParticleModuleLocationPrimitiveBase::StaticClass, TEXT("UParticleModuleLocationPrimitiveBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveBase);
	UEnum* Z_Construct_UEnum_Engine_CylinderHeightAxis()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("CylinderHeightAxis"), 0, Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CylinderHeightAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PMLPC_HEIGHTAXIS_X")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PMLPC_HEIGHTAXIS_Y")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PMLPC_HEIGHTAXIS_Z")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PMLPC_HEIGHTAXIS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("CylinderHeightAxis");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_X.DisplayName"), TEXT("X"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_Y.DisplayName"), TEXT("Y"));
			MetaData->SetValue(ReturnEnum, TEXT("PMLPC_HEIGHTAXIS_Z.DisplayName"), TEXT("Z"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_CylinderHeightAxis_CRC() { return 2108525425U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_NoRegister()
	{
		return UParticleModuleLocationPrimitiveCylinder::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveCylinder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HeightAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(HeightAxis, UParticleModuleLocationPrimitiveCylinder), 0x0010000000000001, Z_Construct_UEnum_Engine_CylinderHeightAxis());
				UProperty* NewProp_StartHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartHeight, UParticleModuleLocationPrimitiveCylinder), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRadius, UParticleModuleLocationPrimitiveCylinder), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RadialVelocity, UParticleModuleLocationPrimitiveCylinder, uint8);
				UProperty* NewProp_RadialVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadialVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RadialVelocity, UParticleModuleLocationPrimitiveCylinder), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(RadialVelocity, UParticleModuleLocationPrimitiveCylinder), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Cylinder"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_HeightAxis, TEXT("ToolTip"), TEXT("Determine particle particle system axis that should represent the height of the cylinder.\nCan be one of the following:\n  PMLPC_HEIGHTAXIS_X - Orient the height along the particle system X-axis.\n  PMLPC_HEIGHTAXIS_Y - Orient the height along the particle system Y-axis.\n  PMLPC_HEIGHTAXIS_Z - Orient the height along the particle system Z-axis."));
				MetaData->SetValue(NewProp_StartHeight, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartHeight, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_StartHeight, TEXT("ToolTip"), TEXT("The height of the cylinder, centered about the location."));
				MetaData->SetValue(NewProp_StartRadius, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ToolTip"), TEXT("The radius of the cylinder."));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder.h"));
				MetaData->SetValue(NewProp_RadialVelocity, TEXT("ToolTip"), TEXT("If true, get the particle velocity form the radial distance inside the primitive."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveCylinder(Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder, &UParticleModuleLocationPrimitiveCylinder::StaticClass, TEXT("UParticleModuleLocationPrimitiveCylinder"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveCylinder);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded_NoRegister()
	{
		return UParticleModuleLocationPrimitiveCylinder_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveCylinder_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationPrimitiveCylinder_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Cylinder (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveCylinder_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded(Z_Construct_UClass_UParticleModuleLocationPrimitiveCylinder_Seeded, &UParticleModuleLocationPrimitiveCylinder_Seeded::StaticClass, TEXT("UParticleModuleLocationPrimitiveCylinder_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveCylinder_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_NoRegister()
	{
		return UParticleModuleLocationPrimitiveSphere::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveSphere::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRadius, UParticleModuleLocationPrimitiveSphere), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Sphere"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere.h"));
				MetaData->SetValue(NewProp_StartRadius, TEXT("ToolTip"), TEXT("The radius of the sphere. Retrieved using EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveSphere(Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere, &UParticleModuleLocationPrimitiveSphere::StaticClass, TEXT("UParticleModuleLocationPrimitiveSphere"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveSphere);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded_NoRegister()
	{
		return UParticleModuleLocationPrimitiveSphere_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveSphere_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleLocationPrimitiveSphere_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Sphere (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveSphere_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveSphere_Seeded(Z_Construct_UClass_UParticleModuleLocationPrimitiveSphere_Seeded, &UParticleModuleLocationPrimitiveSphere_Seeded::StaticClass, TEXT("UParticleModuleLocationPrimitiveSphere_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveSphere_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle_NoRegister()
	{
		return UParticleModuleLocationPrimitiveTriangle::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationPrimitiveTriangle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Thickness, UParticleModuleLocationPrimitiveTriangle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Angle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Angle, UParticleModuleLocationPrimitiveTriangle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Height, UParticleModuleLocationPrimitiveTriangle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartOffset, UParticleModuleLocationPrimitiveTriangle), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Triangle"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
				MetaData->SetValue(NewProp_StartOffset, TEXT("Category"), TEXT("Location"));
				MetaData->SetValue(NewProp_StartOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationPrimitiveTriangle.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationPrimitiveTriangle(Z_Construct_UClass_UParticleModuleLocationPrimitiveTriangle, &UParticleModuleLocationPrimitiveTriangle::StaticClass, TEXT("UParticleModuleLocationPrimitiveTriangle"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationPrimitiveTriangle);
	UEnum* Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELocationSkelVertSurfaceSource"), 0, Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELocationSkelVertSurfaceSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VERTSURFACESOURCE_Vert")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VERTSURFACESOURCE_Surface")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VERTSURFACESOURCE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ELocationSkelVertSurfaceSource");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VERTSURFACESOURCE_Surface.DisplayName"), TEXT("Surfaces"));
			MetaData->SetValue(ReturnEnum, TEXT("VERTSURFACESOURCE_Vert.DisplayName"), TEXT("Vertices"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource_CRC() { return 2557877294U; }
	UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface_NoRegister()
	{
		return UParticleModuleLocationSkelVertSurface::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleLocationSkelVertSurface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleLocationSkelVertSurface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InheritUVChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritUVChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(InheritUVChannel, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritUV, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bInheritUV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritUV"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritUV, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritUV, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritVertexColor, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bInheritVertexColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritVertexColor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritVertexColor, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritVertexColor, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_ValidMaterialIndices = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValidMaterialIndices"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ValidMaterialIndices, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				UProperty* NewProp_ValidMaterialIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ValidMaterialIndices, TEXT("ValidMaterialIndices"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_NormalCheckTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalCheckTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NormalCheckTolerance, UParticleModuleLocationSkelVertSurface), 0x0010000000000000);
				UProperty* NewProp_NormalCheckToleranceDegrees = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalCheckToleranceDegrees"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NormalCheckToleranceDegrees, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				UProperty* NewProp_NormalToCompare = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalToCompare"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NormalToCompare, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bEnforceNormalCheck = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnforceNormalCheck"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnforceNormalCheck, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_ValidAssociatedBones = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValidAssociatedBones"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ValidAssociatedBones, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				UProperty* NewProp_ValidAssociatedBones_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ValidAssociatedBones, TEXT("ValidAssociatedBones"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorSkelMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorSkelMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EditorSkelMesh, UParticleModuleLocationSkelVertSurface), 0x0010000800000001, Z_Construct_UClass_USkeletalMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SkelMeshActorParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkelMeshActorParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SkelMeshActorParamName, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				UProperty* NewProp_InheritVelocityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritVelocityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InheritVelocityScale, UParticleModuleLocationSkelVertSurface), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bInheritBoneVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritBoneVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritBoneVelocity, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bOrientMeshEmitters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrientMeshEmitters"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrientMeshEmitters, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface, uint8);
				UProperty* NewProp_bUpdatePositionEachFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUpdatePositionEachFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUpdatePositionEachFrame, UParticleModuleLocationSkelVertSurface), sizeof(uint8), false);
				UProperty* NewProp_UniversalOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniversalOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UniversalOffset, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceType, UParticleModuleLocationSkelVertSurface), 0x0010000000000001, Z_Construct_UEnum_Engine_ELocationSkelVertSurfaceSource());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Skel Vert/Surf Location"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_InheritUVChannel, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_InheritUVChannel, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_InheritUVChannel, TEXT("ToolTip"), TEXT("UV channel to inherit from the spawn mesh, internally clamped to those available."));
				MetaData->SetValue(NewProp_bInheritUV, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bInheritUV, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritUV, TEXT("ToolTip"), TEXT("If true, particles inherit the associated UV data on spawn. Accessed through dynamic parameter module X and Y, must be a \"Spawn Time Only\" parameter on \"AutoSet\" mode. This feature is not supported for GPU particles."));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritVertexColor, TEXT("ToolTip"), TEXT("If true, particles inherit the associated vertex color on spawn. This feature is not supported for GPU particles."));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_ValidMaterialIndices, TEXT("ToolTip"), TEXT("Array of material indices that are valid materials to spawn from.\nIf empty, any material will be considered valid"));
				MetaData->SetValue(NewProp_NormalCheckTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalCheckTolerance, TEXT("ToolTip"), TEXT("Normal tolerance.  Value between 1.0 and -1.0 with 1.0 being exact match, 0.0 being everything up to\n              perpendicular and -1.0 being any direction or don't restrict at all."));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalCheckToleranceDegrees, TEXT("ToolTip"), TEXT("Normal tolerance.  0 degrees means it must be an exact match, 180 degrees means it can be any angle."));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_NormalToCompare, TEXT("ToolTip"), TEXT("Use this normal to restrict spawning locations"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bEnforceNormalCheck, TEXT("ToolTip"), TEXT("When true use the RestrictToNormal and NormalTolerance values to check surface normals"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_ValidAssociatedBones, TEXT("ToolTip"), TEXT("This module will only spawn from verts or surfaces associated with the bones in this list"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_EditorSkelMesh, TEXT("ToolTip"), TEXT("The name of the skeletal mesh to use in the editor"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_SkelMeshActorParamName, TEXT("ToolTip"), TEXT("The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game."));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_InheritVelocityScale, TEXT("ToolTip"), TEXT("A scale on how much of the bone's velocity a particle will inherit."));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bInheritBoneVelocity, TEXT("ToolTip"), TEXT("If true, particles inherit the associated bone velocity when spawned"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bOrientMeshEmitters, TEXT("ToolTip"), TEXT("If true, rotate mesh emitter meshes to orient w/ the vert/surface"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_bUpdatePositionEachFrame, TEXT("ToolTip"), TEXT("If true, update the particle locations each frame with that of the vert/surface"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_UniversalOffset, TEXT("ToolTip"), TEXT("An offset to apply to each vert/surface"));
				MetaData->SetValue(NewProp_SourceType, TEXT("Category"), TEXT("VertSurface"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleLocationSkelVertSurface.h"));
				MetaData->SetValue(NewProp_SourceType, TEXT("ToolTip"), TEXT("Whether the module uses Verts or Surfaces for locations.\n\nVERTSURFACESOURCE_Vert          - Use Verts as the source locations.\nVERTSURFACESOURCE_Surface       - Use Surfaces as the source locations."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleLocationSkelVertSurface(Z_Construct_UClass_UParticleModuleLocationSkelVertSurface, &UParticleModuleLocationSkelVertSurface::StaticClass, TEXT("UParticleModuleLocationSkelVertSurface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleLocationSkelVertSurface);
	UClass* Z_Construct_UClass_UParticleModulePivotOffset_NoRegister()
	{
		return UParticleModulePivotOffset::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModulePivotOffset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModulePivotOffset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PivotOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PivotOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PivotOffset, UParticleModulePivotOffset), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Pivot Offset"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("Category"), TEXT("PivotOffset"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Modules/Location/ParticleModulePivotOffset.h"));
				MetaData->SetValue(NewProp_PivotOffset, TEXT("ToolTip"), TEXT("Offset applied in UV space to the particle vertex positions. Defaults to (0.5,0.5) putting the pivot in the centre of the partilce."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModulePivotOffset(Z_Construct_UClass_UParticleModulePivotOffset, &UParticleModulePivotOffset::StaticClass, TEXT("UParticleModulePivotOffset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModulePivotOffset);
	UClass* Z_Construct_UClass_UParticleModuleSourceMovement_NoRegister()
	{
		return UParticleModuleSourceMovement::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSourceMovement()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleLocationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSourceMovement::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SourceMovementScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMovementScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceMovementScale, UParticleModuleSourceMovement), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source Movement"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("Category"), TEXT("SourceMovement"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Location/ParticleModuleSourceMovement.h"));
				MetaData->SetValue(NewProp_SourceMovementScale, TEXT("ToolTip"), TEXT("The scale factor to apply to the source movement before adding to the particle location.\nThe value is looked up using the particles RELATIVE time [0..1]."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSourceMovement(Z_Construct_UClass_UParticleModuleSourceMovement, &UParticleModuleSourceMovement::StaticClass, TEXT("UParticleModuleSourceMovement"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSourceMovement);
	UClass* Z_Construct_UClass_UParticleModuleMaterialBase_NoRegister()
	{
		return UParticleModuleMaterialBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMaterialBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMaterialBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Material"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Material/ParticleModuleMaterialBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMaterialBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMaterialBase(Z_Construct_UClass_UParticleModuleMaterialBase, &UParticleModuleMaterialBase::StaticClass, TEXT("UParticleModuleMaterialBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMaterialBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshMaterial_NoRegister()
	{
		return UParticleModuleMeshMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMaterialBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MeshMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MeshMaterials, UParticleModuleMeshMaterial), 0x0010000000000001);
				UProperty* NewProp_MeshMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MeshMaterials, TEXT("MeshMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Material"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("Category"), TEXT("MeshMaterials"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Material/ParticleModuleMeshMaterial.h"));
				MetaData->SetValue(NewProp_MeshMaterials, TEXT("ToolTip"), TEXT("The array of materials to apply to the mesh particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshMaterial(Z_Construct_UClass_UParticleModuleMeshMaterial, &UParticleModuleMeshMaterial::StaticClass, TEXT("UParticleModuleMeshMaterial"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshMaterial);
	UClass* Z_Construct_UClass_UParticleModuleOrbitBase_NoRegister()
	{
		return UParticleModuleOrbitBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrbitBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleOrbitBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, UParticleModuleOrbitBase, uint8);
				UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, UParticleModuleOrbitBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, UParticleModuleOrbitBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orbit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("Orbit"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbitBase.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, distribution values will be retrieved using the EmitterTime.\nIf false (default), they will be retrieved using the Particle.RelativeTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrbitBase(Z_Construct_UClass_UParticleModuleOrbitBase, &UParticleModuleOrbitBase::StaticClass, TEXT("UParticleModuleOrbitBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrbitBase);
	UEnum* Z_Construct_UEnum_Engine_EOrbitChainMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EOrbitChainMode"), 0, Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOrbitChainMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EOChainMode_Add")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EOChainMode_Scale")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EOChainMode_Link")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EOChainMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EOrbitChainMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Add.DisplayName"), TEXT("Add"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Add.ToolTip"), TEXT("Add the module values to the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Link.DisplayName"), TEXT("Link"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Link.ToolTip"), TEXT("'Break' the chain and apply the values from the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Scale.DisplayName"), TEXT("Scale"));
			MetaData->SetValue(ReturnEnum, TEXT("EOChainMode_Scale.ToolTip"), TEXT("Multiply the module values by the previous results"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOrbitChainMode_CRC() { return 727892397U; }
	UScriptStruct* Z_Construct_UScriptStruct_FOrbitOptions()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("OrbitOptions"), sizeof(FOrbitOptions), Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OrbitOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FOrbitOptions>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, FOrbitOptions, uint8);
			UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, FOrbitOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, FOrbitOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessDuringUpdate, FOrbitOptions, uint8);
			UProperty* NewProp_bProcessDuringUpdate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bProcessDuringUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessDuringUpdate, FOrbitOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessDuringUpdate, FOrbitOptions), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessDuringSpawn, FOrbitOptions, uint8);
			UProperty* NewProp_bProcessDuringSpawn = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bProcessDuringSpawn"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessDuringSpawn, FOrbitOptions), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessDuringSpawn, FOrbitOptions), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Container struct for holding options on the data updating for the module."));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("Whether to use emitter time during data retrieval."));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bProcessDuringUpdate, TEXT("ToolTip"), TEXT("Whether to process the data during updating."));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("Category"), TEXT("OrbitOptions"));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
			MetaData->SetValue(NewProp_bProcessDuringSpawn, TEXT("ToolTip"), TEXT("Whether to process the data during spawning."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FOrbitOptions_CRC() { return 1443034734U; }
	UClass* Z_Construct_UClass_UParticleModuleOrbit_NoRegister()
	{
		return UParticleModuleOrbit::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrbit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleOrbitBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleOrbit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotationRateOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRateOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationRateOptions, UParticleModuleOrbit), 0x0010000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_RotationRateAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRateAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationRateAmount, UParticleModuleOrbit), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_RotationOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationOptions, UParticleModuleOrbit), 0x0010000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_RotationAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationAmount, UParticleModuleOrbit), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_OffsetOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OffsetOptions, UParticleModuleOrbit), 0x0010000000000001, Z_Construct_UScriptStruct_FOrbitOptions());
				UProperty* NewProp_OffsetAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OffsetAmount, UParticleModuleOrbit), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_ChainMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChainMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ChainMode, UParticleModuleOrbit), 0x0010000000000001, Z_Construct_UEnum_Engine_EOrbitChainMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orbit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Orbit Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("Category"), TEXT("RotationRate"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateOptions, TEXT("ToolTip"), TEXT("The options associated with the RotationRateAmount look-up."));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("Category"), TEXT("RotationRate"));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationRateAmount, TEXT("ToolTip"), TEXT("The rate (in 'turns') at which to rotate the offset about the particle positon.\n        0.0 = no rotation\n        0.5     = 180 degree rotation\n        1.0 = 360 degree rotation"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationOptions, TEXT("ToolTip"), TEXT("The options associated with the RotationAmount look-up."));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_RotationAmount, TEXT("ToolTip"), TEXT("The amount (in 'turns') to rotate the offset about the particle position.\n        0.0 = no rotation\n        0.5     = 180 degree rotation\n        1.0 = 360 degree rotation"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("Category"), TEXT("Offset"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_OffsetOptions, TEXT("ToolTip"), TEXT("The options associated with the OffsetAmount look-up."));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("Category"), TEXT("Offset"));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_OffsetAmount, TEXT("ToolTip"), TEXT("The amount to offset the sprite from the particle position."));
				MetaData->SetValue(NewProp_ChainMode, TEXT("Category"), TEXT("Chaining"));
				MetaData->SetValue(NewProp_ChainMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orbit/ParticleModuleOrbit.h"));
				MetaData->SetValue(NewProp_ChainMode, TEXT("ToolTip"), TEXT("Orbit modules will chain together in the order they appear in the module stack.\nThe combination of a module with the one prior to it is defined by using one\nof the following enumerations:\n        EOChainMode_Add         Add the values to the previous results\n        EOChainMode_Scale       Multiply the values by the previous results\n        EOChainMode_Link        'Break' the chain and apply the values from the previous results"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrbit(Z_Construct_UClass_UParticleModuleOrbit, &UParticleModuleOrbit::StaticClass, TEXT("UParticleModuleOrbit"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrbit);
	UClass* Z_Construct_UClass_UParticleModuleOrientationBase_NoRegister()
	{
		return UParticleModuleOrientationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrientationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleOrientationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Orientation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orientation/ParticleModuleOrientationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrientationBase(Z_Construct_UClass_UParticleModuleOrientationBase, &UParticleModuleOrientationBase::StaticClass, TEXT("UParticleModuleOrientationBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrientationBase);
	UEnum* Z_Construct_UEnum_Engine_EParticleAxisLock()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleAxisLock"), 0, Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleAxisLock"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_NONE")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_X")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_Y")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_Z")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_NEGATIVE_X")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_NEGATIVE_Y")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_NEGATIVE_Z")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_ROTATE_X")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_ROTATE_Y")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_ROTATE_Z")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPAL_MAX")), 10));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleAxisLock");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_X.DisplayName"), TEXT("-X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_X.ToolTip"), TEXT("Lock the sprite facing towards the negative X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Y.DisplayName"), TEXT("-Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Y.ToolTip"), TEXT("Lock the sprite facing towards the negative Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Z.DisplayName"), TEXT("-Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NEGATIVE_Z.ToolTip"), TEXT("Lock the sprite facing towards the negative Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NONE.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_NONE.ToolTip"), TEXT("No locking to an axis..."));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_X.DisplayName"), TEXT("Rotate X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_X.ToolTip"), TEXT("Lock the sprite rotation on the X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Y.DisplayName"), TEXT("Rotate Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Y.ToolTip"), TEXT("Lock the sprite rotation on the Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Z.DisplayName"), TEXT("Rotate Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_ROTATE_Z.ToolTip"), TEXT("Lock the sprite rotation on the Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_X.DisplayName"), TEXT("X"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_X.ToolTip"), TEXT("Lock the sprite facing towards the positive X-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Y.DisplayName"), TEXT("Y"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Y.ToolTip"), TEXT("Lock the sprite facing towards the positive Y-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Z.DisplayName"), TEXT("Z"));
			MetaData->SetValue(ReturnEnum, TEXT("EPAL_Z.ToolTip"), TEXT("Lock the sprite facing towards the positive Z-axis"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Flags indicating lock"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleAxisLock_CRC() { return 3106049380U; }
	UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock_NoRegister()
	{
		return UParticleModuleOrientationAxisLock::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleOrientationAxisLock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleOrientationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleOrientationAxisLock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LockAxisFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LockAxisFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlags, UParticleModuleOrientationAxisLock), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleAxisLock());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lock Axis"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Orientation/ParticleModuleOrientationAxisLock.h"));
				MetaData->SetValue(NewProp_LockAxisFlags, TEXT("ToolTip"), TEXT("The lock axis flag setting.\nCan be one of the following:\n        EPAL_NONE                       No locking to an axis.\n        EPAL_X                          Lock the sprite facing towards +X.\n        EPAL_Y                          Lock the sprite facing towards +Y.\n        EPAL_Z                          Lock the sprite facing towards +Z.\n        EPAL_NEGATIVE_X         Lock the sprite facing towards -X.\n        EPAL_NEGATIVE_Y         Lock the sprite facing towards -Y.\n        EPAL_NEGATIVE_Z         Lock the sprite facing towards -Z.\n        EPAL_ROTATE_X           Lock the sprite rotation on the X-axis.\n        EPAL_ROTATE_Y           Lock the sprite rotation on the Y-axis.\n        EPAL_ROTATE_Z           Lock the sprite rotation on the Z-axis."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleOrientationAxisLock(Z_Construct_UClass_UParticleModuleOrientationAxisLock, &UParticleModuleOrientationAxisLock::StaticClass, TEXT("UParticleModuleOrientationAxisLock"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleOrientationAxisLock);
	UClass* Z_Construct_UClass_UParticleModuleParameterBase_NoRegister()
	{
		return UParticleModuleParameterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleParameterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Parameter"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterBase(Z_Construct_UClass_UParticleModuleParameterBase, &UParticleModuleParameterBase::StaticClass, TEXT("UParticleModuleParameterBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterBase);
	UEnum* Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEmitterDynamicParameterValue"), 0, Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterDynamicParameterValue"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_UserSet")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_AutoSet")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_VelocityX")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_VelocityY")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_VelocityZ")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_VelocityMag")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDPV_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EEmitterDynamicParameterValue");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_AutoSet.ToolTip"), TEXT("AutoSet - ignore values set in the distribution, another module will handle this data"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_UserSet.ToolTip"), TEXT("UserSet - use the user set values in the distribution (the default)"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityMag.ToolTip"), TEXT("VelocityMag - pass the particle velocity magnitude thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityX.ToolTip"), TEXT("VelocityX - pass the particle velocity along the X-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityY.ToolTip"), TEXT("VelocityY - pass the particle velocity along the Y-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("EDPV_VelocityZ.ToolTip"), TEXT("VelocityZ - pass the particle velocity along the Z-axis thru"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("EmitterDynamicParameterValue\nEnumeration indicating the way a dynamic parameter should be set."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue_CRC() { return 902063756U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEmitterDynamicParameter()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("EmitterDynamicParameter"), sizeof(FEmitterDynamicParameter), Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EmitterDynamicParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEmitterDynamicParameter>, EStructFlags(0x00000005));
			UProperty* NewProp_ParamValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ParamValue, FEmitterDynamicParameter), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleVelocityByParamValue, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bScaleVelocityByParamValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bScaleVelocityByParamValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleVelocityByParamValue, FEmitterDynamicParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleVelocityByParamValue, FEmitterDynamicParameter), sizeof(uint8), false);
			UProperty* NewProp_ValueMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ValueMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ValueMethod, FEmitterDynamicParameter), 0x0010000000000001, Z_Construct_UEnum_Engine_EEmitterDynamicParameterValue());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnTimeOnly, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bSpawnTimeOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSpawnTimeOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnTimeOnly, FEmitterDynamicParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnTimeOnly, FEmitterDynamicParameter), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, FEmitterDynamicParameter, uint8);
			UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, FEmitterDynamicParameter), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, FEmitterDynamicParameter), sizeof(uint8), false);
			UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParamName, FEmitterDynamicParameter), 0x0010000000020005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper structure for displaying the parameter."));
			MetaData->SetValue(NewProp_ParamValue, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ParamValue, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ParamValue, TEXT("ToolTip"), TEXT("The distriubtion for the parameter value."));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bScaleVelocityByParamValue, TEXT("ToolTip"), TEXT("If true, scale the velocity value selected in ValueMethod by the evaluated ParamValue."));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ValueMethod, TEXT("ToolTip"), TEXT("Where to get the parameter value from."));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bSpawnTimeOnly, TEXT("ToolTip"), TEXT("If true, only set the value at spawn time of the particle, otherwise update each frame."));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, use the EmitterTime to retrieve the value, otherwise use Particle RelativeTime."));
			MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("EmitterDynamicParameter"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
			MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("The parameter name - from the material DynamicParameter expression. READ-ONLY"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEmitterDynamicParameter_CRC() { return 1882117118U; }
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_NoRegister()
	{
		return UParticleModuleParameterDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleParameterBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleParameterDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsesVelocity, UParticleModuleParameterDynamic, uint8);
				UProperty* NewProp_bUsesVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsesVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsesVelocity, UParticleModuleParameterDynamic), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUsesVelocity, UParticleModuleParameterDynamic), sizeof(uint8), false);
				UProperty* NewProp_UpdateFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(UpdateFlags, UParticleModuleParameterDynamic), 0x0010000000000000);
				UProperty* NewProp_DynamicParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DynamicParams"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DynamicParams, UParticleModuleParameterDynamic), 0x0010008000000041);
				UProperty* NewProp_DynamicParams_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DynamicParams, TEXT("DynamicParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FEmitterDynamicParameter());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dynamic"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_bUsesVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_UpdateFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_UpdateFlags, TEXT("ToolTip"), TEXT("Flags for optimizing update"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("Category"), TEXT("ParticleModuleParameterDynamic"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic.h"));
				MetaData->SetValue(NewProp_DynamicParams, TEXT("ToolTip"), TEXT("The dynamic parameters this module uses."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterDynamic(Z_Construct_UClass_UParticleModuleParameterDynamic, &UParticleModuleParameterDynamic::StaticClass, TEXT("UParticleModuleParameterDynamic"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterDynamic);
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded_NoRegister()
	{
		return UParticleModuleParameterDynamic_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleParameterDynamic();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleParameterDynamic_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleParameterDynamic_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dynamic (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Parameter/ParticleModuleParameterDynamic_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleParameterDynamic_Seeded(Z_Construct_UClass_UParticleModuleParameterDynamic_Seeded, &UParticleModuleParameterDynamic_Seeded::StaticClass, TEXT("UParticleModuleParameterDynamic_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleParameterDynamic_Seeded);
	UEnum* Z_Construct_UEnum_Engine_EOpacitySourceMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOpacitySourceMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EOpacitySourceMode"), 0, Get_Z_Construct_UEnum_Engine_EOpacitySourceMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOpacitySourceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_Alpha")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_ColorBrightness")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_RedChannel")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_GreenChannel")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_BlueChannel")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OSM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EOpacitySourceMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOpacitySourceMode_CRC() { return 2395701071U; }
	UEnum* Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESubUVBoundingVertexCount"), 0, Get_Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESubUVBoundingVertexCount"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BVC_FourVertices")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BVC_EightVertices")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BVC_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESubUVBoundingVertexCount");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("More bounding vertices results in reduced overdraw, but adds more triangle overhead.\nThe eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,\nand when the particles using the texture will be few and large."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount_CRC() { return 2328502315U; }
	UClass* Z_Construct_UClass_USubUVAnimation_NoRegister()
	{
		return USubUVAnimation::StaticClass();
	}
	UClass* Z_Construct_UClass_USubUVAnimation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USubUVAnimation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AlphaThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AlphaThreshold, USubUVAnimation), 0x0010000000000001);
				UProperty* NewProp_OpacitySourceMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacitySourceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OpacitySourceMode, USubUVAnimation), 0x0010000000000001, Z_Construct_UEnum_Engine_EOpacitySourceMode());
				UProperty* NewProp_BoundingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BoundingMode, USubUVAnimation), 0x0010000000000001, Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount());
				UProperty* NewProp_SubImages_Vertical = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Vertical"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImages_Vertical, USubUVAnimation), 0x0010000000000001);
				UProperty* NewProp_SubImages_Horizontal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Horizontal"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImages_Horizontal, USubUVAnimation), 0x0010000000000001);
				UProperty* NewProp_SubUVTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubUVTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SubUVTexture, USubUVAnimation), 0x0010000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUVAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SubUV animation asset, which caches bounding geometry for regions in the SubUVTexture with non-zero opacity.\nParticle emitters with a SubUV module which use this asset leverage the optimal bounding geometry to reduce overdraw."));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("ToolTip"), TEXT("Alpha channel values larger than the threshold are considered occupied and will be contained in the bounding geometry.\nRaising this threshold slightly can reduce overdraw in particles using this animation asset."));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_OpacitySourceMode, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_OpacitySourceMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("ToolTip"), TEXT("More bounding vertices results in reduced overdraw, but adds more triangle overhead.\nThe eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,\nand when the particles using the texture will be few and large."));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ToolTip"), TEXT("The number of sub-images vertically in the texture"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ToolTip"), TEXT("The number of sub-images horizontally in the texture"));
				MetaData->SetValue(NewProp_SubUVTexture, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubUVTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUVAnimation.h"));
				MetaData->SetValue(NewProp_SubUVTexture, TEXT("ToolTip"), TEXT("Texture to generate bounding geometry from."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USubUVAnimation(Z_Construct_UClass_USubUVAnimation, &USubUVAnimation::StaticClass, TEXT("USubUVAnimation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USubUVAnimation);
	UEnum* Z_Construct_UEnum_Engine_EEmitterNormalsMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEmitterNormalsMode"), 0, Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEmitterNormalsMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ENM_CameraFacing")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ENM_Spherical")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ENM_Cylindrical")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ENM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EEmitterNormalsMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ENM_CameraFacing.ToolTip"), TEXT("Default mode, normals are based on the camera facing geometry."));
			MetaData->SetValue(ReturnEnum, TEXT("ENM_Cylindrical.ToolTip"), TEXT("Normals are generated from a cylinder going through NormalsSphereCenter, in the direction NormalsCylinderDirection."));
			MetaData->SetValue(ReturnEnum, TEXT("ENM_Spherical.ToolTip"), TEXT("Normals are generated from a sphere centered at NormalsSphereCenter."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEmitterNormalsMode_CRC() { return 1517467964U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleSortMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleSortMode"), 0, Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleSortMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_ViewProjDepth")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_DistanceToView")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_Age_OldestFirst")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_Age_NewestFirst")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSORTMODE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EParticleSortMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleSortMode_CRC() { return 3846568743U; }
	UEnum* Z_Construct_UEnum_Engine_EParticleUVFlipMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EParticleUVFlipMode"), 0, Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EParticleUVFlipMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::FlipUV")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::FlipUOnly")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::FlipVOnly")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::RandomFlipUV")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::RandomFlipUOnly")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::RandomFlipVOnly")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::RandomFlipUVIndependent")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EParticleUVFlipMode::EParticleUVFlipMode_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EParticleUVFlipMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FlipUOnly.ToolTip"), TEXT("Flips U only on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("FlipUV.ToolTip"), TEXT("Flips UV on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("FlipVOnly.ToolTip"), TEXT("Flips V only on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Flips UV on all particles."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUOnly.ToolTip"), TEXT("Flips U only randomly for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUV.ToolTip"), TEXT("Flips UV randomly for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipUVIndependent.ToolTip"), TEXT("Flips U and V independently at random for each particle on spawn."));
			MetaData->SetValue(ReturnEnum, TEXT("RandomFlipVOnly.ToolTip"), TEXT("Flips V only randomly for each particle on spawn."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EParticleUVFlipMode_CRC() { return 1343762743U; }
	UClass* Z_Construct_UClass_UParticleModuleRequired_NoRegister()
	{
		return UParticleModuleRequired::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRequired()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRequired::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NamedMaterialOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamedMaterialOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NamedMaterialOverrides, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_NamedMaterialOverrides_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamedMaterialOverrides, TEXT("NamedMaterialOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired, uint8);
				UProperty* NewProp_bOrbitModuleAffectsVelocityAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOrbitModuleAffectsVelocityAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOrbitModuleAffectsVelocityAlignment, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_NormalsCylinderDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalsCylinderDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NormalsCylinderDirection, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NormalsSphereCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalsSphereCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NormalsSphereCenter, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_EmitterNormalsMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterNormalsMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EmitterNormalsMode, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EEmitterNormalsMode());
				UProperty* NewProp_AlphaThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AlphaThreshold, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_OpacitySourceMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpacitySourceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OpacitySourceMode, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EOpacitySourceMode());
				UProperty* NewProp_BoundingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BoundingMode, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_ESubUVBoundingVertexCount());
				UProperty* NewProp_CutoutTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CutoutTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CutoutTexture, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_UVFlippingMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UVFlippingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(UVFlippingMode, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleUVFlipMode());
				UProperty* NewProp_UVFlippingMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_UVFlippingMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_MaxDrawCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDrawCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxDrawCount, UParticleModuleRequired), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseMaxDrawCount, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseMaxDrawCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseMaxDrawCount"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseMaxDrawCount, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseMaxDrawCount, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_MacroUVRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacroUVRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MacroUVRadius, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_MacroUVPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MacroUVPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MacroUVPosition, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideSystemMacroUV, UParticleModuleRequired, uint8);
				UProperty* NewProp_bOverrideSystemMacroUV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideSystemMacroUV"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideSystemMacroUV, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideSystemMacroUV, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_RandomImageChanges = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomImageChanges"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RandomImageChanges, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_RandomImageTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomImageTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RandomImageTime, UParticleModuleRequired), 0x0010000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleUV, UParticleModuleRequired, uint8);
				UProperty* NewProp_bScaleUV = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScaleUV"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleUV, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleUV, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_SubImages_Vertical = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Vertical"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImages_Vertical, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_SubImages_Horizontal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImages_Horizontal"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImages_Horizontal, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_InterpolationMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InterpolationMethod, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleSubUVInterpMethod());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDelayFirstLoopOnly, UParticleModuleRequired, uint8);
				UProperty* NewProp_bDelayFirstLoopOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDelayFirstLoopOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDelayFirstLoopOnly, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDelayFirstLoopOnly, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterDelayUseRange, UParticleModuleRequired, uint8);
				UProperty* NewProp_bEmitterDelayUseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterDelayUseRange"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterDelayUseRange, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterDelayUseRange, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_EmitterDelayLow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDelayLow"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EmitterDelayLow, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_EmitterDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EmitterDelay, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_BurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstList"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BurstList, UParticleModuleRequired), 0x0010000002000008);
				UProperty* NewProp_BurstList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BurstList, TEXT("BurstList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FParticleBurst());
				UProperty* NewProp_ParticleBurstMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleBurstMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ParticleBurstMethod, UParticleModuleRequired), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleBurstMethod());
				UProperty* NewProp_SpawnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpawnRate, UParticleModuleRequired), 0x0010008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_EmitterLoops = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterLoops"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EmitterLoops, UParticleModuleRequired), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDurationRecalcEachLoop, UParticleModuleRequired, uint8);
				UProperty* NewProp_bDurationRecalcEachLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDurationRecalcEachLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDurationRecalcEachLoop, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDurationRecalcEachLoop, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEmitterDurationUseRange, UParticleModuleRequired, uint8);
				UProperty* NewProp_bEmitterDurationUseRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEmitterDurationUseRange"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEmitterDurationUseRange, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEmitterDurationUseRange, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_EmitterDurationLow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDurationLow"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EmitterDurationLow, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_EmitterDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EmitterDuration, UParticleModuleRequired), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveHMDRoll, UParticleModuleRequired, uint8);
				UProperty* NewProp_bRemoveHMDRoll = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRemoveHMDRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveHMDRoll, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRemoveHMDRoll, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLegacyEmitterTime, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseLegacyEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLegacyEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLegacyEmitterTime, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseLegacyEmitterTime, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_SortMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SortMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SortMode, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleSortMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillOnCompleted, UParticleModuleRequired, uint8);
				UProperty* NewProp_bKillOnCompleted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillOnCompleted"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillOnCompleted, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillOnCompleted, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKillOnDeactivate, UParticleModuleRequired, uint8);
				UProperty* NewProp_bKillOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bKillOnDeactivate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKillOnDeactivate, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bKillOnDeactivate, UParticleModuleRequired), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLocalSpace, UParticleModuleRequired, uint8);
				UProperty* NewProp_bUseLocalSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLocalSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLocalSpace, UParticleModuleRequired), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseLocalSpace, UParticleModuleRequired), sizeof(uint8), false);
				UProperty* NewProp_MaxFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxFacingCameraBlendDistance, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_MinFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinFacingCameraBlendDistance, UParticleModuleRequired), 0x0010000000000001);
				UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
				UProperty* NewProp_EmitterRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmitterRotation, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_EmitterOrigin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmitterOrigin, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Material"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Material, UParticleModuleRequired), 0x0010000000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Required"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Cascade Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("Category"), TEXT("Materials"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NamedMaterialOverrides, TEXT("ToolTip"), TEXT("Named material overrides for this emitter.\nOverrides this emitter's material(s) with those in the correspondingly named slot(s) of the owning system."));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bOrbitModuleAffectsVelocityAlignment, TEXT("ToolTip"), TEXT("Ensures that movement generated from the orbit module is applied to velocity-aligned particles"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NormalsCylinderDirection, TEXT("ToolTip"), TEXT("When EmitterNormalsMode is ENM_Cylindrical,\nparticle normals are created to face away from the cylinder going through NormalsSphereCenter in the direction NormalsCylinderDirection.\nNormalsCylinderDirection is in local space."));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_NormalsSphereCenter, TEXT("ToolTip"), TEXT("When EmitterNormalsMode is ENM_Spherical, particle normals are created to face away from NormalsSphereCenter.\nNormalsSphereCenter is in local space."));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("Category"), TEXT("Normals"));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterNormalsMode, TEXT("ToolTip"), TEXT("Normal generation mode for this emitter LOD."));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("Category"), TEXT("ParticleCutout"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("ToolTip"), TEXT("Alpha channel values larger than the threshold are considered occupied and will be contained in the bounding geometry.\nRaising this threshold slightly can reduce overdraw in particles using this animation asset."));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaThreshold, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_OpacitySourceMode, TEXT("Category"), TEXT("ParticleCutout"));
				MetaData->SetValue(NewProp_OpacitySourceMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("Category"), TEXT("ParticleCutout"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_BoundingMode, TEXT("ToolTip"), TEXT("More bounding vertices results in reduced overdraw, but adds more triangle overhead.\nThe eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,\nand when the particles using the texture will be few and large."));
				MetaData->SetValue(NewProp_CutoutTexture, TEXT("Category"), TEXT("ParticleCutout"));
				MetaData->SetValue(NewProp_CutoutTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_CutoutTexture, TEXT("ToolTip"), TEXT("Texture to generate bounding geometry from."));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_UVFlippingMode, TEXT("ToolTip"), TEXT("Controls UV Flipping for this emitter."));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MaxDrawCount, TEXT("ToolTip"), TEXT("The maximum number of particles to DRAW for this emitter.\nIf set to 0, it will use whatever number are present."));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseMaxDrawCount, TEXT("ToolTip"), TEXT("If true, use the MaxDrawCount to limit the number of particles rendered.\nNOTE: This does not limit the number spawned/updated, only what is drawn."));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MacroUVRadius, TEXT("ToolTip"), TEXT("World space radius that UVs generated with the ParticleMacroUV material node will tile based on."));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MacroUVPosition, TEXT("ToolTip"), TEXT("Local space position that UVs generated with the ParticleMacroUV material node will be centered on."));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("Category"), TEXT("MacroUV"));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bOverrideSystemMacroUV, TEXT("ToolTip"), TEXT("Override the system MacroUV settings"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_RandomImageChanges, TEXT("ToolTip"), TEXT("The number of times to change a random image over the life of the particle."));
				MetaData->SetValue(NewProp_RandomImageTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_RandomImageTime, TEXT("ToolTip"), TEXT("The amount of time (particle-relative, 0.0 to 1.0) to 'lock' on a random sub image\n    0.0 = change every frame\n1.0 = select a random image at spawn and hold for the life of the particle"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bScaleUV, TEXT("ToolTip"), TEXT("Whether to scale the UV or not - ie, the model wasn't setup with sub uvs"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SubImages_Vertical, TEXT("ToolTip"), TEXT("The number of sub-images vertically in the texture"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SubImages_Horizontal, TEXT("ToolTip"), TEXT("The number of sub-images horizontally in the texture"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_InterpolationMethod, TEXT("ToolTip"), TEXT("The interpolation method to used for the SubUV image selection.\nOne of the following:\nPSUVIM_None                     - Do not apply SubUV modules to this emitter.\nPSUVIM_Linear           - Smoothly transition between sub-images in the given order,\n                                          with no blending between the current and the next\nPSUVIM_Linear_Blend     - Smoothly transition between sub-images in the given order,\n                                          blending between the current and the next\nPSUVIM_Random           - Pick the next image at random, with no blending between\n                                          the current and the next\nPSUVIM_Random_Blend     - Pick the next image at random, blending between the current\n                                          and the next"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bDelayFirstLoopOnly, TEXT("ToolTip"), TEXT("If true, the emitter will be delayed only on the first loop."));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bEmitterDelayUseRange, TEXT("ToolTip"), TEXT("If true, select the emitter delay from the range\n        [EmitterDelayLow..EmitterDelay]"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDelayLow, TEXT("ToolTip"), TEXT("The low end of the emitter delay if using a range."));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDelay, TEXT("ToolTip"), TEXT("Indicates the time (in seconds) that this emitter should be delayed in the particle system."));
				MetaData->SetValue(NewProp_BurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ToolTip"), TEXT("The array of burst entries."));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ToolTip"), TEXT("The method to utilize when burst-emitting particles"));
				MetaData->SetValue(NewProp_SpawnRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SpawnRate, TEXT("ToolTip"), TEXT("The rate at which to spawn particles"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterLoops, TEXT("ToolTip"), TEXT("The number of times to loop the emitter.\n    0 indicates loop continuously"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bDurationRecalcEachLoop, TEXT("ToolTip"), TEXT("If true, recalculate the emitter duration on each loop."));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bEmitterDurationUseRange, TEXT("ToolTip"), TEXT("If true, select the emitter duration from the range\n        [EmitterDurationLow..EmitterDuration]"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDurationLow, TEXT("ToolTip"), TEXT("The low end of the emitter duration if using a range."));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("Category"), TEXT("Duration"));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterDuration, TEXT("ToolTip"), TEXT("How long, in seconds, the emitter will run before looping."));
				MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("DisplayName"), TEXT("Remove HMD Roll"));
				MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ToolTip"), TEXT("If true, removes the HMD view roll (e.g. in VR)"));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseLegacyEmitterTime, TEXT("ToolTip"), TEXT("If true, the EmitterTime for the emitter will be calculated by\nmodulating the SecondsSinceCreation by the EmitterDuration. As\nthis can lead to issues w/ looping and variable duration, a new\napproach has been implemented.\nIf false, this new approach is utilized, and the EmitterTime is\nsimply incremented by DeltaTime each tick. When the emitter\nloops, it adjusts the EmitterTime by the current EmitterDuration\nresulting in proper looping/delay behavior."));
				MetaData->SetValue(NewProp_SortMode, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_SortMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_SortMode, TEXT("ToolTip"), TEXT("The sorting mode to use for this emitter.\nPSORTMODE_None                          - No sorting required.\nPSORTMODE_ViewProjDepth         - Sort by view projected depth of the particle.\nPSORTMODE_DistanceToView        - Sort by distance of particle to view in world space.\nPSORTMODE_Age_OldestFirst       - Sort by age, oldest drawn first.\nPSORTMODE_Age_NewestFirst       - Sort by age, newest drawn first."));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bKillOnCompleted, TEXT("ToolTip"), TEXT("If true, kill the emitter when it completes"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bKillOnDeactivate, TEXT("ToolTip"), TEXT("If true, kill the emitter when the particle system is deactivated"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_bUseLocalSpace, TEXT("ToolTip"), TEXT("If true, update the emitter in local space"));
				MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition"));
				MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square"));
				MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("The screen alignment to utilize for the emitter at this LOD level.\nOne of the following:\nPSA_FacingCameraPosition - Faces the camera position, but is not dependent on the camera rotation.\n                                                        This method produces more stable particles under camera rotation.\nPSA_Square                      - Uniform scale (via SizeX) facing the camera\nPSA_Rectangle           - Non-uniform scale (via SizeX and SizeY) facing the camera\nPSA_Velocity            - Orient the particle towards both the camera and the direction\n                                          the particle is moving. Non-uniform scaling is allowed.\nPSA_TypeSpecific        - Use the alignment method indicated in the type data module.\nPSA_FacingCameraDistanceBlend - Blends between PSA_FacingCameraPosition and PSA_Square over specified distance."));
				MetaData->SetValue(NewProp_EmitterRotation, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_EmitterRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_EmitterOrigin, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_EmitterOrigin, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_Material, TEXT("Category"), TEXT("Emitter"));
				MetaData->SetValue(NewProp_Material, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleModuleRequired.h"));
				MetaData->SetValue(NewProp_Material, TEXT("ToolTip"), TEXT("The material to utilize for the emitter at this LOD level."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRequired(Z_Construct_UClass_UParticleModuleRequired, &UParticleModuleRequired::StaticClass, TEXT("UParticleModuleRequired"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRequired);
	UClass* Z_Construct_UClass_UParticleModuleRotationBase_NoRegister()
	{
		return UParticleModuleRotationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationBase(Z_Construct_UClass_UParticleModuleRotationBase, &UParticleModuleRotationBase::StaticClass, TEXT("UParticleModuleRotationBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_NoRegister()
	{
		return UParticleModuleMeshRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritParent, UParticleModuleMeshRotation, uint8);
				UProperty* NewProp_bInheritParent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritParent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritParent, UParticleModuleMeshRotation), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritParent, UParticleModuleMeshRotation), sizeof(uint8), false);
				UProperty* NewProp_StartRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRotation, UParticleModuleMeshRotation), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_bInheritParent, TEXT("ToolTip"), TEXT("If true, apply the parents rotation as well."));
				MetaData->SetValue(NewProp_StartRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ToolTip"), TEXT("Initial rotation in ROTATIONS PER SECOND (1 = 360 degrees).\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotation(Z_Construct_UClass_UParticleModuleMeshRotation, &UParticleModuleMeshRotation::StaticClass, TEXT("UParticleModuleMeshRotation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotation);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded_NoRegister()
	{
		return UParticleModuleMeshRotation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMeshRotation();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleMeshRotation_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rot (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleMeshRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotation_Seeded(Z_Construct_UClass_UParticleModuleMeshRotation_Seeded, &UParticleModuleMeshRotation_Seeded::StaticClass, TEXT("UParticleModuleMeshRotation_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotation_NoRegister()
	{
		return UParticleModuleRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRotation, UParticleModuleRotation), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation.h"));
				MetaData->SetValue(NewProp_StartRotation, TEXT("ToolTip"), TEXT("Initial rotation of the particle (1 = 360 degrees).\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotation(Z_Construct_UClass_UParticleModuleRotation, &UParticleModuleRotation::StaticClass, TEXT("UParticleModuleRotation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotation);
	UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded_NoRegister()
	{
		return UParticleModuleRotation_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotation_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotation();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotation_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleRotation_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Rotation (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotation_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotation_Seeded(Z_Construct_UClass_UParticleModuleRotation_Seeded, &UParticleModuleRotation_Seeded::StaticClass, TEXT("UParticleModuleRotation_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotation_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime_NoRegister()
	{
		return UParticleModuleRotationOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Scale, UParticleModuleRotationOverLifetime, uint8);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Scale, UParticleModuleRotationOverLifetime), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(Scale, UParticleModuleRotationOverLifetime), sizeof(uint8), false);
				UProperty* NewProp_RotationOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationOverLife, UParticleModuleRotationOverLifetime), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("If true,  the particle rotation is multiplied by the value retrieved from RotationOverLife.\nIf false, the particle rotation is incremented by the value retrieved from RotationOverLife."));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Rotation/ParticleModuleRotationOverLifetime.h"));
				MetaData->SetValue(NewProp_RotationOverLife, TEXT("ToolTip"), TEXT("The rotation of the particle (1.0 = 360 degrees).\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationOverLifetime(Z_Construct_UClass_UParticleModuleRotationOverLifetime, &UParticleModuleRotationOverLifetime::StaticClass, TEXT("UParticleModuleRotationOverLifetime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleRotationRateBase_NoRegister()
	{
		return UParticleModuleRotationRateBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRateBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationRateBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRateBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRateBase(Z_Construct_UClass_UParticleModuleRotationRateBase, &UParticleModuleRotationRateBase::StaticClass, TEXT("UParticleModuleRotationRateBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRateBase);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_NoRegister()
	{
		return UParticleModuleMeshRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotationRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRotationRate, UParticleModuleMeshRotationRate), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ToolTip"), TEXT("Initial rotation rate, in rotations per second.\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRate(Z_Construct_UClass_UParticleModuleMeshRotationRate, &UParticleModuleMeshRotationRate::StaticClass, TEXT("UParticleModuleMeshRotationRate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded_NoRegister()
	{
		return UParticleModuleMeshRotationRate_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleMeshRotationRate();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotationRate_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleMeshRotationRate_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Mesh Rotation Rate (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRate_Seeded(Z_Construct_UClass_UParticleModuleMeshRotationRate_Seeded, &UParticleModuleMeshRotationRate_Seeded::StaticClass, TEXT("UParticleModuleMeshRotationRate_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRate_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife_NoRegister()
	{
		return UParticleModuleMeshRotationRateMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotationRateMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleMeshRotationRateMultiplyLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Rotation Rate * Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor that should be applied to the rotation rate.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRateMultiplyLife(Z_Construct_UClass_UParticleModuleMeshRotationRateMultiplyLife, &UParticleModuleMeshRotationRateMultiplyLife::StaticClass, TEXT("UParticleModuleMeshRotationRateMultiplyLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRateMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife_NoRegister()
	{
		return UParticleModuleMeshRotationRateOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleMeshRotationRateOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bScaleRotRate, UParticleModuleMeshRotationRateOverLife, uint8);
				UProperty* NewProp_bScaleRotRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bScaleRotRate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bScaleRotRate, UParticleModuleMeshRotationRateOverLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bScaleRotRate, UParticleModuleMeshRotationRateOverLife), sizeof(uint8), false);
				UProperty* NewProp_RotRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotRate, UParticleModuleMeshRotationRateOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Rotation Rate over Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_bScaleRotRate, TEXT("ToolTip"), TEXT("If true, scale the current rotation rate by the value retrieved.\nOtherwise, set the rotation rate to the value retrieved."));
				MetaData->SetValue(NewProp_RotRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_RotRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleMeshRotationRateOverLife.h"));
				MetaData->SetValue(NewProp_RotRate, TEXT("ToolTip"), TEXT("The rotation rate desired.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleMeshRotationRateOverLife(Z_Construct_UClass_UParticleModuleMeshRotationRateOverLife, &UParticleModuleMeshRotationRateOverLife::StaticClass, TEXT("UParticleModuleMeshRotationRateOverLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleMeshRotationRateOverLife);
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_NoRegister()
	{
		return UParticleModuleRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartRotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartRotationRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartRotationRate, UParticleModuleRotationRate), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate.h"));
				MetaData->SetValue(NewProp_StartRotationRate, TEXT("ToolTip"), TEXT("Initial rotation rate, in rotations per second.\nThe value is retrieved using the EmitterTime."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRate(Z_Construct_UClass_UParticleModuleRotationRate, &UParticleModuleRotationRate::StaticClass, TEXT("UParticleModuleRotationRate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded_NoRegister()
	{
		return UParticleModuleRotationRate_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRate_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRate();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationRate_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleRotationRate_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Init Rotation Rate (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRate_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRate_Seeded(Z_Construct_UClass_UParticleModuleRotationRate_Seeded, &UParticleModuleRotationRate_Seeded::StaticClass, TEXT("UParticleModuleRotationRate_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRate_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife_NoRegister()
	{
		return UParticleModuleRotationRateMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleRotationRateBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleRotationRateMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleRotationRateMultiplyLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Rotation Rate * Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Rotation"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/RotationRate/ParticleModuleRotationRateMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor that should be applied to the rotation rate.\nThe value is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleRotationRateMultiplyLife(Z_Construct_UClass_UParticleModuleRotationRateMultiplyLife, &UParticleModuleRotationRateMultiplyLife::StaticClass, TEXT("UParticleModuleRotationRateMultiplyLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleRotationRateMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleSizeBase_NoRegister()
	{
		return UParticleModuleSizeBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSizeBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeBase(Z_Construct_UClass_UParticleModuleSizeBase, &UParticleModuleSizeBase::StaticClass, TEXT("UParticleModuleSizeBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeBase);
	UClass* Z_Construct_UClass_UParticleModuleSize_NoRegister()
	{
		return UParticleModuleSize::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSize()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSize::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartSize, UParticleModuleSize), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Size"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(NewProp_StartSize, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_StartSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize.h"));
				MetaData->SetValue(NewProp_StartSize, TEXT("ToolTip"), TEXT("The initial size that should be used for a particle.\nThe value is retrieved using the EmitterTime during the spawn of a particle.\nIt is added to the Size and BaseSize fields of the spawning particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSize(Z_Construct_UClass_UParticleModuleSize, &UParticleModuleSize::StaticClass, TEXT("UParticleModuleSize"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSize);
	UClass* Z_Construct_UClass_UParticleModuleSize_Seeded_NoRegister()
	{
		return UParticleModuleSize_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSize_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSize();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSize_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleSize_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Size (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSize_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSize_Seeded(Z_Construct_UClass_UParticleModuleSize_Seeded, &UParticleModuleSize_Seeded::StaticClass, TEXT("UParticleModuleSize_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSize_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife_NoRegister()
	{
		return UParticleModuleSizeMultiplyLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeMultiplyLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSizeMultiplyLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyZ, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyZ, UParticleModuleSizeMultiplyLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyZ, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyY, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyY, UParticleModuleSizeMultiplyLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyY, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(MultiplyX, UParticleModuleSizeMultiplyLife, uint8);
				UProperty* NewProp_MultiplyX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(MultiplyX, UParticleModuleSizeMultiplyLife), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(MultiplyX, UParticleModuleSizeMultiplyLife), sizeof(uint8), false);
				UProperty* NewProp_LifeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LifeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LifeMultiplier, UParticleModuleSizeMultiplyLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size By Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyZ, TEXT("ToolTip"), TEXT("If true, the Z-component of the scale factor will be applied to the particle size Z-component.\nIf false, the Z-component is left unaltered."));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyY, TEXT("ToolTip"), TEXT("If true, the Y-component of the scale factor will be applied to the particle size Y-component.\nIf false, the Y-component is left unaltered."));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_MultiplyX, TEXT("ToolTip"), TEXT("If true, the X-component of the scale factor will be applied to the particle size X-component.\nIf false, the X-component is left unaltered."));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("Category"), TEXT("Size"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeMultiplyLife.h"));
				MetaData->SetValue(NewProp_LifeMultiplier, TEXT("ToolTip"), TEXT("The scale factor for the size that should be used for a particle.\nThe value is retrieved using the RelativeTime of the particle during its update."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeMultiplyLife(Z_Construct_UClass_UParticleModuleSizeMultiplyLife, &UParticleModuleSizeMultiplyLife::StaticClass, TEXT("UParticleModuleSizeMultiplyLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeMultiplyLife);
	UClass* Z_Construct_UClass_UParticleModuleSizeScale_NoRegister()
	{
		return UParticleModuleSizeScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSizeScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableZ, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableZ, UParticleModuleSizeScale), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableZ, UParticleModuleSizeScale), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableY, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableY, UParticleModuleSizeScale), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableY, UParticleModuleSizeScale), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableX, UParticleModuleSizeScale, uint8);
				UProperty* NewProp_EnableX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnableX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableX, UParticleModuleSizeScale), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(EnableX, UParticleModuleSizeScale), sizeof(uint8), false);
				UProperty* NewProp_SizeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SizeScale, UParticleModuleSizeScale), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size Scale"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableZ, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_EnableY, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableY, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_EnableX, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_EnableX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_EnableX, TEXT("ToolTip"), TEXT("Ignored"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("Category"), TEXT("ParticleModuleSizeScale"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScale.h"));
				MetaData->SetValue(NewProp_SizeScale, TEXT("ToolTip"), TEXT("The amount the BaseSize should be scaled before being used as the size of the particle.\nThe value is retrieved using the RelativeTime of the particle during its update.\nNOTE: this module overrides any size adjustments made prior to this module in that frame."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeScale(Z_Construct_UClass_UParticleModuleSizeScale, &UParticleModuleSizeScale::StaticClass, TEXT("UParticleModuleSizeScale"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeScale);
	UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed_NoRegister()
	{
		return UParticleModuleSizeScaleBySpeed::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSizeScaleBySpeed()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSizeBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSizeScaleBySpeed::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaxScale, UParticleModuleSizeScaleBySpeed), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_SpeedScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpeedScale, UParticleModuleSizeScaleBySpeed), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Size By Speed"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("Category"), TEXT("ParticleModuleSizeScaleBySpeed"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_MaxScale, TEXT("ToolTip"), TEXT("The maximum amount by which to scale a particle in each dimension."));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("Category"), TEXT("ParticleModuleSizeScaleBySpeed"));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Size/ParticleModuleSizeScaleBySpeed.h"));
				MetaData->SetValue(NewProp_SpeedScale, TEXT("ToolTip"), TEXT("By how much speed affects the size of the particle in each dimension."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSizeScaleBySpeed(Z_Construct_UClass_UParticleModuleSizeScaleBySpeed, &UParticleModuleSizeScaleBySpeed::StaticClass, TEXT("UParticleModuleSizeScaleBySpeed"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSizeScaleBySpeed);
	UClass* Z_Construct_UClass_UParticleModuleSpawnBase_NoRegister()
	{
		return UParticleModuleSpawnBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawnBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSpawnBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessBurstList, UParticleModuleSpawnBase, uint8);
				UProperty* NewProp_bProcessBurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProcessBurstList"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessBurstList, UParticleModuleSpawnBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessBurstList, UParticleModuleSpawnBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bProcessSpawnRate, UParticleModuleSpawnBase, uint8);
				UProperty* NewProp_bProcessSpawnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bProcessSpawnRate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bProcessSpawnRate, UParticleModuleSpawnBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bProcessSpawnRate, UParticleModuleSpawnBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessBurstList, TEXT("ToolTip"), TEXT("If true, the BurstList of the SpawnModule of the emitter will be processed.\nIf mutliple Spawn modules are 'stacked' in an emitter, if ANY of them\nhave this set to false, it will not process the SpawnModule BurstList."));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnBase.h"));
				MetaData->SetValue(NewProp_bProcessSpawnRate, TEXT("ToolTip"), TEXT("If true, the SpawnRate of the SpawnModule of the emitter will be processed.\nIf mutliple Spawn modules are 'stacked' in an emitter, if ANY of them\nhave this set to false, it will not process the SpawnModule SpawnRate."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawnBase(Z_Construct_UClass_UParticleModuleSpawnBase, &UParticleModuleSpawnBase::StaticClass, TEXT("UParticleModuleSpawnBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawnBase);
	UClass* Z_Construct_UClass_UParticleModuleSpawn_NoRegister()
	{
		return UParticleModuleSpawn::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSpawnBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSpawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyGlobalSpawnRateScale, UParticleModuleSpawn, uint8);
				UProperty* NewProp_bApplyGlobalSpawnRateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyGlobalSpawnRateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyGlobalSpawnRateScale, UParticleModuleSpawn), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyGlobalSpawnRateScale, UParticleModuleSpawn), sizeof(uint8), false);
				UProperty* NewProp_BurstScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BurstScale, UParticleModuleSpawn), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BurstList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstList"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BurstList, UParticleModuleSpawn), 0x0010000002000009);
				UProperty* NewProp_BurstList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BurstList, TEXT("BurstList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FParticleBurst());
				UProperty* NewProp_ParticleBurstMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleBurstMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ParticleBurstMethod, UParticleModuleSpawn), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleBurstMethod());
				UProperty* NewProp_RateScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RateScale, UParticleModuleSpawn), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Rate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rate, UParticleModuleSpawn), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object ParticleModuleSpawnBase Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_bApplyGlobalSpawnRateScale, TEXT("ToolTip"), TEXT("If true, the SpawnRate will be scaled by the global CVar r.EmitterSpawnRateScale"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_BurstScale, TEXT("ToolTip"), TEXT("Scale all burst entries by this amount."));
				MetaData->SetValue(NewProp_BurstList, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_BurstList, TEXT("ToolTip"), TEXT("The array of burst entries."));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("Category"), TEXT("Burst"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_ParticleBurstMethod, TEXT("ToolTip"), TEXT("The method to utilize when burst-emitting particles."));
				MetaData->SetValue(NewProp_RateScale, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_RateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_RateScale, TEXT("ToolTip"), TEXT("The scalar to apply to the rate."));
				MetaData->SetValue(NewProp_Rate, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_Rate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawn.h"));
				MetaData->SetValue(NewProp_Rate, TEXT("ToolTip"), TEXT("The rate at which to spawn particles."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawn(Z_Construct_UClass_UParticleModuleSpawn, &UParticleModuleSpawn::StaticClass, TEXT("UParticleModuleSpawn"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawn);
	UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister()
	{
		return UParticleModuleSpawnPerUnit::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSpawnPerUnit()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSpawnBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSpawnPerUnit::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongZ, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongY, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreMovementAlongX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreMovementAlongX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreMovementAlongX, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				UProperty* NewProp_MaxFrameDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxFrameDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxFrameDistance, UParticleModuleSpawnPerUnit), 0x0010000000000001);
				UProperty* NewProp_MovementTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovementTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MovementTolerance, UParticleModuleSpawnPerUnit), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit, uint8);
				UProperty* NewProp_bIgnoreSpawnRateWhenMoving = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreSpawnRateWhenMoving"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreSpawnRateWhenMoving, UParticleModuleSpawnPerUnit), sizeof(uint8), false);
				UProperty* NewProp_SpawnPerUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnPerUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpawnPerUnit, UParticleModuleSpawnPerUnit), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_UnitScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnitScalar"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UnitScalar, UParticleModuleSpawnPerUnit), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Spawn PerUnit"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongZ, TEXT("ToolTip"), TEXT("If true, ignore the Z-component of the movement"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongY, TEXT("ToolTip"), TEXT("If true, ignore the Y-component of the movement"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreMovementAlongX, TEXT("ToolTip"), TEXT("If true, ignore the X-component of the movement"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_MaxFrameDistance, TEXT("ToolTip"), TEXT("The maximum valid movement for a single frame.\nIf 0.0, then the check is not performed.\nCurrently, if the distance moved between frames is greater than this\nthen NO particles will be spawned.\nThis is primiarily intended to cover cases where the PSystem is\nattached to teleporting objects."));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_MovementTolerance, TEXT("ToolTip"), TEXT("The tolerance for moving vs. not moving w.r.t. the bIgnoreSpawnRateWhenMoving flag.\nIe, if (DistanceMoved < (UnitScalar x MovementTolerance)) then consider it not moving."));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_bIgnoreSpawnRateWhenMoving, TEXT("ToolTip"), TEXT("If true, process the default spawn rate when not moving...\nWhen not moving, skip the default spawn rate.\nIf false, return the bProcessSpawnRate setting."));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_SpawnPerUnit, TEXT("ToolTip"), TEXT("The amount to spawn per meter distribution.\nThe value is retrieved using the EmitterTime."));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Spawn/ParticleModuleSpawnPerUnit.h"));
				MetaData->SetValue(NewProp_UnitScalar, TEXT("ToolTip"), TEXT("The scalar to apply to the distance traveled.\nThe value from SpawnPerUnit is divided by this value to give the actual\nnumber of particles per unit."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSpawnPerUnit(Z_Construct_UClass_UParticleModuleSpawnPerUnit, &UParticleModuleSpawnPerUnit::StaticClass, TEXT("UParticleModuleSpawnPerUnit"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSpawnPerUnit);
	UClass* Z_Construct_UClass_UParticleModuleSubUVBase_NoRegister()
	{
		return UParticleModuleSubUVBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUVBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSubUVBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubUV"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUVBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUVBase(Z_Construct_UClass_UParticleModuleSubUVBase, &UParticleModuleSubUVBase::StaticClass, TEXT("UParticleModuleSubUVBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUVBase);
	UClass* Z_Construct_UClass_UParticleModuleSubUV_NoRegister()
	{
		return UParticleModuleSubUV::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUV()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSubUVBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSubUV::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRealTime, UParticleModuleSubUV, uint8);
				UProperty* NewProp_bUseRealTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseRealTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRealTime, UParticleModuleSubUV), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseRealTime, UParticleModuleSubUV), sizeof(uint8), false);
				UProperty* NewProp_SubImageIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImageIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SubImageIndex, UParticleModuleSubUV), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Animation"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Animation, UParticleModuleSubUV), 0x0010000000000000, Z_Construct_UClass_USubUVAnimation_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubImage Index"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("Category"), TEXT("Realtime"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_bUseRealTime, TEXT("ToolTip"), TEXT("If true, use *real* time when updating the image index.\nThe movie will update regardless of the slomo settings of the game."));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("Category"), TEXT("SubUV"));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_SubImageIndex, TEXT("ToolTip"), TEXT("The index of the sub-image that should be used for the particle.\nThe value is retrieved using the RelativeTime of the particles."));
				MetaData->SetValue(NewProp_Animation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUV.h"));
				MetaData->SetValue(NewProp_Animation, TEXT("ToolTip"), TEXT("SubUV animation asset to use.\nWhen specified, optimal bounding geometry for each SubUV frame will be used when rendering the sprites for this emitter instead of full quads.\nThis reduction in overdraw can reduce the GPU cost of rendering the emitter by 2x or 3x, depending on how much unused space was in the texture.\nThe bounding geometry is generated off of the texture alpha setup in the SubUV Animation asset, so that has to match what the material is using for opacity, or clipping will occur.\nWhen specified, SubImages_Horizontal and SubImages_Vertical will come from the asset instead of the Required Module."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUV(Z_Construct_UClass_UParticleModuleSubUV, &UParticleModuleSubUV::StaticClass, TEXT("UParticleModuleSubUV"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUV);
	UClass* Z_Construct_UClass_UParticleModuleSubUVMovie_NoRegister()
	{
		return UParticleModuleSubUVMovie::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleSubUVMovie()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleSubUV();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleSubUVMovie::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartingFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartingFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StartingFrame, UParticleModuleSubUVMovie), 0x0010000000000001);
				UProperty* NewProp_FrameRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrameRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FrameRate, UParticleModuleSubUVMovie), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseEmitterTime, UParticleModuleSubUVMovie, uint8);
				UProperty* NewProp_bUseEmitterTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseEmitterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseEmitterTime, UParticleModuleSubUVMovie), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseEmitterTime, UParticleModuleSubUVMovie), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SubUV Movie"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_StartingFrame, TEXT("ToolTip"), TEXT("The starting image index for the SubUV (1 = the first frame).\nAssumes order of Left->Right, Top->Bottom\nIf greater than the last frame, it will clamp to the last one.\nIf 0, then randomly selects a starting frame."));
				MetaData->SetValue(NewProp_FrameRate, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_FrameRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_FrameRate, TEXT("ToolTip"), TEXT("The frame rate the SubUV images should be 'flipped' thru at."));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("Category"), TEXT("Flipbook"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/SubUV/ParticleModuleSubUVMovie.h"));
				MetaData->SetValue(NewProp_bUseEmitterTime, TEXT("ToolTip"), TEXT("If true, use the emitter time to look up the frame rate.\nIf false (default), use the particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleSubUVMovie(Z_Construct_UClass_UParticleModuleSubUVMovie, &UParticleModuleSubUVMovie::StaticClass, TEXT("UParticleModuleSubUVMovie"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleSubUVMovie);
	UClass* Z_Construct_UClass_UParticleModuleTrailBase_NoRegister()
	{
		return UParticleModuleTrailBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTrailBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTrailBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Trail"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Trail/ParticleModuleTrailBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTrailBase(Z_Construct_UClass_UParticleModuleTrailBase, &UParticleModuleTrailBase::StaticClass, TEXT("UParticleModuleTrailBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTrailBase);
	UEnum* Z_Construct_UEnum_Engine_ETrail2SourceMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETrail2SourceMethod"), 0, Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrail2SourceMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PET2SRCM_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PET2SRCM_Particle")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PET2SRCM_Actor")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PET2SRCM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETrail2SourceMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Actor.ToolTip"), TEXT("Actor          - use the actor as the source.\n    The name of the actor should be set in SourceName."));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Default.ToolTip"), TEXT("Default        - use the emitter position.\n    This is the fallback for when other modes can't be resolved."));
			MetaData->SetValue(ReturnEnum, TEXT("PET2SRCM_Particle.ToolTip"), TEXT("Particle       - use the particles from a given emitter in the system.\n    The name of the emitter should be set in SourceName."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrail2SourceMethod_CRC() { return 576489598U; }
	UClass* Z_Construct_UClass_UParticleModuleTrailSource_NoRegister()
	{
		return UParticleModuleTrailSource::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTrailSource()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTrailBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTrailSource::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInheritRotation, UParticleModuleTrailSource, uint8);
				UProperty* NewProp_bInheritRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInheritRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInheritRotation, UParticleModuleTrailSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInheritRotation, UParticleModuleTrailSource), sizeof(uint8), false);
				UProperty* NewProp_SelectionMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SelectionMethod, UParticleModuleTrailSource), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleSourceSelectionMethod());
				UProperty* NewProp_SourceOffsetDefaults = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceOffsetDefaults"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SourceOffsetDefaults, UParticleModuleTrailSource), 0x0010000000000041);
				UProperty* NewProp_SourceOffsetDefaults_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceOffsetDefaults, TEXT("SourceOffsetDefaults"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SourceOffsetCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceOffsetCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SourceOffsetCount, UParticleModuleTrailSource), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockSourceStength, UParticleModuleTrailSource, uint8);
				UProperty* NewProp_bLockSourceStength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockSourceStength"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockSourceStength, UParticleModuleTrailSource), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLockSourceStength, UParticleModuleTrailSource), sizeof(uint8), false);
				UProperty* NewProp_SourceStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceStrength, UParticleModuleTrailSource), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_SourceName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourceName, UParticleModuleTrailSource), 0x0010000000000001);
				UProperty* NewProp_SourceMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceMethod, UParticleModuleTrailSource), 0x0010000000000001, Z_Construct_UEnum_Engine_ETrail2SourceMethod());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Source"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bInheritRotation, TEXT("ToolTip"), TEXT("Interhit particle rotation - only valid for SourceMethod of PET2SRCM_Particle."));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SelectionMethod, TEXT("ToolTip"), TEXT("Particle selection method, when using the SourceMethod of Particle."));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceOffsetDefaults, TEXT("ToolTip"), TEXT("Default offsets from the source(s).\nIf there are < SourceOffsetCount slots, the grabbing of values will simply wrap."));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceOffsetCount, TEXT("ToolTip"), TEXT("SourceOffsetCount\nThe number of source offsets that can be expected to be found on the instance.\nThese must be named\n        TrailSourceOffset#"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_bLockSourceStength, TEXT("ToolTip"), TEXT("Whether to lock the source to the life of the particle."));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceStrength, TEXT("ToolTip"), TEXT("The strength of the tangent from the source point for each Trail."));
				MetaData->SetValue(NewProp_SourceName, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceName, TEXT("ToolTip"), TEXT("The name of the source - either the emitter or Actor."));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("Category"), TEXT("Source"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Trail/ParticleModuleTrailSource.h"));
				MetaData->SetValue(NewProp_SourceMethod, TEXT("ToolTip"), TEXT("The source method for the trail."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTrailSource(Z_Construct_UClass_UParticleModuleTrailSource, &UParticleModuleTrailSource::StaticClass, TEXT("UParticleModuleTrailSource"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTrailSource);
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBase_NoRegister()
	{
		return UParticleModuleTypeDataBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataBase(Z_Construct_UClass_UParticleModuleTypeDataBase, &UParticleModuleTypeDataBase::StaticClass, TEXT("UParticleModuleTypeDataBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataBase);
	UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail_NoRegister()
	{
		return UParticleModuleTypeDataAnimTrail::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataAnimTrail()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataAnimTrail::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WidthTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthTessellationStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0010000000000001);
				UProperty* NewProp_TangentTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentTessellationStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TangentTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0010000000000001);
				UProperty* NewProp_DistanceTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceTessellationStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceTessellationStepSize, UParticleModuleTypeDataAnimTrail), 0x0010000000000001);
				UProperty* NewProp_TilingDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilingDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TilingDistance, UParticleModuleTypeDataAnimTrail), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bTangentRecalculationEveryFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentRecalculationEveryFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentRecalculationEveryFrame, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bEnablePreviousTangentRecalculation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePreviousTangentRecalculation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail, uint8);
				UProperty* NewProp_bDeadTrailsOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnDeactivate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnDeactivate, UParticleModuleTypeDataAnimTrail), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("AnimTrail Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_WidthTessellationStepSize, TEXT("ToolTip"), TEXT("The width step size for tessellation.\nThis is the number of world units change in the width required to warrant an additional tessellation point. If 0 then there is no width tessellation."));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_TangentTessellationStepSize, TEXT("ToolTip"), TEXT("The tangent scalar for tessellation.\nThis is the degree change in the tangent direction [0...180] required to warrant an additional tessellation point. If 0 then there is no tangent tessellation."));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ToolTip"), TEXT("The distance step size for tessellation.\n# Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize)). If 0 then there is no distance tessellation."));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ToolTip"), TEXT("The (estimated) covered distance to tile the 2nd UV set at.\nIf 0.0, a second UV set will not be passed in."));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ToolTip"), TEXT("If true, recalculate tangents every frame to allow velocity/acceleration to be applied"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ToolTip"), TEXT("If true, recalculate the previous tangent when a new particle is spawned"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataAnimTrail.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ToolTip"), TEXT("If true, when the system is deactivated, mark trails as dead.\nThis means they will still render, but will not have more particles\nadded to them, even if the system re-activates..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataAnimTrail(Z_Construct_UClass_UParticleModuleTypeDataAnimTrail, &UParticleModuleTypeDataAnimTrail::StaticClass, TEXT("UParticleModuleTypeDataAnimTrail"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataAnimTrail);
	UEnum* Z_Construct_UEnum_Engine_EBeamTaperMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBeamTaperMethod"), 0, Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBeamTaperMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEBTM_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEBTM_Full")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEBTM_Partial")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEBTM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EBeamTaperMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_Full.DisplayName"), TEXT("Full"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("PEBTM_Partial.DisplayName"), TEXT("Partial"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Beam Tapering Variables."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBeamTaperMethod_CRC() { return 596852164U; }
	UEnum* Z_Construct_UEnum_Engine_EBeam2Method()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBeam2Method"), 0, Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBeam2Method"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2M_Distance")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2M_Target")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2M_Branch")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PEB2M_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EBeam2Method");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Branch.DisplayName"), TEXT("Branch"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Distance.DisplayName"), TEXT("Distance"));
			MetaData->SetValue(ReturnEnum, TEXT("PEB2M_Target.DisplayName"), TEXT("Target"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EBeam2Method_CRC() { return 1829728820U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBeamTargetData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BeamTargetData"), sizeof(FBeamTargetData), Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeamTargetData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBeamTargetData>, EStructFlags(0x00000001));
			UProperty* NewProp_TargetPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TargetPercentage, FBeamTargetData), 0x0010000000000001);
			UProperty* NewProp_TargetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TargetName, FBeamTargetData), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Beam Multi-target Variables."));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("Category"), TEXT("BeamTargetData"));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(NewProp_TargetPercentage, TEXT("ToolTip"), TEXT("Percentage chance the target will be selected (100 = always)."));
			MetaData->SetValue(NewProp_TargetName, TEXT("Category"), TEXT("BeamTargetData"));
			MetaData->SetValue(NewProp_TargetName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
			MetaData->SetValue(NewProp_TargetName, TEXT("ToolTip"), TEXT("Name of the target."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBeamTargetData_CRC() { return 522587284U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2_NoRegister()
	{
		return UParticleModuleTypeDataBeam2::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataBeam2()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataBeam2::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderTessellation, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTessellation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderTessellation, UParticleModuleTypeDataBeam2), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderTessellation, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderLines, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderLines = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderLines, UParticleModuleTypeDataBeam2), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderLines, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderDirectLine, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderDirectLine = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderDirectLine"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderDirectLine, UParticleModuleTypeDataBeam2), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderDirectLine, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RenderGeometry, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_RenderGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderGeometry"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RenderGeometry, UParticleModuleTypeDataBeam2), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(RenderGeometry, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				UProperty* NewProp_TaperScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TaperScale, UParticleModuleTypeDataBeam2), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_TaperFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TaperFactor, UParticleModuleTypeDataBeam2), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_TaperMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TaperMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TaperMethod, UParticleModuleTypeDataBeam2), 0x0010000000000001, Z_Construct_UEnum_Engine_EBeamTaperMethod());
				UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Distance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Distance, UParticleModuleTypeDataBeam2), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_BranchParentName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BranchParentName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BranchParentName, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_UpVectorStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpVectorStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(UpVectorStepSize, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysOn, UParticleModuleTypeDataBeam2, uint8);
				UProperty* NewProp_bAlwaysOn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysOn"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysOn, UParticleModuleTypeDataBeam2), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysOn, UParticleModuleTypeDataBeam2), sizeof(uint8), false);
				UProperty* NewProp_InterpolationPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InterpolationPoints, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Speed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Speed, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_MaxBeamCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxBeamCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxBeamCount, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_Sheets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sheets"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Sheets, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_TextureTileDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureTileDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TextureTileDistance, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_TextureTile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureTile"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TextureTile, UParticleModuleTypeDataBeam2), 0x0010000000000001);
				UProperty* NewProp_BeamMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BeamMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BeamMethod, UParticleModuleTypeDataBeam2), 0x0010000000000001, Z_Construct_UEnum_Engine_EBeam2Method());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Beam Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderTessellation, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderLines, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderLines, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderDirectLine, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderDirectLine, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_RenderGeometry, TEXT("ToolTip"), TEXT("Beam Rendering Variables."));
				MetaData->SetValue(NewProp_TaperScale, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperScale, TEXT("ToolTip"), TEXT("Tapering scaling\n    This is intended to be either a constant, uniform or a ParticleParam.\n    If a curve is used, 0/1 mapping of source/target... which could be integrated into\n    the taper factor itself, and therefore makes no sense."));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperFactor, TEXT("ToolTip"), TEXT("Tapering factor, 0 = source of beam, 1 = target"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("Category"), TEXT("Taper"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TaperMethod, TEXT("ToolTip"), TEXT("Tapering mode - one of the following:\nPEBTM_None              - No tapering is applied\nPEBTM_Full              - Taper the beam relative to source-->target, regardless of current beam length\nPEBTM_Partial   - Taper the beam relative to source-->location, 0=source,1=endpoint"));
				MetaData->SetValue(NewProp_Distance, TEXT("Category"), TEXT("Distance"));
				MetaData->SetValue(NewProp_Distance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Distance, TEXT("ToolTip"), TEXT("The distance along the X-axis to stretch the beam\nDistance is only used if BeamMethod is PEB2M_Distance"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("Category"), TEXT("Branching"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_BranchParentName, TEXT("ToolTip"), TEXT("The name of the emitter to branch from (if mode is PEB2M_Branch)\nMUST BE IN THE SAME PARTICLE SYSTEM!"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_UpVectorStepSize, TEXT("ToolTip"), TEXT("The approach to use for determining the Up vector(s) for the beam.\n\n0 indicates that the Up FVector should be calculated at EVERY point in the beam.\n1 indicates a single Up FVector should be determined at the start of the beam and used at every point.\nN indicates an Up FVector should be calculated every N points of the beam and interpolated between them.\n    [NOTE: This mode is currently unsupported.]"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_bAlwaysOn, TEXT("ToolTip"), TEXT("If true, there will ALWAYS be a beam..."));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_InterpolationPoints, TEXT("ToolTip"), TEXT("Indicates whether the beam should be interpolated.\n    <= 0 --> no\n    >  0 --> yes (and is equal to the number of interpolation steps that should be taken."));
				MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Speed, TEXT("ToolTip"), TEXT("The speed at which the beam should move from source to target when firing up.\n    '0' indicates instantaneous"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_MaxBeamCount, TEXT("ToolTip"), TEXT("The number of live beams"));
				MetaData->SetValue(NewProp_Sheets, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_Sheets, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_Sheets, TEXT("ToolTip"), TEXT("The number of sheets to render"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TextureTileDistance, TEXT("ToolTip"), TEXT("The distance per texture tile.\n    1st UV set only. 2nd UV set does not Tile."));
				MetaData->SetValue(NewProp_TextureTile, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_TextureTile, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_TextureTile, TEXT("ToolTip"), TEXT("The number of times to tile the texture along each beam.\nOverridden by TextureTilingDistance if it is > 0.0.\n    1st UV set only. 2nd UV set does not Tile."));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("Category"), TEXT("Beam"));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataBeam2.h"));
				MetaData->SetValue(NewProp_BeamMethod, TEXT("ToolTip"), TEXT("The method with which to form the beam(s). Must be one of the following:\n        PEB2M_Distance  - Use the distance property to emit a beam along the X-axis of the emitter.\n        PEB2M_Target    - Emit a beam from the source to the supplied target.\n        PEB2M_Branch    - Currently unimplemented."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataBeam2(Z_Construct_UClass_UParticleModuleTypeDataBeam2, &UParticleModuleTypeDataBeam2::StaticClass, TEXT("UParticleModuleTypeDataBeam2"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataBeam2);
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteResourceData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("GPUSpriteResourceData"), sizeof(FGPUSpriteResourceData), Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteResourceData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteResourceData>, EStructFlags(0x00000001));
			UProperty* NewProp_MaxFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxFacingCameraBlendDistance, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_MinFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinFacingCameraBlendDistance, FGPUSpriteResourceData), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveHMDRoll, FGPUSpriteResourceData, uint8);
			UProperty* NewProp_bRemoveHMDRoll = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRemoveHMDRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveHMDRoll, FGPUSpriteResourceData), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bRemoveHMDRoll, FGPUSpriteResourceData), sizeof(uint8), false);
			UProperty* NewProp_PivotOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PivotOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PivotOffset, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_LockAxisFlag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LockAxisFlag"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlag, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleAxisLock());
			UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
			UProperty* NewProp_CameraMotionBlurAmount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CameraMotionBlurAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraMotionBlurAmount, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_RotationRateScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationRateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationRateScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_OneMinusFriction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OneMinusFriction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OneMinusFriction, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_CollisionRandomDistribution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRandomDistribution"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionRandomDistribution, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_CollisionRandomSpread = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRandomSpread"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionRandomSpread, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_CollisionTimeBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionTimeBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionTimeBias, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_CollisionRadiusBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRadiusBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadiusBias, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_CollisionRadiusScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionRadiusScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CollisionRadiusScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_ResilienceBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResilienceBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ResilienceBias, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_ResilienceScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResilienceScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ResilienceScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_DragCoefficientBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficientBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DragCoefficientBias, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_DragCoefficientScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficientScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DragCoefficientScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_PerParticleVectorFieldBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerParticleVectorFieldBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PerParticleVectorFieldBias, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_PerParticleVectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerParticleVectorFieldScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PerParticleVectorFieldScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_GlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldTightness, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_GlobalVectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalVectorFieldScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldScale, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_OrbitPhaseRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitPhaseRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitPhaseRange, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitPhaseBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitPhaseBase"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitPhaseBase, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitFrequencyRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitFrequencyRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitFrequencyRange, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitFrequencyBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitFrequencyBase"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitFrequencyBase, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetRange, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetBase"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetBase, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ConstantAcceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantAcceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConstantAcceleration, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SizeBySpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeBySpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SizeBySpeed, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SubImageSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubImageSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SubImageSize, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SimulationAttrCurveBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationAttrCurveBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SimulationAttrCurveBias, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SimulationAttrCurveScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationAttrCurveScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SimulationAttrCurveScale, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_MiscBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MiscBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MiscBias, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_MiscScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MiscScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MiscScale, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_ColorBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorBias, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_ColorScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorScale, FGPUSpriteResourceData), 0x0010000000000000, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_QuantizedSimulationAttrSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedSimulationAttrSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QuantizedSimulationAttrSamples, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_QuantizedSimulationAttrSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedSimulationAttrSamples, TEXT("QuantizedSimulationAttrSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_QuantizedMiscSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedMiscSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QuantizedMiscSamples, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_QuantizedMiscSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedMiscSamples, TEXT("QuantizedMiscSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_QuantizedColorSamples = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("QuantizedColorSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(QuantizedColorSamples, FGPUSpriteResourceData), 0x0010000000000000);
			UProperty* NewProp_QuantizedColorSamples_Inner = new(EC_InternalUseOnlyConstructor, NewProp_QuantizedColorSamples, TEXT("QuantizedColorSamples"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The source data for runtime resources."));
			MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition"));
			MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square"));
			MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ToolTip"), TEXT("If true, removes the HMD view roll (e.g. in VR)"));
			MetaData->SetValue(NewProp_PivotOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PivotOffset, TEXT("ToolTip"), TEXT("Pivot offset in UV space for placing the verts of each particle."));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ToolTip"), TEXT("The method for locking the particles to a particular axis."));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("Screen alignment for particles."));
			MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ToolTip"), TEXT("How much to stretch sprites based on camera motion blur."));
			MetaData->SetValue(NewProp_RotationRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RotationRateScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle rotation rate."));
			MetaData->SetValue(NewProp_OneMinusFriction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OneMinusFriction, TEXT("ToolTip"), TEXT("One minus the coefficient of friction applied to particles upon collision."));
			MetaData->SetValue(NewProp_CollisionRandomDistribution, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRandomDistribution, TEXT("ToolTip"), TEXT("Control on reflection's random distribution when colliding. (1=uniform distribution)"));
			MetaData->SetValue(NewProp_CollisionRandomSpread, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRandomSpread, TEXT("ToolTip"), TEXT("Control on reflection's random distribution spread."));
			MetaData->SetValue(NewProp_CollisionTimeBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionTimeBias, TEXT("ToolTip"), TEXT("Bias applied to relative time upon collision."));
			MetaData->SetValue(NewProp_CollisionRadiusBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRadiusBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle size for collision."));
			MetaData->SetValue(NewProp_CollisionRadiusScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_CollisionRadiusScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle size for collision."));
			MetaData->SetValue(NewProp_ResilienceBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ResilienceBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle damping factor."));
			MetaData->SetValue(NewProp_ResilienceScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ResilienceScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle damping factor."));
			MetaData->SetValue(NewProp_DragCoefficientBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficientBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle drag coefficient."));
			MetaData->SetValue(NewProp_DragCoefficientScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficientScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle drag coefficient."));
			MetaData->SetValue(NewProp_PerParticleVectorFieldBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PerParticleVectorFieldBias, TEXT("ToolTip"), TEXT("Bias to apply to per-particle vector field scale."));
			MetaData->SetValue(NewProp_PerParticleVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PerParticleVectorFieldScale, TEXT("ToolTip"), TEXT("Scale to apply to per-particle vector field scale."));
			MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Tightness override value for the global vector fields."));
			MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ToolTip"), TEXT("Scale to apply to global vector fields."));
			MetaData->SetValue(NewProp_OrbitPhaseRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitPhaseBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitPhaseBase, TEXT("ToolTip"), TEXT("Phase offset of orbit around each axis."));
			MetaData->SetValue(NewProp_OrbitFrequencyRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitFrequencyBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitFrequencyBase, TEXT("ToolTip"), TEXT("Frequency at which the particle orbits around each axis."));
			MetaData->SetValue(NewProp_OrbitOffsetRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ToolTip"), TEXT("Offset at which to orbit."));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ToolTip"), TEXT("Constant acceleration to apply to particles."));
			MetaData->SetValue(NewProp_SizeBySpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SizeBySpeed, TEXT("ToolTip"), TEXT("SizeBySpeed parameters. XY=SpeedScale ZW=MaxSpeedScale."));
			MetaData->SetValue(NewProp_SubImageSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SubImageSize, TEXT("ToolTip"), TEXT("Size of subimages. X:SubImageCountH Y:SubImageCountV Z:1/SubImageCountH W:1/SubImageCountV"));
			MetaData->SetValue(NewProp_SimulationAttrCurveBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SimulationAttrCurveScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SimulationAttrCurveScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the simulation attribute curves."));
			MetaData->SetValue(NewProp_MiscBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MiscScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MiscScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the misc curve."));
			MetaData->SetValue(NewProp_ColorBias, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ColorScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ColorScale, TEXT("ToolTip"), TEXT("Scale and bias to be applied to the color of sprites."));
			MetaData->SetValue(NewProp_QuantizedSimulationAttrSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedSimulationAttrSamples, TEXT("ToolTip"), TEXT("Quantized samples for simulation attributes."));
			MetaData->SetValue(NewProp_QuantizedMiscSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedMiscSamples, TEXT("ToolTip"), TEXT("Quantized samples for misc curve attributes to be evaluated at runtime."));
			MetaData->SetValue(NewProp_QuantizedColorSamples, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_QuantizedColorSamples, TEXT("ToolTip"), TEXT("Quantized color samples."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteResourceData_CRC() { return 3163072767U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("GPUSpriteEmitterInfo"), sizeof(FGPUSpriteEmitterInfo), Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteEmitterInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteEmitterInfo>, EStructFlags(0x00000005));
			UProperty* NewProp_DynamicAlphaScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicAlphaScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DynamicAlphaScale, FGPUSpriteEmitterInfo), 0x0010008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
			UProperty* NewProp_DynamicColorScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicColorScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DynamicColorScale, FGPUSpriteEmitterInfo), 0x0010008000000000, Z_Construct_UScriptStruct_FRawDistributionVector());
			UProperty* NewProp_DynamicAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DynamicAlpha, FGPUSpriteEmitterInfo), 0x0010008000000000, Z_Construct_UScriptStruct_FRawDistributionFloat());
			UProperty* NewProp_DynamicColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DynamicColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DynamicColor, FGPUSpriteEmitterInfo), 0x0010008000000000, Z_Construct_UScriptStruct_FRawDistributionVector());
			UProperty* NewProp_MaxFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxFacingCameraBlendDistance, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_MinFacingCameraBlendDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinFacingCameraBlendDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinFacingCameraBlendDistance, FGPUSpriteEmitterInfo), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveHMDRoll, FGPUSpriteEmitterInfo, uint8);
			UProperty* NewProp_bRemoveHMDRoll = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRemoveHMDRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveHMDRoll, FGPUSpriteEmitterInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bRemoveHMDRoll, FGPUSpriteEmitterInfo), sizeof(uint8), false);
			UProperty* NewProp_CollisionMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CollisionMode, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleCollisionMode());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, FGPUSpriteEmitterInfo, uint8);
			UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, FGPUSpriteEmitterInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, FGPUSpriteEmitterInfo), sizeof(uint8), false);
			UProperty* NewProp_LockAxisFlag = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LockAxisFlag"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LockAxisFlag, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleAxisLock());
			UProperty* NewProp_ScreenAlignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScreenAlignment, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UEnum_Engine_EParticleScreenAlignment());
			UProperty* NewProp_MaxParticleCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxParticleCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxParticleCount, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_MaxLifetime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLifetime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxLifetime, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_InvRotationRateScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InvRotationRateScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InvRotationRateScale, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_InvMaxSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InvMaxSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InvMaxSize, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_OrbitOffsetRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetRange, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OrbitOffsetBase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OrbitOffsetBase"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrbitOffsetBase, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PointAttractorRadiusSq = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorRadiusSq"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PointAttractorRadiusSq, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_PointAttractorPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointAttractorPosition, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ConstantAcceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstantAcceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConstantAcceleration, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Resilience = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Resilience"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Resilience, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_PointAttractorStrength = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointAttractorStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointAttractorStrength, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_DragCoefficient = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DragCoefficient"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DragCoefficient, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_VectorFieldScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VectorFieldScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorFieldScale, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FFloatDistribution());
			UProperty* NewProp_LocalVectorField = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalVectorField"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocalVectorField, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo());
			UProperty* NewProp_SpawnModules = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SpawnModules, FGPUSpriteEmitterInfo), 0x0010000000000000);
			UProperty* NewProp_SpawnModules_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SpawnModules, TEXT("SpawnModules"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UParticleModule_NoRegister());
			UProperty* NewProp_SpawnPerUnitModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnPerUnitModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpawnPerUnitModule, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UClass_UParticleModuleSpawnPerUnit_NoRegister());
			UProperty* NewProp_SpawnModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpawnModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpawnModule, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UClass_UParticleModuleSpawn_NoRegister());
			UProperty* NewProp_RequiredModule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RequiredModule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RequiredModule, FGPUSpriteEmitterInfo), 0x0010000000000000, Z_Construct_UClass_UParticleModuleRequired_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The data needed by the runtime to simulate sprites."));
			MetaData->SetValue(NewProp_DynamicAlphaScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicAlphaScale, TEXT("ToolTip"), TEXT("Dynamic alpha scale from the ColorScaleOverLife module."));
			MetaData->SetValue(NewProp_DynamicColorScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicColorScale, TEXT("ToolTip"), TEXT("Dynamic color scale from the ColorScaleOverLife module."));
			MetaData->SetValue(NewProp_DynamicAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicAlpha, TEXT("ToolTip"), TEXT("Dynamic alpha scale from the ColorOverLife module."));
			MetaData->SetValue(NewProp_DynamicColor, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DynamicColor, TEXT("ToolTip"), TEXT("Dynamic color scale from the ColorOverLife module."));
			MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition"));
			MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MinFacingCameraBlendDistance, TEXT("ToolTip"), TEXT("The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square"));
			MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bRemoveHMDRoll, TEXT("ToolTip"), TEXT("If true, removes the HMD view roll (e.g. in VR)"));
			MetaData->SetValue(NewProp_CollisionMode, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("If true, collisions are enabled for this emitter."));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LockAxisFlag, TEXT("ToolTip"), TEXT("The method for locking the particles to a particular axis."));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ScreenAlignment, TEXT("ToolTip"), TEXT("The method for aligning the particle based on the camera."));
			MetaData->SetValue(NewProp_MaxParticleCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxParticleCount, TEXT("ToolTip"), TEXT("The maximum number of particles expected for this emitter."));
			MetaData->SetValue(NewProp_MaxLifetime, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxLifetime, TEXT("ToolTip"), TEXT("The maximum lifetime of particles in this emitter."));
			MetaData->SetValue(NewProp_InvRotationRateScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_InvRotationRateScale, TEXT("ToolTip"), TEXT("The inverse scale to apply to rotation rate."));
			MetaData->SetValue(NewProp_InvMaxSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_InvMaxSize, TEXT("ToolTip"), TEXT("One over the maximum size of a sprite particle."));
			MetaData->SetValue(NewProp_OrbitOffsetRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_OrbitOffsetBase, TEXT("ToolTip"), TEXT("Amount by which to offset particles when they are spawned."));
			MetaData->SetValue(NewProp_PointAttractorRadiusSq, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorRadiusSq, TEXT("ToolTip"), TEXT("Point attractor radius, squared."));
			MetaData->SetValue(NewProp_PointAttractorPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorPosition, TEXT("ToolTip"), TEXT("Point attractor position."));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_ConstantAcceleration, TEXT("ToolTip"), TEXT("Constant acceleration to apply to particles."));
			MetaData->SetValue(NewProp_Resilience, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Resilience, TEXT("ToolTip"), TEXT("Damping factor applied to particle collisions."));
			MetaData->SetValue(NewProp_PointAttractorStrength, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_PointAttractorStrength, TEXT("ToolTip"), TEXT("Point attractor strength over time."));
			MetaData->SetValue(NewProp_DragCoefficient, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_DragCoefficient, TEXT("ToolTip"), TEXT("Per-particle drag coefficient."));
			MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ToolTip"), TEXT("Per-particle vector field scale."));
			MetaData->SetValue(NewProp_LocalVectorField, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_LocalVectorField, TEXT("ToolTip"), TEXT("Local vector field info."));
			MetaData->SetValue(NewProp_SpawnModules, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnModules, TEXT("ToolTip"), TEXT("List of spawn modules that must be evaluated at runtime."));
			MetaData->SetValue(NewProp_SpawnPerUnitModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnPerUnitModule, TEXT("ToolTip"), TEXT("The spawn-per-unit module."));
			MetaData->SetValue(NewProp_SpawnModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_SpawnModule, TEXT("ToolTip"), TEXT("The spawn module. Needed for now, but should be divorced from the runtime."));
			MetaData->SetValue(NewProp_RequiredModule, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RequiredModule, TEXT("ToolTip"), TEXT("The required module. Needed for now, but should be divorced from the runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo_CRC() { return 2832649631U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("GPUSpriteLocalVectorFieldInfo"), sizeof(FGPUSpriteLocalVectorFieldInfo), Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GPUSpriteLocalVectorFieldInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGPUSpriteLocalVectorFieldInfo>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseFixDT, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bUseFixDT = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseFixDT"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseFixDT, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseFixDT, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileZ, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileZ, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileZ, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileY, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileY, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileY, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileX, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bTileX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTileX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileX, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bTileX, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo, uint8);
			UProperty* NewProp_bIgnoreComponentTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreComponentTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreComponentTransform, FGPUSpriteLocalVectorFieldInfo), sizeof(uint8), false);
			UProperty* NewProp_Tightness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Tightness, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000);
			UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Intensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Intensity, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000);
			UProperty* NewProp_RotationRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationRate, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_MaxInitialRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxInitialRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaxInitialRotation, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_MinInitialRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinInitialRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MinInitialRotation, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Transform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Transform, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Field = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Field"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Field, FGPUSpriteLocalVectorFieldInfo), 0x0010000000000000, Z_Construct_UClass_UVectorField_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Data needed for local vector fields."));
			MetaData->SetValue(NewProp_bUseFixDT, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bUseFixDT, TEXT("ToolTip"), TEXT("Use fix delta time in the simulation?"));
			MetaData->SetValue(NewProp_bTileZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileZ, TEXT("ToolTip"), TEXT("Tile vector field in z axis?"));
			MetaData->SetValue(NewProp_bTileY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileY, TEXT("ToolTip"), TEXT("Tile vector field in y axis?"));
			MetaData->SetValue(NewProp_bTileX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bTileX, TEXT("ToolTip"), TEXT("Tile vector field in x axis?"));
			MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ToolTip"), TEXT("Ignore Components Transform"));
			MetaData->SetValue(NewProp_Tightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Tightness, TEXT("ToolTip"), TEXT("Local vector field tightness."));
			MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("Local vector field intensity."));
			MetaData->SetValue(NewProp_RotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_RotationRate, TEXT("ToolTip"), TEXT("Local vector field rotation rate."));
			MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ToolTip"), TEXT("Maximum initial rotation."));
			MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ToolTip"), TEXT("Minimum initial rotation."));
			MetaData->SetValue(NewProp_Transform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Transform, TEXT("ToolTip"), TEXT("Local vector field transform."));
			MetaData->SetValue(NewProp_Field, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
			MetaData->SetValue(NewProp_Field, TEXT("ToolTip"), TEXT("Local vector field to apply to this emitter."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGPUSpriteLocalVectorFieldInfo_CRC() { return 3340877347U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu_NoRegister()
	{
		return UParticleModuleTypeDataGpu::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataGpu()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataGpu::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu, uint8);
				UProperty* NewProp_bClearExistingParticlesOnInit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClearExistingParticlesOnInit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bClearExistingParticlesOnInit, UParticleModuleTypeDataGpu), sizeof(uint8), false);
				UProperty* NewProp_CameraMotionBlurAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraMotionBlurAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraMotionBlurAmount, UParticleModuleTypeDataGpu), 0x0010000000000001);
				UProperty* NewProp_ResourceData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResourceData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ResourceData, UParticleModuleTypeDataGpu), 0x0010000000000000, Z_Construct_UScriptStruct_FGPUSpriteResourceData());
				UProperty* NewProp_EmitterInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EmitterInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EmitterInfo, UParticleModuleTypeDataGpu), 0x0010008000000000, Z_Construct_UScriptStruct_FGPUSpriteEmitterInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("GPU Sprites"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("Category"), TEXT("ParticleModuleTypeDataGpu"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_bClearExistingParticlesOnInit, TEXT("ToolTip"), TEXT("When true, all existing partilces are cleared when the emitter is initialized."));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("Category"), TEXT("ParticleModuleTypeDataGpu"));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_CameraMotionBlurAmount, TEXT("ToolTip"), TEXT("TEMP: How much to stretch sprites based on camera motion blur."));
				MetaData->SetValue(NewProp_ResourceData, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_ResourceData, TEXT("ToolTip"), TEXT("Data used to initialize runtime resources."));
				MetaData->SetValue(NewProp_EmitterInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataGpu.h"));
				MetaData->SetValue(NewProp_EmitterInfo, TEXT("ToolTip"), TEXT("Information for runtime simulation."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataGpu(Z_Construct_UClass_UParticleModuleTypeDataGpu, &UParticleModuleTypeDataGpu::StaticClass, TEXT("UParticleModuleTypeDataGpu"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataGpu);
	UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingOptions()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMeshCameraFacingOptions"), 0, Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshCameraFacingOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("XAxisFacing_NoUp")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("XAxisFacing_ZUp")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("XAxisFacing_NegativeZUp")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("XAxisFacing_YUp")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("XAxisFacing_NegativeYUp")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("LockedAxis_ZAxisFacing")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("LockedAxis_NegativeZAxisFacing")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("LockedAxis_YAxisFacing")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("LockedAxis_NegativeYAxisFacing")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VelocityAligned_ZAxisFacing")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VelocityAligned_NegativeZAxisFacing")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VelocityAligned_YAxisFacing")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VelocityAligned_NegativeYAxisFacing")), 12));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMeshCameraFacingOptions_MAX")), 13));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMeshCameraFacingOptions");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_NegativeYAxisFacing.DisplayName"), TEXT("Locked Axis : -Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_NegativeZAxisFacing.DisplayName"), TEXT("Locked Axis : -Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_YAxisFacing.DisplayName"), TEXT("Locked Axis : Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("LockedAxis_ZAxisFacing.DisplayName"), TEXT("Locked Axis : Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_NegativeYAxisFacing.DisplayName"), TEXT("Velocity Aligned : -Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_NegativeZAxisFacing.DisplayName"), TEXT("Velocity Aligned : -Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_YAxisFacing.DisplayName"), TEXT("Velocity Aligned : Y Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("VelocityAligned_ZAxisFacing.DisplayName"), TEXT("Velocity Aligned : Z Axis Facing"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NegativeYUp.DisplayName"), TEXT("X Axis Facing : -Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NegativeZUp.DisplayName"), TEXT("X Axis Facing : -Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_NoUp.DisplayName"), TEXT("X Axis Facing : No Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_YUp.DisplayName"), TEXT("X Axis Facing : Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("XAxisFacing_ZUp.DisplayName"), TEXT("X Axis Facing : Z Up"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingOptions_CRC() { return 3581901111U; }
	UEnum* Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMeshCameraFacingUpAxis"), 0, Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshCameraFacingUpAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_NoneUP")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_ZUp")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_NegativeZUp")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_YUp")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_NegativeYUp")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CameraFacing_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMeshCameraFacingUpAxis");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NegativeYUp.DisplayName"), TEXT("-Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NegativeZUp.DisplayName"), TEXT("-Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_NoneUP.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_YUp.DisplayName"), TEXT("Y Up"));
			MetaData->SetValue(ReturnEnum, TEXT("CameraFacing_ZUp.DisplayName"), TEXT("Z Up"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis_CRC() { return 2838492685U; }
	UEnum* Z_Construct_UEnum_Engine_EMeshScreenAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMeshScreenAlignment"), 0, Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshScreenAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSMA_MeshFaceCameraWithRoll")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSMA_MeshFaceCameraWithSpin")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSMA_MeshFaceCameraWithLockedAxis")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PSMA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMeshScreenAlignment");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithLockedAxis.DisplayName"), TEXT("Face Camera With Locked-Axis"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithRoll.DisplayName"), TEXT("Face Camera With Roll"));
			MetaData->SetValue(ReturnEnum, TEXT("PSMA_MeshFaceCameraWithSpin.DisplayName"), TEXT("Face Camera With Spin"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMeshScreenAlignment_CRC() { return 657889395U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh_NoRegister()
	{
		return UParticleModuleTypeDataMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bCollisionsConsiderPartilceSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollisionsConsiderPartilceSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCollisionsConsiderPartilceSize, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bFaceCameraDirectionRatherThanPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFaceCameraDirectionRatherThanPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bFaceCameraDirectionRatherThanPosition, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bApplyParticleRotationAsSpin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyParticleRotationAsSpin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyParticleRotationAsSpin, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_CameraFacingOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraFacingOption"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CameraFacingOption, UParticleModuleTypeDataMesh), 0x0010000000000001, Z_Construct_UEnum_Engine_EMeshCameraFacingOptions());
				UProperty* NewProp_CameraFacingUpAxisOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraFacingUpAxisOption"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CameraFacingUpAxisOption_DEPRECATED, UParticleModuleTypeDataMesh), 0x0010000020000000, Z_Construct_UEnum_Engine_EMeshCameraFacingUpAxis());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCameraFacing, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bCameraFacing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCameraFacing"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCameraFacing, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCameraFacing, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_AxisLockOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AxisLockOption"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AxisLockOption, UParticleModuleTypeDataMesh), 0x0010000000000001, Z_Construct_UEnum_Engine_EParticleAxisLock());
				UProperty* NewProp_RollPitchYawRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollPitchYawRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RollPitchYawRange, UParticleModuleTypeDataMesh), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
				UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Yaw"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Yaw_DEPRECATED, UParticleModuleTypeDataMesh), 0x0010000020000000);
				UProperty* NewProp_Roll = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roll"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Roll_DEPRECATED, UParticleModuleTypeDataMesh), 0x0010000020000000);
				UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch_DEPRECATED, UParticleModuleTypeDataMesh), 0x0010000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableMotionBlur, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bEnableMotionBlur = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableMotionBlur"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableMotionBlur, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableMotionBlur, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideDefaultMotionBlurSettings, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bOverrideDefaultMotionBlurSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideDefaultMotionBlurSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideDefaultMotionBlurSettings, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideDefaultMotionBlurSettings, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideMaterial, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_bOverrideMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideMaterial, UParticleModuleTypeDataMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideMaterial, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_MeshAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshAlignment"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MeshAlignment, UParticleModuleTypeDataMesh), 0x0010000000000001, Z_Construct_UEnum_Engine_EMeshScreenAlignment());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DoCollisions, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_DoCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DoCollisions"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DoCollisions, UParticleModuleTypeDataMesh), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(DoCollisions, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CastShadows, UParticleModuleTypeDataMesh, uint8);
				UProperty* NewProp_CastShadows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CastShadows"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CastShadows, UParticleModuleTypeDataMesh), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(CastShadows, UParticleModuleTypeDataMesh), sizeof(uint8), false);
				UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, UParticleModuleTypeDataMesh), 0x0010000000000001, Z_Construct_UClass_UStaticMesh_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mesh Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCollisionsConsiderPartilceSize, TEXT("ToolTip"), TEXT("If true, all collisions for mesh particle on this emitter will take the particle size into account.\nIf false, particle size will be ignored in collision checks."));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bFaceCameraDirectionRatherThanPosition, TEXT("ToolTip"), TEXT("If true, all camera facing options will point the mesh against the camera's view direction rather than pointing at the cameras location.\nIf false, the camera facing will point to the cameras position as normal."));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bApplyParticleRotationAsSpin, TEXT("ToolTip"), TEXT("If true, apply 'sprite' particle rotation about the orientation axis (direction mesh is pointing).\nIf false, apply 'sprite' particle rotation about the camera facing axis."));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CameraFacingOption, TEXT("ToolTip"), TEXT("The camera facing option to use:\nAll camera facing options without locked axis assume X-axis will be facing the camera.\n        XAxisFacing_NoUp                                - X-axis camera facing, no attempt to face an axis up or down.\n        XAxisFacing_ZUp                                 - X-axis camera facing, Z-axis of the mesh should attempt to point up.\n        XAxisFacing_NegativeZUp                 - X-axis camera facing, Z-axis of the mesh should attempt to point down.\n        XAxisFacing_YUp                                 - X-axis camera facing, Y-axis of the mesh should attempt to point up.\n        XAxisFacing_NegativeYUp                 - X-axis camera facing, Y-axis of the mesh should attempt to point down.\nAll axis-locked camera facing options assume the AxisLockOption is set. EPAL_NONE will be treated as EPAL_X.\n        LockedAxis_ZAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face towards camera.\n        LockedAxis_NegativeZAxisFacing  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face away from camera.\n        LockedAxis_YAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face towards camera.\n        LockedAxis_NegativeYAxisFacing  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face away from camera.\nAll velocity-aligned options do NOT require the ScreenAlignment be set to PSA_Velocity.\nDoing so will result in additional work being performed... (it will orient the mesh twice).\n        VelocityAligned_ZAxisFacing         - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face towards camera.\n        VelocityAligned_NegativeZAxisFacing - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face away from camera.\n        VelocityAligned_YAxisFacing         - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face towards camera.\n        VelocityAligned_NegativeYAxisFacing - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face away from camera."));
				MetaData->SetValue(NewProp_CameraFacingUpAxisOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CameraFacingUpAxisOption, TEXT("ToolTip"), TEXT("The axis of the mesh to point up when camera facing the X-axis.\n        CameraFacing_NoneUP                     No attempt to face an axis up or down.\n        CameraFacing_ZUp                        Z-axis of the mesh should attempt to point up.\n        CameraFacing_NegativeZUp        Z-axis of the mesh should attempt to point down.\n        CameraFacing_YUp                        Y-axis of the mesh should attempt to point up.\n        CameraFacing_NegativeYUp        Y-axis of the mesh should attempt to point down."));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("Category"), TEXT("CameraFacing"));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bCameraFacing, TEXT("ToolTip"), TEXT("If true, then point the X-axis of the mesh towards the camera.\nWhen set, AxisLockOption as well as all other locked axis/screen alignment settings are ignored."));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_AxisLockOption, TEXT("ToolTip"), TEXT("The axis to lock the mesh on. This overrides TypeSpecific mesh alignment as well as the LockAxis module.\n        EPAL_NONE                -      No locking to an axis.\n        EPAL_X                   -      Lock the mesh X-axis facing towards +X.\n        EPAL_Y                   -      Lock the mesh X-axis facing towards +Y.\n        EPAL_Z                   -      Lock the mesh X-axis facing towards +Z.\n        EPAL_NEGATIVE_X  -      Lock the mesh X-axis facing towards -X.\n        EPAL_NEGATIVE_Y  -      Lock the mesh X-axis facing towards -Y.\n        EPAL_NEGATIVE_Z  -      Lock the mesh X-axis facing towards -Z.\n        EPAL_ROTATE_X    -      Ignored for mesh emitters. Treated as EPAL_NONE.\n        EPAL_ROTATE_Y    -      Ignored for mesh emitters. Treated as EPAL_NONE.\n        EPAL_ROTATE_Z    -      Ignored for mesh emitters. Treated as EPAL_NONE."));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("Category"), TEXT("Orientation"));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_RollPitchYawRange, TEXT("ToolTip"), TEXT("The 'pre' rotation pitch (in degrees) to apply to the static mesh used."));
				MetaData->SetValue(NewProp_Yaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Roll, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("deprecated properties for initial orientation"));
				MetaData->SetValue(NewProp_bEnableMotionBlur, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bEnableMotionBlur, TEXT("EditCondition"), TEXT("bOverrideDefaultMotionBlurSettings"));
				MetaData->SetValue(NewProp_bEnableMotionBlur, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bOverrideDefaultMotionBlurSettings, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bOverrideDefaultMotionBlurSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_bOverrideMaterial, TEXT("ToolTip"), TEXT("If true, use the emitter material when rendering rather than the one applied\nto the static mesh model."));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_MeshAlignment, TEXT("ToolTip"), TEXT("The alignment to use on the meshes emitted.\nThe RequiredModule->ScreenAlignment MUST be set to PSA_TypeSpecific to use.\nOne of the following:\nPSMA_MeshFaceCameraWithRoll\n        Face the camera allowing for rotation around the mesh-to-camera FVector\n        (amount provided by the standard particle sprite rotation).\nPSMA_MeshFaceCameraWithSpin\n        Face the camera allowing for the mesh to rotate about the tangential axis.\nPSMA_MeshFaceCameraWithLockedAxis\n        Face the camera while maintaining the up FVector as the locked direction."));
				MetaData->SetValue(NewProp_DoCollisions, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_DoCollisions, TEXT("ToolTip"), TEXT("UNUSED (the collision module dictates doing collisions)"));
				MetaData->SetValue(NewProp_CastShadows, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_CastShadows, TEXT("ToolTip"), TEXT("If true, has the meshes cast shadows"));
				MetaData->SetValue(NewProp_Mesh, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataMesh.h"));
				MetaData->SetValue(NewProp_Mesh, TEXT("ToolTip"), TEXT("The static mesh to render at the particle positions"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataMesh(Z_Construct_UClass_UParticleModuleTypeDataMesh, &UParticleModuleTypeDataMesh::StaticClass, TEXT("UParticleModuleTypeDataMesh"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataMesh);
	UEnum* Z_Construct_UEnum_Engine_ETrailsRenderAxisOption()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETrailsRenderAxisOption"), 0, Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETrailsRenderAxisOption"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("Trails_CameraUp")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("Trails_SourceUp")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("Trails_WorldUp")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("Trails_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETrailsRenderAxisOption");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_CameraUp.DisplayName"), TEXT("Camera Up"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_SourceUp.DisplayName"), TEXT("Source Up"));
			MetaData->SetValue(ReturnEnum, TEXT("Trails_WorldUp.DisplayName"), TEXT("World Up"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETrailsRenderAxisOption_CRC() { return 2062824181U; }
	UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon_NoRegister()
	{
		return UParticleModuleTypeDataRibbon::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleTypeDataRibbon()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleTypeDataBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleTypeDataRibbon::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TangentTessellationScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentTessellationScalar"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TangentTessellationScalar, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bEnableTangentDiffInterpScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableTangentDiffInterpScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableTangentDiffInterpScale, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_DistanceTessellationStepSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceTessellationStepSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceTessellationStepSize, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				UProperty* NewProp_TilingDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilingDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TilingDistance, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTessellation, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderTessellation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTessellation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTessellation, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderTessellation, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderTangents, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderTangents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderTangents"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderTangents, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderTangents, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderSpawnPoints, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderSpawnPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderSpawnPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderSpawnPoints, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderSpawnPoints, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRenderGeometry, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bRenderGeometry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRenderGeometry"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRenderGeometry, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRenderGeometry, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_TangentSpawningScalar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TangentSpawningScalar"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TangentSpawningScalar, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				UProperty* NewProp_RenderAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RenderAxis, UParticleModuleTypeDataRibbon), 0x0010000000000001, Z_Construct_UEnum_Engine_ETrailsRenderAxisOption());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSpawnInitialParticle, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bSpawnInitialParticle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSpawnInitialParticle"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSpawnInitialParticle, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSpawnInitialParticle, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bTangentRecalculationEveryFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTangentRecalculationEveryFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTangentRecalculationEveryFrame, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bEnablePreviousTangentRecalculation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePreviousTangentRecalculation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnablePreviousTangentRecalculation, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bClipSourceSegement, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bClipSourceSegement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bClipSourceSegement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bClipSourceSegement, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bClipSourceSegement, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bDeadTrailsOnSourceLoss = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnSourceLoss"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnSourceLoss, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon, uint8);
				UProperty* NewProp_bDeadTrailsOnDeactivate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDeadTrailsOnDeactivate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDeadTrailsOnDeactivate, UParticleModuleTypeDataRibbon), sizeof(uint8), false);
				UProperty* NewProp_MaxParticleInTrailCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxParticleInTrailCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxParticleInTrailCount, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				UProperty* NewProp_MaxTrailCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTrailCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxTrailCount, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				UProperty* NewProp_SheetsPerTrail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SheetsPerTrail"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SheetsPerTrail, UParticleModuleTypeDataRibbon), 0x0010000000000001);
				UProperty* NewProp_MaxTessellationBetweenParticles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTessellationBetweenParticles"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxTessellationBetweenParticles, UParticleModuleTypeDataRibbon), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Ribbon Data"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentTessellationScalar, TEXT("ToolTip"), TEXT("The tangent scalar for tessellation.\nAngles between tangent A and B are mapped to [0.0f .. 1.0f]\nThis is then multiplied by TangentTessellationScalar to give the number of points to tessellate"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bEnableTangentDiffInterpScale, TEXT("ToolTip"), TEXT("If this flag is enabled, the system will scale the number of interpolated vertices\nbased on the difference in the tangents of neighboring particles.\nEach pair of neighboring particles will compute the following CheckTangent value:\n        CheckTangent = ((ParticleA Tangent DOT ParticleB Tangent) - 1.0f) * 0.5f\nIf CheckTangent is LESS THAN 0.5, then the DistanceTessellationStepSize will be\nscaled based on the result. This will map so that from parallel to orthogonal\n(0..90 degrees) will scale from [0..1]. Anything greater than 90 degrees will clamp\nat a scale of 1."));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_DistanceTessellationStepSize, TEXT("ToolTip"), TEXT("The distance step size for tessellation.\n# Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize))"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TilingDistance, TEXT("ToolTip"), TEXT("The (estimated) covered distance to tile the 2nd UV set at.\nIf 0.0, a second UV set will not be passed in."));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderTessellation, TEXT("ToolTip"), TEXT("If true, render the tessellated path between spawned particles"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderTangents, TEXT("ToolTip"), TEXT("If true, render a line showing the tangent at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderSpawnPoints, TEXT("ToolTip"), TEXT("If true, render stars at each spawned particle point along the trail"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bRenderGeometry, TEXT("ToolTip"), TEXT("If true, render the trail geometry (this should typically be on)"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("Category"), TEXT("Spawn"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_TangentSpawningScalar, TEXT("ToolTip"), TEXT("The tangent scalar for spawning.\nAngles between tangent A and B are mapped to [0.0f .. 1.0f]\nThis is then multiplied by TangentTessellationScalar to give the number of particles to spawn"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_RenderAxis, TEXT("ToolTip"), TEXT("The 'render' axis for the trail (what axis the trail is stretched out on)\n        Trails_CameraUp - Traditional camera-facing trail.\n        Trails_SourceUp - Use the up axis of the source for each spawned particle.\n        Trails_WorldUp  - Use the world up axis."));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bSpawnInitialParticle, TEXT("ToolTip"), TEXT("If true, ribbon will spawn a particle when it first starts moving"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bTangentRecalculationEveryFrame, TEXT("ToolTip"), TEXT("If true, recalculate tangents every frame to allow velocity/acceleration to be applied"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bEnablePreviousTangentRecalculation, TEXT("ToolTip"), TEXT("If true, recalculate the previous tangent when a new particle is spawned"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bClipSourceSegement, TEXT("ToolTip"), TEXT("If true, do not join the trail to the source position"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnSourceLoss, TEXT("ToolTip"), TEXT("If true, when the source of a trail is 'lost' (ie, the source particle\ndies), mark the current trail as dead."));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_bDeadTrailsOnDeactivate, TEXT("ToolTip"), TEXT("If true, when the system is deactivated, mark trails as dead.\nThis means they will still render, but will not have more particles\nadded to them, even if the system re-activates..."));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxParticleInTrailCount, TEXT("ToolTip"), TEXT("Max particles per trail"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxTrailCount, TEXT("ToolTip"), TEXT("The number of live trails"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("Category"), TEXT("Trail"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_SheetsPerTrail, TEXT("ToolTip"), TEXT("The number of sheets to render for the trail."));
				MetaData->SetValue(NewProp_MaxTessellationBetweenParticles, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/TypeData/ParticleModuleTypeDataRibbon.h"));
				MetaData->SetValue(NewProp_MaxTessellationBetweenParticles, TEXT("ToolTip"), TEXT("The maximum amount to tessellate between two particles of the trail.\nDepending on the distance between the particles and the tangent change, the\nsystem will select a number of tessellation points\n        [0..MaxTessellationBetweenParticles]"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleTypeDataRibbon(Z_Construct_UClass_UParticleModuleTypeDataRibbon, &UParticleModuleTypeDataRibbon::StaticClass, TEXT("UParticleModuleTypeDataRibbon"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleTypeDataRibbon);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase_NoRegister()
	{
		return UParticleModuleVectorFieldBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Field"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldBase(Z_Construct_UClass_UParticleModuleVectorFieldBase, &UParticleModuleVectorFieldBase::StaticClass, TEXT("UParticleModuleVectorFieldBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldBase);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal_NoRegister()
	{
		return UParticleModuleVectorFieldGlobal::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldGlobal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldGlobal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), 0x0010000000000001);
				UProperty* NewProp_GlobalVectorFieldScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlobalVectorFieldScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlobalVectorFieldScale, UParticleModuleVectorFieldGlobal), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal, uint8);
				UProperty* NewProp_bOverrideGlobalVectorFieldTightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideGlobalVectorFieldTightness"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideGlobalVectorFieldTightness, UParticleModuleVectorFieldGlobal), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Global Vector Fields"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("editcondition"), TEXT("bOverrideGlobalVectorFieldTightness"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Global vector field tightness override."));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldTightness, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_GlobalVectorFieldScale, TEXT("ToolTip"), TEXT("Global vector field scale."));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("InlineEditConditionToggle"), TEXT(""));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldGlobal.h"));
				MetaData->SetValue(NewProp_bOverrideGlobalVectorFieldTightness, TEXT("ToolTip"), TEXT("Property override value for global vector field tightness."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldGlobal(Z_Construct_UClass_UParticleModuleVectorFieldGlobal, &UParticleModuleVectorFieldGlobal::StaticClass, TEXT("UParticleModuleVectorFieldGlobal"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldGlobal);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal_NoRegister()
	{
		return UParticleModuleVectorFieldLocal::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldLocal()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldLocal::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseFixDT, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bUseFixDT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseFixDT"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseFixDT, UParticleModuleVectorFieldLocal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseFixDT, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileZ, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileZ, UParticleModuleVectorFieldLocal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileZ, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileY, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileY, UParticleModuleVectorFieldLocal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileY, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTileX, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bTileX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTileX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTileX, UParticleModuleVectorFieldLocal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bTileX, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal, uint8);
				UProperty* NewProp_bIgnoreComponentTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreComponentTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreComponentTransform, UParticleModuleVectorFieldLocal), sizeof(uint8), false);
				UProperty* NewProp_Tightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Tightness, UParticleModuleVectorFieldLocal), 0x0010000000000001);
				UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Intensity, UParticleModuleVectorFieldLocal), 0x0010000000000001);
				UProperty* NewProp_RelativeScale3D = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale3D"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeScale3D, UParticleModuleVectorFieldLocal), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, UParticleModuleVectorFieldLocal), 0x0010000000000001, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeTranslation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeTranslation, UParticleModuleVectorFieldLocal), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_VectorField = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorField"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VectorField, UParticleModuleVectorFieldLocal), 0x0010000000000001, Z_Construct_UClass_UVectorField_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Local Vector Field"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bUseFixDT, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bUseFixDT, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bUseFixDT, TEXT("ToolTip"), TEXT("Use fix delta time in the simulation?"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileZ, TEXT("ToolTip"), TEXT("Tile vector field in z axis?"));
				MetaData->SetValue(NewProp_bTileY, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileY, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileY, TEXT("ToolTip"), TEXT("Tile vector field in y axis?"));
				MetaData->SetValue(NewProp_bTileX, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bTileX, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bTileX, TEXT("ToolTip"), TEXT("Tile vector field in x axis?"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_bIgnoreComponentTransform, TEXT("ToolTip"), TEXT("Ignore component transform."));
				MetaData->SetValue(NewProp_Tightness, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Tightness, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_Tightness, TEXT("ToolTip"), TEXT("Tightness tweak value: 0: Force 1: Velocity."));
				MetaData->SetValue(NewProp_Intensity, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("Intensity of the local vector field."));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeScale3D, TEXT("ToolTip"), TEXT("Scale of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ToolTip"), TEXT("Rotation of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_RelativeTranslation, TEXT("ToolTip"), TEXT("Translation of the vector field relative to the emitter."));
				MetaData->SetValue(NewProp_VectorField, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorField, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldLocal.h"));
				MetaData->SetValue(NewProp_VectorField, TEXT("ToolTip"), TEXT("Vector field asset to use."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldLocal(Z_Construct_UClass_UParticleModuleVectorFieldLocal, &UParticleModuleVectorFieldLocal::StaticClass, TEXT("UParticleModuleVectorFieldLocal"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldLocal);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation_NoRegister()
	{
		return UParticleModuleVectorFieldRotation::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldRotation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxInitialRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInitialRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MaxInitialRotation, UParticleModuleVectorFieldRotation), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_MinInitialRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinInitialRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MinInitialRotation, UParticleModuleVectorFieldRotation), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Init Rotation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MaxInitialRotation, TEXT("ToolTip"), TEXT("Maximum initial rotation applied to the local vector field."));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotation.h"));
				MetaData->SetValue(NewProp_MinInitialRotation, TEXT("ToolTip"), TEXT("Minimum initial rotation applied to the local vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldRotation(Z_Construct_UClass_UParticleModuleVectorFieldRotation, &UParticleModuleVectorFieldRotation::StaticClass, TEXT("UParticleModuleVectorFieldRotation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldRotation);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate_NoRegister()
	{
		return UParticleModuleVectorFieldRotationRate::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldRotationRate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldRotationRate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationRate"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RotationRate, UParticleModuleVectorFieldRotationRate), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Rotation Rate"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldRotationRate.h"));
				MetaData->SetValue(NewProp_RotationRate, TEXT("ToolTip"), TEXT("Constant rotation rate applied to the local vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldRotationRate(Z_Construct_UClass_UParticleModuleVectorFieldRotationRate, &UParticleModuleVectorFieldRotationRate::StaticClass, TEXT("UParticleModuleVectorFieldRotationRate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldRotationRate);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale_NoRegister()
	{
		return UParticleModuleVectorFieldScale::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScale()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldScale::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorFieldScaleRaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScaleRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorFieldScaleRaw, UParticleModuleVectorFieldScale), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_VectorFieldScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScale"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VectorFieldScale_DEPRECATED, UParticleModuleVectorFieldScale), 0x0010000020080008, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Vector Field Scale"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleRaw, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorFieldScaleRaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleRaw, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using emitter time."));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScale.h"));
				MetaData->SetValue(NewProp_VectorFieldScale, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using emitter time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldScale(Z_Construct_UClass_UParticleModuleVectorFieldScale, &UParticleModuleVectorFieldScale::StaticClass, TEXT("UParticleModuleVectorFieldScale"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldScale);
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife_NoRegister()
	{
		return UParticleModuleVectorFieldScaleOverLife::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVectorFieldBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVectorFieldScaleOverLife::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VectorFieldScaleOverLifeRaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScaleOverLifeRaw"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VectorFieldScaleOverLifeRaw, UParticleModuleVectorFieldScaleOverLife), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_VectorFieldScaleOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorFieldScaleOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VectorFieldScaleOverLife_DEPRECATED, UParticleModuleVectorFieldScaleOverLife), 0x0010000020080008, Z_Construct_UClass_UDistributionFloat_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("VF Scale/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLifeRaw, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLifeRaw, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLifeRaw, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using particle relative time."));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/VectorField/ParticleModuleVectorFieldScaleOverLife.h"));
				MetaData->SetValue(NewProp_VectorFieldScaleOverLife, TEXT("ToolTip"), TEXT("Per-particle vector field scale. Evaluated using particle relative time."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVectorFieldScaleOverLife(Z_Construct_UClass_UParticleModuleVectorFieldScaleOverLife, &UParticleModuleVectorFieldScaleOverLife::StaticClass, TEXT("UParticleModuleVectorFieldScaleOverLife"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVectorFieldScaleOverLife);
	UClass* Z_Construct_UClass_UParticleModuleVelocityBase_NoRegister()
	{
		return UParticleModuleVelocityBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModule();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocityBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyOwnerScale, UParticleModuleVelocityBase, uint8);
				UProperty* NewProp_bApplyOwnerScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyOwnerScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyOwnerScale, UParticleModuleVelocityBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyOwnerScale, UParticleModuleVelocityBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInWorldSpace, UParticleModuleVelocityBase, uint8);
				UProperty* NewProp_bInWorldSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInWorldSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInWorldSpace, UParticleModuleVelocityBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInWorldSpace, UParticleModuleVelocityBase), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bApplyOwnerScale, TEXT("ToolTip"), TEXT("If true, then apply the particle system components scale to the velocity value."));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityBase.h"));
				MetaData->SetValue(NewProp_bInWorldSpace, TEXT("ToolTip"), TEXT("If true, then treat the velocity as world-space defined.\nNOTE: LocalSpace emitters that are moving will see strange results..."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityBase(Z_Construct_UClass_UParticleModuleVelocityBase, &UParticleModuleVelocityBase::StaticClass, TEXT("UParticleModuleVelocityBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityBase);
	UClass* Z_Construct_UClass_UParticleModuleVelocity_NoRegister()
	{
		return UParticleModuleVelocity::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocity()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocity::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartVelocityRadial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartVelocityRadial"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartVelocityRadial, UParticleModuleVelocity), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_StartVelocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartVelocity, UParticleModuleVelocity), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocityRadial, TEXT("ToolTip"), TEXT("The velocity to apply to a particle along its radial direction.\nDirection is determined by subtracting the location of the emitter from the particle location at spawn.\nValue is retrieved using the EmitterTime of the emitter."));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity.h"));
				MetaData->SetValue(NewProp_StartVelocity, TEXT("ToolTip"), TEXT("The velocity to apply to a particle when it is spawned.\nValue is retrieved using the EmitterTime of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocity(Z_Construct_UClass_UParticleModuleVelocity, &UParticleModuleVelocity::StaticClass, TEXT("UParticleModuleVelocity"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocity);
	UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded_NoRegister()
	{
		return UParticleModuleVelocity_Seeded::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocity_Seeded()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocity();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocity_Seeded::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20801080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RandomSeedInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RandomSeedInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RandomSeedInfo, UParticleModuleVelocity_Seeded), 0x0010000000000001, Z_Construct_UScriptStruct_FParticleRandomSeedInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Initial Velocity (Seed)"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("Category"), TEXT("RandomSeed"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocity_Seeded.h"));
				MetaData->SetValue(NewProp_RandomSeedInfo, TEXT("ToolTip"), TEXT("The random seed(s) to use for looking up values in StartLocation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocity_Seeded(Z_Construct_UClass_UParticleModuleVelocity_Seeded, &UParticleModuleVelocity_Seeded::StaticClass, TEXT("UParticleModuleVelocity_Seeded"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocity_Seeded);
	UClass* Z_Construct_UClass_UParticleModuleVelocityCone_NoRegister()
	{
		return UParticleModuleVelocityCone::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityCone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocityCone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Direction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Direction"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Direction, UParticleModuleVelocityCone), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Velocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Velocity, UParticleModuleVelocityCone), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
				UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Angle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Angle, UParticleModuleVelocityCone), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionFloat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity Cone"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Direction, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Direction, TEXT("ToolTip"), TEXT("The direction FVector of the cone."));
				MetaData->SetValue(NewProp_Velocity, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Velocity, TEXT("ToolTip"), TEXT("The initial velocity of the particles."));
				MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("Cone"));
				MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityCone.h"));
				MetaData->SetValue(NewProp_Angle, TEXT("ToolTip"), TEXT("The Min value represents the inner cone angle value and the Max value represents the outer cone angle value."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityCone(Z_Construct_UClass_UParticleModuleVelocityCone, &UParticleModuleVelocityCone::StaticClass, TEXT("UParticleModuleVelocityCone"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityCone);
	UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent_NoRegister()
	{
		return UParticleModuleVelocityInheritParent::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityInheritParent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocityInheritParent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Scale, UParticleModuleVelocityInheritParent), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Inherit Parent Velocity"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityInheritParent.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("The scale to apply tot he parent velocity prior to adding it to the particle velocity during spawn.\nValue is retrieved using the EmitterTime of the emitter."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityInheritParent(Z_Construct_UClass_UParticleModuleVelocityInheritParent, &UParticleModuleVelocityInheritParent::StaticClass, TEXT("UParticleModuleVelocityInheritParent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityInheritParent);
	UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime_NoRegister()
	{
		return UParticleModuleVelocityOverLifetime::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleVelocityOverLifetime()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UParticleModuleVelocityBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleVelocityOverLifetime::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Absolute, UParticleModuleVelocityOverLifetime, uint8);
				UProperty* NewProp_Absolute = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Absolute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Absolute, UParticleModuleVelocityOverLifetime), 0x0010000000000009, CPP_BOOL_PROPERTY_BITMASK(Absolute, UParticleModuleVelocityOverLifetime), sizeof(uint8), false);
				UProperty* NewProp_VelOverLife = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VelOverLife"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VelOverLife, UParticleModuleVelocityOverLifetime), 0x0010008000000001, Z_Construct_UScriptStruct_FRawDistributionVector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Velocity/Life"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_Absolute, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_Absolute, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_Absolute, TEXT("ToolTip"), TEXT("If true, the velocity will be SET to the value from the above dist.\nIf false, the velocity will be scaled by the above dist."));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("Category"), TEXT("Velocity"));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Velocity/ParticleModuleVelocityOverLifetime.h"));
				MetaData->SetValue(NewProp_VelOverLife, TEXT("ToolTip"), TEXT("The scaling  value applied to the velocity.\nValue is retrieved using the RelativeTime of the particle."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleVelocityOverLifetime(Z_Construct_UClass_UParticleModuleVelocityOverLifetime, &UParticleModuleVelocityOverLifetime::StaticClass, TEXT("UParticleModuleVelocityOverLifetime"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleVelocityOverLifetime);
	UClass* Z_Construct_UClass_UParticleModuleEventSendToGame_NoRegister()
	{
		return UParticleModuleEventSendToGame::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleModuleEventSendToGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleModuleEventSendToGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/Event/ParticleModuleEventSendToGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/Event/ParticleModuleEventSendToGame.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleModuleEventSendToGame(Z_Construct_UClass_UParticleModuleEventSendToGame, &UParticleModuleEventSendToGame::StaticClass, TEXT("UParticleModuleEventSendToGame"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleModuleEventSendToGame);
	UScriptStruct* Z_Construct_UScriptStruct_FParticleSystemReplayFrame()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleSystemReplayFrame"), sizeof(FParticleSystemReplayFrame), Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleSystemReplayFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleSystemReplayFrame>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A single frame within this replay"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleSystemReplayFrame_CRC() { return 568445279U; }
	UScriptStruct* Z_Construct_UScriptStruct_FParticleEmitterReplayFrame()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ParticleEmitterReplayFrame"), sizeof(FParticleEmitterReplayFrame), Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParticleEmitterReplayFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FParticleEmitterReplayFrame>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FParticleEmitterReplayFrame_CRC() { return 3600635889U; }
	UClass* Z_Construct_UClass_UParticleSystemReplay_NoRegister()
	{
		return UParticleSystemReplay::StaticClass();
	}
	UClass* Z_Construct_UClass_UParticleSystemReplay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UParticleSystemReplay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ClipIDNumber = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClipIDNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ClipIDNumber, UParticleSystemReplay), 0x0010000000202001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("ParticleSystemReplay"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("Category"), TEXT("ParticleSystemReplay"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ModuleRelativePath"), TEXT("Classes/Particles/ParticleSystemReplay.h"));
				MetaData->SetValue(NewProp_ClipIDNumber, TEXT("ToolTip"), TEXT("Unique ID number for this replay clip"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParticleSystemReplay(Z_Construct_UClass_UParticleSystemReplay, &UParticleSystemReplay::StaticClass, TEXT("UParticleSystemReplay"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParticleSystemReplay);
	UClass* Z_Construct_UClass_UDemoPendingNetGame_NoRegister()
	{
		return UDemoPendingNetGame::StaticClass();
	}
	UClass* Z_Construct_UClass_UDemoPendingNetGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPendingNetGame();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDemoPendingNetGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DemoPendingNetGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DemoPendingNetGame.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDemoPendingNetGame(Z_Construct_UClass_UDemoPendingNetGame, &UDemoPendingNetGame::StaticClass, TEXT("UDemoPendingNetGame"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDemoPendingNetGame);
	UScriptStruct* Z_Construct_UScriptStruct_FTireFrictionScalePair()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TireFrictionScalePair"), sizeof(FTireFrictionScalePair), Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TireFrictionScalePair"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTireFrictionScalePair>, EStructFlags(0x00000001));
			UProperty* NewProp_FrictionScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrictionScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrictionScale, FTireFrictionScalePair), 0x0010000000000000);
			UProperty* NewProp_TireType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TireType"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TireType, FTireFrictionScalePair), 0x0010000000000000, Z_Construct_UClass_UTireType_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("DEPRECATED Pairs desired tire friction scale with tire type"));
			MetaData->SetValue(NewProp_FrictionScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(NewProp_FrictionScale, TEXT("ToolTip"), TEXT("Friction scale for this type of tire"));
			MetaData->SetValue(NewProp_TireType, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
			MetaData->SetValue(NewProp_TireType, TEXT("ToolTip"), TEXT("Tire type"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTireFrictionScalePair_CRC() { return 639950855U; }
	UClass* Z_Construct_UClass_UPhysicalMaterial_NoRegister()
	{
		return UPhysicalMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicalMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPhysicalMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20102080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TireFrictionScales = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TireFrictionScales"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TireFrictionScales, UPhysicalMaterial), 0x0010000000020001);
				UProperty* NewProp_TireFrictionScales_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TireFrictionScales, TEXT("TireFrictionScales"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FTireFrictionScalePair());
				UProperty* NewProp_TireFrictionScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TireFrictionScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TireFrictionScale, UPhysicalMaterial), 0x0010000000020001);
				UProperty* NewProp_SurfaceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SurfaceType, UPhysicalMaterial), 0x0010000000000015, Z_Construct_UEnum_Engine_EPhysicalSurface());
				UProperty* NewProp_PhysicalMaterialProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PhysicalMaterialProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PhysicalMaterialProperty, UPhysicalMaterial), 0x0010000000000000, Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister());
				UProperty* NewProp_DestructibleDamageThresholdScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DestructibleDamageThresholdScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DestructibleDamageThresholdScale, UPhysicalMaterial), 0x0010000000000015);
				UProperty* NewProp_RaiseMassToPower = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RaiseMassToPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RaiseMassToPower, UPhysicalMaterial), 0x0010000000000015);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Density, UPhysicalMaterial), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideRestitutionCombineMode, UPhysicalMaterial, bool);
				UProperty* NewProp_bOverrideRestitutionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideRestitutionCombineMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideRestitutionCombineMode, UPhysicalMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideRestitutionCombineMode, UPhysicalMaterial), sizeof(bool), true);
				UProperty* NewProp_RestitutionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RestitutionCombineMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RestitutionCombineMode, UPhysicalMaterial), 0x0010000000000015, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_Restitution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Restitution"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Restitution, UPhysicalMaterial), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideFrictionCombineMode, UPhysicalMaterial, bool);
				UProperty* NewProp_bOverrideFrictionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideFrictionCombineMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideFrictionCombineMode, UPhysicalMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideFrictionCombineMode, UPhysicalMaterial), sizeof(bool), true);
				UProperty* NewProp_FrictionCombineMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrictionCombineMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FrictionCombineMode, UPhysicalMaterial), 0x0010000000000015, Z_Construct_UEnum_Engine_EFrictionCombineMode());
				UProperty* NewProp_Friction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Friction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Friction, UPhysicalMaterial), 0x0010000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Physical materials are used to define the response of a physical object when interacting dynamically with the world."));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_TireFrictionScales, TEXT("ToolTip"), TEXT("DEPRECATED - Tire friction scales for specific types of tires. These values are multiplied against our parents' values."));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("Category"), TEXT("Deprecated"));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_TireFrictionScale, TEXT("ToolTip"), TEXT("DEPRECATED - Overall tire friction scalar for every type of tire. This value is multiplied against our parents' values."));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("Category"), TEXT("PhysicalProperties"));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_SurfaceType, TEXT("ToolTip"), TEXT("To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section"));
				MetaData->SetValue(NewProp_PhysicalMaterialProperty, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_PhysicalMaterialProperty, TEXT("ToolTip"), TEXT("deprecated"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("Category"), TEXT("Destruction"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_DestructibleDamageThresholdScale, TEXT("ToolTip"), TEXT("How much to scale the damage threshold by on any destructible we are applied to"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ClampMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_RaiseMassToPower, TEXT("ToolTip"), TEXT("Used to adjust the way that mass increases as objects get larger. This is applied to the mass as calculated based on a 'solid' object.\nIn actuality, larger objects do not tend to be solid, and become more like 'shells' (e.g. a car is not a solid piece of metal).\nValues are clamped to 1 or less."));
				MetaData->SetValue(NewProp_Density, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Used with the shape of the object to calculate its mass properties. The higher the number, the heavier the object. g per cubic cm."));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_bOverrideRestitutionCombineMode, TEXT("ToolTip"), TEXT("If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the project settings."));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("editcondition"), TEXT("bOverrideRestitutionCombineMode"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_RestitutionCombineMode, TEXT("ToolTip"), TEXT("Restitution combine mode, controls how restitution is computed for multiple materials."));
				MetaData->SetValue(NewProp_Restitution, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Restitution, TEXT("ToolTip"), TEXT("Restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming)."));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_bOverrideFrictionCombineMode, TEXT("ToolTip"), TEXT("If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the project settings."));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("editcondition"), TEXT("bOverrideFrictionCombineMode"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_FrictionCombineMode, TEXT("ToolTip"), TEXT("Friction combine mode, controls how friction is computed for multiple materials."));
				MetaData->SetValue(NewProp_Friction, TEXT("Category"), TEXT("PhysicalMaterial"));
				MetaData->SetValue(NewProp_Friction, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Friction, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterial.h"));
				MetaData->SetValue(NewProp_Friction, TEXT("ToolTip"), TEXT("Friction value of surface, controls how easily things can slide on this surface"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicalMaterial(Z_Construct_UClass_UPhysicalMaterial, &UPhysicalMaterial::StaticClass, TEXT("UPhysicalMaterial"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicalMaterial);
	UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase_NoRegister()
	{
		return UDEPRECATED_PhysicalMaterialPropertyBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDEPRECATED_PhysicalMaterialPropertyBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x22083281;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicalMaterials/PhysicalMaterialPropertyBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicalMaterials/PhysicalMaterialPropertyBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDEPRECATED_PhysicalMaterialPropertyBase(Z_Construct_UClass_UDEPRECATED_PhysicalMaterialPropertyBase, &UDEPRECATED_PhysicalMaterialPropertyBase::StaticClass, TEXT("UDEPRECATED_PhysicalMaterialPropertyBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDEPRECATED_PhysicalMaterialPropertyBase);
	UClass* Z_Construct_UClass_UPhysicsCollisionHandler_NoRegister()
	{
		return UPhysicsCollisionHandler::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsCollisionHandler()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPhysicsCollisionHandler::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastImpactSoundTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastImpactSoundTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LastImpactSoundTime, UPhysicsCollisionHandler), 0x0010000000000000);
				UProperty* NewProp_DefaultImpactSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultImpactSound"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DefaultImpactSound, UPhysicsCollisionHandler), 0x0010000000000005, Z_Construct_UClass_USoundBase_NoRegister());
				UProperty* NewProp_ImpactReFireDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImpactReFireDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactReFireDelay, UPhysicsCollisionHandler), 0x0010000000000005);
				UProperty* NewProp_ImpactThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImpactThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactThreshold, UPhysicsCollisionHandler), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_LastImpactSoundTime, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_LastImpactSoundTime, TEXT("ToolTip"), TEXT("Time since last impact sound"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_DefaultImpactSound, TEXT("ToolTip"), TEXT("Sound to play"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_ImpactReFireDelay, TEXT("ToolTip"), TEXT("Min time between effect/sound being triggered"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("Category"), TEXT("Impact"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsCollisionHandler.h"));
				MetaData->SetValue(NewProp_ImpactThreshold, TEXT("ToolTip"), TEXT("How hard an impact must be to trigger effect/sound"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsCollisionHandler(Z_Construct_UClass_UPhysicsCollisionHandler, &UPhysicsCollisionHandler::StaticClass, TEXT("UPhysicsCollisionHandler"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsCollisionHandler);
	UScriptStruct* Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PhysicsConstraintProfileHandle"), sizeof(FPhysicsConstraintProfileHandle), Get_Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PhysicsConstraintProfileHandle"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPhysicsConstraintProfileHandle>, EStructFlags(0x00000001));
			UProperty* NewProp_ProfileName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProfileName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ProfileName, FPhysicsConstraintProfileHandle), 0x0010000000000001);
			UProperty* NewProp_ProfileProperties = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProfileProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ProfileProperties, FPhysicsConstraintProfileHandle), 0x0010000000000000, Z_Construct_UScriptStruct_FConstraintProfileProperties());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
			MetaData->SetValue(NewProp_ProfileName, TEXT("Category"), TEXT("Constraint"));
			MetaData->SetValue(NewProp_ProfileName, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
			MetaData->SetValue(NewProp_ProfileProperties, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle_CRC() { return 1382720054U; }
	UClass* Z_Construct_UClass_UPhysicsConstraintTemplate_NoRegister()
	{
		return UPhysicsConstraintTemplate::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsConstraintTemplate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPhysicsConstraintTemplate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AngularBreakThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularBreakThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularBreakThreshold_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bAngularBreakable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAngularBreakable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bAngularBreakable_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_TwistLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_TwistLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_SwingLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SwingLimitDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SwingLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_SwingLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SwingLimitStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SwingLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_TwistLimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TwistLimitAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TwistLimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_Swing2LimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Swing2LimitAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Swing2LimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_Swing1LimitAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Swing1LimitAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Swing1LimitAngle_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bTwistLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTwistLimitSoft"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bTwistLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bSwingLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSwingLimitSoft"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bSwingLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_AngularTwistMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularTwistMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AngularTwistMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_AngularSwing2Motion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularSwing2Motion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AngularSwing2Motion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_AngularSwing1Motion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngularSwing1Motion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AngularSwing1Motion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_EAngularConstraintMotion());
				UProperty* NewProp_LinearBreakThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearBreakThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearBreakThreshold_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bLinearBreakable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLinearBreakable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bLinearBreakable_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_LinearLimitDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitDamping_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_LinearLimitStiffness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitStiffness_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bLinearLimitSoft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLinearLimitSoft"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bLinearLimitSoft_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_LinearLimitSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearLimitSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearLimitSize_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_LinearZMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearZMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LinearZMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_LinearYMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearYMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LinearYMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_LinearXMotion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearXMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LinearXMotion_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UEnum_Engine_ELinearConstraintMotion());
				UProperty* NewProp_ProjectionAngularTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionAngularTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ProjectionAngularTolerance_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_ProjectionLinearTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectionLinearTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ProjectionLinearTolerance_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate, uint8);
				UProperty* NewProp_bEnableProjection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableProjection"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, CPP_BOOL_PROPERTY_BITMASK(bEnableProjection_DEPRECATED, UPhysicsConstraintTemplate), sizeof(uint8), false);
				UProperty* NewProp_SecAxis2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecAxis2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SecAxis2_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PriAxis2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PriAxis2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PriAxis2_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Pos2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pos2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Pos2_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SecAxis1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecAxis1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SecAxis1_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PriAxis1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PriAxis1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PriAxis1_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Pos1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pos1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Pos1_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_ConstraintBone2 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintBone2"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ConstraintBone2_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_ConstraintBone1 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstraintBone1"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ConstraintBone1_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
				UProperty* NewProp_JointName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("JointName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(JointName_DEPRECATED, UPhysicsConstraintTemplate), 0x0010000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_DefaultProfile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultProfile, UPhysicsConstraintTemplate), 0x0040000000002000, Z_Construct_UScriptStruct_FConstraintProfileProperties());
				UProperty* NewProp_ProfileHandles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProfileHandles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ProfileHandles, UPhysicsConstraintTemplate), 0x0010000000000000);
				UProperty* NewProp_ProfileHandles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ProfileHandles, TEXT("ProfileHandles"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPhysicsConstraintProfileHandle());
				UProperty* NewProp_DefaultInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultInstance, UPhysicsConstraintTemplate), 0x0010000000000001, Z_Construct_UScriptStruct_FConstraintInstance());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularBreakThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bAngularBreakable, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SwingLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SwingLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_TwistLimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Swing2LimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Swing1LimitAngle, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bTwistLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bSwingLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularTwistMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularSwing2Motion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_AngularSwing1Motion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearBreakThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bLinearBreakable, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitDamping, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitStiffness, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bLinearLimitSoft, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearLimitSize, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearZMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearYMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_LinearXMotion, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ProjectionAngularTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ProjectionLinearTolerance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_bEnableProjection, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SecAxis2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_PriAxis2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Pos2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_SecAxis1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_PriAxis1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_Pos1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ConstraintBone2, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ConstraintBone1, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_JointName, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_DefaultProfile, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_DefaultProfile, TEXT("ToolTip"), TEXT("When no profile is selected, use these settings. Only needed in editor as we serialize it into DefaultInstance on save"));
				MetaData->SetValue(NewProp_ProfileHandles, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_ProfileHandles, TEXT("ToolTip"), TEXT("Handles to the constraint profiles applicable to this constraint"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("Category"), TEXT("Joint"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ModuleRelativePath"), TEXT("Classes/PhysicsEngine/PhysicsConstraintTemplate.h"));
				MetaData->SetValue(NewProp_DefaultInstance, TEXT("ShowOnlyInnerProperties"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsConstraintTemplate(Z_Construct_UClass_UPhysicsConstraintTemplate, &UPhysicsConstraintTemplate::StaticClass, TEXT("UPhysicsConstraintTemplate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsConstraintTemplate);
	UClass* Z_Construct_UClass_UPhysicsSerializer_NoRegister()
	{
		return UPhysicsSerializer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPhysicsSerializer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPhysicsSerializer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20280080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PhysicsSerializer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PhysicsSerializer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPhysicsSerializer(Z_Construct_UClass_UPhysicsSerializer, &UPhysicsSerializer::StaticClass, TEXT("UPhysicsSerializer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPhysicsSerializer);
	UFunction* Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature()
	{
		struct _Script_Engine_eventPlatformInterfaceDelegate_Parms
		{
			FPlatformInterfaceDelegateResult Result;
		};
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(_Script_Engine_eventPlatformInterfaceDelegate_Parms));
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Result, _Script_Engine_eventPlatformInterfaceDelegate_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Generic platform interface delegate signature"));
			MetaData->SetValue(NewProp_Result, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EPlatformInterfaceDataType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPlatformInterfaceDataType"), 0, Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPlatformInterfaceDataType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_Int")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_Float")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_String")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_Object")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_Custom")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("PIDT_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EPlatformInterfaceDataType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PIDT_Custom.ToolTip"), TEXT("A custom type where more than one value may be filled out."));
			MetaData->SetValue(ReturnEnum, TEXT("PIDT_None.ToolTip"), TEXT("No data type specified."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("An enum for the types of data used in a PlatformInterfaceData struct."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPlatformInterfaceDataType_CRC() { return 2573364084U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDelegateArray()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDelegateArray_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DelegateArray"), sizeof(FDelegateArray), Get_Z_Construct_UScriptStruct_FDelegateArray_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DelegateArray"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDelegateArray>, EStructFlags(0x00000005));
			UProperty* NewProp_Delegates = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Delegates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Delegates, FDelegateArray), 0x0010008000000000);
			UProperty* NewProp_Delegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Delegates, TEXT("Delegates"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Helper struct, since UnrealScript doesn't allow arrays of arrays, but\narrays of structs of arrays are okay."));
			MetaData->SetValue(NewProp_Delegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDelegateArray_CRC() { return 4210138912U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PlatformInterfaceDelegateResult"), sizeof(FPlatformInterfaceDelegateResult), Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceDelegateResult"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPlatformInterfaceDelegateResult>, EStructFlags(0x00000001));
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Data, FPlatformInterfaceDelegateResult), 0x0010000000000000, Z_Construct_UScriptStruct_FPlatformInterfaceData());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuccessful, FPlatformInterfaceDelegateResult, bool);
			UProperty* NewProp_bSuccessful = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSuccessful"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuccessful, FPlatformInterfaceDelegateResult), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bSuccessful, FPlatformInterfaceDelegateResult), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Generic structure for returning most any kind of data from C++ to delegate functions"));
			MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_Data, TEXT("ToolTip"), TEXT("The result actual data"));
			MetaData->SetValue(NewProp_bSuccessful, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_bSuccessful, TEXT("ToolTip"), TEXT("This is always usable, no matter the type"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceDelegateResult_CRC() { return 3258673207U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPlatformInterfaceData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PlatformInterfaceData"), sizeof(FPlatformInterfaceData), Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlatformInterfaceData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPlatformInterfaceData>, EStructFlags(0x00000001));
			UProperty* NewProp_ObjectValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ObjectValue, FPlatformInterfaceData), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, FPlatformInterfaceData), 0x0010000000000000);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, FPlatformInterfaceData), 0x0010000000000000);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IntValue, FPlatformInterfaceData), 0x0010000000000000);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Type, FPlatformInterfaceData), 0x0010000000000000, Z_Construct_UEnum_Engine_EPlatformInterfaceDataType());
			UProperty* NewProp_DataName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(DataName, FPlatformInterfaceData), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct that encompasses the most common types of data. This is the data payload\nof PlatformInterfaceDelegateResult."));
			MetaData->SetValue(NewProp_ObjectValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_StringValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_FloatValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_IntValue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_IntValue, TEXT("ToolTip"), TEXT("Various typed result values"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Specifies which value is valid for this structure"));
			MetaData->SetValue(NewProp_DataName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
			MetaData->SetValue(NewProp_DataName, TEXT("ToolTip"), TEXT("An optional tag for this data"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPlatformInterfaceData_CRC() { return 3726106062U; }
	UClass* Z_Construct_UClass_UPlatformInterfaceBase_NoRegister()
	{
		return UPlatformInterfaceBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPlatformInterfaceBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AllDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AllDelegates, UPlatformInterfaceBase), 0x0010008000000000);
				UProperty* NewProp_AllDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllDelegates, TEXT("AllDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FDelegateArray());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(NewProp_AllDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceBase.h"));
				MetaData->SetValue(NewProp_AllDelegates, TEXT("ToolTip"), TEXT("Array of delegate arrays. Only add and remove via helper functions, and call via the helper delegate call function"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlatformInterfaceBase(Z_Construct_UClass_UPlatformInterfaceBase, &UPlatformInterfaceBase::StaticClass, TEXT("UPlatformInterfaceBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlatformInterfaceBase);
	UEnum* Z_Construct_UEnum_Engine_ECloudStorageDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ECloudStorageDelegate"), 0, Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECloudStorageDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_KeyValueReadComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_KeyValueWriteComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_ValueChanged")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_DocumentQueryComplete")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_DocumentReadComplete")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_DocumentWriteComplete")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_DocumentConflictDetected")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CSD_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ECloudStorageDelegate");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CSD_DocumentConflictDetected.ToolTip"), TEXT("Desc: Called when multiple machines have updated the document, and script needs to determine which one to use, via the Resolve functions."));
			MetaData->SetValue(ReturnEnum, TEXT("CSD_KeyValueReadComplete.ToolTip"), TEXT("@todo: Fill in the result descriptions for these guys (and the other PI subclasses)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("All the types of delegate callbacks that a CloudStorage subclass may receive from C++"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECloudStorageDelegate_CRC() { return 2099719144U; }
	UClass* Z_Construct_UClass_UCloudStorageBase_NoRegister()
	{
		return UCloudStorageBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UCloudStorageBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UCloudStorageBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSuppressDelegateCalls, UCloudStorageBase, uint8);
				UProperty* NewProp_bSuppressDelegateCalls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSuppressDelegateCalls"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSuppressDelegateCalls, UCloudStorageBase), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bSuppressDelegateCalls, UCloudStorageBase), sizeof(uint8), false);
				UProperty* NewProp_LocalCloudFiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalCloudFiles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LocalCloudFiles, UCloudStorageBase), 0x0010000000000000);
				UProperty* NewProp_LocalCloudFiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalCloudFiles, TEXT("LocalCloudFiles"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CloudStorageBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for the various platform interface classes."));
				MetaData->SetValue(NewProp_bSuppressDelegateCalls, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(NewProp_bSuppressDelegateCalls, TEXT("ToolTip"), TEXT("If true, delegate callbacks should be skipped."));
				MetaData->SetValue(NewProp_LocalCloudFiles, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CloudStorageBase.h"));
				MetaData->SetValue(NewProp_LocalCloudFiles, TEXT("ToolTip"), TEXT("When using local storage (aka \"cloud emulation\"), this maintains a list of the file paths."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCloudStorageBase(Z_Construct_UClass_UCloudStorageBase, &UCloudStorageBase::StaticClass, TEXT("UCloudStorageBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCloudStorageBase);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnUserClosedAdvertisement__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate called when user closes an ad (after clicking on banner). Base class already handles\npausing, so a delegate is only needed if you need extra handling.  If you set it to a PC or other actor\nfunction, make sure to set it back when switching levels."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnUserClickedBanner__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate called when user clicks on an banner ad. Base class already handles pausing,\nso a delegate is only needed if you need extra handling. If you set it to a PC or other actor\nfunction, make sure to set it back when switching levels."));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Engine_EAdManagerDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAdManagerDelegate"), 0, Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAdManagerDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AMD_ClickedBanner")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AMD_UserClosedAd")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AMD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EAdManagerDelegate");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAdManagerDelegate_CRC() { return 59258024U; }
	UClass* Z_Construct_UClass_UInGameAdManager_NoRegister()
	{
		return UInGameAdManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UInGameAdManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UInGameAdManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ClosedAdDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClosedAdDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ClosedAdDelegates, UInGameAdManager), 0x0010008000000000);
				UProperty* NewProp_ClosedAdDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClosedAdDelegates, TEXT("ClosedAdDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature());
				UProperty* NewProp_ClickedBannerDelegates = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClickedBannerDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ClickedBannerDelegates, UInGameAdManager), 0x0010008000000000);
				UProperty* NewProp_ClickedBannerDelegates_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ClickedBannerDelegates, TEXT("ClickedBannerDelegates"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldPauseWhileAdOpen, UInGameAdManager, uint8);
				UProperty* NewProp_bShouldPauseWhileAdOpen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldPauseWhileAdOpen"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldPauseWhileAdOpen, UInGameAdManager), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShouldPauseWhileAdOpen, UInGameAdManager), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/InGameAdManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClosedAdDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClosedAdDelegates, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_ClickedBannerDelegates, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_ClickedBannerDelegates, TEXT("ToolTip"), TEXT("@todo document"));
				MetaData->SetValue(NewProp_bShouldPauseWhileAdOpen, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/InGameAdManager.h"));
				MetaData->SetValue(NewProp_bShouldPauseWhileAdOpen, TEXT("ToolTip"), TEXT("If true, the game will pause when the user clicks on the ad, which could take over the screen"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInGameAdManager(Z_Construct_UClass_UInGameAdManager, &UInGameAdManager::StaticClass, TEXT("UInGameAdManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInGameAdManager);
	UEnum* Z_Construct_UEnum_Engine_EMicroTransactionResult()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMicroTransactionResult"), 0, Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMicroTransactionResult"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTR_Succeeded")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTR_Failed")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTR_Canceled")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTR_RestoredFromServer")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTR_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMicroTransactionResult");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Result of a purchase."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionResult_CRC() { return 3470241403U; }
	UEnum* Z_Construct_UEnum_Engine_EMicroTransactionDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMicroTransactionDelegate"), 0, Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMicroTransactionDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTD_PurchaseQueryComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTD_PurchaseComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MTD_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EMicroTransactionDelegate");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MTD_PurchaseComplete.ToolTip"), TEXT("Data:Result code, and identifier of the product that completed.\nType:Custom\nDesc:IntValue will have one of the enums in EMicroTransactionResult, and StringValue\n     will have the Identifier from the PurchaseInfo that was bought with BeginPurchase\n     If MTR_Failed was returned, then LastError and LastErrorSolution should be filled\n             out with the most recent localized and possible resolutions."));
			MetaData->SetValue(ReturnEnum, TEXT("MTD_PurchaseQueryComplete.ToolTip"), TEXT("Data:None\nDesc:QueryForAvailablePurchases() is complete and AvailableProducts is ready for use."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("All the types of delegate callbacks that a MicroTransaction subclass may receive from C++."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMicroTransactionDelegate_CRC() { return 2004026935U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPurchaseInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PurchaseInfo"), sizeof(FPurchaseInfo), Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PurchaseInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPurchaseInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_DisplayPrice = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayPrice"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DisplayPrice, FPurchaseInfo), 0x0010000000000000);
			UProperty* NewProp_DisplayDescription = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayDescription"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DisplayDescription, FPurchaseInfo), 0x0010000000000000);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FPurchaseInfo), 0x0010000000000000);
			UProperty* NewProp_Identifier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Identifier"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Identifier, FPurchaseInfo), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Purchase information structure"));
			MetaData->SetValue(NewProp_DisplayPrice, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayPrice, TEXT("ToolTip"), TEXT("Price displayable to the user"));
			MetaData->SetValue(NewProp_DisplayDescription, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayDescription, TEXT("ToolTip"), TEXT("Description displayable to the user"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("Name displayable to the user"));
			MetaData->SetValue(NewProp_Identifier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
			MetaData->SetValue(NewProp_Identifier, TEXT("ToolTip"), TEXT("Unique identifier for the purchase"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPurchaseInfo_CRC() { return 3974865101U; }
	UClass* Z_Construct_UClass_UMicroTransactionBase_NoRegister()
	{
		return UMicroTransactionBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UMicroTransactionBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UMicroTransactionBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LastErrorSolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastErrorSolution"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(LastErrorSolution, UMicroTransactionBase), 0x0010000000000000);
				UProperty* NewProp_LastError = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastError"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(LastError, UMicroTransactionBase), 0x0010000000000000);
				UProperty* NewProp_AvailableProducts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AvailableProducts"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AvailableProducts, UMicroTransactionBase), 0x0010000000000000);
				UProperty* NewProp_AvailableProducts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AvailableProducts, TEXT("AvailableProducts"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPurchaseInfo());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/MicroTransactionBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastErrorSolution, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastErrorSolution, TEXT("ToolTip"), TEXT("In case of errors, this will describe possible solutions (if there are any)"));
				MetaData->SetValue(NewProp_LastError, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_LastError, TEXT("ToolTip"), TEXT("In case of errors, this will describe the most recent error"));
				MetaData->SetValue(NewProp_AvailableProducts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MicroTransactionBase.h"));
				MetaData->SetValue(NewProp_AvailableProducts, TEXT("ToolTip"), TEXT("The list of products available to purchase, filled out by the time a MTD_PurchaseQueryComplete is fired"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMicroTransactionBase(Z_Construct_UClass_UMicroTransactionBase, &UMicroTransactionBase::StaticClass, TEXT("UMicroTransactionBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMicroTransactionBase);
	UEnum* Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETwitterIntegrationDelegate"), 0, Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETwitterIntegrationDelegate"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TID_AuthorizeComplete")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TID_TweetUIComplete")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TID_RequestComplete")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TID_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETwitterIntegrationDelegate");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETwitterIntegrationDelegate_CRC() { return 111348249U; }
	UEnum* Z_Construct_UEnum_Engine_ETwitterRequestMethod()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETwitterRequestMethod"), 0, Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETwitterRequestMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRM_Get")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRM_Post")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRM_Delete")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TRM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETwitterRequestMethod");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The possible twitter request methods"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETwitterRequestMethod_CRC() { return 2501632737U; }
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts()
	{
		struct TwitterIntegrationBase_eventAuthorizeAccounts_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AuthorizeAccounts"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventAuthorizeAccounts_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventAuthorizeAccounts_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts the process of authorizing the local user(s). When TID_AuthorizeComplete is called, then GetNumAccounts()\nwill return a valid number of accounts\n\n@return true if the authorization process started, and TID_AuthorizeComplete delegates will be called"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI()
	{
		struct TwitterIntegrationBase_eventCanShowTweetUI_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CanShowTweetUI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventCanShowTweetUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventCanShowTweetUI_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the user is allowed to use the Tweet UI"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName()
	{
		struct TwitterIntegrationBase_eventGetAccountName_Parms
		{
			int32 AccountIndex;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAccountName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventGetAccountName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, TwitterIntegrationBase_eventGetAccountName_Parms), 0x0010000000000580);
			UProperty* NewProp_AccountIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AccountIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(AccountIndex, TwitterIntegrationBase_eventGetAccountName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the display name of the given Twitter account"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts()
	{
		struct TwitterIntegrationBase_eventGetNumAccounts_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumAccounts"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventGetNumAccounts_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TwitterIntegrationBase_eventGetNumAccounts_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The number of accounts that were authorized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_Init()
	{
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Init"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Perform any needed initialization"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI()
	{
		struct TwitterIntegrationBase_eventShowTweetUI_Parms
		{
			FString InitialMessage;
			FString URL;
			FString Picture;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShowTweetUI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(TwitterIntegrationBase_eventShowTweetUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventShowTweetUI_Parms), sizeof(bool), true);
			UProperty* NewProp_Picture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Picture"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Picture, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0010000000000080);
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(URL, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0010000000000080);
			UProperty* NewProp_InitialMessage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InitialMessage"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InitialMessage, TwitterIntegrationBase_eventShowTweetUI_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Kicks off a tweet, using the platform to show the UI. If this returns false, or you are on a platform that doesn't support the UI,\nyou can use the TwitterRequest method to perform a manual tweet using the Twitter API\n\n@param InitialMessage [optional] Initial message to show\n@param URL [optional] URL to attach to the tweet\n@param Picture [optional] Name of a picture (stored locally, platform subclass will do the searching for it) to add to the tweet\n\n@return true if a UI was displayed for the user to interact with, and a TID_TweetUIComplete will be sent"));
			MetaData->SetValue(NewProp_Picture, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_URL, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_InitialMessage, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest()
	{
		struct TwitterIntegrationBase_eventTwitterRequest_Parms
		{
			FString URL;
			TArray<FString> ParamKeysAndValues;
			TEnumAsByte<ETwitterRequestMethod> RequestMethod;
			int32 AccountIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTwitterIntegrationBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TwitterRequest"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00420400, 65535, sizeof(TwitterIntegrationBase_eventTwitterRequest_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TwitterIntegrationBase_eventTwitterRequest_Parms), sizeof(bool), true);
			UProperty* NewProp_AccountIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AccountIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(AccountIndex, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0010000000000080);
			UProperty* NewProp_RequestMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RequestMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RequestMethod, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0010000000000080, Z_Construct_UEnum_Engine_ETwitterRequestMethod());
			UProperty* NewProp_ParamKeysAndValues = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ParamKeysAndValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ParamKeysAndValues, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0010000008000182);
			UProperty* NewProp_ParamKeysAndValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ParamKeysAndValues, TEXT("ParamKeysAndValues"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(URL, TwitterIntegrationBase_eventTwitterRequest_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Kicks off a generic twitter request\n\n@param URL The URL for the twitter request\n@param KeysAndValues The extra parameters to pass to the request (request specific). Separate keys and values: < \"key1\", \"value1\", \"key2\", \"value2\" >\n@param Method The method for this request (get, post, delete)\n@param AccountIndex A user index if an account is needed, or -1 if an account isn't needed for the request\n\n@return true the request was sent off, and a TID_RequestComplete"));
			MetaData->SetValue(NewProp_ParamKeysAndValues, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_URL, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTwitterIntegrationBase_NoRegister()
	{
		return UTwitterIntegrationBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UTwitterIntegrationBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlatformInterfaceBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTwitterIntegrationBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800088;

				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_Init());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_AuthorizeAccounts(), "AuthorizeAccounts"); // 3694631612
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_CanShowTweetUI(), "CanShowTweetUI"); // 4029756919
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_GetAccountName(), "GetAccountName"); // 2165016834
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_GetNumAccounts(), "GetNumAccounts"); // 344962443
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_Init(), "Init"); // 3754225368
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_ShowTweetUI(), "ShowTweetUI"); // 146777306
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTwitterIntegrationBase_TwitterRequest(), "TwitterRequest"); // 779784149
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TwitterIntegrationBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TwitterIntegrationBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTwitterIntegrationBase(Z_Construct_UClass_UTwitterIntegrationBase, &UTwitterIntegrationBase::StaticClass, TEXT("UTwitterIntegrationBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTwitterIntegrationBase);
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader()
	{
		struct PlatformInterfaceWebResponse_eventGetHeader_Parms
		{
			int32 HeaderIndex;
			FString Header;
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHeader"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00420400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetHeader_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Value, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0010000000000180);
			UProperty* NewProp_Header = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Header"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Header, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0010000000000180);
			UProperty* NewProp_HeaderIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeaderIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(HeaderIndex, PlatformInterfaceWebResponse_eventGetHeader_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retrieve the header and value for the given index of header/value pair"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue()
	{
		struct PlatformInterfaceWebResponse_eventGetHeaderValue_Parms
		{
			FString HeaderName;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHeaderValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetHeaderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, PlatformInterfaceWebResponse_eventGetHeaderValue_Parms), 0x0010000000000580);
			UProperty* NewProp_HeaderName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HeaderName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(HeaderName, PlatformInterfaceWebResponse_eventGetHeaderValue_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the value for the given header (or \"\" if no matching header)"));
			MetaData->SetValue(NewProp_HeaderName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders()
	{
		struct PlatformInterfaceWebResponse_eventGetNumHeaders_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPlatformInterfaceWebResponse();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumHeaders"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(PlatformInterfaceWebResponse_eventGetNumHeaders_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PlatformInterfaceWebResponse_eventGetNumHeaders_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the number of header/value pairs"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse_NoRegister()
	{
		return UPlatformInterfaceWebResponse::StaticClass();
	}
	UClass* Z_Construct_UClass_UPlatformInterfaceWebResponse()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPlatformInterfaceWebResponse::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;

				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BinaryResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BinaryResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BinaryResponse, UPlatformInterfaceWebResponse), 0x0010000000000000);
				UProperty* NewProp_BinaryResponse_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BinaryResponse, TEXT("BinaryResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_StringResponse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StringResponse"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringResponse, UPlatformInterfaceWebResponse), 0x0010000000000000);
				UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tag"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Tag, UPlatformInterfaceWebResponse), 0x0010000000000000);
				UProperty* NewProp_ResponseCode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResponseCode"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ResponseCode, UPlatformInterfaceWebResponse), 0x0010000000000000);
				UProperty* NewProp_OriginalURL = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OriginalURL"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OriginalURL, UPlatformInterfaceWebResponse), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeader(), "GetHeader"); // 3691741108
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetHeaderValue(), "GetHeaderValue"); // 3040721592
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPlatformInterfaceWebResponse_GetNumHeaders(), "GetNumHeaders"); // 3199030830
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_BinaryResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_BinaryResponse, TEXT("ToolTip"), TEXT("For non-string results, this is the response"));
				MetaData->SetValue(NewProp_StringResponse, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_StringResponse, TEXT("ToolTip"), TEXT("For string results, this is the response"));
				MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("A user-specified tag specified with the request"));
				MetaData->SetValue(NewProp_ResponseCode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_ResponseCode, TEXT("ToolTip"), TEXT("Result code from the response (200=OK, 404=Not Found, etc)"));
				MetaData->SetValue(NewProp_OriginalURL, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/PlatformInterfaceWebResponse.h"));
				MetaData->SetValue(NewProp_OriginalURL, TEXT("ToolTip"), TEXT("This holds the original requested URL"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPlatformInterfaceWebResponse(Z_Construct_UClass_UPlatformInterfaceWebResponse, &UPlatformInterfaceWebResponse::StaticClass, TEXT("UPlatformInterfaceWebResponse"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPlatformInterfaceWebResponse);
	UClass* Z_Construct_UClass_ULocalPlayer_NoRegister()
	{
		return ULocalPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_ULocalPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPlayer();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = ULocalPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSentSplitJoin, ULocalPlayer, uint8);
				UProperty* NewProp_bSentSplitJoin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSentSplitJoin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSentSplitJoin, ULocalPlayer), 0x0010000000022001, CPP_BOOL_PROPERTY_BITMASK(bSentSplitJoin, ULocalPlayer), sizeof(uint8), false);
				UProperty* NewProp_PendingLevelPlayerControllerClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PendingLevelPlayerControllerClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(PendingLevelPlayerControllerClass, ULocalPlayer), 0x0014000000000000, Z_Construct_UClass_APlayerController_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_AspectRatioAxisConstraint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AspectRatioAxisConstraint"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AspectRatioAxisConstraint, ULocalPlayer), 0x0010000000004000, Z_Construct_UEnum_Engine_EAspectRatioAxisConstraint());
				UProperty* NewProp_ViewportClient = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ViewportClient"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ViewportClient, ULocalPlayer), 0x0010000000000000, Z_Construct_UClass_UGameViewportClient_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Each player that is active on the current client has a LocalPlayer. It stays active across maps\nThere may be several spawned in the case of splitscreen/coop.\nThere may be 0 spawned on servers."));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("Category"), TEXT("LocalPlayer"));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_bSentSplitJoin, TEXT("ToolTip"), TEXT("set when we've sent a split join request"));
				MetaData->SetValue(NewProp_PendingLevelPlayerControllerClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_PendingLevelPlayerControllerClass, TEXT("ToolTip"), TEXT("The class of PlayerController to spawn for players logging in."));
				MetaData->SetValue(NewProp_AspectRatioAxisConstraint, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_AspectRatioAxisConstraint, TEXT("ToolTip"), TEXT("How to constrain perspective viewport FOV"));
				MetaData->SetValue(NewProp_ViewportClient, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LocalPlayer.h"));
				MetaData->SetValue(NewProp_ViewportClient, TEXT("ToolTip"), TEXT("The master viewport containing this player's view."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULocalPlayer(Z_Construct_UClass_ULocalPlayer, &ULocalPlayer::StaticClass, TEXT("ULocalPlayer"), false, nullptr, nullptr, nullptr);
	UClass* Z_Construct_UClass_UChildConnection_NoRegister()
	{
		return UChildConnection::StaticClass();
	}
	UClass* Z_Construct_UClass_UChildConnection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UNetConnection();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UChildConnection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2008008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, UChildConnection), 0x0010000000002000, Z_Construct_UClass_UNetConnection_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ChildConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ChildConnection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Represents a secondary split screen connection that reroutes calls to the parent connection."));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ChildConnection.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UChildConnection(Z_Construct_UClass_UChildConnection, &UChildConnection::StaticClass, TEXT("UChildConnection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UChildConnection);
	UClass* Z_Construct_UClass_UPolys_NoRegister()
	{
		return UPolys::StaticClass();
	}
	UClass* Z_Construct_UClass_UPolys()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UPolys::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Polys.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Polys.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPolys(Z_Construct_UClass_UPolys, &UPolys::StaticClass, TEXT("UPolys"), false, nullptr, nullptr, nullptr);
	UEnum* Z_Construct_UEnum_Engine_EReporterLineStyle()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EReporterLineStyle"), 0, Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EReporterLineStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EReporterLineStyle::Line")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EReporterLineStyle::Dash")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EReporterLineStyle::EReporterLineStyle_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EReporterLineStyle::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for lines."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EReporterLineStyle_CRC() { return 1140970330U; }
	UClass* Z_Construct_UClass_UReporterBase_NoRegister()
	{
		return UReporterBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UReporterBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UReporterBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Debug/ReporterBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReporterBase(Z_Construct_UClass_UReporterBase, &UReporterBase::StaticClass, TEXT("UReporterBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReporterBase);
	UEnum* Z_Construct_UEnum_Engine_ELegendPosition()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ELegendPosition"), 0, Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELegendPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELegendPosition::Outside")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELegendPosition::Inside")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ELegendPosition::ELegendPosition_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ELegendPosition::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ELegendPosition_CRC() { return 3280876824U; }
	UEnum* Z_Construct_UEnum_Engine_EGraphDataStyle()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EGraphDataStyle"), 0, Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphDataStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphDataStyle::Lines")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphDataStyle::Filled")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphDataStyle::EGraphDataStyle_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EGraphDataStyle::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for data."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGraphDataStyle_CRC() { return 2184351441U; }
	UEnum* Z_Construct_UEnum_Engine_EGraphAxisStyle()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EGraphAxisStyle"), 0, Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGraphAxisStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphAxisStyle::Lines")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphAxisStyle::Notches")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphAxisStyle::Grid")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EGraphAxisStyle::EGraphAxisStyle_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EGraphAxisStyle::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Draw styles for axes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EGraphAxisStyle_CRC() { return 1294124277U; }
	UClass* Z_Construct_UClass_UReporterGraph_NoRegister()
	{
		return UReporterGraph::StaticClass();
	}
	UClass* Z_Construct_UClass_UReporterGraph()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UReporterBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UReporterGraph::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Debug/ReporterGraph.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Debug/ReporterGraph.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReporterGraph(Z_Construct_UClass_UReporterGraph, &UReporterGraph::StaticClass, TEXT("UReporterGraph"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReporterGraph);
	UClass* Z_Construct_UClass_UReverbEffect_NoRegister()
	{
		return UReverbEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_UReverbEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UReverbEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bChanged, UReverbEffect, uint8);
				UProperty* NewProp_bChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bChanged, UReverbEffect), 0x0010000800002000, CPP_BOOL_PROPERTY_BITMASK(bChanged, UReverbEffect), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_RoomRolloffFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoomRolloffFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RoomRolloffFactor, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_AirAbsorptionGainHF = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AirAbsorptionGainHF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AirAbsorptionGainHF, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_LateDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LateDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LateDelay, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_LateGain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LateGain"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LateGain, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_ReflectionsDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReflectionsDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReflectionsDelay, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_ReflectionsGain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReflectionsGain"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReflectionsGain, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_DecayHFRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecayHFRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DecayHFRatio, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_DecayTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DecayTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DecayTime, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_GainHF = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GainHF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GainHF, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_Gain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Gain"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gain, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_Diffusion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Diffusion"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Diffusion, UReverbEffect), 0x0010000000000001);
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Density, UReverbEffect), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/ReverbEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_bChanged, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_bChanged, TEXT("ToolTip"), TEXT("Transient property used to trigger real-time updates of the reverb for real-time editor previewing"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_RoomRolloffFactor, TEXT("ToolTip"), TEXT("Room Rolloff - 0.0 < 0.0 < 10.0 - multiplies the attenuation due to distance"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_AirAbsorptionGainHF, TEXT("ToolTip"), TEXT("Air Absorption - 0.0 < 0.994 < 1.0 - lower value means more absorption"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ClampMax"), TEXT("0.1"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_LateDelay, TEXT("ToolTip"), TEXT("Late Reverb Delay - 0.0 < 0.011 < 0.1 Seconds - time difference between late reverb and first reflections"));
				MetaData->SetValue(NewProp_LateGain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_LateGain, TEXT("ToolTip"), TEXT("Late Reverb Gain - 0.0 < 1.26 < 10.0 - gain of the late reverb"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ClampMax"), TEXT("0.3"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_ReflectionsDelay, TEXT("ToolTip"), TEXT("Reflections Delay - 0.0 < 0.007 < 0.3 Seconds - the time between the listener receiving the direct path sound and the first reflection"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ClampMax"), TEXT("3.16"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_ReflectionsGain, TEXT("ToolTip"), TEXT("Reflections Gain - 0.0 < 0.05 < 3.16 - controls the amount of initial reflections"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ClampMax"), TEXT("2.0"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_DecayHFRatio, TEXT("ToolTip"), TEXT("Decay High Frequency Ratio - 0.1 < 0.83 < 2.0 - how much the quicker or slower the high frequencies decay relative to the lower frequencies."));
				MetaData->SetValue(NewProp_DecayTime, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ClampMax"), TEXT("20.0"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_DecayTime, TEXT("ToolTip"), TEXT("Decay Time - 0.1 < 1.49 < 20.0 Seconds - larger is more reverb"));
				MetaData->SetValue(NewProp_GainHF, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_GainHF, TEXT("ToolTip"), TEXT("Reverb Gain High Frequency - 0.0 < 0.89 < 1.0 - attenuates the high frequency reflected sound"));
				MetaData->SetValue(NewProp_Gain, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Gain, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Gain, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Gain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Gain, TEXT("ToolTip"), TEXT("Reverb Gain - 0.0 < 0.32 < 1.0 - overall reverb gain - master volume control"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Diffusion, TEXT("ToolTip"), TEXT("Diffusion - 0.0 < 1.0 < 1.0 - Echo density in the reverberation decay - lower is more grainy"));
				MetaData->SetValue(NewProp_Density, TEXT("Category"), TEXT("ReverbParameters"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/ReverbEffect.h"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Density - 0.0 < 1.0 < 1.0 - Coloration of the late reverb - lower value is more grainy"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReverbEffect(Z_Construct_UClass_UReverbEffect, &UReverbEffect::StaticClass, TEXT("UReverbEffect"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReverbEffect);
	UEnum* Z_Construct_UEnum_Engine_EConstraintTransform()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EConstraintTransform"), 0, Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EConstraintTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EConstraintTransform::Absolute")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EConstraintTransform::Relative")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EConstraintTransform::EConstraintTransform_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EConstraintTransform::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Absolute.ToolTip"), TEXT("Absolute value."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Relative.ToolTip"), TEXT("Apply relative transform from ref pose."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Constraint Transform Type. - currently unused"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EConstraintTransform_CRC() { return 1286366311U; }
	UEnum* Z_Construct_UEnum_Engine_EControlConstraint()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EControlConstraint"), 0, Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EControlConstraint"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EControlConstraint::Orientation")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EControlConstraint::Translation")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EControlConstraint::Max")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EControlConstraint::EControlConstraint_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EControlConstraint::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Max.ToolTip"), TEXT("Max Number."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Orientation.ToolTip"), TEXT("Rotation constraint."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Control Constraint Type"));
			MetaData->SetValue(ReturnEnum, TEXT("Translation.ToolTip"), TEXT("Translation constraint."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EControlConstraint_CRC() { return 168296274U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTransformBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTransformBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TransformBase"), sizeof(FTransformBase), Get_Z_Construct_UScriptStruct_FTransformBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTransformBase>, EStructFlags(0x00000001));
			UProperty* NewProp_Constraints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Constraints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Constraints, FTransformBase), 0x0010000000000001, Z_Construct_UScriptStruct_FTransformBaseConstraint());
			NewProp_Constraints->ArrayDim = CPP_ARRAY_DIM(Constraints, FTransformBase);
			UProperty* NewProp_Node = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Node"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Node, FTransformBase), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is a mapping table between bone in a particular skeletal mesh and bone of this skeleton set."));
			MetaData->SetValue(NewProp_Constraints, TEXT("Category"), TEXT("FTransformBase"));
			MetaData->SetValue(NewProp_Constraints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Node, TEXT("Category"), TEXT("FTransformBase"));
			MetaData->SetValue(NewProp_Node, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTransformBase_CRC() { return 3246366964U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTransformBaseConstraint()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TransformBaseConstraint"), sizeof(FTransformBaseConstraint), Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TransformBaseConstraint"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTransformBaseConstraint>, EStructFlags(0x00000001));
			UProperty* NewProp_TransformConstraints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransformConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TransformConstraints, FTransformBaseConstraint), 0x0010000000000001);
			UProperty* NewProp_TransformConstraints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TransformConstraints, TEXT("TransformConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRigTransformConstraint());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This defines what constraint it is defined"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("Category"), TEXT("FTransformBaseConstraint"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_TransformConstraints, TEXT("ToolTip"), TEXT("What transform type *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTransformBaseConstraint_CRC() { return 2596246958U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRigTransformConstraint()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("RigTransformConstraint"), sizeof(FRigTransformConstraint), Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RigTransformConstraint"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRigTransformConstraint>, EStructFlags(0x00000001));
			UProperty* NewProp_Weight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Weight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Weight, FRigTransformConstraint), 0x0010000000000000);
			UProperty* NewProp_ParentSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParentSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParentSpace, FRigTransformConstraint), 0x0010000000000001);
			UProperty* NewProp_TranformType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranformType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TranformType, FRigTransformConstraint), 0x0010000000000000, Z_Construct_UEnum_Engine_EConstraintTransform());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Weight, TEXT("ToolTip"), TEXT("EditAnywhere, Category=\"FTransformBaseConstraint\""));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("Category"), TEXT("FTransformBaseConstraint"));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_ParentSpace, TEXT("ToolTip"), TEXT("Parent space that are define *"));
			MetaData->SetValue(NewProp_TranformType, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_TranformType, TEXT("ToolTip"), TEXT("EditAnywhere, Category=\"FTransformBaseConstraint\""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRigTransformConstraint_CRC() { return 622154480U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNode()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("Node"), sizeof(FNode), Get_Z_Construct_UScriptStruct_FNode_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Node"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNode>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAdvanced, FNode, bool);
			UProperty* NewProp_bAdvanced = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAdvanced"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAdvanced, FNode), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAdvanced, FNode), sizeof(bool), true);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FNode), 0x0010000000000001);
			UProperty* NewProp_Transform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Transform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Transform, FNode), 0x0010000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ParentName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParentName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParentName, FNode), 0x0010000000020001);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, FNode), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Rig Controller for bone transform *"));
			MetaData->SetValue(NewProp_bAdvanced, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_bAdvanced, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("This is Display Name where it will be used to display in Retarget Manager. This name has to be unique."));
			MetaData->SetValue(NewProp_Transform, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Transform, TEXT("ToolTip"), TEXT("Absolute transform of the node. Hoping to use this data in the future to render"));
			MetaData->SetValue(NewProp_ParentName, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_ParentName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_ParentName, TEXT("ToolTip"), TEXT("We save Parent Node but if the parent node is removed, it will reset to root"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("FNode"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name of the original node. We don't allow to change this. This is used for identity.*"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNode_CRC() { return 30837525U; }
	UClass* Z_Construct_UClass_URig_NoRegister()
	{
		return URig::StaticClass();
	}
	UClass* Z_Construct_UClass_URig()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = URig::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Nodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Nodes, URig), 0x0040000000000041);
				UProperty* NewProp_Nodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Nodes, TEXT("Nodes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNode());
				UProperty* NewProp_TransformBases = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransformBases"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TransformBases, URig), 0x0040000000000041);
				UProperty* NewProp_TransformBases_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TransformBases, TEXT("TransformBases"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTransformBase());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/Rig.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("URig : that has rigging data for skeleton\n        - used for retargeting\n        - support to share different animations"));
				MetaData->SetValue(NewProp_Nodes, TEXT("Category"), TEXT("Rig"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ToolTip"), TEXT("Skeleton bone tree - each contains name and parent index*"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("Category"), TEXT("Rig"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/Rig.h"));
				MetaData->SetValue(NewProp_TransformBases, TEXT("ToolTip"), TEXT("Skeleton bone tree - each contains name and parent index*"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URig(Z_Construct_UClass_URig, &URig::StaticClass, TEXT("URig"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(URig);
	UClass* Z_Construct_UClass_USaveGame_NoRegister()
	{
		return USaveGame::StaticClass();
	}
	UClass* Z_Construct_UClass_USaveGame()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USaveGame::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/SaveGame.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/SaveGame.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This class acts as a base class for a save game object that can be used to save state about the game.\nWhen you create your own save game subclass, you would add member variables for the information that you want to save.\nThen when you want to save a game, create an instance of this object using CreateSaveGameObject, fill in the data, and use SaveGameToSlot, providing a slot name.\nTo load the game you then just use LoadGameFromSlot, and read the data from the resulting object.\n\n@see https://docs.unrealengine.com/latest/INT/Gameplay/SaveGame"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USaveGame(Z_Construct_UClass_USaveGame, &USaveGame::StaticClass, TEXT("USaveGame"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USaveGame);
	UClass* Z_Construct_UClass_USimpleConstructionScript_NoRegister()
	{
		return USimpleConstructionScript::StaticClass();
	}
	UClass* Z_Construct_UClass_USimpleConstructionScript()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USimpleConstructionScript::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActorComponentNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActorComponentNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ActorComponentNodes_DEPRECATED, USimpleConstructionScript), 0x0040000020000000);
				UProperty* NewProp_ActorComponentNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActorComponentNodes, TEXT("ActorComponentNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_RootNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RootNode_DEPRECATED, USimpleConstructionScript), 0x0040000020000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_DefaultSceneRootNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSceneRootNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DefaultSceneRootNode, USimpleConstructionScript), 0x0040000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_AllNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AllNodes, USimpleConstructionScript), 0x0040000000000000);
				UProperty* NewProp_AllNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllNodes, TEXT("AllNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
				UProperty* NewProp_RootNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RootNodes, USimpleConstructionScript), 0x0040000000000000);
				UProperty* NewProp_RootNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RootNodes, TEXT("RootNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_ActorComponentNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_ActorComponentNodes, TEXT("ToolTip"), TEXT("(DEPRECATED) Actor Component based nodes are stored here.  They cannot be in the tree hierarchy"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_RootNode, TEXT("ToolTip"), TEXT("(DEPRECATED) Root node of the construction script"));
				MetaData->SetValue(NewProp_DefaultSceneRootNode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_DefaultSceneRootNode, TEXT("ToolTip"), TEXT("Default scene root node; used when no other nodes are available to use as the root"));
				MetaData->SetValue(NewProp_AllNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_AllNodes, TEXT("ToolTip"), TEXT("All nodes that exist in the hierarchy of this SimpleConstructionScript"));
				MetaData->SetValue(NewProp_RootNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SimpleConstructionScript.h"));
				MetaData->SetValue(NewProp_RootNodes, TEXT("ToolTip"), TEXT("Root nodes of the construction script"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USimpleConstructionScript(Z_Construct_UClass_USimpleConstructionScript, &USimpleConstructionScript::StaticClass, TEXT("USimpleConstructionScript"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USimpleConstructionScript);
	UClass* Z_Construct_UClass_USCS_Node_NoRegister()
	{
		return USCS_Node::StaticClass();
	}
	UClass* Z_Construct_UClass_USCS_Node()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USCS_Node::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InternalVariableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InternalVariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(InternalVariableName, USCS_Node), 0x0040000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVariableNameAutoGenerated_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bVariableNameAutoGenerated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVariableNameAutoGenerated"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVariableNameAutoGenerated_DEPRECATED, USCS_Node), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bVariableNameAutoGenerated_DEPRECATED, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_NativeComponentName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NativeComponentName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NativeComponentName_DEPRECATED, USCS_Node), 0x0010000020000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsNative_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bIsNative = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsNative"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsNative_DEPRECATED, USCS_Node), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsNative_DEPRECATED, USCS_Node), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsFalseRoot_DEPRECATED, USCS_Node, bool);
				UProperty* NewProp_bIsFalseRoot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsFalseRoot"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsFalseRoot_DEPRECATED, USCS_Node), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bIsFalseRoot_DEPRECATED, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_VariableGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VariableGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VariableGuid, USCS_Node), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MetaDataArray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MetaDataArray, USCS_Node), 0x0010000000000001);
				UProperty* NewProp_MetaDataArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MetaDataArray, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBPVariableMetaDataEntry());
				UProperty* NewProp_ChildNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChildNodes, USCS_Node), 0x0010000000000000);
				UProperty* NewProp_ChildNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildNodes, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USCS_Node_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsParentComponentNative, USCS_Node, bool);
				UProperty* NewProp_bIsParentComponentNative = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsParentComponentNative"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsParentComponentNative, USCS_Node), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsParentComponentNative, USCS_Node), sizeof(bool), true);
				UProperty* NewProp_ParentComponentOwnerClassName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentComponentOwnerClassName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParentComponentOwnerClassName, USCS_Node), 0x0010000000000000);
				UProperty* NewProp_ParentComponentOrVariableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentComponentOrVariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParentComponentOrVariableName, USCS_Node), 0x0010000000000000);
				UProperty* NewProp_AttachToName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttachToName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(AttachToName, USCS_Node), 0x0010000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_CategoryName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CategoryName"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(CategoryName, USCS_Node), 0x0010000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_VariableName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VariableName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(VariableName, USCS_Node), 0x0010000000002000);
				UProperty* NewProp_CookedComponentInstancingData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CookedComponentInstancingData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CookedComponentInstancingData, USCS_Node), 0x0010000000000000, Z_Construct_UScriptStruct_FBlueprintCookedComponentInstancingData());
				UProperty* NewProp_ComponentTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentTemplate"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ComponentTemplate, USCS_Node), 0x0010000000080008, Z_Construct_UClass_UActorComponent_NoRegister());
				UProperty* NewProp_ComponentClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ComponentClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(ComponentClass, USCS_Node), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SCS_Node.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_InternalVariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_InternalVariableName, TEXT("ToolTip"), TEXT("Internal variable name. This is used for:\n                      a) Generating the component template (archetype) object name.\n                      b) A UObjectProperty in the generated Blueprint class. This holds a reference to the component instance created at Actor construction time.\n                      c) Archetype lookup through the generated Blueprint class. All instances route back to the archetype through the variable name (i.e. not the template name)."));
				MetaData->SetValue(NewProp_bVariableNameAutoGenerated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bVariableNameAutoGenerated, TEXT("ToolTip"), TEXT("(DEPRECATED) If true, the variable name was a autogenerated and is not presented to the user"));
				MetaData->SetValue(NewProp_NativeComponentName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_NativeComponentName, TEXT("ToolTip"), TEXT("(DEPRECATED) If this is a native component, this is the name of the UActorComponent"));
				MetaData->SetValue(NewProp_bIsNative, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsNative, TEXT("ToolTip"), TEXT("(DEPRECATED) Indicates if this is a native component or not"));
				MetaData->SetValue(NewProp_bIsFalseRoot, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsFalseRoot, TEXT("ToolTip"), TEXT("(DEPRECATED)"));
				MetaData->SetValue(NewProp_VariableGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("Category"), TEXT("BPVariableDescription"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ToolTip"), TEXT("Metadata information for this Node"));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ToolTip"), TEXT("Set of child nodes"));
				MetaData->SetValue(NewProp_bIsParentComponentNative, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_bIsParentComponentNative, TEXT("ToolTip"), TEXT("If the node is parented, this indicates whether or not the template is found in the CDO's Components array"));
				MetaData->SetValue(NewProp_ParentComponentOwnerClassName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ParentComponentOwnerClassName, TEXT("ToolTip"), TEXT("If the node is attached to another node inherited from a parent Blueprint, this contains the name of the Blueprint parent class that owns the component template //@TODO: We can potentially remove this if/when inherited SCS component template instances are included in subobject serialization, as we could then infer that the owner class is always the same as the BP class."));
				MetaData->SetValue(NewProp_ParentComponentOrVariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ParentComponentOrVariableName, TEXT("ToolTip"), TEXT("Component template or variable that Node might be parented to"));
				MetaData->SetValue(NewProp_AttachToName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_AttachToName, TEXT("ToolTip"), TEXT("Socket/Bone that Node might attach to"));
				MetaData->SetValue(NewProp_CategoryName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_CategoryName, TEXT("ToolTip"), TEXT("If non-None, the assigned category name"));
				MetaData->SetValue(NewProp_VariableName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_CookedComponentInstancingData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_CookedComponentInstancingData, TEXT("ToolTip"), TEXT("Cached data for faster runtime instancing (only used in cooked builds)"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ComponentTemplate, TEXT("ToolTip"), TEXT("Template for the component to create"));
				MetaData->SetValue(NewProp_ComponentClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SCS_Node.h"));
				MetaData->SetValue(NewProp_ComponentClass, TEXT("ToolTip"), TEXT("Component class"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USCS_Node(Z_Construct_UClass_USCS_Node, &USCS_Node::StaticClass, TEXT("USCS_Node"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USCS_Node);
	UClass* Z_Construct_UClass_USelection_NoRegister()
	{
		return USelection::StaticClass();
	}
	UClass* Z_Construct_UClass_USelection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USelection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Selection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Selection.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USelection(Z_Construct_UClass_USelection, &USelection::StaticClass, TEXT("USelection"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USelection);
	UEnum* Z_Construct_UEnum_Engine_EImpactDamageOverride()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EImpactDamageOverride"), 0, Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EImpactDamageOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IDO_None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IDO_On")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IDO_Off")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IDO_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EImpactDamageOverride");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless IDO_On or IDO_Off is chosen."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EImpactDamageOverride_CRC() { return 1348283302U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParameters()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleParameters"), sizeof(FDestructibleParameters), Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_Flags = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Flags"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Flags, FDestructibleParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleParametersFlag());
			UProperty* NewProp_DepthParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DepthParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DepthParameters, FDestructibleParameters), 0x0010000000000041);
			UProperty* NewProp_DepthParameters_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DepthParameters, TEXT("DepthParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDestructibleDepthParameters());
			UProperty* NewProp_SpecialHierarchyDepths = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpecialHierarchyDepths"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpecialHierarchyDepths, FDestructibleParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths());
			UProperty* NewProp_AdvancedParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdvancedParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AdvancedParameters, FDestructibleParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleAdvancedParameters());
			UProperty* NewProp_DebrisParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DebrisParameters, FDestructibleParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleDebrisParameters());
			UProperty* NewProp_DamageParameters = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DamageParameters, FDestructibleParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleDamageParameters());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that apply to a destructible actor."));
			MetaData->SetValue(NewProp_Flags, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_Flags, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_Flags, TEXT("ToolTip"), TEXT("A collection of flags defined in DestructibleParametersFlag."));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DepthParameters, TEXT("ToolTip"), TEXT("Parameters that apply to every chunk at a given level.\nthe element [0] of the array applies to the level 0 (unfractured) chunk, element [1] applies\nto the level 1 chunks, etc."));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_SpecialHierarchyDepths, TEXT("ToolTip"), TEXT("Special hierarchy depths for various behaviors."));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_AdvancedParameters, TEXT("ToolTip"), TEXT("Parameters that are less-often used.  See DestructibleAdvancedParameters."));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisParameters, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk debris-level settings.  See DestructibleDebrisParameters."));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("Category"), TEXT("DestructibleParameters"));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageParameters, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk damage.  See DestructibleDamageParameters."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleParameters_CRC() { return 3911653275U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleSpecialHierarchyDepths"), sizeof(FDestructibleSpecialHierarchyDepths), Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleSpecialHierarchyDepths"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleSpecialHierarchyDepths>, EStructFlags(0x00000001));
			UProperty* NewProp_EssentialDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EssentialDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EssentialDepth, FDestructibleSpecialHierarchyDepths), 0x0010000000000001);
			UProperty* NewProp_DebrisDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DebrisDepth, FDestructibleSpecialHierarchyDepths), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebris, FDestructibleSpecialHierarchyDepths, bool);
			UProperty* NewProp_bEnableDebris = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebris"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebris, FDestructibleSpecialHierarchyDepths), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableDebris, FDestructibleSpecialHierarchyDepths), sizeof(bool), true);
			UProperty* NewProp_MinimumFractureDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinimumFractureDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinimumFractureDepth, FDestructibleSpecialHierarchyDepths), 0x0010000000000001);
			UProperty* NewProp_SupportDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SupportDepth, FDestructibleSpecialHierarchyDepths), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Special hierarchy depths for various behaviors."));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("DisplayName"), TEXT("Essential LOD Depth"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_EssentialDepth, TEXT("ToolTip"), TEXT("The chunk hierarchy depth up to which chunks will always be processed.  These chunks are considered\nto be essential either for gameplay or visually.\nThe minimum value is 0, meaning the level 0 chunk is always considered essential.\nDefault value is 0."));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("editcondition"), TEXT("bEnableDebris"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("ToolTip"), TEXT("The hierarchy depth at which chunks are considered to be \"debris.\""));
			MetaData->SetValue(NewProp_DebrisDepth, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bEnableDebris, TEXT("ToolTip"), TEXT("Enables debris at a specific depth level.\n@see DebrisDepth"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_MinimumFractureDepth, TEXT("ToolTip"), TEXT("The chunks will not be broken free below this depth."));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("Category"), TEXT("DestructibleSpecialHierarchyDepths"));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_SupportDepth, TEXT("ToolTip"), TEXT("The chunk hierarchy depth at which to create a support graph.  Higher depth levels give more detailed support,\nbut will give a higher computational load.  Chunks below the support depth will never be supported."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleSpecialHierarchyDepths_CRC() { return 2031555104U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleAdvancedParameters()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleAdvancedParameters"), sizeof(FDestructibleAdvancedParameters), Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleAdvancedParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleAdvancedParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_FractureImpulseScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FractureImpulseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FractureImpulseScale, FDestructibleAdvancedParameters), 0x0010000000000001);
			UProperty* NewProp_MaxChunkSpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxChunkSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxChunkSpeed, FDestructibleAdvancedParameters), 0x0010000000000001);
			UProperty* NewProp_ImpactVelocityThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactVelocityThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactVelocityThreshold, FDestructibleAdvancedParameters), 0x0010000000000001);
			UProperty* NewProp_DamageCap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageCap"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DamageCap, FDestructibleAdvancedParameters), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that are less-often used."));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_FractureImpulseScale, TEXT("ToolTip"), TEXT("Scale factor used to apply an impulse force along the normal of chunk when fractured.  This is used\nin order to \"push\" the pieces out as they fracture."));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_MaxChunkSpeed, TEXT("ToolTip"), TEXT("If greater than 0, the chunks' speeds will not be allowed to exceed this value.  Use 0\nto disable this feature (this is the default)."));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactVelocityThreshold, TEXT("ToolTip"), TEXT("Large impact force may be reported if rigid bodies are spawned inside one another.  In this case the realative velocity of the two\nobjects will be low.  This variable allows the user to set a minimum velocity threshold for impacts to ensure that the objects are\nmoving at a min velocity in order for the impact force to be considered."));
			MetaData->SetValue(NewProp_DamageCap, TEXT("Category"), TEXT("DestructibleAdvancedParameters"));
			MetaData->SetValue(NewProp_DamageCap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageCap, TEXT("ToolTip"), TEXT("Limits the amount of damage applied to a chunk.  This is useful for preventing the entire destructible\nfrom getting pulverized by a very large application of damage.  This can easily happen when impact damage is\nused, and the damage amount is proportional to the impact force (see forceToDamage)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleAdvancedParameters_CRC() { return 3312737713U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDebrisParameters()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleDebrisParameters"), sizeof(FDestructibleDebrisParameters), Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDebrisParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDebrisParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ValidBounds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ValidBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ValidBounds, FDestructibleDebrisParameters), 0x0010000000000001, Z_Construct_UScriptStruct_FBox());
			UProperty* NewProp_DebrisMaxSeparationMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisMaxSeparationMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebrisMaxSeparationMax, FDestructibleDebrisParameters), 0x0010000000000001);
			UProperty* NewProp_DebrisMaxSeparationMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisMaxSeparationMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebrisMaxSeparationMin, FDestructibleDebrisParameters), 0x0010000000000001);
			UProperty* NewProp_DebrisLifetimeMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisLifetimeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebrisLifetimeMax, FDestructibleDebrisParameters), 0x0010000000000001);
			UProperty* NewProp_DebrisLifetimeMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DebrisLifetimeMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebrisLifetimeMin, FDestructibleDebrisParameters), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk debris-level settings."));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ValidBounds, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed if they leave this box.\nThe box translates with the destructible actor's initial position, but does not\nrotate or scale."));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMax, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMax, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisMaxSeparationMin, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed if they are separated from\ntheir origin by a distance greater than maxSeparation.  The actual maxSeparation is\ninterpolated between these two values, based upon the module's LOD setting.  To disable\nmaxSeparation, clear the bDebrisMaxSeparation flag in the flags field.\nIf debrisMaxSeparationMax < debrisMaxSeparationMin, the mean of the two is used for both.\nDefault debrisMaxSeparationMin = 1.0, debrisMaxSeparationMax = 10.0f."));
			MetaData->SetValue(NewProp_DebrisLifetimeMax, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisLifetimeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("Category"), TEXT("DestructibleDebrisParameters"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DebrisLifetimeMin, TEXT("ToolTip"), TEXT("\"Debris chunks\" (see debrisDepth, above) will be destroyed after a time (in seconds)\nseparated from non-debris chunks.  The actual lifetime is interpolated between these\ntwo bDebrisTimeout, based upon the module's LOD setting.  To disable lifetime, clear the\nbDebrisTimeout flag in the flags field.\nIf debrisLifetimeMax < debrisLifetimeMin, the mean of the two is used for both.\nDefault debrisLifetimeMin = 1.0, debrisLifetimeMax = 10.0f."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDebrisParameters_CRC() { return 3722204273U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDamageParameters()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleDamageParameters"), sizeof(FDestructibleDamageParameters), Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDamageParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDamageParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ImpactResistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactResistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactResistance, FDestructibleDamageParameters), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCustomImpactResistance, FDestructibleDamageParameters, bool);
			UProperty* NewProp_bCustomImpactResistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCustomImpactResistance"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCustomImpactResistance, FDestructibleDamageParameters), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCustomImpactResistance, FDestructibleDamageParameters), sizeof(bool), true);
			UProperty* NewProp_DefaultImpactDamageDepth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultImpactDamageDepth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DefaultImpactDamageDepth, FDestructibleDamageParameters), 0x0010000000000001);
			UProperty* NewProp_ImpactDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactDamage"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ImpactDamage, FDestructibleDamageParameters), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableImpactDamage, FDestructibleDamageParameters, bool);
			UProperty* NewProp_bEnableImpactDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableImpactDamage"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableImpactDamage, FDestructibleDamageParameters), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableImpactDamage, FDestructibleDamageParameters), sizeof(bool), true);
			UProperty* NewProp_DamageSpread = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageSpread"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DamageSpread, FDestructibleDamageParameters), 0x0010000000000001);
			UProperty* NewProp_DamageThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DamageThreshold, FDestructibleDamageParameters), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Parameters that pertain to chunk damage."));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ClampMin"), TEXT("0.001"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("editcondition"), TEXT("bCustomImpactResistance"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("ToolTip"), TEXT("Controls how much resistance is applied to colliding objects. Weak materials like glass should set this to a low value so that objects will pass right through them during fracture.\n@see DepthParameters for per level control of ImpactResistance"));
			MetaData->SetValue(NewProp_ImpactResistance, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bCustomImpactResistance, TEXT("ToolTip"), TEXT("By default, objects that collide with destructibles will bounce back. Custom resistance allows for finer control of how much a destructible \"pushes back\" against a colliding object.\n@see ImpactResistance"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("editcondition"), TEXT("bEnableImpactDamage"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("ToolTip"), TEXT("Max depth level where impact damage is enabled. @see DepthParameters for per level control of ImpactDamage\nIf negative, impact damage is disabled"));
			MetaData->SetValue(NewProp_DefaultImpactDamageDepth, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("editcondition"), TEXT("bEnableImpactDamage"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactDamage, TEXT("ToolTip"), TEXT("Controls how much damage is applied upon collision. Damage = ImpactDamage * ImpactForce.\n@see DepthParameters for per level control of ImpactDamage"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bEnableImpactDamage, TEXT("ToolTip"), TEXT("Whether to apply damage to destructible when colliding with an object.\n@see ImpactDamage"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageSpread, TEXT("ToolTip"), TEXT("Controls how easily damage spreads. DamageRadius = Damage*DamageSpread. All chunks within DamageRadius will take damage. Full damage is taken at zero distance, and zero damage at the DamageRadius."));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("Category"), TEXT("DestructibleDamageParameters"));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_DamageThreshold, TEXT("ToolTip"), TEXT("The damage amount which will cause a chunk to fracture (break free)."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDamageParameters_CRC() { return 164977227U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleParametersFlag()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleParametersFlag"), sizeof(FDestructibleParametersFlag), Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleParametersFlag"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleParametersFlag>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFormExtendedStructures, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bFormExtendedStructures = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bFormExtendedStructures"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFormExtendedStructures, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bFormExtendedStructures, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseValidBounds, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bUseValidBounds = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseValidBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseValidBounds, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseValidBounds, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccurateRaycasts, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAccurateRaycasts = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAccurateRaycasts"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccurateRaycasts, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAccurateRaycasts, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCrumbleSmallestChunks, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bCrumbleSmallestChunks = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCrumbleSmallestChunks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCrumbleSmallestChunks, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCrumbleSmallestChunks, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebrisMaxSeparation, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bDebrisMaxSeparation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDebrisMaxSeparation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebrisMaxSeparation, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebrisMaxSeparation, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebrisTimeout, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bDebrisTimeout = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDebrisTimeout"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebrisTimeout, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebrisTimeout, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWorldSupport, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bWorldSupport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bWorldSupport"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWorldSupport, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bWorldSupport, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAssetDefinedSupport, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAssetDefinedSupport = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAssetDefinedSupport"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAssetDefinedSupport, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAssetDefinedSupport, FDestructibleParametersFlag), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAccumulateDamage, FDestructibleParametersFlag, uint8);
			UProperty* NewProp_bAccumulateDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAccumulateDamage"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAccumulateDamage, FDestructibleParametersFlag), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAccumulateDamage, FDestructibleParametersFlag), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Flags that apply to a destructible actor."));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bFormExtendedStructures, TEXT("ToolTip"), TEXT("If initially static, the destructible will become part of an extended support structure if it is\nin contact with another static destructible that also has this flag set."));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bUseValidBounds, TEXT("ToolTip"), TEXT("If set, the ValidBounds field of NxDestructibleParameters will be used.  These bounds are translated\n(but not scaled or rotated) to the origin of the destructible actor.  If a chunk or chunk island moves\noutside of those bounds, it is destroyed."));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAccurateRaycasts, TEXT("ToolTip"), TEXT("If set, the NxDestructibleActor::rayCast function will search within the nearest visible chunk hit\nfor collisions with child chunks.  This is used to get a better raycast position and normal, in\ncase the parent collision volume does not tightly fit the graphics mesh.  The returned chunk index\nwill always be that of the visible parent that is intersected, however."));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bCrumbleSmallestChunks, TEXT("ToolTip"), TEXT("If set, the smallest chunks may be further broken down, either by fluid crumbles (if a crumble particle\nsystem is specified in the NxDestructibleActorDesc), or by simply removing the chunk if no crumble\nparticle system is specified.  Note: the \"smallest chunks\" are normally defined to be the deepest level\nof the fracture hierarchy.  However, they may be taken from higher levels of the hierarchy if\nNxModuleDestructible::setMaxChunkDepthOffset is called with a non-zero value."));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bDebrisMaxSeparation, TEXT("ToolTip"), TEXT("Whether or not chunks at or deeper than the \"debris\" depth (see NxDestructibleParameters::debrisDepth)\nwill be removed if they separate too far from their origins.  The maxSeparation is a value between\nNxDestructibleParameters::debrisMaxSeparationMin and NxDestructibleParameters::debrisMaxSeparationMax,\nbased upon the destructible module's LOD setting."));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bDebrisTimeout, TEXT("ToolTip"), TEXT("Whether or not chunks at or deeper than the \"debris\" depth (see NxDestructibleParameters::debrisDepth)\nwill time out.  The lifetime is a value between NxDestructibleParameters::debrisLifetimeMin and\nNxDestructibleParameters::debrisLifetimeMax, based upon the destructible module's LOD setting."));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bWorldSupport, TEXT("ToolTip"), TEXT("If set, then chunks which overlap the Scene's static geometry will have environmental support in\nstatic destructibles.\n\nNote: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as\n\"support\" chunks AND overlap the Scene's static geometry in order to be environmentally supported."));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAssetDefinedSupport, TEXT("ToolTip"), TEXT("If set, then chunks which are tagged as \"support\" chunks (via NxDestructibleChunkDesc::isSupportChunk)\nwill have environmental support in static destructibles.\n\nNote: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as\n\"support\" chunks AND overlap the Scene's static geometry in order to be environmentally supported."));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("Category"), TEXT("DestructibleParametersFlag"));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_bAccumulateDamage, TEXT("ToolTip"), TEXT("If set, chunks will \"remember\" damage applied to them, so that many applications of a damage amount\nbelow damageThreshold will eventually fracture the chunk.  If not set, a single application of\ndamage must exceed damageThreshold in order to fracture the chunk."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleParametersFlag_CRC() { return 993072240U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDestructibleDepthParameters()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DestructibleDepthParameters"), sizeof(FDestructibleDepthParameters), Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DestructibleDepthParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDestructibleDepthParameters>, EStructFlags(0x00000001));
			UProperty* NewProp_ImpactDamageOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImpactDamageOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ImpactDamageOverride, FDestructibleDepthParameters), 0x0010000000000001, Z_Construct_UEnum_Engine_EImpactDamageOverride());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Properties that may be set for all chunks at a particular depth in the fracture hierarchy."));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("Category"), TEXT("DestructibleDepthParameters"));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
			MetaData->SetValue(NewProp_ImpactDamageOverride, TEXT("ToolTip"), TEXT("Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless one of the override options (see EImpactDamageOverride) is chosen."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDestructibleDepthParameters_CRC() { return 1377683402U; }
	UClass* Z_Construct_UClass_UDestructibleMesh_NoRegister()
	{
		return UDestructibleMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UDestructibleMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USkeletalMesh();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDestructibleMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_FractureChunkMeshes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureChunkMeshes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FractureChunkMeshes, UDestructibleMesh), 0x0010000800002000);
				UProperty* NewProp_FractureChunkMeshes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FractureChunkMeshes, TEXT("FractureChunkMeshes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_SourceSMImportTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceSMImportTimestamp"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceSMImportTimestamp, UDestructibleMesh), 0x0010000800000000, Z_Construct_UScriptStruct_FDateTime());
				UProperty* NewProp_SourceStaticMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceStaticMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SourceStaticMesh, UDestructibleMesh), 0x0010000800000000, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_FractureSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FractureSettings, UDestructibleMesh), 0x0012000800080008, Z_Construct_UClass_UDestructibleFractureSettings_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FractureEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FractureEffects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FractureEffects, UDestructibleMesh), 0x0010000000000041);
				UProperty* NewProp_FractureEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FractureEffects, TEXT("FractureEffects"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFractureEffect());
				UProperty* NewProp_DefaultDestructibleParameters = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDestructibleParameters"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultDestructibleParameters, UDestructibleMesh), 0x0010000000000001, Z_Construct_UScriptStruct_FDestructibleParameters());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Mesh LevelOfDetail Mirroring Physics Reimport Clothing Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/DestructibleMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Holds an APEX destructible asset as well as an associated USkeletalMesh."));
				MetaData->SetValue(NewProp_FractureChunkMeshes, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureChunkMeshes, TEXT("ToolTip"), TEXT("Array of static meshes to build the fracture chunks from"));
				MetaData->SetValue(NewProp_SourceSMImportTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_SourceSMImportTimestamp, TEXT("ToolTip"), TEXT("Timestamp of the source static meshes last import at the time this destruction mesh has been generated."));
				MetaData->SetValue(NewProp_SourceStaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_SourceStaticMesh, TEXT("ToolTip"), TEXT("Static mesh this destructible mesh is created from. Is nullptr if not created from a static mesh"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureSettings, TEXT("ToolTip"), TEXT("Information used to author an NxDestructibleAsset"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_FractureEffects, TEXT("ToolTip"), TEXT("Fracture effects for each fracture level, unless overridden in the component."));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("Category"), TEXT("DestructibleMesh"));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/DestructibleMesh.h"));
				MetaData->SetValue(NewProp_DefaultDestructibleParameters, TEXT("ToolTip"), TEXT("Parameters controlling the destruction behavior."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDestructibleMesh(Z_Construct_UClass_UDestructibleMesh, &UDestructibleMesh::StaticClass, TEXT("UDestructibleMesh"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDestructibleMesh);
	UScriptStruct* Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SkeletalMeshLODGroupSettings"), sizeof(FSkeletalMeshLODGroupSettings), Get_Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SkeletalMeshLODGroupSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSkeletalMeshLODGroupSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_OptimizationSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptimizationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptimizationSettings, FSkeletalMeshLODGroupSettings), 0x0020080000000001, Z_Construct_UScriptStruct_FSkeletalMeshOptimizationSettings());
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScreenSize, FSkeletalMeshLODGroupSettings), 0x0020080000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshReductionSettings.h"));
			MetaData->SetValue(NewProp_OptimizationSettings, TEXT("Category"), TEXT("Reduction"));
			MetaData->SetValue(NewProp_OptimizationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshReductionSettings.h"));
			MetaData->SetValue(NewProp_OptimizationSettings, TEXT("ToolTip"), TEXT("The optimization settings to use for the respective LOD level"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("Category"), TEXT("Reduction"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshReductionSettings.h"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ToolTip"), TEXT("The screen sizes to use for the respective LOD level"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings_CRC() { return 2764134779U; }
	UClass* Z_Construct_UClass_USkeletalMeshReductionSettings_NoRegister()
	{
		return USkeletalMeshReductionSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_USkeletalMeshReductionSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USkeletalMeshReductionSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Settings, USkeletalMeshReductionSettings), 0x0020080000044000);
				UProperty* NewProp_Settings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Settings, TEXT("Settings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FSkeletalMeshLODGroupSettings());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SkeletalMeshReductionSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshReductionSettings.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshReductionSettings.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USkeletalMeshReductionSettings(Z_Construct_UClass_USkeletalMeshReductionSettings, &USkeletalMeshReductionSettings::StaticClass, TEXT("USkeletalMeshReductionSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USkeletalMeshReductionSettings);
	UFunction* Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation()
	{
		struct SkeletalMeshSocket_eventGetSocketLocation_Parms
		{
			const USkeletalMeshComponent* SkelComp;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USkeletalMeshSocket();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSocketLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(SkeletalMeshSocket_eventGetSocketLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SkeletalMeshSocket_eventGetSocketLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SkelComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkelComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SkelComp, SkeletalMeshSocket_eventGetSocketLocation_Parms), 0x0010000000080082, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|SkeletalMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation()
	{
		struct SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms
		{
			const USkeletalMeshComponent* SkelComp;
			FVector WorldLocation;
			FVector WorldNormal;
		};
		UObject* Outer=Z_Construct_UClass_USkeletalMeshSocket();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InitializeSocketFromLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820403, 65535, sizeof(SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms));
			UProperty* NewProp_WorldNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldNormal, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SkelComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkelComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SkelComp, SkeletalMeshSocket_eventInitializeSocketFromLocation_Parms), 0x0010000000080082, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|SkeletalMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets BoneName, RelativeLocation and RelativeRotation based on closest bone to WorldLocation and WorldNormal"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_SkelComp, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USkeletalMeshSocket_NoRegister()
	{
		return USkeletalMeshSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_USkeletalMeshSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USkeletalMeshSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceAlwaysAnimated, USkeletalMeshSocket, bool);
				UProperty* NewProp_bForceAlwaysAnimated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceAlwaysAnimated"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceAlwaysAnimated, USkeletalMeshSocket), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bForceAlwaysAnimated, USkeletalMeshSocket), sizeof(bool), true);
				UProperty* NewProp_RelativeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeScale, USkeletalMeshSocket), 0x0010000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, USkeletalMeshSocket), 0x0010000000000015, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeLocation, USkeletalMeshSocket), 0x0010000000000015, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoneName, USkeletalMeshSocket), 0x0010000000020015);
				UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SocketName, USkeletalMeshSocket), 0x0010000000020015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USkeletalMeshSocket_GetSocketLocation(), "GetSocketLocation"); // 925765803
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USkeletalMeshSocket_InitializeSocketFromLocation(), "InitializeSocketFromLocation"); // 1158925916
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Actor"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_bForceAlwaysAnimated, TEXT("ToolTip"), TEXT("If true then the hierarchy of bones this socket is attached to will always be\n          evaluated, even if it had previously been removed due to the current lod setting"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("Socket Parameters"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SkeletalMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("Defines a named attachment location on the USkeletalMesh.\nThese are set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the SkeletalMeshComponent.\nThe Outer of a SkeletalMeshSocket should always be the USkeletalMesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USkeletalMeshSocket(Z_Construct_UClass_USkeletalMeshSocket, &USkeletalMeshSocket::StaticClass, TEXT("USkeletalMeshSocket"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USkeletalMeshSocket);
	UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister()
	{
		return USlateBrushAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateBrushAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USlateBrushAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Brush, USlateBrushAsset), 0x0010000000000001, Z_Construct_UScriptStruct_FSlateBrush());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Slate/SlateBrushAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/SlateBrushAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An asset describing how a texture can exist in slate's DPI-aware environment\nand how this texture responds to resizing. e.g. Scale9-stretching? Tiling?"));
				MetaData->SetValue(NewProp_Brush, TEXT("Category"), TEXT("Brush"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Classes/Slate/SlateBrushAsset.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("The slate brush resource describing the texture's behavior."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateBrushAsset(Z_Construct_UClass_USlateBrushAsset, &USlateBrushAsset::StaticClass, TEXT("USlateBrushAsset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateBrushAsset);
	UEnum* Z_Construct_UEnum_Engine_ETextureSamplerFilter()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureSamplerFilter"), 0, Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSamplerFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::Point")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::Bilinear")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::Trilinear")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::AnisotropicPoint")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::AnisotropicLinear")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETextureSamplerFilter::ETextureSamplerFilter_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ETextureSamplerFilter");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Must match enum ESamplerFilter in RHIDefinitions.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSamplerFilter_CRC() { return 2812068288U; }
	UEnum* Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETexturePowerOfTwoSetting"), 0, Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETexturePowerOfTwoSetting"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETexturePowerOfTwoSetting::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETexturePowerOfTwoSetting::PadToPowerOfTwo")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETexturePowerOfTwoSetting::PadToSquarePowerOfTwo")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ETexturePowerOfTwoSetting::ETexturePowerOfTwoSetting_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ETexturePowerOfTwoSetting::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Do not modify the texture dimensions."));
			MetaData->SetValue(ReturnEnum, TEXT("PadToPowerOfTwo.ToolTip"), TEXT("Pad the texture to the nearest power of two size."));
			MetaData->SetValue(ReturnEnum, TEXT("PadToSquarePowerOfTwo.ToolTip"), TEXT("Pad the texture to the nearest square power of two size."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Options for texture padding mode."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting_CRC() { return 3760269984U; }
	UEnum* Z_Construct_UEnum_Engine_TextureMipGenSettings()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("TextureMipGenSettings"), 0, Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureMipGenSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_FromTextureGroup")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_SimpleAverage")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen0")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen1")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen2")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen3")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen4")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen5")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen6")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen7")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen8")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen9")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Sharpen10")), 12));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_NoMipmaps")), 13));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_LeaveExistingMips")), 14));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Blur1")), 15));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Blur2")), 16));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Blur3")), 17));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Blur4")), 18));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_Blur5")), 19));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMGS_MAX")), 20));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("TextureMipGenSettings");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur1.DisplayName"), TEXT("Blur1"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur1.ToolTip"), TEXT("Blur further (useful for image based reflections)."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur2.DisplayName"), TEXT("Blur2"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur3.DisplayName"), TEXT("Blur3"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur4.DisplayName"), TEXT("Blur4"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Blur5.DisplayName"), TEXT("Blur5"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_FromTextureGroup.DisplayName"), TEXT("FromTextureGroup"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_FromTextureGroup.ToolTip"), TEXT("Default for the \"texture\"."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_LeaveExistingMips.DisplayName"), TEXT("LeaveExistingMips"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_LeaveExistingMips.ToolTip"), TEXT("Do not touch existing mip chain as it contains generated data."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_NoMipmaps.DisplayName"), TEXT("NoMipmaps"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen0.DisplayName"), TEXT("Sharpen0"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen0.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen1.DisplayName"), TEXT("Sharpen1"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen1.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen10.DisplayName"), TEXT("Sharpen10"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen10.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen2.DisplayName"), TEXT("Sharpen2"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen2.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen3.DisplayName"), TEXT("Sharpen3"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen3.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen4.DisplayName"), TEXT("Sharpen4"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen4.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen5.DisplayName"), TEXT("Sharpen5"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen5.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen6.DisplayName"), TEXT("Sharpen6"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen6.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen7.DisplayName"), TEXT("Sharpen7"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen7.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen8.DisplayName"), TEXT("Sharpen8"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen8.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen9.DisplayName"), TEXT("Sharpen9"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_Sharpen9.ToolTip"), TEXT("8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme."));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_SimpleAverage.DisplayName"), TEXT("SimpleAverage"));
			MetaData->SetValue(ReturnEnum, TEXT("TMGS_SimpleAverage.ToolTip"), TEXT("2x2 average, default for the \"texture group\"."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureMipGenSettings_CRC() { return 3773832808U; }
	UEnum* Z_Construct_UEnum_Engine_TextureGroup()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureGroup_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("TextureGroup"), 0, Get_Z_Construct_UEnum_Engine_TextureGroup_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_World")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_WorldNormalMap")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_WorldSpecular")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Character")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_CharacterNormalMap")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_CharacterSpecular")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Weapon")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_WeaponNormalMap")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_WeaponSpecular")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Vehicle")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_VehicleNormalMap")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_VehicleSpecular")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Cinematic")), 12));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Effects")), 13));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_EffectsNotFiltered")), 14));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Skybox")), 15));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_UI")), 16));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Lightmap")), 17));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_RenderTarget")), 18));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_MobileFlattened")), 19));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_ProcBuilding_Face")), 20));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_ProcBuilding_LightMap")), 21));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Shadowmap")), 22));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_ColorLookupTable")), 23));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Terrain_Heightmap")), 24));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Terrain_Weightmap")), 25));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Bokeh")), 26));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_IESLightProfile")), 27));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_Pixels2D")), 28));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_HierarchicalLOD")), 29));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEXTUREGROUP_MAX")), 30));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("TextureGroup");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureDefines.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Bokeh.DisplayName"), TEXT("Bokeh"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Bokeh.ToolTip"), TEXT("Using this TextureGroup triggers special mip map generation code only useful for the BokehDOF post process."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Character.DisplayName"), TEXT("Character"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_CharacterNormalMap.DisplayName"), TEXT("CharacterNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_CharacterSpecular.DisplayName"), TEXT("CharacterSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Cinematic.DisplayName"), TEXT("Cinematic"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ColorLookupTable.DisplayName"), TEXT("ColorLookupTable"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ColorLookupTable.ToolTip"), TEXT("No compression, no mips."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Effects.DisplayName"), TEXT("Effects"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_EffectsNotFiltered.DisplayName"), TEXT("EffectsNotFiltered"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_HierarchicalLOD.DisplayName"), TEXT("Hierarchical LOD"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_HierarchicalLOD.ToolTip"), TEXT("Hierarchical LOD generated textures"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_IESLightProfile.DisplayName"), TEXT("IESLightProfile"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_IESLightProfile.ToolTip"), TEXT("No compression, created on import of a .IES file."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Lightmap.DisplayName"), TEXT("Lightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_MobileFlattened.DisplayName"), TEXT("MobileFlattened"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Pixels2D.DisplayName"), TEXT("2D Pixels (unfiltered)"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Pixels2D.ToolTip"), TEXT("Non-filtered, useful for 2D rendering."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_Face.DisplayName"), TEXT("ProcBuilding_Face"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_Face.ToolTip"), TEXT("Obsolete - kept for backwards compatibility."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_LightMap.DisplayName"), TEXT("ProcBuilding_LightMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_ProcBuilding_LightMap.ToolTip"), TEXT("Obsolete - kept for backwards compatibility."));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_RenderTarget.DisplayName"), TEXT("RenderTarget"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Shadowmap.DisplayName"), TEXT("Shadowmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Skybox.DisplayName"), TEXT("Skybox"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Terrain_Heightmap.DisplayName"), TEXT("Terrain_Heightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Terrain_Weightmap.DisplayName"), TEXT("Terrain_Weightmap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_UI.DisplayName"), TEXT("UI"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Vehicle.DisplayName"), TEXT("Vehicle"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_VehicleNormalMap.DisplayName"), TEXT("VehicleNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_VehicleSpecular.DisplayName"), TEXT("VehicleSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_Weapon.DisplayName"), TEXT("Weapon"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WeaponNormalMap.DisplayName"), TEXT("WeaponNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WeaponSpecular.DisplayName"), TEXT("WeaponSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_World.DisplayName"), TEXT("World"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WorldNormalMap.DisplayName"), TEXT("WorldNormalMap"));
			MetaData->SetValue(ReturnEnum, TEXT("TEXTUREGROUP_WorldSpecular.DisplayName"), TEXT("WorldSpecular"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@warning: if this is changed:\n    update BaseEngine.ini [SystemSettings]\n    you might have to update the update Game's DefaultEngine.ini [SystemSettings]\n    order and actual name can never change (order is important!)\n\nTEXTUREGROUP_Cinematic: should be used for Cinematics which will be baked out\n                        and want to have the highest settings"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureGroup_CRC() { return 3261524392U; }
	UEnum* Z_Construct_UEnum_Engine_ETextureSourceFormat()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureSourceFormat"), 0, Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSourceFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_Invalid")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_G8")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_BGRA8")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_BGRE8")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_RGBA16")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_RGBA16F")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_RGBA8")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_RGBE8")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSF_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETextureSourceFormat");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TSF_RGBA8.ToolTip"), TEXT("@todo: Deprecated!"));
			MetaData->SetValue(ReturnEnum, TEXT("TSF_RGBE8.ToolTip"), TEXT("@todo: Deprecated!"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceFormat_CRC() { return 1582140287U; }
	UEnum* Z_Construct_UEnum_Engine_ETextureSourceArtType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureSourceArtType"), 0, Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureSourceArtType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSAT_Uncompressed")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSAT_PNGCompressed")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSAT_DDSFile")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TSAT_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETextureSourceArtType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_DDSFile.ToolTip"), TEXT("DDS file with header."));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_PNGCompressed.ToolTip"), TEXT("PNG compresed version of FColor Data[SrcWidth * SrcHeight]."));
			MetaData->SetValue(ReturnEnum, TEXT("TSAT_Uncompressed.ToolTip"), TEXT("FColor Data[SrcWidth * SrcHeight]."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureSourceArtType_CRC() { return 2932928467U; }
	UEnum* Z_Construct_UEnum_Engine_ETextureMipCount()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETextureMipCount"), 0, Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureMipCount"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMC_ResidentMips")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMC_AllMips")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMC_AllMipsBiased")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TMC_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ETextureMipCount");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ETextureMipCount_CRC() { return 3363284940U; }
	UEnum* Z_Construct_UEnum_Engine_ECompositeTextureMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ECompositeTextureMode"), 0, Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECompositeTextureMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_Disabled")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_NormalRoughnessToRed")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_NormalRoughnessToGreen")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_NormalRoughnessToBlue")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_NormalRoughnessToAlpha")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CTM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ECompositeTextureMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CTM_Disabled.DisplayName"), TEXT("Disabled"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToAlpha.DisplayName"), TEXT("Add Normal Roughness To Alpha"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToAlpha.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToBlue.DisplayName"), TEXT("Add Normal Roughness To Blue"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToBlue.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToGreen.DisplayName"), TEXT("Add Normal Roughness To Green"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToGreen.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToRed.DisplayName"), TEXT("Add Normal Roughness To Red"));
			MetaData->SetValue(ReturnEnum, TEXT("CTM_NormalRoughnessToRed.ToolTip"), TEXT("CompositingTexture needs to be a normal map with the same or larger size."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECompositeTextureMode_CRC() { return 61689832U; }
	UEnum* Z_Construct_UEnum_Engine_TextureAddress()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureAddress_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("TextureAddress"), 0, Get_Z_Construct_UEnum_Engine_TextureAddress_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureAddress"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TA_Wrap")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TA_Clamp")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TA_Mirror")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TA_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("TextureAddress");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Clamp.DisplayName"), TEXT("Clamp"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Mirror.DisplayName"), TEXT("Mirror"));
			MetaData->SetValue(ReturnEnum, TEXT("TA_Wrap.DisplayName"), TEXT("Wrap"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureAddress_CRC() { return 1613024949U; }
	UEnum* Z_Construct_UEnum_Engine_TextureFilter()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureFilter_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("TextureFilter"), 0, Get_Z_Construct_UEnum_Engine_TextureFilter_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TF_Nearest")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TF_Bilinear")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TF_Trilinear")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TF_Default")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TF_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("TextureFilter");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Bilinear.DisplayName"), TEXT("Bi-linear"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Default.DisplayName"), TEXT("Default (from Texture Group)"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Default.ToolTip"), TEXT("Use setting from the Texture Group."));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Nearest.DisplayName"), TEXT("Nearest"));
			MetaData->SetValue(ReturnEnum, TEXT("TF_Trilinear.DisplayName"), TEXT("Tri-linear"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureFilter_CRC() { return 3925927311U; }
	UEnum* Z_Construct_UEnum_Engine_TextureCompressionSettings()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("TextureCompressionSettings"), 0, Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureCompressionSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Normalmap")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Masks")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Grayscale")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Displacementmap")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_VectorDisplacementmap")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_HDR")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_EditorIcon")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_Alpha")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_DistanceFieldFont")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_HDR_Compressed")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_BC7")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TC_MAX")), 12));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("TextureCompressionSettings");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Alpha.DisplayName"), TEXT("Alpha (no sRGB, BC4 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_BC7.DisplayName"), TEXT("BC7 (DX11, optional A)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Default.DisplayName"), TEXT("Default (DXT1/5, BC1/3 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Displacementmap.DisplayName"), TEXT("Displacementmap (8/16bit)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_DistanceFieldFont.DisplayName"), TEXT("DistanceFieldFont (R8)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_EditorIcon.DisplayName"), TEXT("UserInterface2D (RGBA)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Grayscale.DisplayName"), TEXT("Grayscale (R8, RGB8 sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_HDR.DisplayName"), TEXT("HDR (RGB, no sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_HDR_Compressed.DisplayName"), TEXT("HDRCompressed (RGB, BC6H, DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Masks.DisplayName"), TEXT("Masks (no sRGB)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_Normalmap.DisplayName"), TEXT("Normalmap (DXT5, BC5 on DX11)"));
			MetaData->SetValue(ReturnEnum, TEXT("TC_VectorDisplacementmap.DisplayName"), TEXT("VectorDisplacementmap (RGBA8)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This needs to be mirrored in EditorFactories.cpp."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_TextureCompressionSettings_CRC() { return 1872742682U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTexturePlatformData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TexturePlatformData"), sizeof(FTexturePlatformData), Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TexturePlatformData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTexturePlatformData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Platform-specific data used by the texture resource at runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTexturePlatformData_CRC() { return 3243831982U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextureSource()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureSource_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TextureSource"), sizeof(FTextureSource), Get_Z_Construct_UScriptStruct_FTextureSource_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureSource"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureSource>, EStructFlags(0x00000001));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_Format = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Format"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Format, FTextureSource), 0x0040000800020001, Z_Construct_UEnum_Engine_ETextureSourceFormat());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGuidIsHash, FTextureSource, bool);
			UProperty* NewProp_bGuidIsHash = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bGuidIsHash"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGuidIsHash, FTextureSource), 0x0040000800020001, CPP_BOOL_PROPERTY_BITMASK(bGuidIsHash, FTextureSource), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPNGCompressed, FTextureSource, bool);
			UProperty* NewProp_bPNGCompressed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPNGCompressed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPNGCompressed, FTextureSource), 0x0040000800020001, CPP_BOOL_PROPERTY_BITMASK(bPNGCompressed, FTextureSource), sizeof(bool), true);
			UProperty* NewProp_NumMips = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumMips"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumMips, FTextureSource), 0x0040000800020001);
			UProperty* NewProp_NumSlices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumSlices"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumSlices, FTextureSource), 0x0040000800020001);
			UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeY, FTextureSource), 0x0040000800020001);
			UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeX, FTextureSource), 0x0040000800020001);
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Id, FTextureSource), 0x0040000800020001, Z_Construct_UScriptStruct_FGuid());
#endif // WITH_EDITORONLY_DATA
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Texture source data management."));
			MetaData->SetValue(NewProp_Format, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_Format, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_Format, TEXT("ToolTip"), TEXT("Format in which the source data is stored."));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_bGuidIsHash, TEXT("ToolTip"), TEXT("Legacy textures use a hash instead of a GUID."));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_bPNGCompressed, TEXT("ToolTip"), TEXT("RGBA8 source data is optionally compressed as PNG."));
			MetaData->SetValue(NewProp_NumMips, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_NumMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_NumMips, TEXT("ToolTip"), TEXT("Number of mips provided as source data for the texture."));
			MetaData->SetValue(NewProp_NumSlices, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_NumSlices, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_NumSlices, TEXT("ToolTip"), TEXT("Depth (volume textures) or faces (cube maps)."));
			MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("Height of the texture."));
			MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("Width of the texture."));
			MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("TextureSource"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
			MetaData->SetValue(NewProp_Id, TEXT("ToolTip"), TEXT("GUID used to track changes to the source data."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureSource_CRC() { return 1959314836U; }
	UClass* Z_Construct_UClass_UTexture_NoRegister()
	{
		return UTexture::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTexture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LODGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LODGroup, UTexture), 0x0010010000000005, Z_Construct_UEnum_Engine_TextureGroup());
				UProperty* NewProp_Filter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Filter"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Filter, UTexture), 0x0010050000000005, Z_Construct_UEnum_Engine_TextureFilter());
				UProperty* NewProp_CompressionSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CompressionSettings, UTexture), 0x0010010000000005, Z_Construct_UEnum_Engine_TextureCompressionSettings());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAsyncResourceReleaseHasBeenStarted, UTexture, uint8);
				UProperty* NewProp_bAsyncResourceReleaseHasBeenStarted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAsyncResourceReleaseHasBeenStarted"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAsyncResourceReleaseHasBeenStarted, UTexture), 0x0040000000002000, CPP_BOOL_PROPERTY_BITMASK(bAsyncResourceReleaseHasBeenStarted, UTexture), sizeof(uint8), false);
				UProperty* NewProp_CachedCombinedLODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CachedCombinedLODBias"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CachedCombinedLODBias, UTexture), 0x0040000000002000);
				UProperty* NewProp_AssetUserData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AssetUserData, UTexture), 0x00200c8000000009);
				UProperty* NewProp_AssetUserData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AssetUserData, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UAssetUserData_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCinematicMipLevels, UTexture, uint8);
				UProperty* NewProp_bUseCinematicMipLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCinematicMipLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCinematicMipLevels, UTexture), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bUseCinematicMipLevels, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoTiling, UTexture, uint8);
				UProperty* NewProp_bNoTiling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNoTiling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoTiling, UTexture), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bNoTiling, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(NeverStream, UTexture, uint8);
				UProperty* NewProp_NeverStream = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeverStream"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NeverStream, UTexture), 0x0010050000000005, CPP_BOOL_PROPERTY_BITMASK(NeverStream, UTexture), sizeof(uint8), false);
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLegacyGamma, UTexture, uint8);
				UProperty* NewProp_bUseLegacyGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLegacyGamma"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLegacyGamma, UTexture), 0x0010040800000005, CPP_BOOL_PROPERTY_BITMASK(bUseLegacyGamma, UTexture), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SRGB, UTexture, uint8);
				UProperty* NewProp_SRGB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SRGB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SRGB, UTexture), 0x0010010000000005, CPP_BOOL_PROPERTY_BITMASK(SRGB, UTexture), sizeof(uint8), false);
				UProperty* NewProp_NumCinematicMipLevels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumCinematicMipLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumCinematicMipLevels, UTexture), 0x0010040000000005);
				UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODBias"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODBias, UTexture), 0x0010010000000005);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_CompositePower = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositePower"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CompositePower, UTexture), 0x0010040800000005);
				UProperty* NewProp_CompositeTextureMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeTextureMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CompositeTextureMode, UTexture), 0x0010040800000005, Z_Construct_UEnum_Engine_ECompositeTextureMode());
				UProperty* NewProp_CompositeTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompositeTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CompositeTexture, UTexture), 0x0010000800000005, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_MipGenSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MipGenSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MipGenSettings, UTexture), 0x0010000800000005, Z_Construct_UEnum_Engine_TextureMipGenSettings());
				UProperty* NewProp_ChromaKeyColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChromaKeyColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ChromaKeyColor, UTexture), 0x0010000800000005, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_ChromaKeyThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChromaKeyThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ChromaKeyThreshold, UTexture), 0x0010000800000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bChromaKeyTexture, UTexture, bool);
				UProperty* NewProp_bChromaKeyTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bChromaKeyTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bChromaKeyTexture, UTexture), 0x0010000800000005, CPP_BOOL_PROPERTY_BITMASK(bChromaKeyTexture, UTexture), sizeof(bool), true);
				UProperty* NewProp_PaddingColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaddingColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PaddingColor, UTexture), 0x0010000800000005, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_PowerOfTwoMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PowerOfTwoMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PowerOfTwoMode, UTexture), 0x0010000800000005, Z_Construct_UEnum_Engine_ETexturePowerOfTwoSetting());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForcePVRTC4, UTexture, uint8);
				UProperty* NewProp_bForcePVRTC4 = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForcePVRTC4"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForcePVRTC4, UTexture), 0x0010000800000000, CPP_BOOL_PROPERTY_BITMASK(bForcePVRTC4, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFlipGreenChannel, UTexture, uint8);
				UProperty* NewProp_bFlipGreenChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFlipGreenChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFlipGreenChannel, UTexture), 0x0010040800000005, CPP_BOOL_PROPERTY_BITMASK(bFlipGreenChannel, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreserveBorder, UTexture, uint8);
				UProperty* NewProp_bPreserveBorder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreserveBorder"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreserveBorder, UTexture), 0x0010040800000005, CPP_BOOL_PROPERTY_BITMASK(bPreserveBorder, UTexture), sizeof(uint8), false);
				UProperty* NewProp_AlphaCoverageThresholds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlphaCoverageThresholds"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaCoverageThresholds, UTexture), 0x0010040800000005, Z_Construct_UScriptStruct_FVector4());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDitherMipMapAlpha, UTexture, uint8);
				UProperty* NewProp_bDitherMipMapAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDitherMipMapAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDitherMipMapAlpha, UTexture), 0x0010040800000005, CPP_BOOL_PROPERTY_BITMASK(bDitherMipMapAlpha, UTexture), sizeof(uint8), false);
				UProperty* NewProp_MaxTextureSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxTextureSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxTextureSize, UTexture), 0x0010040800000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DeferCompression, UTexture, uint8);
				UProperty* NewProp_DeferCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeferCompression"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DeferCompression, UTexture), 0x0010000800000005, CPP_BOOL_PROPERTY_BITMASK(DeferCompression, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CompressionNone, UTexture, uint8);
				UProperty* NewProp_CompressionNone = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionNone"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CompressionNone, UTexture), 0x0010000800000000, CPP_BOOL_PROPERTY_BITMASK(CompressionNone, UTexture), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CompressionNoAlpha, UTexture, uint8);
				UProperty* NewProp_CompressionNoAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionNoAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CompressionNoAlpha, UTexture), 0x0010000800000005, CPP_BOOL_PROPERTY_BITMASK(CompressionNoAlpha, UTexture), sizeof(uint8), false);
				UProperty* NewProp_AdjustMaxAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustMaxAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustMaxAlpha, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustMinAlpha = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustMinAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustMinAlpha, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustHue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustHue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustHue, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustRGBCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustRGBCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustRGBCurve, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustSaturation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustSaturation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustSaturation, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustVibrance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustVibrance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustVibrance, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustBrightnessCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustBrightnessCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustBrightnessCurve, UTexture), 0x0010000800000005);
				UProperty* NewProp_AdjustBrightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdjustBrightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AdjustBrightness, UTexture), 0x0010000800000005);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UTexture), 0x00120008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UTexture), 0x0010000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LightingGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LightingGuid, UTexture), 0x0040000000000000, Z_Construct_UScriptStruct_FGuid());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, UTexture), 0x0010000800000000, Z_Construct_UScriptStruct_FTextureSource());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UInterface_AssetUserData_NoRegister(), VTABLE_OFFSET(UTexture, IInterface_AssetUserData), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("DisplayName"), TEXT("Texture Group"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ToolTip"), TEXT("Texture group this texture belongs to"));
				MetaData->SetValue(NewProp_Filter, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_Filter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_Filter, TEXT("ToolTip"), TEXT("The texture filtering mode to use when sampling this texture."));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionSettings, TEXT("ToolTip"), TEXT("Compression settings to use when building the texture."));
				MetaData->SetValue(NewProp_bAsyncResourceReleaseHasBeenStarted, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bAsyncResourceReleaseHasBeenStarted, TEXT("ToolTip"), TEXT("Whether the async resource release process has already been kicked off or not"));
				MetaData->SetValue(NewProp_CachedCombinedLODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CachedCombinedLODBias, TEXT("ToolTip"), TEXT("Cached combined group and texture LOD bias to use."));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_bUseCinematicMipLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseCinematicMipLevels, TEXT("ToolTip"), TEXT("Whether to use the extra cinematic quality mip-levels, when we're forcing mip-levels to be resident."));
				MetaData->SetValue(NewProp_bNoTiling, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bNoTiling, TEXT("ToolTip"), TEXT("If true, the RHI texture will be created using TexCreate_NoTiling"));
				MetaData->SetValue(NewProp_NeverStream, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_NeverStream, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bUseLegacyGamma, TEXT("ToolTip"), TEXT("A flag for using the simplified legacy gamma space e.g pow(color,1/2.2) for converting from FColor to FLinearColor, if we're doing sRGB."));
				MetaData->SetValue(NewProp_SRGB, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_SRGB, TEXT("DisplayName"), TEXT("sRGB"));
				MetaData->SetValue(NewProp_SRGB, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_SRGB, TEXT("ToolTip"), TEXT("This should be unchecked if using alpha channels individually as masks."));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_NumCinematicMipLevels, TEXT("ToolTip"), TEXT("Number of mip-levels to use for cinematic quality."));
				MetaData->SetValue(NewProp_LODBias, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_LODBias, TEXT("DisplayName"), TEXT("LOD Bias"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("A bias to the index of the top mip level to use."));
				MetaData->SetValue(NewProp_CompositePower, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositePower, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositePower, TEXT("ToolTip"), TEXT("default 1, high values result in a stronger effect e.g 1, 2, 4, 8\nthis is no slider because the texture update would not be fast enough"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositeTextureMode, TEXT("ToolTip"), TEXT("defines how the CompositeTexture is applied, e.g. CTM_RoughnessFromNormalAlpha"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("Category"), TEXT("Compositing"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompositeTexture, TEXT("ToolTip"), TEXT("Can be defined to modify the roughness based on the normal map variation (mostly from mip maps).\nMaxAlpha comes in handy to define a base roughness if no source alpha was there.\nMake sure the normal map has at least as many mips as this texture."));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_MipGenSettings, TEXT("ToolTip"), TEXT("Per asset specific setting to define the mip-map generation properties like sharpening and kernel size."));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("EditCondition"), TEXT("bChromaKeyTexture"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_ChromaKeyColor, TEXT("ToolTip"), TEXT("The color that will be replaced with transparent black if chroma keying is enabled"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("EditCondition"), TEXT("bChromaKeyTexture"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_ChromaKeyThreshold, TEXT("ToolTip"), TEXT("The threshold that components have to match for the texel to be considered equal to the ChromaKeyColor when chroma keying (<=, set to 0 to require a perfect exact match)"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bChromaKeyTexture, TEXT("ToolTip"), TEXT("Whether to chroma key the image, replacing any pixels that match ChromaKeyColor with transparent black"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_PaddingColor, TEXT("ToolTip"), TEXT("The color used to pad the texture out if it is resized due to PowerOfTwoMode"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_PowerOfTwoMode, TEXT("ToolTip"), TEXT("How to pad the texture to a power of 2 size (if necessary)"));
				MetaData->SetValue(NewProp_bForcePVRTC4, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bForcePVRTC4, TEXT("ToolTip"), TEXT("For DXT1 textures, setting this will cause the texture to be twice the size, but better looking, on iPhone"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bFlipGreenChannel, TEXT("ToolTip"), TEXT("When true the texture's green channel will be inverted. This is useful for some normal maps."));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bPreserveBorder, TEXT("ToolTip"), TEXT("When true the texture's border will be preserved during mipmap generation."));
				MetaData->SetValue(NewProp_AlphaCoverageThresholds, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AlphaCoverageThresholds, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_AlphaCoverageThresholds, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_AlphaCoverageThresholds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AlphaCoverageThresholds, TEXT("ToolTip"), TEXT("Alpha values per channel to compare to when preserving alpha coverage."));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_bDitherMipMapAlpha, TEXT("ToolTip"), TEXT("When true, the alpha channel of mip-maps and the base image are dithered for smooth LOD transitions."));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("DisplayName"), TEXT("Maximum Texture Size"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_MaxTextureSize, TEXT("ToolTip"), TEXT("The maximum resolution for generated textures. A value of 0 means the maximum size for the format on each platform, except HDR long/lat cubemaps, which default to a resolution of 512."));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_DeferCompression, TEXT("ToolTip"), TEXT("If enabled, defer compression of the texture until save."));
				MetaData->SetValue(NewProp_CompressionNone, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("DisplayName"), TEXT("Compress Without Alpha"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_CompressionNoAlpha, TEXT("ToolTip"), TEXT("If enabled, the texture's alpha channel will be discarded during compression"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("DisplayName"), TEXT("Max Alpha"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustMaxAlpha, TEXT("ToolTip"), TEXT("Remaps the alpha to the specified min/max range, defines the new value of 1 (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("DisplayName"), TEXT("Min Alpha"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustMinAlpha, TEXT("ToolTip"), TEXT("Remaps the alpha to the specified min/max range, defines the new value of 0 (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ClampMax"), TEXT("360.0"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("DisplayName"), TEXT("Hue"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustHue, TEXT("ToolTip"), TEXT("Static texture hue adjustment (0 - 360) (offsets HSV hue by value in degrees.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("DisplayName"), TEXT("RGBCurve"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustRGBCurve, TEXT("ToolTip"), TEXT("Static texture RGB curve adjustment (raises linear-space RGB color to the specified power.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("DisplayName"), TEXT("Saturation"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustSaturation, TEXT("ToolTip"), TEXT("Static texture saturation adjustment (scales HSV saturation.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("DisplayName"), TEXT("Vibrance"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustVibrance, TEXT("ToolTip"), TEXT("Static texture \"vibrance\" adjustment (0 - 1) (HSV saturation algorithm adjustment.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("DisplayName"), TEXT("Brightness Curve"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustBrightnessCurve, TEXT("ToolTip"), TEXT("Static texture curve adjustment (raises HSV value to the specified power.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("Category"), TEXT("Adjustments"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("DisplayName"), TEXT("Brightness"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_AdjustBrightness, TEXT("ToolTip"), TEXT("Static texture brightness adjustment (scales HSV value.)  (Non-destructive; Requires texture source art to be available.)"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
				MetaData->SetValue(NewProp_LightingGuid, TEXT("ToolTip"), TEXT("Unique ID for this material, used for caching during distributed lighting"));
				MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture(Z_Construct_UClass_UTexture, &UTexture::StaticClass, TEXT("UTexture"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture);
	UClass* Z_Construct_UClass_USlateTextureAtlasInterface_NoRegister()
	{
		return USlateTextureAtlasInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateTextureAtlasInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USlateTextureAtlasInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20104081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Slate/SlateTextureAtlasInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateTextureAtlasInterface(Z_Construct_UClass_USlateTextureAtlasInterface, &USlateTextureAtlasInterface::StaticClass, TEXT("USlateTextureAtlasInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateTextureAtlasInterface);
	UEnum* Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMaxConcurrentResolutionRule"), 0, Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMaxConcurrentResolutionRule"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::PreventNew")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopOldest")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopFarthestThenPreventNew")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopFarthestThenOldest")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopLowestPriority")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopQuietest")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::StopLowestPriorityThenPreventNew")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EMaxConcurrentResolutionRule::EMaxConcurrentResolutionRule_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EMaxConcurrentResolutionRule::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PreventNew.ToolTip"), TEXT("When Max Concurrent sounds are active do not start a new sound."));
			MetaData->SetValue(ReturnEnum, TEXT("StopFarthestThenOldest.ToolTip"), TEXT("When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then stop the oldest."));
			MetaData->SetValue(ReturnEnum, TEXT("StopFarthestThenPreventNew.ToolTip"), TEXT("When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then do not start a new sound."));
			MetaData->SetValue(ReturnEnum, TEXT("StopLowestPriority.ToolTip"), TEXT("Stop the lowest priority sound in the group. If all sounds are the same priority, then it will stop the oldest sound in the group."));
			MetaData->SetValue(ReturnEnum, TEXT("StopLowestPriorityThenPreventNew.ToolTip"), TEXT("Stop the lowest priority sound in the group. If all sounds are the same priority, then it won't play a new sound."));
			MetaData->SetValue(ReturnEnum, TEXT("StopOldest.ToolTip"), TEXT("When Max Concurrent sounds are active stop the oldest and start a new one."));
			MetaData->SetValue(ReturnEnum, TEXT("StopQuietest.ToolTip"), TEXT("Stop the sound that is quietest in the group."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule_CRC() { return 1917211824U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundConcurrencySettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundConcurrencySettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundConcurrencySettings"), sizeof(FSoundConcurrencySettings), Get_Z_Construct_UScriptStruct_FSoundConcurrencySettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundConcurrencySettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundConcurrencySettings>, EStructFlags(0x00000201));
			UProperty* NewProp_VolumeScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VolumeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeScale, FSoundConcurrencySettings), 0x0010000000000005);
			UProperty* NewProp_ResolutionRule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResolutionRule"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ResolutionRule, FSoundConcurrencySettings), 0x0010000000000005, Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLimitToOwner, FSoundConcurrencySettings, uint8);
			UProperty* NewProp_bLimitToOwner = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLimitToOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLimitToOwner, FSoundConcurrencySettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLimitToOwner, FSoundConcurrencySettings), sizeof(uint8), false);
			UProperty* NewProp_MaxCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxCount, FSoundConcurrencySettings), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("Category"), TEXT("Concurrency"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("ClampMax"), TEXT("1"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("ToolTip"), TEXT("The amount of attenuation to apply to older voice instances in this concurrency group. This reduces volume of older voices in a concurrency group as new voices play.\n\nAppliedVolumeScale = Math.Pow(DuckingScale, VoiceGeneration)"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_VolumeScale, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ResolutionRule, TEXT("Category"), TEXT("Concurrency"));
			MetaData->SetValue(NewProp_ResolutionRule, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(NewProp_ResolutionRule, TEXT("ToolTip"), TEXT("Which concurrency resolution policy to use if max voice count is reached."));
			MetaData->SetValue(NewProp_bLimitToOwner, TEXT("Category"), TEXT("Concurrency"));
			MetaData->SetValue(NewProp_bLimitToOwner, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(NewProp_bLimitToOwner, TEXT("ToolTip"), TEXT("Whether or not to limit the concurrency to per sound owner (i.e. the actor that plays the sound). If the sound doesn't have an owner, it falls back to global concurrency."));
			MetaData->SetValue(NewProp_MaxCount, TEXT("Category"), TEXT("Concurrency"));
			MetaData->SetValue(NewProp_MaxCount, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_MaxCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
			MetaData->SetValue(NewProp_MaxCount, TEXT("ToolTip"), TEXT("The max number of allowable concurrent active voices for voices playing in this concurrency group."));
			MetaData->SetValue(NewProp_MaxCount, TEXT("UIMin"), TEXT("1"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundConcurrencySettings_CRC() { return 1580721514U; }
	UClass* Z_Construct_UClass_USoundConcurrency_NoRegister()
	{
		return USoundConcurrency::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundConcurrency()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundConcurrency::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Concurrency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Concurrency"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Concurrency, USoundConcurrency), 0x0010000000000015, Z_Construct_UScriptStruct_FSoundConcurrencySettings());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundConcurrency.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
				MetaData->SetValue(NewProp_Concurrency, TEXT("Category"), TEXT("Settings"));
				MetaData->SetValue(NewProp_Concurrency, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundConcurrency.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundConcurrency(Z_Construct_UClass_USoundConcurrency, &USoundConcurrency::StaticClass, TEXT("USoundConcurrency"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundConcurrency);
	UClass* Z_Construct_UClass_USoundBase_NoRegister()
	{
		return USoundBase::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DefaultMasterReverbSendAmount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultMasterReverbSendAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DefaultMasterReverbSendAmount, USoundBase), 0x0010000000000001);
				UProperty* NewProp_SourceEffectChain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceEffectChain"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SourceEffectChain, USoundBase), 0x0010000000000001);
				UProperty* NewProp_SourceEffectChain_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceEffectChain, TEXT("SourceEffectChain"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundEffectSourcePreset_NoRegister());
				UProperty* NewProp_Priority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Priority"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Priority, USoundBase), 0x0010000000000005);
				UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, USoundBase), 0x0010000000000001, Z_Construct_UClass_USoundAttenuation_NoRegister());
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, USoundBase), 0x0010010000020015);
				UProperty* NewProp_MaxConcurrentPlayCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxConcurrentPlayCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxConcurrentPlayCount_DEPRECATED, USoundBase), 0x0010000020000000);
				UProperty* NewProp_MaxConcurrentResolutionRule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxConcurrentResolutionRule"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MaxConcurrentResolutionRule_DEPRECATED, USoundBase), 0x0010000020000000, Z_Construct_UEnum_Engine_EMaxConcurrentResolutionRule());
				UProperty* NewProp_ConcurrencyOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConcurrencyOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConcurrencyOverrides, USoundBase), 0x0010000000000005, Z_Construct_UScriptStruct_FSoundConcurrencySettings());
				UProperty* NewProp_SoundConcurrencySettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundConcurrencySettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundConcurrencySettings, USoundBase), 0x0010000000000005, Z_Construct_UClass_USoundConcurrency_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreFocus, USoundBase, uint8);
				UProperty* NewProp_bIgnoreFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreFocus"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreFocus, USoundBase), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIgnoreFocus, USoundBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideConcurrency, USoundBase, uint8);
				UProperty* NewProp_bOverrideConcurrency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideConcurrency"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideConcurrency, USoundBase), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideConcurrency, USoundBase), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDebug, USoundBase, uint8);
				UProperty* NewProp_bDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDebug, USoundBase), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDebug, USoundBase), sizeof(uint8), false);
				UProperty* NewProp_SoundSubmixObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundSubmixObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundSubmixObject, USoundBase), 0x0010000000000001, Z_Construct_UClass_USoundSubmix_NoRegister());
				UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, USoundBase), 0x0020080000000001, Z_Construct_UClass_USoundClass_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_DefaultMasterReverbSendAmount, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_DefaultMasterReverbSendAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_DefaultMasterReverbSendAmount, TEXT("ToolTip"), TEXT("The default amount of audio to send to the master reverb effect for this sound if reverb is enabled for the sound. This can be overridden by sound attenuation settings for 3d sounds."));
				MetaData->SetValue(NewProp_SourceEffectChain, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_SourceEffectChain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_SourceEffectChain, TEXT("ToolTip"), TEXT("The source effect chain to use for this sound."));
				MetaData->SetValue(NewProp_Priority, TEXT("Category"), TEXT("Concurrency"));
				MetaData->SetValue(NewProp_Priority, TEXT("ClampMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_Priority, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Priority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_Priority, TEXT("ToolTip"), TEXT("Sound priority (higher value is higher priority) used for concurrency resolution. This priority value is weighted against the final volume of the sound."));
				MetaData->SetValue(NewProp_Priority, TEXT("UIMax"), TEXT("100.0"));
				MetaData->SetValue(NewProp_Priority, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ToolTip"), TEXT("Attenuation settings package for the sound"));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("Duration of sound in seconds."));
				MetaData->SetValue(NewProp_MaxConcurrentPlayCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_MaxConcurrentPlayCount, TEXT("ToolTip"), TEXT("Maximum number of times this sound can be played concurrently."));
				MetaData->SetValue(NewProp_MaxConcurrentResolutionRule, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_ConcurrencyOverrides, TEXT("Category"), TEXT("Concurrency"));
				MetaData->SetValue(NewProp_ConcurrencyOverrides, TEXT("EditCondition"), TEXT("bOverrideConcurrency"));
				MetaData->SetValue(NewProp_ConcurrencyOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_ConcurrencyOverrides, TEXT("ToolTip"), TEXT("If bOverridePlayback is true, concurrency settings to use."));
				MetaData->SetValue(NewProp_SoundConcurrencySettings, TEXT("Category"), TEXT("Concurrency"));
				MetaData->SetValue(NewProp_SoundConcurrencySettings, TEXT("EditCondition"), TEXT("!bOverrideConcurrency"));
				MetaData->SetValue(NewProp_SoundConcurrencySettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_SoundConcurrencySettings, TEXT("ToolTip"), TEXT("If bOverridePlayback is false, the sound concurrency settings to use for this sound."));
				MetaData->SetValue(NewProp_bIgnoreFocus, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bIgnoreFocus, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_bIgnoreFocus, TEXT("ToolTip"), TEXT("Whether or not to ignore focus on this sound."));
				MetaData->SetValue(NewProp_bOverrideConcurrency, TEXT("Category"), TEXT("Concurrency"));
				MetaData->SetValue(NewProp_bOverrideConcurrency, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_bOverrideConcurrency, TEXT("ToolTip"), TEXT("Whether or not to override the sound concurrency object with local concurrency settings."));
				MetaData->SetValue(NewProp_bDebug, TEXT("Category"), TEXT("Debug"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_bDebug, TEXT("ToolTip"), TEXT("When \"stat sounds -debug\" has been specified, draw this sound's attenuation shape when the sound is audible. For debugging purpose only."));
				MetaData->SetValue(NewProp_SoundSubmixObject, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_SoundSubmixObject, TEXT("DisplayName"), TEXT("Sound Submix"));
				MetaData->SetValue(NewProp_SoundSubmixObject, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_SoundSubmixObject, TEXT("ToolTip"), TEXT("Sound submix this sound belongs to"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("DisplayName"), TEXT("Sound Class"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundBase.h"));
				MetaData->SetValue(NewProp_SoundClassObject, TEXT("ToolTip"), TEXT("Sound class this sound belongs to"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundBase(Z_Construct_UClass_USoundBase, &USoundBase::StaticClass, TEXT("USoundBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundBase);
	UClass* Z_Construct_UClass_UDialogueSoundWaveProxy_NoRegister()
	{
		return UDialogueSoundWaveProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_UDialogueSoundWaveProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDialogueSoundWaveProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/DialogueSoundWaveProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/DialogueSoundWaveProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDialogueSoundWaveProxy(Z_Construct_UClass_UDialogueSoundWaveProxy, &UDialogueSoundWaveProxy::StaticClass, TEXT("UDialogueSoundWaveProxy"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDialogueSoundWaveProxy);
	UScriptStruct* Z_Construct_UScriptStruct_FSoundNodeEditorData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundNodeEditorData"), sizeof(FSoundNodeEditorData), Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundNodeEditorData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundNodeEditorData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundNodeEditorData_CRC() { return 2259922872U; }
	UClass* Z_Construct_UClass_USoundCue_NoRegister()
	{
		return USoundCue::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundCue()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundCue::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SoundCueGraph = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundCueGraph"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundCueGraph, USoundCue), 0x0010000800000000, Z_Construct_UClass_UEdGraph_NoRegister());
				UProperty* NewProp_AllNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AllNodes, USoundCue), 0x0010000800000000);
				UProperty* NewProp_AllNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllNodes, TEXT("AllNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UClass_USoundNode_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_AttenuationOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AttenuationOverrides, USoundCue), 0x0010000000000001, Z_Construct_UScriptStruct_FSoundAttenuationSettings());
				UProperty* NewProp_PitchMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMultiplier, USoundCue), 0x0010010000000001);
				UProperty* NewProp_VolumeMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMultiplier, USoundCue), 0x0010010000000001);
				UProperty* NewProp_FirstNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(FirstNode, USoundCue), 0x0010000000000000, Z_Construct_UClass_USoundNode_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAttenuation, USoundCue, uint8);
				UProperty* NewProp_bOverrideAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAttenuation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAttenuation, USoundCue), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideAttenuation, USoundCue), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundCue.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The behavior of audio playback is defined within Sound Cues."));
				MetaData->SetValue(NewProp_SoundCueGraph, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AllNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("EditCondition"), TEXT("bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ToolTip"), TEXT("Attenuation settings to use if Override Attenuation is set to true"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_PitchMultiplier, TEXT("ToolTip"), TEXT("Pitch multiplier for the Sound Cue"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_VolumeMultiplier, TEXT("ToolTip"), TEXT("Volume multiplier for the Sound Cue"));
				MetaData->SetValue(NewProp_FirstNode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundCue.h"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ToolTip"), TEXT("Indicates whether attenuation should use the Attenuation Overrides or the Attenuation Settings asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundCue(Z_Construct_UClass_USoundCue, &USoundCue::StaticClass, TEXT("USoundCue"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundCue);
	UEnum* Z_Construct_UEnum_Engine_ESoundGroup()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESoundGroup"), 0, Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESoundGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_Effects")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_UI")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_Music")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_Voice")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup1")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup2")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup3")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup4")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup5")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup6")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup7")), 11));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup8")), 12));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup9")), 13));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup10")), 14));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup11")), 15));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup12")), 16));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup13")), 17));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup14")), 18));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup15")), 19));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup16")), 20));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup17")), 21));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup18")), 22));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup19")), 23));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_GameSoundGroup20")), 24));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("SOUNDGROUP_MAX")), 25));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ESoundGroup");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Effects.DisplayName"), TEXT("Effects"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup1.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup10.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup11.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup12.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup13.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup14.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup15.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup16.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup17.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup18.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup19.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup2.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup20.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup3.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup4.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup5.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup6.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup7.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup8.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_GameSoundGroup9.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Music.DisplayName"), TEXT("Music"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_UI.DisplayName"), TEXT("UI"));
			MetaData->SetValue(ReturnEnum, TEXT("SOUNDGROUP_Voice.DisplayName"), TEXT("Voice"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ESoundGroup_CRC() { return 3266404747U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundGroup()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundGroup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundGroup"), sizeof(FSoundGroup), Get_Z_Construct_UScriptStruct_FSoundGroup_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundGroup>, EStructFlags(0x00000001));
			UProperty* NewProp_DecompressedDuration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DecompressedDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DecompressedDuration, FSoundGroup), 0x0010000000004000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysDecompressOnLoad, FSoundGroup, uint8);
			UProperty* NewProp_bAlwaysDecompressOnLoad = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlwaysDecompressOnLoad"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysDecompressOnLoad, FSoundGroup), 0x0010000000004000, CPP_BOOL_PROPERTY_BITMASK(bAlwaysDecompressOnLoad, FSoundGroup), sizeof(uint8), false);
			UProperty* NewProp_DisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplayName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DisplayName, FSoundGroup), 0x0010000000004000);
			UProperty* NewProp_SoundGroup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SoundGroup, FSoundGroup), 0x0010000000004000, Z_Construct_UEnum_Engine_ESoundGroup());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DecompressedDuration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DecompressedDuration, TEXT("ToolTip"), TEXT("Sound duration in seconds below which sounds are entirely expanded to PCM at load time\nDisregarded if bAlwaysDecompressOnLoad is true"));
			MetaData->SetValue(NewProp_bAlwaysDecompressOnLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_bAlwaysDecompressOnLoad, TEXT("ToolTip"), TEXT("Whether sounds in this group should always decompress on load"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_DisplayName, TEXT("ToolTip"), TEXT("An override display name for custom game sound groups"));
			MetaData->SetValue(NewProp_SoundGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
			MetaData->SetValue(NewProp_SoundGroup, TEXT("ToolTip"), TEXT("The sound group enumeration we are setting values for"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundGroup_CRC() { return 598551889U; }
	UClass* Z_Construct_UClass_USoundGroups_NoRegister()
	{
		return USoundGroups::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundGroups()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundGroups::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000085;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundGroupProfiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundGroupProfiles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SoundGroupProfiles, USoundGroups), 0x0040000000004000);
				UProperty* NewProp_SoundGroupProfiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SoundGroupProfiles, TEXT("SoundGroupProfiles"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FSoundGroup());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundGroups.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This class is a singleton initialized from the ini"));
				MetaData->SetValue(NewProp_SoundGroupProfiles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundGroups.h"));
				MetaData->SetValue(NewProp_SoundGroupProfiles, TEXT("ToolTip"), TEXT("The ini editable array of profiles"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundGroups(Z_Construct_UClass_USoundGroups, &USoundGroups::StaticClass, TEXT("USoundGroups"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundGroups);
	UEnum* Z_Construct_UEnum_Engine_EDecompressionType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDecompressionType"), 0, Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDecompressionType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Setup")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Invalid")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Preview")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Native")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_RealTime")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Procedural")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Xenon")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_Streaming")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("DTYPE_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EDecompressionType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDecompressionType_CRC() { return 1184695700U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStreamedAudioPlatformData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StreamedAudioPlatformData"), sizeof(FStreamedAudioPlatformData), Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamedAudioPlatformData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStreamedAudioPlatformData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Platform-specific data used streaming audio at runtime."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStreamedAudioPlatformData_CRC() { return 1503314210U; }
	UClass* Z_Construct_UClass_USoundWave_NoRegister()
	{
		return USoundWave::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundWave()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundBase();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundWave::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InternalCurves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InternalCurves"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InternalCurves, USoundWave), 0x0010000000000000, Z_Construct_UClass_UCurveTable_NoRegister());
				UProperty* NewProp_Curves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Curves"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Curves, USoundWave), 0x0010000000000001, Z_Construct_UClass_UCurveTable_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, USoundWave), 0x00120008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, USoundWave), 0x0010000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, USoundWave), 0x0010000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_LocalizedSubtitles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LocalizedSubtitles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LocalizedSubtitles, USoundWave), 0x0010000000000000);
				UProperty* NewProp_LocalizedSubtitles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LocalizedSubtitles, TEXT("LocalizedSubtitles"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FLocalizedSubtitle());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_Comment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Comment"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Comment, USoundWave), 0x0010000800000001);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Subtitles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Subtitles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Subtitles, USoundWave), 0x0010000000000001);
				UProperty* NewProp_Subtitles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Subtitles, TEXT("Subtitles"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSubtitleCue());
				UProperty* NewProp_RawPCMDataSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RawPCMDataSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RawPCMDataSize, USoundWave), 0x0010000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_ChannelSizes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChannelSizes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChannelSizes, USoundWave), 0x0010000800000000);
				UProperty* NewProp_ChannelSizes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChannelSizes, TEXT("ChannelSizes"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
				UProperty* NewProp_ChannelOffsets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChannelOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChannelOffsets, USoundWave), 0x0010000800000000);
				UProperty* NewProp_ChannelOffsets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChannelOffsets, TEXT("ChannelOffsets"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SampleRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SampleRate, USoundWave), 0x0010010000020001);
				UProperty* NewProp_NumChannels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumChannels"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumChannels, USoundWave), 0x0010010000020001);
				UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, USoundWave), 0x0010000000000001);
				UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, USoundWave), 0x0010000000000001);
				UProperty* NewProp_SubtitlePriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubtitlePriority"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SubtitlePriority, USoundWave), 0x0010000000000001);
				UProperty* NewProp_SpokenText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpokenText"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SpokenText, USoundWave), 0x0010000000000001);
				UProperty* NewProp_SoundGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SoundGroup, USoundWave), 0x0010000000000001, Z_Construct_UEnum_Engine_ESoundGroup());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVirtualizeWhenSilent, USoundWave, uint8);
				UProperty* NewProp_bVirtualizeWhenSilent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVirtualizeWhenSilent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVirtualizeWhenSilent, USoundWave), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bVirtualizeWhenSilent, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSingleLine, USoundWave, uint8);
				UProperty* NewProp_bSingleLine = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSingleLine"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSingleLine, USoundWave), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSingleLine, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bManualWordWrap, USoundWave, uint8);
				UProperty* NewProp_bManualWordWrap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bManualWordWrap"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bManualWordWrap, USoundWave), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bManualWordWrap, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMature, USoundWave, uint8);
				UProperty* NewProp_bMature = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMature"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMature, USoundWave), 0x0010010000000001, CPP_BOOL_PROPERTY_BITMASK(bMature, USoundWave), sizeof(uint8), false);
				UProperty* NewProp_StreamingPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StreamingPriority, USoundWave), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStreaming, USoundWave, uint8);
				UProperty* NewProp_bStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStreaming, USoundWave), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bStreaming, USoundWave), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundWave, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundWave), 0x0010010000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundWave), sizeof(uint8), false);
				UProperty* NewProp_CompressionQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionQuality"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CompressionQuality, USoundWave), 0x0010010000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundWave.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_InternalCurves, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_InternalCurves, TEXT("ToolTip"), TEXT("Hold a reference to our internal curve so we can switch back to it if we want to"));
				MetaData->SetValue(NewProp_Curves, TEXT("Category"), TEXT("Curves"));
				MetaData->SetValue(NewProp_Curves, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Curves, TEXT("ToolTip"), TEXT("Curves associated with this sound wave"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_LocalizedSubtitles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_LocalizedSubtitles, TEXT("ToolTip"), TEXT("The array of the subtitles for each language. Generated at cook time."));
				MetaData->SetValue(NewProp_Comment, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_Comment, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Comment, TEXT("ToolTip"), TEXT("Provides contextual information for the sound to the translator."));
				MetaData->SetValue(NewProp_Subtitles, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_Subtitles, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Subtitles, TEXT("ToolTip"), TEXT("Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,\nas the contents of the subtitle is commonly identical to what is spoken."));
				MetaData->SetValue(NewProp_RawPCMDataSize, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_RawPCMDataSize, TEXT("ToolTip"), TEXT("Size of RawPCMData, or what RawPCMData would be if the sound was fully decompressed"));
				MetaData->SetValue(NewProp_ChannelSizes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_ChannelSizes, TEXT("ToolTip"), TEXT("Sizes of the bulk data for the source wav data"));
				MetaData->SetValue(NewProp_ChannelOffsets, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_ChannelOffsets, TEXT("ToolTip"), TEXT("Offsets into the bulk data for the source wav data"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ToolTip"), TEXT("Cached sample rate for displaying in the tools"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("Category"), TEXT("Info"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_NumChannels, TEXT("ToolTip"), TEXT("Number of channels of multichannel data; 1 or 2 for regular mono and stereo files"));
				MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ClampMax"), TEXT("4.0"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ClampMin"), TEXT("0.125"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("Playback pitch for sound."));
				MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_Volume, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("Playback volume of sound 0 to 1 - Default is 1.0."));
				MetaData->SetValue(NewProp_SubtitlePriority, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_SubtitlePriority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SubtitlePriority, TEXT("ToolTip"), TEXT("The priority of the subtitle."));
				MetaData->SetValue(NewProp_SpokenText, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_SpokenText, TEXT("ToolTip"), TEXT("A localized version of the text that is actually spoken phonetically in the audio."));
				MetaData->SetValue(NewProp_SoundGroup, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_SoundGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bVirtualizeWhenSilent, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_bVirtualizeWhenSilent, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bVirtualizeWhenSilent, TEXT("ToolTip"), TEXT("Allows sound to play at 0 volume, otherwise will stop the sound when the sound is silent."));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bSingleLine, TEXT("ToolTip"), TEXT("If set to true the subtitles display as a sequence of single lines as opposed to multiline."));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bManualWordWrap, TEXT("ToolTip"), TEXT("If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually."));
				MetaData->SetValue(NewProp_bMature, TEXT("Category"), TEXT("Subtitles"));
				MetaData->SetValue(NewProp_bMature, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bMature, TEXT("ToolTip"), TEXT("If set to true if this sound is considered to contain mature/adult content."));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("Category"), TEXT("Streaming"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_StreamingPriority, TEXT("ToolTip"), TEXT("Priority of this sound when streaming (lower priority streams may not always play)"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("Category"), TEXT("Streaming"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bStreaming, TEXT("ToolTip"), TEXT("Whether this sound can be streamed to avoid increased memory usage"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("SoundWave"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ToolTip"), TEXT("If set, when played directly (not through a sound cue) the wave will be played looping."));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("Category"), TEXT("Compression"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMax"), TEXT("100"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWave.h"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ToolTip"), TEXT("Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundWave(Z_Construct_UClass_USoundWave, &USoundWave::StaticClass, TEXT("USoundWave"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundWave);
	UClass* Z_Construct_UClass_USoundWaveProcedural_NoRegister()
	{
		return USoundWaveProcedural::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundWaveProcedural()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundWave();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundWaveProcedural::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundWaveProcedural.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundWaveProcedural.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundWaveProcedural(Z_Construct_UClass_USoundWaveProcedural, &USoundWaveProcedural::StaticClass, TEXT("USoundWaveProcedural"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundWaveProcedural);
	UEnum* Z_Construct_UEnum_Engine_EAudioOutputTarget()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAudioOutputTarget"), 0, Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAudioOutputTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAudioOutputTarget::Speaker")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAudioOutputTarget::Controller")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAudioOutputTarget::ControllerFallbackToSpeaker")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAudioOutputTarget::EAudioOutputTarget_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EAudioOutputTarget::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Controller.ToolTip"), TEXT("Sound plays only from controller if present."));
			MetaData->SetValue(ReturnEnum, TEXT("ControllerFallbackToSpeaker.ToolTip"), TEXT("Sound plays on the controller if present. If not present, it plays from speakers."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Speaker.ToolTip"), TEXT("Sound plays only from speakers."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EAudioOutputTarget_CRC() { return 355254827U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPassiveSoundMixModifier()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PassiveSoundMixModifier"), sizeof(FPassiveSoundMixModifier), Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PassiveSoundMixModifier"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPassiveSoundMixModifier>, EStructFlags(0x00000001));
			UProperty* NewProp_MaxVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxVolumeThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxVolumeThreshold, FPassiveSoundMixModifier), 0x0010000000000001);
			UProperty* NewProp_MinVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinVolumeThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinVolumeThreshold, FPassiveSoundMixModifier), 0x0010000000000001);
			UProperty* NewProp_SoundMix = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundMix"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundMix, FPassiveSoundMixModifier), 0x0010000000000001, Z_Construct_UClass_USoundMix_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure containing information on a SoundMix to activate passively."));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_MaxVolumeThreshold, TEXT("ToolTip"), TEXT("Maximum volume level required to activate SoundMix. Above this value the SoundMix will not be active."));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_MinVolumeThreshold, TEXT("ToolTip"), TEXT("Minimum volume level required to activate SoundMix. Below this value the SoundMix will not be active."));
			MetaData->SetValue(NewProp_SoundMix, TEXT("Category"), TEXT("PassiveSoundMixModifier"));
			MetaData->SetValue(NewProp_SoundMix, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_SoundMix, TEXT("ToolTip"), TEXT("The SoundMix to activate"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPassiveSoundMixModifier_CRC() { return 3095694310U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassProperties()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundClassProperties"), sizeof(FSoundClassProperties), Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassProperties>, EStructFlags(0x00000001));
			UProperty* NewProp_OutputTarget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OutputTarget, FSoundClassProperties), 0x0010000000000001, Z_Construct_UEnum_Engine_EAudioOutputTarget());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyAmbientVolumes, FSoundClassProperties, uint8);
			UProperty* NewProp_bApplyAmbientVolumes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyAmbientVolumes"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyAmbientVolumes, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyAmbientVolumes, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCenterChannelOnly, FSoundClassProperties, uint8);
			UProperty* NewProp_bCenterChannelOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCenterChannelOnly"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCenterChannelOnly, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCenterChannelOnly, FSoundClassProperties), sizeof(uint8), false);
			UProperty* NewProp_Default2DReverbSendAmount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Default2DReverbSendAmount"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Default2DReverbSendAmount, FSoundClassProperties), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReverb, FSoundClassProperties, uint8);
			UProperty* NewProp_bReverb = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bReverb"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReverb, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bReverb, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMusic, FSoundClassProperties, uint8);
			UProperty* NewProp_bIsMusic = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsMusic"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMusic, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsMusic, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsUISound, FSoundClassProperties, uint8);
			UProperty* NewProp_bIsUISound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsUISound"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsUISound, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsUISound, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysPlay, FSoundClassProperties, uint8);
			UProperty* NewProp_bAlwaysPlay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAlwaysPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysPlay, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysPlay, FSoundClassProperties), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyEffects, FSoundClassProperties, uint8);
			UProperty* NewProp_bApplyEffects = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyEffects"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyEffects, FSoundClassProperties), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyEffects, FSoundClassProperties), sizeof(uint8), false);
			UProperty* NewProp_RadioFilterVolumeThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadioFilterVolumeThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RadioFilterVolumeThreshold, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_RadioFilterVolume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadioFilterVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RadioFilterVolume, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_VoiceCenterChannelVolume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VoiceCenterChannelVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VoiceCenterChannelVolume, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_LFEBleed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LFEBleed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LFEBleed, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_StereoBleed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StereoBleed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StereoBleed, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FSoundClassProperties), 0x0010000000000001);
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, FSoundClassProperties), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure containing configurable properties of a sound class."));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_OutputTarget, TEXT("ToolTip"), TEXT("Which output target the sound should be played through"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bApplyAmbientVolumes, TEXT("ToolTip"), TEXT("Whether the Interior/Exterior volume and LPF modifiers should be applied"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bCenterChannelOnly, TEXT("ToolTip"), TEXT("Whether or not this sound class forces sounds to the center channel"));
			MetaData->SetValue(NewProp_Default2DReverbSendAmount, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_Default2DReverbSendAmount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_Default2DReverbSendAmount, TEXT("ToolTip"), TEXT("Amount of audio to send to master reverb effect for 2D sounds played with this sound class."));
			MetaData->SetValue(NewProp_bReverb, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bReverb, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bReverb, TEXT("ToolTip"), TEXT("Whether or not this sound class has reverb applied"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bIsMusic, TEXT("ToolTip"), TEXT("Whether or not this is music (propagates only if parent is true)"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bIsUISound, TEXT("ToolTip"), TEXT("Whether or not this sound plays when the game is paused in the UI"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bAlwaysPlay, TEXT("ToolTip"), TEXT("Whether to artificially prioritise the component to play"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_bApplyEffects, TEXT("ToolTip"), TEXT("Sound mix voice - whether to apply audio effects"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_RadioFilterVolumeThreshold, TEXT("ToolTip"), TEXT("Volume at which the radio filter kicks in"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_RadioFilterVolume, TEXT("ToolTip"), TEXT("Volume of the radio filter effect"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolume, TEXT("ToolTip"), TEXT("Voice center channel volume - Not a multiplier (no propagation)"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_LFEBleed, TEXT("ToolTip"), TEXT("The amount of a sound to bleed to the LFE channel"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_StereoBleed, TEXT("ToolTip"), TEXT("The amount of stereo sounds to bleed to the rear speakers"));
			MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ToolTip"), TEXT("Pitch multiplier."));
			MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("SoundClassProperties"));
			MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("Volume multiplier."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassProperties_CRC() { return 1262948784U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassEditorData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundClassEditorData"), sizeof(FSoundClassEditorData), Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassEditorData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassEditorData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassEditorData_CRC() { return 756104904U; }
	UClass* Z_Construct_UClass_USoundClass_NoRegister()
	{
		return USoundClass::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParentClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentClass"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentClass, USoundClass), 0x0010000000000000, Z_Construct_UClass_USoundClass_NoRegister());
				UProperty* NewProp_PassiveSoundMixModifiers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PassiveSoundMixModifiers"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PassiveSoundMixModifiers, USoundClass), 0x0010000000000001);
				UProperty* NewProp_PassiveSoundMixModifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PassiveSoundMixModifiers, TEXT("PassiveSoundMixModifiers"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPassiveSoundMixModifier());
				UProperty* NewProp_ChildClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildClasses"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChildClasses, USoundClass), 0x0010000000000001);
				UProperty* NewProp_ChildClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildClasses, TEXT("ChildClasses"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundClass_NoRegister());
				UProperty* NewProp_Properties = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Properties"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Properties, USoundClass), 0x0010000000000001, Z_Construct_UScriptStruct_FSoundClassProperties());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_ParentClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_PassiveSoundMixModifiers, TEXT("ToolTip"), TEXT("SoundMix Modifiers to activate automatically when a sound of this class is playing."));
				MetaData->SetValue(NewProp_ChildClasses, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_ChildClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_Properties, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_Properties, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundClass.h"));
				MetaData->SetValue(NewProp_Properties, TEXT("ToolTip"), TEXT("Configurable properties like volume and priority."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundClass(Z_Construct_UClass_USoundClass, &USoundClass::StaticClass, TEXT("USoundClass"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundClass);
	UClass* Z_Construct_UClass_USoundEffectPreset_NoRegister()
	{
		return USoundEffectPreset::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundEffectPreset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundEffectPreset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundEffectPreset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundEffectPreset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundEffectPreset(Z_Construct_UClass_USoundEffectPreset, &USoundEffectPreset::StaticClass, TEXT("USoundEffectPreset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundEffectPreset);
	UClass* Z_Construct_UClass_USoundEffectSourcePreset_NoRegister()
	{
		return USoundEffectSourcePreset::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundEffectSourcePreset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundEffectPreset();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundEffectSourcePreset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundEffectSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundEffectSource.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is here to make sure users don't mix up source and submix effects in the editor. Asset sorting, drag-n-drop, etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundEffectSourcePreset(Z_Construct_UClass_USoundEffectSourcePreset, &USoundEffectSourcePreset::StaticClass, TEXT("USoundEffectSourcePreset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundEffectSourcePreset);
	UClass* Z_Construct_UClass_USoundEffectSubmixPreset_NoRegister()
	{
		return USoundEffectSubmixPreset::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundEffectSubmixPreset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundEffectPreset();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundEffectSubmixPreset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundEffectSubmix.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundEffectSubmix.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is here to make sure users don't mix up source and submix effects in the editor. Asset sorting, drag-n-drop, etc."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundEffectSubmixPreset(Z_Construct_UClass_USoundEffectSubmixPreset, &USoundEffectSubmixPreset::StaticClass, TEXT("USoundEffectSubmixPreset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundEffectSubmixPreset);
	UScriptStruct* Z_Construct_UScriptStruct_FSoundClassAdjuster()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundClassAdjuster"), sizeof(FSoundClassAdjuster), Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundClassAdjuster"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundClassAdjuster>, EStructFlags(0x00000001));
			UProperty* NewProp_VoiceCenterChannelVolumeAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VoiceCenterChannelVolumeAdjuster"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VoiceCenterChannelVolumeAdjuster, FSoundClassAdjuster), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyToChildren, FSoundClassAdjuster, uint8);
			UProperty* NewProp_bApplyToChildren = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bApplyToChildren"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyToChildren, FSoundClassAdjuster), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyToChildren, FSoundClassAdjuster), sizeof(uint8), false);
			UProperty* NewProp_PitchAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PitchAdjuster"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchAdjuster, FSoundClassAdjuster), 0x0010000000000001);
			UProperty* NewProp_VolumeAdjuster = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VolumeAdjuster"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeAdjuster, FSoundClassAdjuster), 0x0010000000000001);
			UProperty* NewProp_SoundClassObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundClassObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundClassObject, FSoundClassAdjuster), 0x0010000000000001, Z_Construct_UClass_USoundClass_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Elements of data for sound group volume control"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_VoiceCenterChannelVolumeAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to VoiceCenterChannelVolume."));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_bApplyToChildren, TEXT("ToolTip"), TEXT("Set to true to apply this adjuster to all children of the sound class."));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_PitchAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to the pitch."));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_VolumeAdjuster, TEXT("ToolTip"), TEXT("A multiplier applied to the volume."));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("Category"), TEXT("SoundClassAdjuster"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("DisplayName"), TEXT("Sound Class"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_SoundClassObject, TEXT("ToolTip"), TEXT("The sound class this adjuster affects."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundClassAdjuster_CRC() { return 2357740167U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAudioEQEffect()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AudioEQEffect"), sizeof(FAudioEQEffect), Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AudioEQEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAudioEQEffect>, EStructFlags(0x00000001));
			UProperty* NewProp_Bandwidth3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bandwidth3"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bandwidth3, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Gain3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Gain3"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gain3, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_FrequencyCenter3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrequencyCenter3"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyCenter3, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Bandwidth2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bandwidth2"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bandwidth2, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Gain2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Gain2"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gain2, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_FrequencyCenter2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrequencyCenter2"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyCenter2, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Bandwidth1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bandwidth1"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bandwidth1, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Gain1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Gain1"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gain1, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_FrequencyCenter1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrequencyCenter1"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyCenter1, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Bandwidth0 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bandwidth0"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bandwidth0, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_Gain0 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Gain0"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Gain0, FAudioEQEffect), 0x0010000000000001);
			UProperty* NewProp_FrequencyCenter0 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrequencyCenter0"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyCenter0, FAudioEQEffect), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("ClampMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("ToolTip"), TEXT("Bandwidth of band 3. Region is center frequency +/- Bandwidth /2"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("UIMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth3, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain3, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Gain3, TEXT("ClampMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain3, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain3, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Gain3, TEXT("ToolTip"), TEXT("Boost/cut of band 3"));
			MetaData->SetValue(NewProp_Gain3, TEXT("UIMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain3, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("ClampMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("ToolTip"), TEXT("Center frequency in Hz for band 3"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("UIMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter3, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("ClampMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("ToolTip"), TEXT("Bandwidth of band 2. Region is center frequency +/- Bandwidth /2"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("UIMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth2, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain2, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Gain2, TEXT("ClampMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain2, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain2, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Gain2, TEXT("ToolTip"), TEXT("Boost/cut of band 2"));
			MetaData->SetValue(NewProp_Gain2, TEXT("UIMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain2, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("ClampMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("ToolTip"), TEXT("Center frequency in Hz for band 2"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("UIMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter2, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("ClampMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("ToolTip"), TEXT("Bandwidth of band 1. Region is center frequency +/- Bandwidth /2"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("UIMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth1, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain1, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Gain1, TEXT("ClampMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain1, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain1, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Gain1, TEXT("ToolTip"), TEXT("Boost/cut of band 1"));
			MetaData->SetValue(NewProp_Gain1, TEXT("UIMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain1, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("ClampMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("ToolTip"), TEXT("Center frequency in Hz for band 1"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("UIMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter1, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("ClampMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("ToolTip"), TEXT("Bandwidth of band 0. Region is center frequency +/- Bandwidth /2"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("UIMax"), TEXT("2.0"));
			MetaData->SetValue(NewProp_Bandwidth0, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("ClampMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_Gain0, TEXT("ToolTip"), TEXT("Boost/cut of band 0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("UIMax"), TEXT("10.0"));
			MetaData->SetValue(NewProp_Gain0, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("Category"), TEXT("Band0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("ClampMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("ToolTip"), TEXT("Center frequency in Hz for band 0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("UIMax"), TEXT("20000.0"));
			MetaData->SetValue(NewProp_FrequencyCenter0, TEXT("UIMin"), TEXT("0.0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAudioEQEffect_CRC() { return 2114135740U; }
	UClass* Z_Construct_UClass_USoundMix_NoRegister()
	{
		return USoundMix::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundMix()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundMix::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bChanged, USoundMix, uint8);
				UProperty* NewProp_bChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bChanged"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bChanged, USoundMix), 0x0010000800002000, CPP_BOOL_PROPERTY_BITMASK(bChanged, USoundMix), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_FadeOutTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeOutTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeOutTime, USoundMix), 0x0010000000000001);
				UProperty* NewProp_Duration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Duration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Duration, USoundMix), 0x0010000000000001);
				UProperty* NewProp_FadeInTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeInTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeInTime, USoundMix), 0x0010000000000001);
				UProperty* NewProp_InitialDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InitialDelay, USoundMix), 0x0010000000000001);
				UProperty* NewProp_SoundClassEffects = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassEffects"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SoundClassEffects, USoundMix), 0x0010000000000001);
				UProperty* NewProp_SoundClassEffects_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SoundClassEffects, TEXT("SoundClassEffects"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSoundClassAdjuster());
				UProperty* NewProp_EQSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EQSettings, USoundMix), 0x0010000000000001, Z_Construct_UScriptStruct_FAudioEQEffect());
				UProperty* NewProp_EQPriority = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EQPriority"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EQPriority, USoundMix), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bApplyEQ, USoundMix, uint8);
				UProperty* NewProp_bApplyEQ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bApplyEQ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bApplyEQ, USoundMix), 0x0010010000000001, CPP_BOOL_PROPERTY_BITMASK(bApplyEQ, USoundMix), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundMix.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bChanged, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bChanged, TEXT("ToolTip"), TEXT("Transient property used to trigger real-time updates of the active EQ filter for editor previewing"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_FadeOutTime, TEXT("ToolTip"), TEXT("Time taken in seconds for the mix to fade out."));
				MetaData->SetValue(NewProp_Duration, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_Duration, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_Duration, TEXT("ToolTip"), TEXT("Duration of mix, negative means it will be applied until another mix is set."));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_FadeInTime, TEXT("ToolTip"), TEXT("Time taken in seconds for the mix to fade in."));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("Category"), TEXT("SoundMix"));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_InitialDelay, TEXT("ToolTip"), TEXT("Initial delay in seconds before the the mix is applied."));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("Category"), TEXT("SoundClasses"));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_SoundClassEffects, TEXT("ToolTip"), TEXT("Array of changes to be applied to groups."));
				MetaData->SetValue(NewProp_EQSettings, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_EQSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_EQPriority, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_EQPriority, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("Category"), TEXT("EQ"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundMix.h"));
				MetaData->SetValue(NewProp_bApplyEQ, TEXT("ToolTip"), TEXT("Whether to apply the EQ effect"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundMix(Z_Construct_UClass_USoundMix, &USoundMix::StaticClass, TEXT("USoundMix"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundMix);
	UClass* Z_Construct_UClass_USoundNode_NoRegister()
	{
		return USoundNode::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_GraphNode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphNode"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GraphNode, USoundNode), 0x0010000800000000, Z_Construct_UClass_UEdGraphNode_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_ChildNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChildNodes, USoundNode), 0x0010000000000000);
				UProperty* NewProp_ChildNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildNodes, TEXT("ChildNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundNode_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
				MetaData->SetValue(NewProp_GraphNode, TEXT("ToolTip"), TEXT("Node's Graph representation, used to get position."));
				MetaData->SetValue(NewProp_ChildNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNode.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNode(Z_Construct_UClass_USoundNode, &USoundNode::StaticClass, TEXT("USoundNode"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNode);
	UClass* Z_Construct_UClass_USoundNodeAssetReferencer_NoRegister()
	{
		return USoundNodeAssetReferencer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeAssetReferencer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeAssetReferencer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeAssetReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAssetReferencer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the raw wave file to be played"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeAssetReferencer(Z_Construct_UClass_USoundNodeAssetReferencer, &USoundNodeAssetReferencer::StaticClass, TEXT("USoundNodeAssetReferencer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeAssetReferencer);
	UClass* Z_Construct_UClass_USoundNodeWavePlayer_NoRegister()
	{
		return USoundNodeWavePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeWavePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNodeAssetReferencer();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeWavePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundNodeWavePlayer, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundNodeWavePlayer), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundNodeWavePlayer), sizeof(uint8), false);
				UProperty* NewProp_SoundWave = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundWave"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundWave, USoundNodeWavePlayer), 0x0040000000002000, Z_Construct_UClass_USoundWave_NoRegister());
				UProperty* NewProp_SoundWaveAssetPtr = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundWaveAssetPtr"), RF_Public|RF_Transient|RF_MarkAsNative) UAssetObjectProperty(CPP_PROPERTY_BASE(SoundWaveAssetPtr, USoundNodeWavePlayer), 0x0044000000000001, Z_Construct_UClass_USoundWave_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Wave Player"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the raw wave file to be played"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("WavePlayer"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(NewProp_SoundWave, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("Category"), TEXT("WavePlayer"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("DisplayName"), TEXT("Sound Wave"));
				MetaData->SetValue(NewProp_SoundWaveAssetPtr, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWavePlayer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeWavePlayer(Z_Construct_UClass_USoundNodeWavePlayer, &USoundNodeWavePlayer::StaticClass, TEXT("USoundNodeWavePlayer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeWavePlayer);
	UClass* Z_Construct_UClass_USoundNodeAttenuation_NoRegister()
	{
		return USoundNodeAttenuation::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeAttenuation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeAttenuation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAttenuation, USoundNodeAttenuation, uint8);
				UProperty* NewProp_bOverrideAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAttenuation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAttenuation, USoundNodeAttenuation), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bOverrideAttenuation, USoundNodeAttenuation), sizeof(uint8), false);
				UProperty* NewProp_AttenuationOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AttenuationOverrides, USoundNodeAttenuation), 0x0010000000000001, Z_Construct_UScriptStruct_FSoundAttenuationSettings());
				UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, USoundNodeAttenuation), 0x0010000000000001, Z_Construct_UClass_USoundAttenuation_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Attenuation"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound's volume changes based on distance to the listener"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("EditCondition"), TEXT("bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("EditCondition"), TEXT("!bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeAttenuation.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeAttenuation(Z_Construct_UClass_USoundNodeAttenuation, &USoundNodeAttenuation::StaticClass, TEXT("USoundNodeAttenuation"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeAttenuation);
	UClass* Z_Construct_UClass_USoundNodeBranch_NoRegister()
	{
		return USoundNodeBranch::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeBranch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeBranch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BoolParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoolParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoolParameterName, USoundNodeBranch), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Branch"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeBranch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeBranch.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects a child node based on the value of a boolean parameter"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("Category"), TEXT("Branch"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeBranch.h"));
				MetaData->SetValue(NewProp_BoolParameterName, TEXT("ToolTip"), TEXT("The name of the boolean parameter to use to determine which branch we should take"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeBranch(Z_Construct_UClass_USoundNodeBranch, &USoundNodeBranch::StaticClass, TEXT("USoundNodeBranch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeBranch);
	UClass* Z_Construct_UClass_USoundNodeConcatenator_NoRegister()
	{
		return USoundNodeConcatenator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeConcatenator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeConcatenator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InputVolume, USoundNodeConcatenator), 0x0010000000000041);
				UProperty* NewProp_InputVolume_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputVolume, TEXT("InputVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Concatenator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Plays child nodes sequentially"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("Category"), TEXT("Concatenator"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeConcatenator.h"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ToolTip"), TEXT("Volume multiplier for each input."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeConcatenator(Z_Construct_UClass_USoundNodeConcatenator, &USoundNodeConcatenator::StaticClass, TEXT("USoundNodeConcatenator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeConcatenator);
	UClass* Z_Construct_UClass_USoundNodeDelay_NoRegister()
	{
		return USoundNodeDelay::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDelay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeDelay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DelayMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DelayMax, USoundNodeDelay), 0x0010000000000001);
				UProperty* NewProp_DelayMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DelayMin, USoundNodeDelay), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Delay"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDelay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines a delay"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(NewProp_DelayMax, TEXT("ToolTip"), TEXT("The upper bound of delay time in seconds."));
				MetaData->SetValue(NewProp_DelayMin, TEXT("Category"), TEXT("Delay"));
				MetaData->SetValue(NewProp_DelayMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDelay.h"));
				MetaData->SetValue(NewProp_DelayMin, TEXT("ToolTip"), TEXT("The lower bound of delay time in seconds."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDelay(Z_Construct_UClass_USoundNodeDelay, &USoundNodeDelay::StaticClass, TEXT("USoundNodeDelay"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDelay);
	UClass* Z_Construct_UClass_USoundNodeDialoguePlayer_NoRegister()
	{
		return USoundNodeDialoguePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDialoguePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeDialoguePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLooping, USoundNodeDialoguePlayer, uint8);
				UProperty* NewProp_bLooping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLooping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLooping, USoundNodeDialoguePlayer), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLooping, USoundNodeDialoguePlayer), sizeof(uint8), false);
				UProperty* NewProp_DialogueWaveParameter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DialogueWaveParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DialogueWaveParameter, USoundNodeDialoguePlayer), 0x0010000000000001, Z_Construct_UScriptStruct_FDialogueWaveParameter());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Dialogue Player"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that contains a reference to the dialogue table to pull from and be played"));
				MetaData->SetValue(NewProp_bLooping, TEXT("Category"), TEXT("DialoguePlayer"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
				MetaData->SetValue(NewProp_bLooping, TEXT("ToolTip"), TEXT("Whether the dialogue line should be played looping"));
				MetaData->SetValue(NewProp_DialogueWaveParameter, TEXT("Category"), TEXT("DialoguePlayer"));
				MetaData->SetValue(NewProp_DialogueWaveParameter, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDialoguePlayer.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDialoguePlayer(Z_Construct_UClass_USoundNodeDialoguePlayer, &USoundNodeDialoguePlayer::StaticClass, TEXT("USoundNodeDialoguePlayer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDialoguePlayer);
	UScriptStruct* Z_Construct_UScriptStruct_FDistanceDatum()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DistanceDatum"), sizeof(FDistanceDatum), Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DistanceDatum"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDistanceDatum>, EStructFlags(0x00000001));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, FDistanceDatum), 0x0010000000000005);
			UProperty* NewProp_FadeOutDistanceEnd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeOutDistanceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeOutDistanceEnd, FDistanceDatum), 0x0010000000000005);
			UProperty* NewProp_FadeOutDistanceStart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeOutDistanceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeOutDistanceStart, FDistanceDatum), 0x0010000000000005);
			UProperty* NewProp_FadeInDistanceEnd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeInDistanceEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeInDistanceEnd, FDistanceDatum), 0x0010000000000005);
			UProperty* NewProp_FadeInDistanceStart = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FadeInDistanceStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeInDistanceStart, FDistanceDatum), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_Volume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_Volume, TEXT("ToolTip"), TEXT("The volume for which this Input should be played."));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeOutDistanceEnd, TEXT("ToolTip"), TEXT("The distance at which this sound is no longer audible."));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeOutDistanceStart, TEXT("ToolTip"), TEXT("The distance at which this sound starts fading out."));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeInDistanceEnd, TEXT("ToolTip"), TEXT("The distance at which this sound has faded in completely."));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("Category"), TEXT("DistanceDatum"));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
			MetaData->SetValue(NewProp_FadeInDistanceStart, TEXT("ToolTip"), TEXT("The FadeInDistance at which to start hearing this sound.\n       * If you want to hear the sound up close then setting this to 0 might be a good option."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDistanceDatum_CRC() { return 2046037352U; }
	UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade_NoRegister()
	{
		return USoundNodeDistanceCrossFade::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDistanceCrossFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeDistanceCrossFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CrossFadeInput = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CrossFadeInput"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CrossFadeInput, USoundNodeDistanceCrossFade), 0x0010000000000049);
				UProperty* NewProp_CrossFadeInput_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CrossFadeInput, TEXT("CrossFadeInput"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008, Z_Construct_UScriptStruct_FDistanceDatum());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Crossfade by Distance"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SoundNodeDistanceCrossFade\n\nThis node's purpose is to play different sounds based on the distance to the listener.\nThe node mixes between the N different sounds which are valid for the distance.  One should\nthink of a SoundNodeDistanceCrossFade as Mixer node which determines the set of nodes to\n\"mix in\" based on their distance to the sound.\n\nExample:\nYou have a gun that plays a fire sound.  At long distances you want a different sound than\nif you were up close.   So you use a SoundNodeDistanceCrossFade which will calculate the distance\na listener is from the sound and play either:  short distance, long distance, mix of short and long sounds.\n\nA SoundNodeDistanceCrossFade differs from an SoundNodeAttenuation in that any sound is only going\nbe played if it is within the MinRadius and MaxRadius.  So if you want the short distance sound to be\nheard by people close to it, the MinRadius should probably be 0\n\nThe volume curve for a SoundNodeDistanceCrossFade will look like this:\n\n                         Volume (of the input)\n   FadeInDistance.Max --> _________________ <-- FadeOutDistance.Min\n                         /                 \\\n                        /                   \\\n                       /                     \\\nFadeInDistance.Min -->/                       \\ <-- FadeOutDistance.Max"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("Category"), TEXT("CrossFade"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDistanceCrossFade.h"));
				MetaData->SetValue(NewProp_CrossFadeInput, TEXT("ToolTip"), TEXT("Each input needs to have the correct data filled in so the SoundNodeDistanceCrossFade is able\nto determine which sounds to play"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDistanceCrossFade(Z_Construct_UClass_USoundNodeDistanceCrossFade, &USoundNodeDistanceCrossFade::StaticClass, TEXT("USoundNodeDistanceCrossFade"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDistanceCrossFade);
	UClass* Z_Construct_UClass_USoundNodeParamCrossFade_NoRegister()
	{
		return USoundNodeParamCrossFade::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeParamCrossFade()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNodeDistanceCrossFade();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeParamCrossFade::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ParamName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParamName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParamName, USoundNodeParamCrossFade), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Crossfade by Param"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Crossfades between different sounds based on a parameter"));
				MetaData->SetValue(NewProp_ParamName, TEXT("Category"), TEXT("CrossFade"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeParamCrossFade.h"));
				MetaData->SetValue(NewProp_ParamName, TEXT("ToolTip"), TEXT("Parameter controlling cross fades."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeParamCrossFade(Z_Construct_UClass_USoundNodeParamCrossFade, &USoundNodeParamCrossFade::StaticClass, TEXT("USoundNodeParamCrossFade"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeParamCrossFade);
	UClass* Z_Construct_UClass_USoundNodeDoppler_NoRegister()
	{
		return USoundNodeDoppler::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeDoppler()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeDoppler::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DopplerIntensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DopplerIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DopplerIntensity, USoundNodeDoppler), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Doppler"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Computes doppler pitch shift"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("Category"), TEXT("Doppler"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeDoppler.h"));
				MetaData->SetValue(NewProp_DopplerIntensity, TEXT("ToolTip"), TEXT("How much to scale the doppler shift (1.0 is normal)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeDoppler(Z_Construct_UClass_USoundNodeDoppler, &USoundNodeDoppler::StaticClass, TEXT("USoundNodeDoppler"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeDoppler);
	UClass* Z_Construct_UClass_USoundNodeEnveloper_NoRegister()
	{
		return USoundNodeEnveloper::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeEnveloper()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeEnveloper::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20881080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMax, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_VolumeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMin, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_PitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMax, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_PitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMin, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_PitchCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PitchCurve, USoundNodeEnveloper), 0x0010000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_VolumeCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VolumeCurve, USoundNodeEnveloper), 0x0010000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
				UProperty* NewProp_PitchInterpCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchInterpCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PitchInterpCurve_DEPRECATED, USoundNodeEnveloper), 0x0010000020080008, Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister());
				UProperty* NewProp_VolumeInterpCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeInterpCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VolumeInterpCurve_DEPRECATED, USoundNodeEnveloper), 0x0010000020080008, Z_Construct_UClass_UDistributionFloatConstantCurve_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, USoundNodeEnveloper, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, USoundNodeEnveloper), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, USoundNodeEnveloper), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopIndefinitely, USoundNodeEnveloper, uint8);
				UProperty* NewProp_bLoopIndefinitely = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopIndefinitely"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopIndefinitely, USoundNodeEnveloper), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoopIndefinitely, USoundNodeEnveloper), sizeof(uint8), false);
				UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LoopCount, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_DurationAfterLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DurationAfterLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DurationAfterLoop, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_LoopEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LoopEnd, USoundNodeEnveloper), 0x0010000000000001);
				UProperty* NewProp_LoopStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LoopStart, USoundNodeEnveloper), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Enveloper"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows manipulation of volume and pitch over a set time period"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ToolTip"), TEXT("The upper bound of volume (1.0 is no change)"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ToolTip"), TEXT("The lower bound of volume (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ToolTip"), TEXT("The upper bound of pitch (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ToolTip"), TEXT("The lower bound of pitch (1.0 is no change)"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("Category"), TEXT("Envelope"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_PitchCurve, TEXT("ToolTip"), TEXT("The distribution defining the pitch envelope."));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("Category"), TEXT("Envelope"));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeCurve, TEXT("ToolTip"), TEXT("The distribution defining the volume envelope."));
				MetaData->SetValue(NewProp_PitchInterpCurve, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PitchInterpCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_VolumeInterpCurve, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VolumeInterpCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("If enabled, the envelope will loop using the loop settings."));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ToolTip"), TEXT("If enabled, the envelope will continue to loop indefenitely regardless of the Loop Count value."));
				MetaData->SetValue(NewProp_LoopCount, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ToolTip"), TEXT("The number of times the envelope should loop if looping is enabled and the envelope is not set to loop indefinitely."));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_DurationAfterLoop, TEXT("ToolTip"), TEXT("The time in seconds it takes the evelope to fade out after the last loop is completed."));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopEnd, TEXT("ToolTip"), TEXT("The time in seconds where the envelope's loop ends."));
				MetaData->SetValue(NewProp_LoopStart, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopStart, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeEnveloper.h"));
				MetaData->SetValue(NewProp_LoopStart, TEXT("ToolTip"), TEXT("The time in seconds where the envelope's loop begins."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeEnveloper(Z_Construct_UClass_USoundNodeEnveloper, &USoundNodeEnveloper::StaticClass, TEXT("USoundNodeEnveloper"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeEnveloper);
	UClass* Z_Construct_UClass_USoundNodeGroupControl_NoRegister()
	{
		return USoundNodeGroupControl::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeGroupControl()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeGroupControl::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GroupSizes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroupSizes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(GroupSizes, USoundNodeGroupControl), 0x0010000000000041);
				UProperty* NewProp_GroupSizes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GroupSizes, TEXT("GroupSizes"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Group Control"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Plays different sounds depending on the number of active sounds\nAny time a new sound is played, the first group that has an available slot will be chosen"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("Category"), TEXT("GroupControl"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeGroupControl.h"));
				MetaData->SetValue(NewProp_GroupSizes, TEXT("ToolTip"), TEXT("How many active sounds are allowed for each group"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeGroupControl(Z_Construct_UClass_USoundNodeGroupControl, &USoundNodeGroupControl::StaticClass, TEXT("USoundNodeGroupControl"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeGroupControl);
	UClass* Z_Construct_UClass_USoundNodeLooping_NoRegister()
	{
		return USoundNodeLooping::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeLooping()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeLooping::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopIndefinitely, USoundNodeLooping, uint8);
				UProperty* NewProp_bLoopIndefinitely = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopIndefinitely"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopIndefinitely, USoundNodeLooping), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoopIndefinitely, USoundNodeLooping), sizeof(uint8), false);
				UProperty* NewProp_LoopCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LoopCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LoopCount, USoundNodeLooping), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Looping"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeLooping.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound loops; either indefinitely, or for a set number of times.\nNote: The Looping node should only be used for logical or procedural looping such as introducing a delay.\nThese sounds will not be played seamlessly. If you want a sound to loop seamlessly and indefinitely,\nuse the Looping flag on the Wave Player node for that sound."));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(NewProp_bLoopIndefinitely, TEXT("ToolTip"), TEXT("If enabled, the node will continue to loop indefinitely regardless of the Loop Count value."));
				MetaData->SetValue(NewProp_LoopCount, TEXT("Category"), TEXT("Looping"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("EditCondition"), TEXT("!bLoopIndefinitely"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeLooping.h"));
				MetaData->SetValue(NewProp_LoopCount, TEXT("ToolTip"), TEXT("The amount of times to loop"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeLooping(Z_Construct_UClass_USoundNodeLooping, &USoundNodeLooping::StaticClass, TEXT("USoundNodeLooping"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeLooping);
	UClass* Z_Construct_UClass_USoundNodeMature_NoRegister()
	{
		return USoundNodeMature::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeMature()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeMature::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mature"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeMature.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMature.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This SoundNode uses UEngine::bAllowMatureLanguage to determine whether child nodes\nthat have USoundWave::bMature=true should be played."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeMature(Z_Construct_UClass_USoundNodeMature, &USoundNodeMature::StaticClass, TEXT("USoundNodeMature"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeMature);
	UClass* Z_Construct_UClass_USoundNodeMixer_NoRegister()
	{
		return USoundNodeMixer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeMixer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeMixer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InputVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InputVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InputVolume, USoundNodeMixer), 0x0010000000000049);
				UProperty* NewProp_InputVolume_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputVolume, TEXT("InputVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000008);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Mixer"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeMixer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMixer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how concurrent sounds are mixed together"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("Category"), TEXT("Mixer"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeMixer.h"));
				MetaData->SetValue(NewProp_InputVolume, TEXT("ToolTip"), TEXT("A volume for each input.  Automatically sized."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeMixer(Z_Construct_UClass_USoundNodeMixer, &USoundNodeMixer::StaticClass, TEXT("USoundNodeMixer"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeMixer);
	UClass* Z_Construct_UClass_USoundNodeModulator_NoRegister()
	{
		return USoundNodeModulator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeModulator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeModulator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMax, USoundNodeModulator), 0x0010000000000001);
				UProperty* NewProp_VolumeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(VolumeMin, USoundNodeModulator), 0x0010000000000001);
				UProperty* NewProp_PitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMax, USoundNodeModulator), 0x0010000000000001);
				UProperty* NewProp_PitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchMin, USoundNodeModulator), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Modulator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeModulator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines a random volume and pitch modification when a sound starts"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_VolumeMax, TEXT("ToolTip"), TEXT("The upper bound of volume (1.0 is no change)."));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_VolumeMin, TEXT("ToolTip"), TEXT("The lower bound of volume (1.0 is no change)."));
				MetaData->SetValue(NewProp_PitchMax, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_PitchMax, TEXT("ToolTip"), TEXT("The upper bound of pitch (1.0 is no change)."));
				MetaData->SetValue(NewProp_PitchMin, TEXT("Category"), TEXT("Modulation"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulator.h"));
				MetaData->SetValue(NewProp_PitchMin, TEXT("ToolTip"), TEXT("The lower bound of pitch (1.0 is no change)."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeModulator(Z_Construct_UClass_USoundNodeModulator, &USoundNodeModulator::StaticClass, TEXT("USoundNodeModulator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeModulator);
	UEnum* Z_Construct_UEnum_Engine_ModulationParamMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ModulationParamMode"), 0, Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ModulationParamMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MPM_Normal")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MPM_Abs")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MPM_Direct")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("MPM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ModulationParamMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Abs.DisplayName"), TEXT("Absolute"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Abs.Tooltip"), TEXT("Same as Normal except that the input value is treated as an absolute value"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Direct.DisplayName"), TEXT("Direct"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Direct.Tooltip"), TEXT("Use the input value directly without scaling or reference to Min or Max input or output values"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Normal.DisplayName"), TEXT("Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("MPM_Normal.Tooltip"), TEXT("Clamps input value to the range (MinInput, MaxInput) then maps to the range (MinOutput, MaxOutput)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ModulationParamMode_CRC() { return 220716622U; }
	UScriptStruct* Z_Construct_UScriptStruct_FModulatorContinuousParams()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ModulatorContinuousParams"), sizeof(FModulatorContinuousParams), Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ModulatorContinuousParams"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FModulatorContinuousParams>, EStructFlags(0x00000001));
			UProperty* NewProp_ParamMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParamMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ParamMode, FModulatorContinuousParams), 0x0010000000000001, Z_Construct_UEnum_Engine_ModulationParamMode());
			UProperty* NewProp_MaxOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxOutput, FModulatorContinuousParams), 0x0010000000000001);
			UProperty* NewProp_MinOutput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinOutput, FModulatorContinuousParams), 0x0010000000000001);
			UProperty* NewProp_MaxInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxInput, FModulatorContinuousParams), 0x0010000000000001);
			UProperty* NewProp_MinInput = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinInput, FModulatorContinuousParams), 0x0010000000000001);
			UProperty* NewProp_Default = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Default"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Default, FModulatorContinuousParams), 0x0010000000000001);
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FModulatorContinuousParams), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParamMode, TEXT("ToolTip"), TEXT("The mode with which to treat the input value"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MaxOutput, TEXT("ToolTip"), TEXT("The maximum output value. The input value will be scaled from the range [MinInput, MaxInput] to [MinOut, MaxOutput]"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MinOutput, TEXT("ToolTip"), TEXT("The minimum output value. The input value will be scaled from the range [MinInput, MaxInput] to [MinOut, MaxOutput]"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MaxInput, TEXT("ToolTip"), TEXT("The maximum input value. Values will be clamped to the [MinInput, MaxInput] range."));
			MetaData->SetValue(NewProp_MinInput, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_MinInput, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_MinInput, TEXT("ToolTip"), TEXT("The minimum input value. Values will be clamped to the [MinInput, MaxInput] range."));
			MetaData->SetValue(NewProp_Default, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_Default, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_Default, TEXT("ToolTip"), TEXT("The default value to be used if the parameter is not found."));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("ModulatorContinousParameters"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("The name of the sound instance parameter that specifies the current value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FModulatorContinuousParams_CRC() { return 3900440737U; }
	UClass* Z_Construct_UClass_USoundNodeModulatorContinuous_NoRegister()
	{
		return USoundNodeModulatorContinuous::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeModulatorContinuous()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeModulatorContinuous::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VolumeModulationParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeModulationParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VolumeModulationParams, USoundNodeModulatorContinuous), 0x0010000000000001, Z_Construct_UScriptStruct_FModulatorContinuousParams());
				UProperty* NewProp_PitchModulationParams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchModulationParams"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PitchModulationParams, USoundNodeModulatorContinuous), 0x0010000000000001, Z_Construct_UScriptStruct_FModulatorContinuousParams());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Continuous Modulator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows named parameter based manipulation of pitch and volume"));
				MetaData->SetValue(NewProp_VolumeModulationParams, TEXT("Category"), TEXT("ContinuousModulator"));
				MetaData->SetValue(NewProp_VolumeModulationParams, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
				MetaData->SetValue(NewProp_PitchModulationParams, TEXT("Category"), TEXT("ContinuousModulator"));
				MetaData->SetValue(NewProp_PitchModulationParams, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeModulatorContinuous.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeModulatorContinuous(Z_Construct_UClass_USoundNodeModulatorContinuous, &USoundNodeModulatorContinuous::StaticClass, TEXT("USoundNodeModulatorContinuous"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeModulatorContinuous);
	UClass* Z_Construct_UClass_USoundNodeOscillator_NoRegister()
	{
		return USoundNodeOscillator::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeOscillator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeOscillator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CenterMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CenterMax, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_CenterMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CenterMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CenterMin, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_OffsetMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OffsetMax, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_OffsetMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OffsetMin, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_FrequencyMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyMax, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_FrequencyMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrequencyMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FrequencyMin, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_AmplitudeMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmplitudeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AmplitudeMax, USoundNodeOscillator), 0x0010000000000001);
				UProperty* NewProp_AmplitudeMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmplitudeMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AmplitudeMin, USoundNodeOscillator), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModulatePitch, USoundNodeOscillator, uint8);
				UProperty* NewProp_bModulatePitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bModulatePitch"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModulatePitch, USoundNodeOscillator), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bModulatePitch, USoundNodeOscillator), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bModulateVolume, USoundNodeOscillator, uint8);
				UProperty* NewProp_bModulateVolume = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bModulateVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bModulateVolume, USoundNodeOscillator), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bModulateVolume, USoundNodeOscillator), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Oscillator"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines how a sound oscillates"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_CenterMax, TEXT("ToolTip"), TEXT("A center of 0.5 would oscillate around 0.5."));
				MetaData->SetValue(NewProp_CenterMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_CenterMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_CenterMin, TEXT("ToolTip"), TEXT("A center of 0.5 would oscillate around 0.5."));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_OffsetMax, TEXT("ToolTip"), TEXT("Offset into the sine wave. Value modded by 2 * PI."));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_OffsetMin, TEXT("ToolTip"), TEXT("Offset into the sine wave. Value modded by 2 * PI."));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_FrequencyMax, TEXT("ToolTip"), TEXT("A frequency of 20 would oscillate at 10Hz."));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_FrequencyMin, TEXT("ToolTip"), TEXT("A frequency of 20 would oscillate at 10Hz."));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_AmplitudeMax, TEXT("ToolTip"), TEXT("An amplitude of 0.25 would oscillate between 0.75 and 1.25."));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_AmplitudeMin, TEXT("ToolTip"), TEXT("An amplitude of 0.25 would oscillate between 0.75 and 1.25."));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_bModulatePitch, TEXT("ToolTip"), TEXT("Whether to oscillate pitch."));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("Category"), TEXT("Oscillator"));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeOscillator.h"));
				MetaData->SetValue(NewProp_bModulateVolume, TEXT("ToolTip"), TEXT("Whether to oscillate volume."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeOscillator(Z_Construct_UClass_USoundNodeOscillator, &USoundNodeOscillator::StaticClass, TEXT("USoundNodeOscillator"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeOscillator);
	UClass* Z_Construct_UClass_USoundNodeQualityLevel_NoRegister()
	{
		return USoundNodeQualityLevel::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeQualityLevel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeQualityLevel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Quality Level"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeQualityLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeQualityLevel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This SoundNode uses GameUserSettings AudioQualityLevel (or the editor override) to choose which branch to play\nand at runtime will only load in to memory sound waves connected to the branch that will be selected"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeQualityLevel(Z_Construct_UClass_USoundNodeQualityLevel, &USoundNodeQualityLevel::StaticClass, TEXT("USoundNodeQualityLevel"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeQualityLevel);
	UClass* Z_Construct_UClass_USoundNodeRandom_NoRegister()
	{
		return USoundNodeRandom::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeRandom()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeRandom::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PIEHiddenNodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PIEHiddenNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PIEHiddenNodes, USoundNodeRandom), 0x0010000800002000);
				UProperty* NewProp_PIEHiddenNodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PIEHiddenNodes, TEXT("PIEHiddenNodes"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NumRandomUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumRandomUsed"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumRandomUsed, USoundNodeRandom), 0x0010000000002000);
				UProperty* NewProp_HasBeenUsed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HasBeenUsed"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(HasBeenUsed, USoundNodeRandom), 0x0010000000002000);
				UProperty* NewProp_HasBeenUsed_Inner = new(EC_InternalUseOnlyConstructor, NewProp_HasBeenUsed, TEXT("HasBeenUsed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, 0, sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRandomizeWithoutReplacement, USoundNodeRandom, uint8);
				UProperty* NewProp_bRandomizeWithoutReplacement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRandomizeWithoutReplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRandomizeWithoutReplacement, USoundNodeRandom), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRandomizeWithoutReplacement, USoundNodeRandom), sizeof(uint8), false);
				UProperty* NewProp_PreselectAtLevelLoad = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreselectAtLevelLoad"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PreselectAtLevelLoad, USoundNodeRandom), 0x0010000000000001);
				UProperty* NewProp_Weights = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Weights"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Weights, USoundNodeRandom), 0x0010000000000041);
				UProperty* NewProp_Weights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Weights, TEXT("Weights"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Random"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects sounds from a random set"));
				MetaData->SetValue(NewProp_PIEHiddenNodes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_PIEHiddenNodes, TEXT("ToolTip"), TEXT("Editor only list of nodes hidden to duplicate behavior of PreselectAtLevelLoad"));
				MetaData->SetValue(NewProp_NumRandomUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_NumRandomUsed, TEXT("ToolTip"), TEXT("Counter var so we don't have to count all of the used sounds each time we choose a sound *"));
				MetaData->SetValue(NewProp_HasBeenUsed, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_HasBeenUsed, TEXT("ToolTip"), TEXT("Internal state of which sounds have been played.  This is only used at runtime\nto keep track of which sounds have been played"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_bRandomizeWithoutReplacement, TEXT("ToolTip"), TEXT("Determines whether or not this SoundNodeRandom should randomize with or without\nreplacement.\n\nWithoutReplacement means that only nodes left will be valid for\nselection.  So with that, you are guarenteed to have only one occurrence of the\nsound played until all of the other sounds in the set have all been played.\n\nWithReplacement means that a node will be chosen and then placed back into the set.\nSo one could play the same sound over and over if the probabilities don't go your way :-)"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
				MetaData->SetValue(NewProp_PreselectAtLevelLoad, TEXT("ToolTip"), TEXT("If greater than 0, then upon each level load such a number of inputs will be randomly selected\nand the rest will be removed. This can be used to cut down the memory usage of large randomizing\ncues."));
				MetaData->SetValue(NewProp_Weights, TEXT("Category"), TEXT("Random"));
				MetaData->SetValue(NewProp_Weights, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeRandom.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeRandom(Z_Construct_UClass_USoundNodeRandom, &USoundNodeRandom::StaticClass, TEXT("USoundNodeRandom"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeRandom);
	UClass* Z_Construct_UClass_USoundNodeSoundClass_NoRegister()
	{
		return USoundNodeSoundClass::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeSoundClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeSoundClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundClassOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundClassOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundClassOverride, USoundNodeSoundClass), 0x0010000000000001, Z_Construct_UClass_USoundClass_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SoundClass"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeSoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSoundClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Remaps the SoundClass of SoundWaves underneath this"));
				MetaData->SetValue(NewProp_SoundClassOverride, TEXT("Category"), TEXT("SoundClass"));
				MetaData->SetValue(NewProp_SoundClassOverride, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSoundClass.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeSoundClass(Z_Construct_UClass_USoundNodeSoundClass, &USoundNodeSoundClass::StaticClass, TEXT("USoundNodeSoundClass"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeSoundClass);
	UClass* Z_Construct_UClass_USoundNodeSwitch_NoRegister()
	{
		return USoundNodeSwitch::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeSwitch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeSwitch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_IntParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IntParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(IntParameterName, USoundNodeSwitch), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Switch"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Selects a child node based on the value of a integer parameter"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("Category"), TEXT("Switch"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeSwitch.h"));
				MetaData->SetValue(NewProp_IntParameterName, TEXT("ToolTip"), TEXT("The name of the integer parameter to use to determine which branch we should take"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeSwitch(Z_Construct_UClass_USoundNodeSwitch, &USoundNodeSwitch::StaticClass, TEXT("USoundNodeSwitch"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeSwitch);
	UClass* Z_Construct_UClass_USoundNodeWaveParam_NoRegister()
	{
		return USoundNodeWaveParam::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeWaveParam()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundNodeWaveParam::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20081080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WaveParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WaveParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(WaveParameterName, USoundNodeWaveParam), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Wave Param"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Sound node that takes a runtime parameter for the wave to play"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("Category"), TEXT("WaveParam"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundNodeWaveParam.h"));
				MetaData->SetValue(NewProp_WaveParameterName, TEXT("ToolTip"), TEXT("The name of the wave parameter to use to look up the SoundWave we should play"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeWaveParam(Z_Construct_UClass_USoundNodeWaveParam, &USoundNodeWaveParam::StaticClass, TEXT("USoundNodeWaveParam"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeWaveParam);
	UClass* Z_Construct_UClass_USoundSubmix_NoRegister()
	{
		return USoundSubmix::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundSubmix()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USoundSubmix::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OutputWetLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputWetLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutputWetLevel, USoundSubmix), 0x0010000000000001);
				UProperty* NewProp_SubmixEffectChain = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubmixEffectChain"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SubmixEffectChain, USoundSubmix), 0x0010000000000001);
				UProperty* NewProp_SubmixEffectChain_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubmixEffectChain, TEXT("SubmixEffectChain"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundEffectSubmixPreset_NoRegister());
				UProperty* NewProp_ParentSubmix = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentSubmix"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentSubmix, USoundSubmix), 0x0010000000000000, Z_Construct_UClass_USoundSubmix_NoRegister());
				UProperty* NewProp_ChildSubmixes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChildSubmixes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ChildSubmixes, USoundSubmix), 0x0010000000000001);
				UProperty* NewProp_ChildSubmixes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ChildSubmixes, TEXT("ChildSubmixes"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundSubmix_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundSubmix.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundSubmix.h"));
				MetaData->SetValue(NewProp_OutputWetLevel, TEXT("Category"), TEXT("SoundSubmix"));
				MetaData->SetValue(NewProp_OutputWetLevel, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundSubmix.h"));
				MetaData->SetValue(NewProp_OutputWetLevel, TEXT("ToolTip"), TEXT("The output wet level to use for the output of this submix in parent submixes"));
				MetaData->SetValue(NewProp_SubmixEffectChain, TEXT("Category"), TEXT("SoundSubmix"));
				MetaData->SetValue(NewProp_SubmixEffectChain, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundSubmix.h"));
				MetaData->SetValue(NewProp_ParentSubmix, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundSubmix.h"));
				MetaData->SetValue(NewProp_ChildSubmixes, TEXT("Category"), TEXT("SoundSubmix"));
				MetaData->SetValue(NewProp_ChildSubmixes, TEXT("ModuleRelativePath"), TEXT("Classes/Sound/SoundSubmix.h"));
				MetaData->SetValue(NewProp_ChildSubmixes, TEXT("ToolTip"), TEXT("Child submixes to this sound mix"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundSubmix(Z_Construct_UClass_USoundSubmix, &USoundSubmix::StaticClass, TEXT("USoundSubmix"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundSubmix);
	UEnum* Z_Construct_UEnum_Engine_EOptimizationType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EOptimizationType"), 0, Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOptimizationType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OT_NumOfTriangles")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OT_MaxDeviation")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("OT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EOptimizationType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum specifying the reduction type to use when simplifying static meshes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EOptimizationType_CRC() { return 841524029U; }
	UEnum* Z_Construct_UEnum_Engine_EImportanceLevel()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EImportanceLevel"), 0, Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EImportanceLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_Off")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_Lowest")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_Low")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_Normal")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_High")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("IL_Highest")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEMP_BROKEN2")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EImportanceLevel_MAX")), 7));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EImportanceLevel");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EImportanceLevel_CRC() { return 1233197127U; }
	UEnum* Z_Construct_UEnum_Engine_ENormalMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ENormalMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENormalMode"), 0, Get_Z_Construct_UEnum_Engine_ENormalMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENormalMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NM_PreserveSmoothingGroups")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NM_RecalculateNormals")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NM_RecalculateNormalsSmooth")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("NM_RecalculateNormalsHard")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("TEMP_BROKEN")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ENormalMode_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ENormalMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Optimization settings used to simplify mesh LODs."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ENormalMode_CRC() { return 3060266845U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMaterialRemapIndex()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMaterialRemapIndex_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MaterialRemapIndex"), sizeof(FMaterialRemapIndex), Get_Z_Construct_UScriptStruct_FMaterialRemapIndex_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MaterialRemapIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMaterialRemapIndex>, EStructFlags(0x00000001));
			UProperty* NewProp_MaterialRemap = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialRemap"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MaterialRemap, FMaterialRemapIndex), 0x0010000000000000);
			UProperty* NewProp_MaterialRemap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialRemap, TEXT("MaterialRemap"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ImportVersionKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportVersionKey"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ImportVersionKey, FMaterialRemapIndex), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaterialRemap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ImportVersionKey, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMaterialRemapIndex_CRC() { return 2412394752U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStaticMaterial()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStaticMaterial_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StaticMaterial"), sizeof(FStaticMaterial), Get_Z_Construct_UScriptStruct_FStaticMaterial_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StaticMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStaticMaterial>, EStructFlags(0x00000001));
			UProperty* NewProp_UVChannelData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UVChannelData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(UVChannelData, FStaticMaterial), 0x0010000000020015, Z_Construct_UScriptStruct_FMeshUVChannelInfo());
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_ImportedMaterialSlotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImportedMaterialSlotName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ImportedMaterialSlotName, FStaticMaterial), 0x0010000800020015);
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_MaterialSlotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialSlotName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MaterialSlotName, FStaticMaterial), 0x0010000000000015);
			UProperty* NewProp_MaterialInterface = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialInterface"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MaterialInterface, FStaticMaterial), 0x0010000000002015, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_UVChannelData, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(NewProp_UVChannelData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_UVChannelData, TEXT("ToolTip"), TEXT("Data used for texture streaming relative to each UV channels."));
			MetaData->SetValue(NewProp_ImportedMaterialSlotName, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(NewProp_ImportedMaterialSlotName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ImportedMaterialSlotName, TEXT("ToolTip"), TEXT("This name should be use when we re-import a skeletal mesh so we can order the Materials array like it should be"));
			MetaData->SetValue(NewProp_MaterialSlotName, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(NewProp_MaterialSlotName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaterialSlotName, TEXT("ToolTip"), TEXT("This name should be use by the gameplay to avoid error if the skeletal mesh Materials array topology change"));
			MetaData->SetValue(NewProp_MaterialInterface, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(NewProp_MaterialInterface, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStaticMaterial_CRC() { return 1468408075U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AssetEditorOrbitCameraPosition"), sizeof(FAssetEditorOrbitCameraPosition), Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AssetEditorOrbitCameraPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAssetEditorOrbitCameraPosition>, EStructFlags(0x00000001));
			UProperty* NewProp_CamOrbitRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CamOrbitRotation, FAssetEditorOrbitCameraPosition), 0x0010000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_CamOrbitZoom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitZoom"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CamOrbitZoom, FAssetEditorOrbitCameraPosition), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CamOrbitPoint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CamOrbitPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CamOrbitPoint, FAssetEditorOrbitCameraPosition), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsSet, FAssetEditorOrbitCameraPosition, bool);
			UProperty* NewProp_bIsSet = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsSet"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsSet, FAssetEditorOrbitCameraPosition), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsSet, FAssetEditorOrbitCameraPosition), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitRotation, TEXT("ToolTip"), TEXT("The rotation to apply around the orbit point"));
			MetaData->SetValue(NewProp_CamOrbitZoom, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitZoom, TEXT("ToolTip"), TEXT("The distance of the camera from the orbit point"));
			MetaData->SetValue(NewProp_CamOrbitPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_CamOrbitPoint, TEXT("ToolTip"), TEXT("The position to orbit the camera around"));
			MetaData->SetValue(NewProp_bIsSet, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bIsSet, TEXT("ToolTip"), TEXT("Whether or not this has been set to a valid value"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition_CRC() { return 3509623639U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfoMap()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MeshSectionInfoMap"), sizeof(FMeshSectionInfoMap), Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MeshSectionInfoMap"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMeshSectionInfoMap>, EStructFlags(0x00000001));
			UProperty* NewProp_Map = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Map"), RF_Public|RF_Transient|RF_MarkAsNative) UMapProperty(CPP_PROPERTY_BASE(Map, FMeshSectionInfoMap), 0x0010000000000000);
			UProperty* NewProp_Map_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_Map, TEXT("Map_Key"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Map_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_Map, TEXT("Map"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000000000000, Z_Construct_UScriptStruct_FMeshSectionInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Map containing per-section settings for each section of each LOD."));
			MetaData->SetValue(NewProp_Map, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_Map, TEXT("ToolTip"), TEXT("Maps an LOD+Section to the material it should render with."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfoMap_CRC() { return 3738598209U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMeshSectionInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MeshSectionInfo"), sizeof(FMeshSectionInfo), Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MeshSectionInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMeshSectionInfo>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadow, FMeshSectionInfo, bool);
			UProperty* NewProp_bCastShadow = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCastShadow"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadow, FMeshSectionInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bCastShadow, FMeshSectionInfo), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableCollision, FMeshSectionInfo, bool);
			UProperty* NewProp_bEnableCollision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableCollision, FMeshSectionInfo), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bEnableCollision, FMeshSectionInfo), sizeof(bool), true);
			UProperty* NewProp_MaterialIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaterialIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaterialIndex, FMeshSectionInfo), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Per-section settings."));
			MetaData->SetValue(NewProp_bCastShadow, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bCastShadow, TEXT("ToolTip"), TEXT("If true, this section will cast shadows."));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bEnableCollision, TEXT("ToolTip"), TEXT("If true, collision is enabled for this section."));
			MetaData->SetValue(NewProp_MaterialIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaterialIndex, TEXT("ToolTip"), TEXT("Index in to the Materials array on UStaticMesh."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMeshSectionInfo_CRC() { return 1802686143U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshSourceModel()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StaticMeshSourceModel"), sizeof(FStaticMeshSourceModel), Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StaticMeshSourceModel"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStaticMeshSourceModel>, EStructFlags(0x00000001));
			UProperty* NewProp_ScreenSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScreenSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScreenSize, FStaticMeshSourceModel), 0x0010000000000001);
			UProperty* NewProp_LODDistance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LODDistance_DEPRECATED, FStaticMeshSourceModel), 0x0010000020000000);
			UProperty* NewProp_ReductionSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReductionSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReductionSettings, FStaticMeshSourceModel), 0x0010000000000001, Z_Construct_UScriptStruct_FMeshReductionSettings());
			UProperty* NewProp_BuildSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BuildSettings, FStaticMeshSourceModel), 0x0010000000000001, Z_Construct_UScriptStruct_FMeshBuildSettings());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Source model from which a renderable static mesh is built."));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("Category"), TEXT("ReductionSettings"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ScreenSize, TEXT("ToolTip"), TEXT("ScreenSize to display this LOD.\nThe screen size is based around the projected diameter of the bounding\nsphere of the model. i.e. 0.5 means half the screen's maximum dimension."));
			MetaData->SetValue(NewProp_LODDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("Category"), TEXT("ReductionSettings"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionSettings, TEXT("ToolTip"), TEXT("Reduction settings to apply when building render data."));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("Category"), TEXT("BuildSettings"));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_BuildSettings, TEXT("ToolTip"), TEXT("Settings applied when building the mesh."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStaticMeshSourceModel_CRC() { return 3710021325U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StaticMeshOptimizationSettings"), sizeof(FStaticMeshOptimizationSettings), Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StaticMeshOptimizationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStaticMeshOptimizationSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_ShadingImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadingImportance"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ShadingImportance, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_TextureImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextureImportance"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TextureImportance, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_SilhouetteImportance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SilhouetteImportance"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SilhouetteImportance, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_NormalsThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalsThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NormalsThreshold, FStaticMeshOptimizationSettings), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRecalcNormals, FStaticMeshOptimizationSettings, bool);
			UProperty* NewProp_bRecalcNormals = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRecalcNormals"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRecalcNormals, FStaticMeshOptimizationSettings), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bRecalcNormals, FStaticMeshOptimizationSettings), sizeof(bool), true);
			UProperty* NewProp_WeldingThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeldingThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WeldingThreshold, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_MaxDeviationPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxDeviationPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDeviationPercentage, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_NumOfTrianglesPercentage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumOfTrianglesPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NumOfTrianglesPercentage, FStaticMeshOptimizationSettings), 0x0010000000000000);
			UProperty* NewProp_ReductionMethod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReductionMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReductionMethod, FStaticMeshOptimizationSettings), 0x0010000000000000, Z_Construct_UEnum_Engine_EOptimizationType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Old optimization settings."));
			MetaData->SetValue(NewProp_ShadingImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ShadingImportance, TEXT("ToolTip"), TEXT("How important shading quality is."));
			MetaData->SetValue(NewProp_TextureImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_TextureImportance, TEXT("ToolTip"), TEXT("How important texture density is (EImportanceLevel)."));
			MetaData->SetValue(NewProp_SilhouetteImportance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_SilhouetteImportance, TEXT("ToolTip"), TEXT("How important the shape of the geometry is (EImportanceLevel)."));
			MetaData->SetValue(NewProp_NormalsThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_NormalsThreshold, TEXT("ToolTip"), TEXT("If the angle between two triangles are above this value, the normals will not be\n      smooth over the edge between those two triangles. Set in degrees. This is only used when PreserveNormals is set to false"));
			MetaData->SetValue(NewProp_bRecalcNormals, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_bRecalcNormals, TEXT("ToolTip"), TEXT("Whether Normal smoothing groups should be preserved. If false then NormalsThreshold is used *"));
			MetaData->SetValue(NewProp_WeldingThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_WeldingThreshold, TEXT("ToolTip"), TEXT("The welding threshold distance. Vertices under this distance will be welded."));
			MetaData->SetValue(NewProp_MaxDeviationPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_MaxDeviationPercentage, TEXT("ToolTip"), TEXT("If ReductionMethod equals SMOT_MaxDeviation this value is the maximum deviation from the base mesh as a percentage of the bounding sphere."));
			MetaData->SetValue(NewProp_NumOfTrianglesPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_NumOfTrianglesPercentage, TEXT("ToolTip"), TEXT("If ReductionMethod equals SMOT_NumOfTriangles this value is the ratio of triangles [0-1] to remove from the mesh"));
			MetaData->SetValue(NewProp_ReductionMethod, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(NewProp_ReductionMethod, TEXT("ToolTip"), TEXT("The method to use when optimizing the skeletal mesh LOD"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStaticMeshOptimizationSettings_CRC() { return 1757822675U; }
	UFunction* Z_Construct_UFunction_UStaticMesh_GetBoundingBox()
	{
		struct StaticMesh_eventGetBoundingBox_Parms
		{
			FBox ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UStaticMesh();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBoundingBox"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(StaticMesh_eventGetBoundingBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, StaticMesh_eventGetBoundingBox_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FBox());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the bounding box, in local space including bounds extension(s), of the StaticMesh asset"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UStaticMesh_GetBounds()
	{
		struct StaticMesh_eventGetBounds_Parms
		{
			FBoxSphereBounds ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UStaticMesh();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820403, 65535, sizeof(StaticMesh_eventGetBounds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, StaticMesh_eventGetBounds_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FBoxSphereBounds());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of bounds of the mesh.\n\n@return      The bounding box represented as box origin with extents and also a sphere that encapsulates that box"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UStaticMesh_GetNumLODs()
	{
		struct StaticMesh_eventGetNumLODs_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UStaticMesh();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumLODs"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(StaticMesh_eventGetNumLODs_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, StaticMesh_eventGetNumLODs_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the number of LODs used by the mesh."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UStaticMesh_GetNumSections()
	{
		struct StaticMesh_eventGetNumSections_Parms
		{
			int32 InLOD;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UStaticMesh();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumSections"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(StaticMesh_eventGetNumSections_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, StaticMesh_eventGetNumSections_Parms), 0x0010000000000580);
			UProperty* NewProp_InLOD = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLOD"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InLOD, StaticMesh_eventGetNumSections_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("StaticMesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns number of Sections that this StaticMesh has, in the supplied LOD (LOD 0 is the highest)"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UStaticMesh_NoRegister()
	{
		return UStaticMesh::StaticClass();
	}
	UClass* Z_Construct_UClass_UStaticMesh()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UStaticMesh::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20882080;

				OuterClass->LinkChild(Z_Construct_UFunction_UStaticMesh_GetBoundingBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UStaticMesh_GetBounds());
				OuterClass->LinkChild(Z_Construct_UFunction_UStaticMesh_GetNumLODs());
				OuterClass->LinkChild(Z_Construct_UFunction_UStaticMesh_GetNumSections());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NavCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NavCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NavCollision, UStaticMesh), 0x00120000002a2009, Z_Construct_UClass_UNavCollision_NoRegister());
				UProperty* NewProp_AssetUserData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AssetUserData, UStaticMesh), 0x00200c8000000009);
				UProperty* NewProp_AssetUserData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AssetUserData, TEXT("AssetUserData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_UAssetUserData_NoRegister());
				UProperty* NewProp_ElementToIgnoreForTexFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ElementToIgnoreForTexFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ElementToIgnoreForTexFactor, UStaticMesh), 0x0020080000000000);
				UProperty* NewProp_ExtendedBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExtendedBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExtendedBounds, UStaticMesh), 0x0010000000000000, Z_Construct_UScriptStruct_FBoxSphereBounds());
				UProperty* NewProp_NegativeBoundsExtension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NegativeBoundsExtension"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NegativeBoundsExtension, UStaticMesh), 0x0010040000010001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PositiveBoundsExtension = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PositiveBoundsExtension"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PositiveBoundsExtension, UStaticMesh), 0x0010040000010001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_Sockets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sockets"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Sockets, UStaticMesh), 0x0010000000000000);
				UProperty* NewProp_Sockets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Sockets, TEXT("Sockets"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UStaticMeshSocket_NoRegister());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCustomizedCollision, UStaticMesh, bool);
				UProperty* NewProp_bCustomizedCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCustomizedCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCustomizedCollision, UStaticMesh), 0x0010000800000001, CPP_BOOL_PROPERTY_BITMASK(bCustomizedCollision, UStaticMesh), sizeof(bool), true);
				UProperty* NewProp_EditorCameraPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorCameraPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EditorCameraPosition, UStaticMesh), 0x0010000800000000, Z_Construct_UScriptStruct_FAssetEditorOrbitCameraPosition());
				UProperty* NewProp_ThumbnailInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThumbnailInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThumbnailInfo, UStaticMesh), 0x00120008000a0009, Z_Construct_UClass_UThumbnailInfo_NoRegister());
				UProperty* NewProp_SourceFileTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFileTimestamp"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFileTimestamp_DEPRECATED, UStaticMesh), 0x0010000820000000);
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UStaticMesh), 0x0010000820000000);
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UStaticMesh), 0x00120008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowCPUAccess, UStaticMesh, bool);
				UProperty* NewProp_bAllowCPUAccess = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowCPUAccess"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowCPUAccess, UStaticMesh), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bAllowCPUAccess, UStaticMesh), sizeof(bool), true);
				UProperty* NewProp_LpvBiasMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LpvBiasMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LpvBiasMultiplier, UStaticMesh), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLODsShareStaticLighting, UStaticMesh, uint8);
				UProperty* NewProp_bLODsShareStaticLighting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLODsShareStaticLighting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLODsShareStaticLighting, UStaticMesh), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bLODsShareStaticLighting, UStaticMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasNavigationData, UStaticMesh, uint8);
				UProperty* NewProp_bHasNavigationData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasNavigationData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasNavigationData, UStaticMesh), 0x0010040000000001, CPP_BOOL_PROPERTY_BITMASK(bHasNavigationData, UStaticMesh), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh, uint8);
				UProperty* NewProp_bStripComplexCollisionForConsole = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStripComplexCollisionForConsole"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bStripComplexCollisionForConsole_DEPRECATED, UStaticMesh), sizeof(uint8), false);
				UProperty* NewProp_LODForCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODForCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODForCollision, UStaticMesh), 0x0010000000000001);
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BodySetup, UStaticMesh), 0x0012000000282009, Z_Construct_UClass_UBodySetup_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGenerateMeshDistanceField, UStaticMesh, uint8);
				UProperty* NewProp_bGenerateMeshDistanceField = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGenerateMeshDistanceField"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGenerateMeshDistanceField, UStaticMesh), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bGenerateMeshDistanceField, UStaticMesh), sizeof(uint8), false);
				UProperty* NewProp_LightMapCoordinateIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapCoordinateIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LightMapCoordinateIndex, UStaticMesh), 0x0010040000000001);
				UProperty* NewProp_LightMapResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapResolution"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LightMapResolution, UStaticMesh), 0x0010000000000001);
				UProperty* NewProp_LightmapUVDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightmapUVDensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LightmapUVDensity, UStaticMesh), 0x0010000000000000);
				UProperty* NewProp_StaticMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(StaticMaterials, UStaticMesh), 0x0010000000000000);
				UProperty* NewProp_StaticMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StaticMaterials, TEXT("StaticMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FStaticMaterial());
				UProperty* NewProp_Materials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Materials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Materials_DEPRECATED, UStaticMesh), 0x0010000020000000);
				UProperty* NewProp_Materials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Materials, TEXT("Materials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MinLOD = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinLOD"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinLOD, UStaticMesh), 0x0010000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_MaterialRemapIndexPerImportVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialRemapIndexPerImportVersion"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MaterialRemapIndexPerImportVersion, UStaticMesh), 0x0010000800000000);
				UProperty* NewProp_MaterialRemapIndexPerImportVersion_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MaterialRemapIndexPerImportVersion, TEXT("MaterialRemapIndexPerImportVersion"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FMaterialRemapIndex());
				UProperty* NewProp_ImportVersion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportVersion"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ImportVersion, UStaticMesh), 0x0010000800000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoComputeLODScreenSize, UStaticMesh, uint8);
				UProperty* NewProp_bAutoComputeLODScreenSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoComputeLODScreenSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoComputeLODScreenSize, UStaticMesh), 0x0010000800000000, CPP_BOOL_PROPERTY_BITMASK(bAutoComputeLODScreenSize, UStaticMesh), sizeof(uint8), false);
				UProperty* NewProp_LODGroup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(LODGroup, UStaticMesh), 0x0010010800000000);
				UProperty* NewProp_SectionInfoMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SectionInfoMap"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SectionInfoMap, UStaticMesh), 0x0010000800000000, Z_Construct_UScriptStruct_FMeshSectionInfoMap());
				UProperty* NewProp_SourceModels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceModels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SourceModels, UStaticMesh), 0x0010000800000000);
				UProperty* NewProp_SourceModels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourceModels, TEXT("SourceModels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000800000000, Z_Construct_UScriptStruct_FStaticMeshSourceModel());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStaticMesh_GetBoundingBox(), "GetBoundingBox"); // 2624073050
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStaticMesh_GetBounds(), "GetBounds"); // 3749704637
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStaticMesh_GetNumLODs(), "GetNumLODs"); // 1761881234
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStaticMesh_GetNumSections(), "GetNumSections"); // 2071899695
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UInterface_CollisionDataProvider_NoRegister(), VTABLE_OFFSET(UStaticMesh, IInterface_CollisionDataProvider), false ));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UInterface_AssetUserData_NoRegister(), VTABLE_OFFSET(UStaticMesh, IInterface_AssetUserData), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/StaticMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A StaticMesh is a piece of geometry that consists of a static set of polygons.\nStatic Meshes can be translated, rotated, and scaled, but they cannot have their vertices animated in any way. As such, they are more efficient\nto render than other types of geometry such as USkeletalMesh, and they are often the basic building block of levels created in the engine.\n\n@see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/\n@see AStaticMeshActor, UStaticMeshComponent"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_NavCollision, TEXT("ToolTip"), TEXT("Pre-build navigation collision"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetUserData, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetUserData_Inner, TEXT("ToolTip"), TEXT("Array of user data stored with the asset"));
				MetaData->SetValue(NewProp_ElementToIgnoreForTexFactor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ElementToIgnoreForTexFactor, TEXT("ToolTip"), TEXT("Index of an element to ignore while gathering streaming texture factors.\nThis is useful to disregard automatically generated vertex data which breaks texture factor heuristics."));
				MetaData->SetValue(NewProp_ExtendedBounds, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ExtendedBounds, TEXT("ToolTip"), TEXT("Original mesh bounds extended with Positive/NegativeBoundsExtension"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_NegativeBoundsExtension, TEXT("ToolTip"), TEXT("Bound extension values in the negative direction of XYZ, positive value increases bound size"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_PositiveBoundsExtension, TEXT("ToolTip"), TEXT("Bound extension values in the positive direction of XYZ, positive value increases bound size"));
				MetaData->SetValue(NewProp_Sockets, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_Sockets, TEXT("ToolTip"), TEXT("Array of named socket locations, set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the StaticMeshComponent."));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("Category"), TEXT("Collision"));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bCustomizedCollision, TEXT("ToolTip"), TEXT("If the user has modified collision in any way or has custom collision imported. Used for determining if to auto generate collision on import"));
				MetaData->SetValue(NewProp_EditorCameraPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_EditorCameraPosition, TEXT("ToolTip"), TEXT("The stored camera position to use as a default for the static mesh editor"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("Category"), TEXT("Thumbnail"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ThumbnailInfo, TEXT("ToolTip"), TEXT("Information for thumbnail rendering"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceFileTimestamp, TEXT("ToolTip"), TEXT("Date/Time-stamp of the file from the last import"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ToolTip"), TEXT("Path to the resource used to construct this static mesh"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ToolTip"), TEXT("Importing data and options used for this mesh"));
				MetaData->SetValue(NewProp_bAllowCPUAccess, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_bAllowCPUAccess, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bAllowCPUAccess, TEXT("ToolTip"), TEXT("If true, will keep geometry data CPU-accessible in cooked builds, rather than uploading to GPU memory and releasing it from CPU memory.\nThis is required if you wish to access StaticMesh geometry data on the CPU at runtime in cooked builds (e.g. to convert StaticMesh to ProceduralMeshComponent)"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("ToolTip"), TEXT("Bias multiplier for Light Propagation Volume lighting"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("UIMax"), TEXT("3.0"));
				MetaData->SetValue(NewProp_LpvBiasMultiplier, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_bLODsShareStaticLighting, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bLODsShareStaticLighting, TEXT("ToolTip"), TEXT("TEMPORARY for 4.15.1. True if LODs share static lighting data"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bHasNavigationData, TEXT("ToolTip"), TEXT("If true, mesh will have NavCollision property with additional data for navmesh generation and usage.\n          Set to false for distant meshes (always outside navigation bounds) to save memory on collision data."));
				MetaData->SetValue(NewProp_bStripComplexCollisionForConsole, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bStripComplexCollisionForConsole, TEXT("ToolTip"), TEXT("If true, strips unwanted complex collision data aka kDOP tree when cooking for consoles.\n              On the Playstation 3 data of this mesh will be stored in video memory."));
				MetaData->SetValue(NewProp_LODForCollision, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LODForCollision, TEXT("DisplayName"), TEXT("LOD For Collision"));
				MetaData->SetValue(NewProp_LODForCollision, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LODForCollision, TEXT("ToolTip"), TEXT("Specifies which mesh LOD to use for complex (per-poly) collision.\nSometimes it can be desirable to use a lower poly representation for collision to reduce memory usage, improve performance and behaviour.\nCollision representation does not change based on distance to camera."));
				MetaData->SetValue(NewProp_BodySetup, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("Physics data."));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceField, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceField, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bGenerateMeshDistanceField, TEXT("ToolTip"), TEXT("Whether to generate a distance field for this mesh, which can be used by DistanceField Indirect Shadows.\nThis is ignored if the project's 'Generate Mesh Distance Fields' setting is enabled."));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LightMapCoordinateIndex, TEXT("ToolTip"), TEXT("The light map coordinate index"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("Category"), TEXT("StaticMesh"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("ClampMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("FixedIncrement"), TEXT("4.0"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LightMapResolution, TEXT("ToolTip"), TEXT("The light map resolution"));
				MetaData->SetValue(NewProp_LightmapUVDensity, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_StaticMaterials, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_Materials, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_Materials, TEXT("ToolTip"), TEXT("Materials used by this static mesh. Individual sections index in to this array."));
				MetaData->SetValue(NewProp_MinLOD, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_MinLOD, TEXT("ToolTip"), TEXT("Minimum LOD to use for rendering.  This is the default setting for the mesh and can be overridden by component settings."));
				MetaData->SetValue(NewProp_MaterialRemapIndexPerImportVersion, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ImportVersion, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_ImportVersion, TEXT("ToolTip"), TEXT("The last import version"));
				MetaData->SetValue(NewProp_bAutoComputeLODScreenSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_bAutoComputeLODScreenSize, TEXT("ToolTip"), TEXT("If true, the screen sizees at which LODs swap are computed automatically."));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_LODGroup, TEXT("ToolTip"), TEXT("The LOD group to which this mesh belongs."));
				MetaData->SetValue(NewProp_SectionInfoMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SectionInfoMap, TEXT("ToolTip"), TEXT("Map of LOD+Section index to per-section info."));
				MetaData->SetValue(NewProp_SourceModels, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMesh.h"));
				MetaData->SetValue(NewProp_SourceModels, TEXT("ToolTip"), TEXT("Imported raw mesh bulk data."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStaticMesh(Z_Construct_UClass_UStaticMesh, &UStaticMesh::StaticClass, TEXT("UStaticMesh"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStaticMesh);
	UClass* Z_Construct_UClass_UStaticMeshSocket_NoRegister()
	{
		return UStaticMeshSocket::StaticClass();
	}
	UClass* Z_Construct_UClass_UStaticMeshSocket()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UStaticMeshSocket::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewStaticMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewStaticMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PreviewStaticMesh, UStaticMeshSocket), 0x0010000800000001, Z_Construct_UClass_UStaticMesh_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tag"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Tag, UStaticMeshSocket), 0x0010000000000005);
				UProperty* NewProp_RelativeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeScale, UStaticMeshSocket), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, UStaticMeshSocket), 0x0010000000000005, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_RelativeLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RelativeLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeLocation, UStaticMeshSocket), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_SocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SocketName, UStaticMeshSocket), 0x0010000000000014);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Actor"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/StaticMeshSocket.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_PreviewStaticMesh, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_PreviewStaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_Tag, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeScale, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_RelativeLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("Category"), TEXT("StaticMeshSocket"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StaticMeshSocket.h"));
				MetaData->SetValue(NewProp_SocketName, TEXT("ToolTip"), TEXT("Defines a named attachment location on the UStaticMesh.\nThese are set up in editor and used as a shortcut instead of specifying\neverything explicitly to AttachComponent in the StaticMeshComponent.\nThe Outer of a StaticMeshSocket should always be the UStaticMesh."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStaticMeshSocket(Z_Construct_UClass_UStaticMeshSocket, &UStaticMeshSocket::StaticClass, TEXT("UStaticMeshSocket"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStaticMeshSocket);
	UEnum* Z_Construct_UEnum_Engine_EVertexAttributeStreamType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVertexAttributeStreamType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVertexAttributeStreamType"), 0, Get_Z_Construct_UEnum_Engine_EVertexAttributeStreamType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVertexAttributeStreamType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_unknown")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_float")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_float2")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_float3")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_float4")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VAST_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVertexAttributeStreamType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("typical vertex attribute formats but as they are only CPU processed at the moment we could chnage that"));
			MetaData->SetValue(ReturnEnum, TEXT("VAST_float3.ToolTip"), TEXT("FVector2D e.g. UV"));
			MetaData->SetValue(ReturnEnum, TEXT("VAST_float4.ToolTip"), TEXT("FVector e.g. position"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVertexAttributeStreamType_CRC() { return 4240570531U; }
	UClass* Z_Construct_UClass_UVertexAttributeStream_NoRegister()
	{
		return UVertexAttributeStream::StaticClass();
	}
	UClass* Z_Construct_UClass_UVertexAttributeStream()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVertexAttributeStream::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Data, UVertexAttributeStream), 0x0040000000000000);
				UProperty* NewProp_Data_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Data, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_AttributeType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttributeType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AttributeType, UVertexAttributeStream), 0x0040000000000000, Z_Construct_UEnum_Engine_EVertexAttributeStreamType());
				UProperty* NewProp_Usage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Usage"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Usage, UVertexAttributeStream), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SubDSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_Data, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_Data, TEXT("ToolTip"), TEXT("actual type depends on AttributeType, position is indexed by IndicesPerFace, other attributes by CornerID (e.g. 10 quads result in 40 attributes)"));
				MetaData->SetValue(NewProp_AttributeType, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_AttributeType, TEXT("ToolTip"), TEXT("e.g. VAST_unknown"));
				MetaData->SetValue(NewProp_Usage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_Usage, TEXT("ToolTip"), TEXT("e.g. FName(TEXT(\"Position\"))"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVertexAttributeStream(Z_Construct_UClass_UVertexAttributeStream, &UVertexAttributeStream::StaticClass, TEXT("UVertexAttributeStream"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVertexAttributeStream);
	UClass* Z_Construct_UClass_USubDSurface_NoRegister()
	{
		return USubDSurface::StaticClass();
	}
	UClass* Z_Construct_UClass_USubDSurface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USubDSurface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Materials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Materials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Materials, USubDSurface), 0x0010000000000000);
				UProperty* NewProp_Materials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Materials, TEXT("Materials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_VertexAttributeStreams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexAttributeStreams"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VertexAttributeStreams, USubDSurface), 0x0010000000000000);
				UProperty* NewProp_VertexAttributeStreams_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexAttributeStreams, TEXT("VertexAttributeStreams"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UVertexAttributeStream_NoRegister());
				UProperty* NewProp_IndicesPerFace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IndicesPerFace"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IndicesPerFace, USubDSurface), 0x0010000000000000);
				UProperty* NewProp_IndicesPerFace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IndicesPerFace, TEXT("IndicesPerFace"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_VertexCountPerFace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexCountPerFace"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VertexCountPerFace, USubDSurface), 0x0010000000000000);
				UProperty* NewProp_VertexCountPerFace_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VertexCountPerFace, TEXT("VertexCountPerFace"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("SubDSurface"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SubDSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Subdivision Surface Asset (Experimental, Early work in progress)"));
				MetaData->SetValue(NewProp_Materials, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_Materials, TEXT("ToolTip"), TEXT("Materials used by this mesh. Individual sections index in to this array."));
				MetaData->SetValue(NewProp_VertexAttributeStreams, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_VertexAttributeStreams, TEXT("ToolTip"), TEXT("various streams e.g \"Position\""));
				MetaData->SetValue(NewProp_IndicesPerFace, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_IndicesPerFace, TEXT("ToolTip"), TEXT("becomes TopologyDescriptor::vertIndicesPerFace e.g. two triangles: 0,1,2, 2,3,0"));
				MetaData->SetValue(NewProp_VertexCountPerFace, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubDSurface.h"));
				MetaData->SetValue(NewProp_VertexCountPerFace, TEXT("ToolTip"), TEXT("becomes TopologyDescriptor::numVertsPerFace, TopologyDescriptor::numFaces = .Num()\n32bit for OpenSubDiv TopologyDescriptor but it could be limited to 4 bits"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USubDSurface(Z_Construct_UClass_USubDSurface, &USubDSurface::StaticClass, TEXT("USubDSurface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USubDSurface);
	UScriptStruct* Z_Construct_UScriptStruct_FSubsurfaceProfileStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SubsurfaceProfileStruct"), sizeof(FSubsurfaceProfileStruct), Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SubsurfaceProfileStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSubsurfaceProfileStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_FalloffColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FalloffColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FalloffColor, FSubsurfaceProfileStruct), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_SubsurfaceColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubsurfaceColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SubsurfaceColor, FSubsurfaceProfileStruct), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ScatterRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScatterRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScatterRadius, FSubsurfaceProfileStruct), 0x0010000000000015);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("struct with all the settings we want in USubsurfaceProfile, separate to make it easer to pass this data around in the engine."));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("HideAlphaChannel"), TEXT(""));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_FalloffColor, TEXT("ToolTip"), TEXT("defines the per-channel falloff of the gradients\nproduced by the subsurface scattering events, can be used to fine tune the color of the gradients\n(called \"falloff\" in SeparableSSS, default there: 1, 0.37, 0.3)"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("HideAlphaChannel"), TEXT(""));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_SubsurfaceColor, TEXT("ToolTip"), TEXT("Specifies the how much of the diffuse light gets into the material,\ncan be seen as a per-channel mix factor between the original image,\nand the SSS-filtered image (called \"strength\" in SeparableSSS, default there: 0.48, 0.41, 0.28)"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("Category"), TEXT("SubsurfaceProfileStruct"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ClampMax"), TEXT("1000.0"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ClampMin"), TEXT("0.1"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("ToolTip"), TEXT("in world/unreal units (cm)"));
			MetaData->SetValue(NewProp_ScatterRadius, TEXT("UIMax"), TEXT("50.0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSubsurfaceProfileStruct_CRC() { return 3601133506U; }
	UClass* Z_Construct_UClass_USubsurfaceProfile_NoRegister()
	{
		return USubsurfaceProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_USubsurfaceProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = USubsurfaceProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Settings, USubsurfaceProfile), 0x0010000000000001, Z_Construct_UScriptStruct_FSubsurfaceProfileStruct());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("SubsurfaceProfile"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Subsurface Scattering profile asset, can be specified at the material. Only for \"Subsurface Profile\" materials, is use during Screenspace Subsurface Scattering\nDon't change at runtime. All properties in here are per material - texture like variations need to come from properties that are in the GBuffer."));
				MetaData->SetValue(NewProp_Settings, TEXT("Category"), TEXT("USubsurfaceProfile"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/SubsurfaceProfile.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USubsurfaceProfile(Z_Construct_UClass_USubsurfaceProfile, &USubsurfaceProfile::StaticClass, TEXT("USubsurfaceProfile"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USubsurfaceProfile);
	UClass* Z_Construct_UClass_UTextPropertyTestObject_NoRegister()
	{
		return UTextPropertyTestObject::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextPropertyTestObject()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextPropertyTestObject::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TransientText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransientText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(TransientText, UTextPropertyTestObject), 0x0010000000000000);
				UProperty* NewProp_UndefaultedText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndefaultedText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(UndefaultedText, UTextPropertyTestObject), 0x0010000000000000);
				UProperty* NewProp_DefaultedText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultedText"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(DefaultedText, UTextPropertyTestObject), 0x0010000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_TransientText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_UndefaultedText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
				MetaData->SetValue(NewProp_DefaultedText, TEXT("ModuleRelativePath"), TEXT("Classes/Tests/TextPropertyTestObject.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextPropertyTestObject(Z_Construct_UClass_UTextPropertyTestObject, &UTextPropertyTestObject::StaticClass, TEXT("UTextPropertyTestObject"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextPropertyTestObject);
	UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX()
	{
		struct Texture2D_eventBlueprint_GetSizeX_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTexture2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Blueprint_GetSizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Texture2D_eventBlueprint_GetSizeX_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Texture2D_eventBlueprint_GetSizeX_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSizeX"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the X size of the texture, in pixels"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY()
	{
		struct Texture2D_eventBlueprint_GetSizeY_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTexture2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Blueprint_GetSizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Texture2D_eventBlueprint_GetSizeY_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Texture2D_eventBlueprint_GetSizeY_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Texture"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetSizeY"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the Y size of the texture, in pixels"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTexture2D_NoRegister()
	{
		return UTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX());
				OuterClass->LinkChild(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AddressY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressY"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AddressY, UTexture2D), 0x0010050000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_AddressX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressX"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AddressX, UTexture2D), 0x0010050000000005, Z_Construct_UEnum_Engine_TextureAddress());
#if WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasBeenPaintedInEditor, UTexture2D, uint8);
				UProperty* NewProp_bHasBeenPaintedInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasBeenPaintedInEditor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasBeenPaintedInEditor, UTexture2D), 0x0010000800000000, CPP_BOOL_PROPERTY_BITMASK(bHasBeenPaintedInEditor, UTexture2D), sizeof(uint8), false);
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGlobalForceMipLevelsToBeResident, UTexture2D, uint8);
				UProperty* NewProp_bGlobalForceMipLevelsToBeResident = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGlobalForceMipLevelsToBeResident"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGlobalForceMipLevelsToBeResident, UTexture2D), 0x0010040000000015, CPP_BOOL_PROPERTY_BITMASK(bGlobalForceMipLevelsToBeResident, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreStreamingMipBias, UTexture2D, uint8);
				UProperty* NewProp_bIgnoreStreamingMipBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreStreamingMipBias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreStreamingMipBias, UTexture2D), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bIgnoreStreamingMipBias, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceMiplevelsToBeResident, UTexture2D, uint8);
				UProperty* NewProp_bForceMiplevelsToBeResident = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceMiplevelsToBeResident"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceMiplevelsToBeResident, UTexture2D), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bForceMiplevelsToBeResident, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasCancelationPending, UTexture2D, uint8);
				UProperty* NewProp_bHasCancelationPending = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasCancelationPending"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasCancelationPending, UTexture2D), 0x0010000400002000, CPP_BOOL_PROPERTY_BITMASK(bHasCancelationPending, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasStreamingUpdatePending, UTexture2D, uint8);
				UProperty* NewProp_bHasStreamingUpdatePending = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasStreamingUpdatePending"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasStreamingUpdatePending, UTexture2D), 0x0010000400002000, CPP_BOOL_PROPERTY_BITMASK(bHasStreamingUpdatePending, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsStreamable, UTexture2D, uint8);
				UProperty* NewProp_bIsStreamable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsStreamable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsStreamable, UTexture2D), 0x0010000400002000, CPP_BOOL_PROPERTY_BITMASK(bIsStreamable, UTexture2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTemporarilyDisableStreaming, UTexture2D, uint8);
				UProperty* NewProp_bTemporarilyDisableStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTemporarilyDisableStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTemporarilyDisableStreaming, UTexture2D), 0x0040000000002000, CPP_BOOL_PROPERTY_BITMASK(bTemporarilyDisableStreaming, UTexture2D), sizeof(uint8), false);
				UProperty* NewProp_ForceMipLevelsToBeResidentTimestamp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceMipLevelsToBeResidentTimestamp"), RF_Public|RF_Transient|RF_MarkAsNative) UDoubleProperty(CPP_PROPERTY_BASE(ForceMipLevelsToBeResidentTimestamp, UTexture2D), 0x0040000000002000);
				UProperty* NewProp_ImportedSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImportedSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ImportedSize, UTexture2D), 0x0040000000000000, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_FirstResourceMemMip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstResourceMemMip"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FirstResourceMemMip, UTexture2D), 0x0010000000000000);
				UProperty* NewProp_LevelIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LevelIndex, UTexture2D), 0x0010000400202000);
				UProperty* NewProp_StreamingIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StreamingIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StreamingIndex, UTexture2D), 0x0040000400202000);
				UProperty* NewProp_ResidentMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResidentMips"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ResidentMips, UTexture2D), 0x0010000400002000);
				UProperty* NewProp_RequestedMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RequestedMips"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RequestedMips, UTexture2D), 0x0010000400002000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeX(), "Blueprint_GetSizeX"); // 110078647
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTexture2D_Blueprint_GetSizeY(), "Blueprint_GetSizeY"); // 3153768411
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AddressY, TEXT("DisplayName"), TEXT("Y-axis Tiling Method"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ToolTip"), TEXT("The addressing mode to use for the Y axis."));
				MetaData->SetValue(NewProp_AddressX, TEXT("Category"), TEXT("Texture"));
				MetaData->SetValue(NewProp_AddressX, TEXT("DisplayName"), TEXT("X-axis Tiling Method"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ToolTip"), TEXT("The addressing mode to use for the X axis."));
				MetaData->SetValue(NewProp_bHasBeenPaintedInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bHasBeenPaintedInEditor, TEXT("ToolTip"), TEXT("Whether the texture has been painted in the editor."));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("Category"), TEXT("LevelOfDetail"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("DisplayName"), TEXT("Global Force Resident Mip Levels"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bGlobalForceMipLevelsToBeResident, TEXT("ToolTip"), TEXT("Global and serialized version of ForceMiplevelsToBeResident."));
				MetaData->SetValue(NewProp_bIgnoreStreamingMipBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bIgnoreStreamingMipBias, TEXT("ToolTip"), TEXT("Ignores the streaming mip bias used to accommodate memory constraints."));
				MetaData->SetValue(NewProp_bForceMiplevelsToBeResident, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bForceMiplevelsToBeResident, TEXT("ToolTip"), TEXT("Override whether to fully stream even if texture hasn't been rendered."));
				MetaData->SetValue(NewProp_bHasCancelationPending, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bHasCancelationPending, TEXT("ToolTip"), TEXT("Whether the current texture mip change request is pending cancellation."));
				MetaData->SetValue(NewProp_bHasStreamingUpdatePending, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bHasStreamingUpdatePending, TEXT("ToolTip"), TEXT("Whether some mips might be streamed soon. If false, the texture is not planned resolution will be stable."));
				MetaData->SetValue(NewProp_bIsStreamable, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bIsStreamable, TEXT("ToolTip"), TEXT("Whether the texture is currently streamable or not."));
				MetaData->SetValue(NewProp_bTemporarilyDisableStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_bTemporarilyDisableStreaming, TEXT("ToolTip"), TEXT("True if streaming is temporarily disabled so we can update subregions of this texture's resource\n      without streaming clobbering it. Automatically cleared before saving."));
				MetaData->SetValue(NewProp_ForceMipLevelsToBeResidentTimestamp, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ForceMipLevelsToBeResidentTimestamp, TEXT("ToolTip"), TEXT("WorldSettings timestamp that tells the streamer to force all miplevels to be resident up until that time."));
				MetaData->SetValue(NewProp_ImportedSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ImportedSize, TEXT("ToolTip"), TEXT("The imported size of the texture. Only valid on cooked builds when texture source is not\navailable. Access ONLY via the GetImportedSize() accessor!"));
				MetaData->SetValue(NewProp_FirstResourceMemMip, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_FirstResourceMemMip, TEXT("ToolTip"), TEXT("keep track of first mip level used for ResourceMem creation"));
				MetaData->SetValue(NewProp_LevelIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_LevelIndex, TEXT("ToolTip"), TEXT("* Level scope index of this texture. It is used to reduce the amount of lookup to map a texture to its level index.\n* Useful when building texture streaming data, as well as when filling the texture streamer with precomputed data.\n* It relates to FStreamingTextureBuildInfo::TextureLevelIndex and also the index in ULevel::StreamingTextureGuids.\n* Default value of -1, indicates that the texture has an unknown index (not yet processed). At level load time,\n* -2 is also used to indicate that the texture has been processed but no entry were found in the level table.\n* After any of these processes, the LevelIndex is reset to INDEX_NONE. Making it ready for the next level task."));
				MetaData->SetValue(NewProp_StreamingIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_StreamingIndex, TEXT("ToolTip"), TEXT("FStreamingTexture index used by the texture streaming system."));
				MetaData->SetValue(NewProp_ResidentMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_ResidentMips, TEXT("ToolTip"), TEXT("Number of miplevels currently resident."));
				MetaData->SetValue(NewProp_RequestedMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2D.h"));
				MetaData->SetValue(NewProp_RequestedMips, TEXT("ToolTip"), TEXT("Number of miplevels the texture should have resident."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture2D(Z_Construct_UClass_UTexture2D, &UTexture2D::StaticClass, TEXT("UTexture2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture2D);
	UClass* Z_Construct_UClass_ULightMapTexture2D_NoRegister()
	{
		return ULightMapTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightMapTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = ULightMapTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/LightMapTexture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/LightMapTexture2D.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightMapTexture2D(Z_Construct_UClass_ULightMapTexture2D, &ULightMapTexture2D::StaticClass, TEXT("ULightMapTexture2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightMapTexture2D);
	UClass* Z_Construct_UClass_UShadowMapTexture2D_NoRegister()
	{
		return UShadowMapTexture2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UShadowMapTexture2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UShadowMapTexture2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ShadowmapFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowmapFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ShadowmapFlags, UShadowMapTexture2D), 0x0010000000000000, Z_Construct_UEnum_Engine_EShadowMapFlags());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(NewProp_ShadowmapFlags, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/ShadowMapTexture2D.h"));
				MetaData->SetValue(NewProp_ShadowmapFlags, TEXT("ToolTip"), TEXT("Bit-field with shadowmap flags."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShadowMapTexture2D(Z_Construct_UClass_UShadowMapTexture2D, &UShadowMapTexture2D::StaticClass, TEXT("UShadowMapTexture2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShadowMapTexture2D);
	UClass* Z_Construct_UClass_UTextureLightProfile_NoRegister()
	{
		return UTextureLightProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureLightProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureLightProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextureMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TextureMultiplier, UTextureLightProfile), 0x0010000000020001);
				UProperty* NewProp_Brightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Brightness, UTextureLightProfile), 0x0010010000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object CompositeTexture Texture2D Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureLightProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("Category"), TEXT("TextureLightProfile"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_TextureMultiplier, TEXT("ToolTip"), TEXT("Multiplier to map texture value to result to integrate over the sphere to 1.0f"));
				MetaData->SetValue(NewProp_Brightness, TEXT("Category"), TEXT("TextureLightProfile"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLightProfile.h"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ToolTip"), TEXT("Light brightness in Lumens, imported from IES profile, <= 0 if the profile is used for masking only. Use with InverseSquareFalloff."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureLightProfile(Z_Construct_UClass_UTextureLightProfile, &UTextureLightProfile::StaticClass, TEXT("UTextureLightProfile"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureLightProfile);
	UClass* Z_Construct_UClass_UTexture2DDynamic_NoRegister()
	{
		return UTexture2DDynamic::StaticClass();
	}
	UClass* Z_Construct_UClass_UTexture2DDynamic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTexture2DDynamic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Format = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Format"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Format, UTexture2DDynamic), 0x0010000000002000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/Texture2DDynamic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2DDynamic.h"));
				MetaData->SetValue(NewProp_Format, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/Texture2DDynamic.h"));
				MetaData->SetValue(NewProp_Format, TEXT("ToolTip"), TEXT("The format of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTexture2DDynamic(Z_Construct_UClass_UTexture2DDynamic, &UTexture2DDynamic::StaticClass, TEXT("UTexture2DDynamic"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTexture2DDynamic);
	UClass* Z_Construct_UClass_UTextureCube_NoRegister()
	{
		return UTextureCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureCube.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureCube(Z_Construct_UClass_UTextureCube, &UTextureCube::StaticClass, TEXT("UTextureCube"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureCube);
	UClass* Z_Construct_UClass_UTextureRenderTarget_NoRegister()
	{
		return UTextureRenderTarget::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTarget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTexture();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureRenderTarget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TargetGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetGamma"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TargetGamma, UTextureRenderTarget), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTarget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget.h"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("Category"), TEXT("TextureRenderTarget"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget.h"));
				MetaData->SetValue(NewProp_TargetGamma, TEXT("ToolTip"), TEXT("Will override FTextureRenderTarget2DResource::GetDisplayGamma if > 0."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTarget(Z_Construct_UClass_UTextureRenderTarget, &UTextureRenderTarget::StaticClass, TEXT("UTextureRenderTarget"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTarget);
	UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister()
	{
		return UTextureRenderTarget2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTarget2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureRenderTarget2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OverrideFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OverrideFormat, UTextureRenderTarget2D), 0x0010000000000000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoGenerateMips, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bAutoGenerateMips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoGenerateMips"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoGenerateMips, UTextureRenderTarget2D), 0x0010010000000015, CPP_BOOL_PROPERTY_BITMASK(bAutoGenerateMips, UTextureRenderTarget2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGPUSharedFlag, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bGPUSharedFlag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGPUSharedFlag"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGPUSharedFlag, UTextureRenderTarget2D), 0x0010050000000015, CPP_BOOL_PROPERTY_BITMASK(bGPUSharedFlag, UTextureRenderTarget2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHDR, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHDR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHDR, UTextureRenderTarget2D), 0x0010010000000015, CPP_BOOL_PROPERTY_BITMASK(bHDR, UTextureRenderTarget2D), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceLinearGamma, UTextureRenderTarget2D, uint8);
				UProperty* NewProp_bForceLinearGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceLinearGamma"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceLinearGamma, UTextureRenderTarget2D), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bForceLinearGamma, UTextureRenderTarget2D), sizeof(uint8), false);
				UProperty* NewProp_AddressY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressY"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AddressY, UTextureRenderTarget2D), 0x0010010000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_AddressX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AddressX"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(AddressX, UTextureRenderTarget2D), 0x0010010000000005, Z_Construct_UEnum_Engine_TextureAddress());
				UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearColor, UTextureRenderTarget2D), 0x0010000000000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeY, UTextureRenderTarget2D), 0x0010010000000015);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeX, UTextureRenderTarget2D), 0x0010010000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("TextureRenderTarget2D\n\n2D render target texture resource. This can be used as a target\nfor rendering as well as rendered as a regular 2D texture resource."));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ToolTip"), TEXT("Normally the format is derived from bHDR, this allows code to set the format explicitly."));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bAutoGenerateMips, TEXT("ToolTip"), TEXT("Whether to support Mip maps for this render target texture"));
				MetaData->SetValue(NewProp_bGPUSharedFlag, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_bGPUSharedFlag, TEXT("DisplayName"), TEXT("Shared"));
				MetaData->SetValue(NewProp_bGPUSharedFlag, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bGPUSharedFlag, TEXT("ToolTip"), TEXT("Whether to support GPU sharing of the underlying native texture resource."));
				MetaData->SetValue(NewProp_bHDR, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ToolTip"), TEXT("Whether to support storing HDR values, which requires more memory."));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ToolTip"), TEXT("True to force linear gamma space for this render target"));
				MetaData->SetValue(NewProp_AddressY, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_AddressY, TEXT("ToolTip"), TEXT("The addressing mode to use for the Y axis."));
				MetaData->SetValue(NewProp_AddressX, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_AddressX, TEXT("ToolTip"), TEXT("The addressing mode to use for the X axis."));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ToolTip"), TEXT("the color the texture is cleared to"));
				MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("The height of the texture."));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureRenderTarget2D"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTarget2D.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("The width of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTarget2D(Z_Construct_UClass_UTextureRenderTarget2D, &UTextureRenderTarget2D::StaticClass, TEXT("UTextureRenderTarget2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTarget2D);
	UFunction* Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature()
	{
		struct _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms
		{
			UCanvas* Canvas;
			int32 Width;
			int32 Height;
		};
		UObject* Outer=Z_Construct_UPackage__Script_Engine();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCanvasRenderTargetUpdate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Engine_eventOnCanvasRenderTargetUpdate_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0010000000000080);
			UProperty* NewProp_Canvas = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Canvas"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Canvas, _Script_Engine_eventOnCanvasRenderTargetUpdate_Parms), 0x0010000000000080, Z_Construct_UClass_UCanvas_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This delegate is assignable through Blueprint and has similar functionality to the above."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D()
	{
		struct CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UCanvasRenderTarget2D>  CanvasRenderTarget2DClass;
			int32 Width;
			int32 Height;
			UCanvasRenderTarget2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateCanvasRenderTarget2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0010000000000580, Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0010000000000080);
			UProperty* NewProp_CanvasRenderTarget2DClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CanvasRenderTarget2DClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(CanvasRenderTarget2DClass, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0014000000000080, Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, CanvasRenderTarget2D_eventCreateCanvasRenderTarget2D_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("1024"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("1024"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a new canvas render target and initializes it to the specified dimensions\n\n@param       WorldContextObject      The world where this render target will be rendered for\n@param       CanvasRenderTarget2DClass       Class of the render target.  Unless you want to use a special sub-class, you can simply pass UCanvasRenderTarget2D::StaticClass() here.\n@param       Width                           Width of the render target.\n@param       Height                          Height of the render target.\n\n@return                                              Returns the instanced render target."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize()
	{
		struct CanvasRenderTarget2D_eventGetSize_Parms
		{
			int32 Width;
			int32 Height;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14420401, 65535, sizeof(CanvasRenderTarget2D_eventGetSize_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventGetSize_Parms), 0x0010000000000180);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventGetSize_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a specific render target's size from the global map of canvas render targets.\n\n@param       Width   Output variable for the render target's width\n@param       Height  Output variable for the render target's height"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate()
	{
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(CanvasRenderTarget2D_eventReceiveUpdate_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Height, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0010000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Width, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0010000000000080);
			UProperty* NewProp_Canvas = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Canvas"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Canvas, CanvasRenderTarget2D_eventReceiveUpdate_Parms), 0x0010000000000080, Z_Construct_UClass_UCanvas_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows a Blueprint to implement how this Canvas Render Target 2D should be updated.\n\n@param       Canvas                          Canvas object that can be used to paint to the render target\n@param       Width                           Width of the render target.\n@param       Height                          Height of the render target."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource()
	{
		UObject* Outer=Z_Construct_UClass_UCanvasRenderTarget2D();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UpdateResource"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Render Target 2D"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Updates the the canvas render target texture's resource. This is where the render target will create or\nfind a canvas object to use.  It also calls UpdateResourceImmediate() to clear the render target texture\nfrom the deferred rendering list, to stop the texture from being cleared the next frame. From there it\nwill ask the rendering thread to set up the RHI viewport. The canvas is then set up for rendering and\nthen the user's update delegate is called.  The canvas is then flushed and the RHI resolves the\ntexture to make it available for rendering."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasRenderTarget2D_NoRegister()
	{
		return UCanvasRenderTarget2D::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasRenderTarget2D()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget2D();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UCanvasRenderTarget2D::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldClearRenderTargetOnReceiveUpdate, UCanvasRenderTarget2D, bool);
				UProperty* NewProp_bShouldClearRenderTargetOnReceiveUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldClearRenderTargetOnReceiveUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldClearRenderTargetOnReceiveUpdate, UCanvasRenderTarget2D), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bShouldClearRenderTargetOnReceiveUpdate, UCanvasRenderTarget2D), sizeof(bool), true);
				UProperty* NewProp_World = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("World"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(CPP_PROPERTY_BASE(World, UCanvasRenderTarget2D), 0x0024080000000000, Z_Construct_UClass_UWorld_NoRegister());
				UProperty* NewProp_OnCanvasRenderTargetUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCanvasRenderTargetUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCanvasRenderTargetUpdate, UCanvasRenderTarget2D), 0x0010000010080000, Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasRenderTarget2D_CreateCanvasRenderTarget2D(), "CreateCanvasRenderTarget2D"); // 541644498
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasRenderTarget2D_GetSize(), "GetSize"); // 2761941866
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasRenderTarget2D_ReceiveUpdate(), "ReceiveUpdate"); // 3989150771
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCanvasRenderTarget2D_UpdateResource(), "UpdateResource"); // 279133669
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("CanvasRenderTarget2D is 2D render target which exposes a Canvas interface to allow you to draw elements onto\nit directly.  Use FindCanvasRenderTarget2D() to find or create a render target texture by unique name, then\nbind a function to the OnCanvasRenderTargetUpdate delegate which will be called when the render target is\nupdated.  If you need to repaint your canvas every single frame, simply call UpdateResource() on it from a Tick\nfunction.  Also, remember to hold onto your new canvas render target with a reference so that it doesn't get\ngarbage collected."));
				MetaData->SetValue(NewProp_bShouldClearRenderTargetOnReceiveUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(NewProp_bShouldClearRenderTargetOnReceiveUpdate, TEXT("ToolTip"), TEXT("If true, clear the render target to green whenever OnReceiveUpdate() is called.  (Defaults to true.)\nIf false, the render target will retain whatever values it had, allowing the user to update only areas that\nhave changed."));
				MetaData->SetValue(NewProp_World, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(NewProp_World, TEXT("ToolTip"), TEXT("The world this render target will be used with"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("Category"), TEXT("Canvas Render Target 2D"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/CanvasRenderTarget2D.h"));
				MetaData->SetValue(NewProp_OnCanvasRenderTargetUpdate, TEXT("ToolTip"), TEXT("Called when this Canvas Render Target is asked to update its texture resource."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasRenderTarget2D(Z_Construct_UClass_UCanvasRenderTarget2D, &UCanvasRenderTarget2D::StaticClass, TEXT("UCanvasRenderTarget2D"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasRenderTarget2D);
	UClass* Z_Construct_UClass_UTextureRenderTargetCube_NoRegister()
	{
		return UTextureRenderTargetCube::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureRenderTargetCube()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureRenderTarget();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureRenderTargetCube::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceLinearGamma, UTextureRenderTargetCube, uint8);
				UProperty* NewProp_bForceLinearGamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bForceLinearGamma"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceLinearGamma, UTextureRenderTargetCube), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bForceLinearGamma, UTextureRenderTargetCube), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHDR, UTextureRenderTargetCube, uint8);
				UProperty* NewProp_bHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHDR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHDR, UTextureRenderTargetCube), 0x0010010000000015, CPP_BOOL_PROPERTY_BITMASK(bHDR, UTextureRenderTargetCube), sizeof(uint8), false);
				UProperty* NewProp_OverrideFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OverrideFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OverrideFormat, UTextureRenderTargetCube), 0x0010000000000000, Z_Construct_UEnum_CoreUObject_EPixelFormat());
				UProperty* NewProp_ClearColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClearColor, UTextureRenderTargetCube), 0x0010000000000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeX, UTextureRenderTargetCube), 0x0010010000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Texture"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("TextureRenderTargetCube\n\nCube render target texture resource. This can be used as a target\nfor rendering as well as rendered as a regular cube texture resource."));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_bForceLinearGamma, TEXT("ToolTip"), TEXT("True to force linear gamma space for this render target"));
				MetaData->SetValue(NewProp_bHDR, TEXT("Category"), TEXT("TextureRenderTargetCube"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_bHDR, TEXT("ToolTip"), TEXT("Whether to support storing HDR values, which requires more memory."));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_OverrideFormat, TEXT("ToolTip"), TEXT("Normally the format is derived from bHDR, this allows code to set the format explicitly."));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_ClearColor, TEXT("ToolTip"), TEXT("the color the texture is cleared to"));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("TextureRenderTargetCube"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureRenderTargetCube.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("The width of the texture."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureRenderTargetCube(Z_Construct_UClass_UTextureRenderTargetCube, &UTextureRenderTargetCube::StaticClass, TEXT("UTextureRenderTargetCube"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureRenderTargetCube);
	UScriptStruct* Z_Construct_UScriptStruct_FTextureLODGroup()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TextureLODGroup"), sizeof(FTextureLODGroup), Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextureLODGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTextureLODGroup>, EStructFlags(0x00000201));
			UProperty* NewProp_MipFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MipFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MipFilter, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_MinMagFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinMagFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MinMagFilter, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_MaxLODSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLODSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxLODSize, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_MinLODSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinLODSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinLODSize, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_MipGenSettings = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MipGenSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MipGenSettings, FTextureLODGroup), 0x0010000000000000, Z_Construct_UEnum_Engine_TextureMipGenSettings());
			UProperty* NewProp_NumStreamedMips = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumStreamedMips"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumStreamedMips, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODBias"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODBias, FTextureLODGroup), 0x0010000000000000);
			UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Group"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Group, FTextureLODGroup), 0x0010000000000000, Z_Construct_UEnum_Engine_TextureGroup());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("LOD settings for a single texture group."));
			MetaData->SetValue(NewProp_MipFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MinMagFilter, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MaxLODSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MinLODSize, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MipGenSettings, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_MipGenSettings, TEXT("ToolTip"), TEXT("Defines how the the mip-map generation works, e.g. sharpening"));
			MetaData->SetValue(NewProp_NumStreamedMips, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_NumStreamedMips, TEXT("ToolTip"), TEXT("Number of mip-levels that can be streamed. -1 means all mips can stream."));
			MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("Group LOD bias."));
			MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
			MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("Minimum LOD mip count below which the code won't bias."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextureLODGroup_CRC() { return 3231359596U; }
	UClass* Z_Construct_UClass_UTextureLODSettings_NoRegister()
	{
		return UTextureLODSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureLODSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTextureLODSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100484;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TextureLODGroups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureLODGroups"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TextureLODGroups, UTextureLODSettings), 0x0010000000004001);
				UProperty* NewProp_TextureLODGroups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TextureLODGroups, TEXT("TextureLODGroups"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000, Z_Construct_UScriptStruct_FTextureLODGroup());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("DeviceProfiles"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TextureLODSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Structure containing all information related to an LOD group and providing helper functions to calculate\nthe LOD bias of a given group."));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("Category"), TEXT("Texture LOD Settings"));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TextureLODSettings.h"));
				MetaData->SetValue(NewProp_TextureLODGroups, TEXT("ToolTip"), TEXT("Array of LOD settings with entries per group."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureLODSettings(Z_Construct_UClass_UTextureLODSettings, &UTextureLODSettings::StaticClass, TEXT("UTextureLODSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureLODSettings);
	UClass* Z_Construct_UClass_UDeviceProfile_NoRegister()
	{
		return UDeviceProfile::StaticClass();
	}
	UClass* Z_Construct_UClass_UDeviceProfile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTextureLODSettings();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UDeviceProfile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100484;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CVars = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CVars"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CVars, UDeviceProfile), 0x0010000000004001);
				UProperty* NewProp_CVars_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CVars, TEXT("CVars"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Parent, UDeviceProfile), 0x0010000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_BaseProfileName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseProfileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BaseProfileName, UDeviceProfile), 0x0010000000004001);
				UProperty* NewProp_DeviceType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DeviceType, UDeviceProfile), 0x0010000000024001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("DeviceProfiles"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_CVars, TEXT("Category"), TEXT("ConsoleVariables"));
				MetaData->SetValue(NewProp_CVars, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_CVars, TEXT("ToolTip"), TEXT("The collection of CVars which is set from this profile"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ToolTip"), TEXT("The parent object of this profile, it is the object matching this DeviceType with the BaseProfileName"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("Category"), TEXT("DeviceSettings"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_BaseProfileName, TEXT("ToolTip"), TEXT("The name of the parent profile of this object"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("Category"), TEXT("DeviceSettings"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("ModuleRelativePath"), TEXT("Classes/DeviceProfiles/DeviceProfile.h"));
				MetaData->SetValue(NewProp_DeviceType, TEXT("ToolTip"), TEXT("The type of this profile, I.e. IOS, Windows, PS4 etc"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDeviceProfile(Z_Construct_UClass_UDeviceProfile, &UDeviceProfile::StaticClass, TEXT("UDeviceProfile"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDeviceProfile);
	UClass* Z_Construct_UClass_UThumbnailInfo_NoRegister()
	{
		return UThumbnailInfo::StaticClass();
	}
	UClass* Z_Construct_UClass_UThumbnailInfo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UThumbnailInfo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("EditorFramework/ThumbnailInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/EditorFramework/ThumbnailInfo.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UThumbnailInfo(Z_Construct_UClass_UThumbnailInfo, &UThumbnailInfo::StaticClass, TEXT("UThumbnailInfo"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UThumbnailInfo);
	UScriptStruct* Z_Construct_UScriptStruct_FTTLinearColorTrack()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TTLinearColorTrack"), sizeof(FTTLinearColorTrack), Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTLinearColorTrack"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTLinearColorTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveLinearColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveLinearColor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveLinearColor, FTTLinearColorTrack), 0x0010000000000000, Z_Construct_UClass_UCurveLinearColor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one color interpolation track"));
			MetaData->SetValue(NewProp_CurveLinearColor, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveLinearColor, TEXT("ToolTip"), TEXT("Curve object used to define color value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTLinearColorTrack_CRC() { return 3054731665U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTVectorTrack()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TTVectorTrack"), sizeof(FTTVectorTrack), Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTVectorTrack"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTVectorTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveVector = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveVector"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveVector, FTTVectorTrack), 0x0010000000000000, Z_Construct_UClass_UCurveVector_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one vector interpolation track"));
			MetaData->SetValue(NewProp_CurveVector, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveVector, TEXT("ToolTip"), TEXT("Curve object used to define vector value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTVectorTrack_CRC() { return 3363065848U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTFloatTrack()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TTFloatTrack"), sizeof(FTTFloatTrack), Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTFloatTrack"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTFloatTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveFloat = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveFloat, FTTFloatTrack), 0x0010000000000000, Z_Construct_UClass_UCurveFloat_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one float interpolation track"));
			MetaData->SetValue(NewProp_CurveFloat, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveFloat, TEXT("ToolTip"), TEXT("Curve object used to define float value over time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTFloatTrack_CRC() { return 2066523991U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTEventTrack()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TTEventTrack"), sizeof(FTTEventTrack), Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTEventTrack"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FTTTrackBase(), new UScriptStruct::TCppStructOps<FTTEventTrack>, EStructFlags(0x00000001));
			UProperty* NewProp_CurveKeys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveKeys"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CurveKeys, FTTEventTrack), 0x0010000000000000, Z_Construct_UClass_UCurveFloat_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure storing information about one event track"));
			MetaData->SetValue(NewProp_CurveKeys, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_CurveKeys, TEXT("ToolTip"), TEXT("Curve object used to store keys"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTEventTrack_CRC() { return 3339637020U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTTTrackBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TTTrackBase"), sizeof(FTTTrackBase), Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TTTrackBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTTTrackBase>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExternalCurve, FTTTrackBase, bool);
			UProperty* NewProp_bIsExternalCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsExternalCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExternalCurve, FTTTrackBase), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsExternalCurve, FTTTrackBase), sizeof(bool), true);
			UProperty* NewProp_TrackName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrackName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TrackName, FTTTrackBase), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_bIsExternalCurve, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_bIsExternalCurve, TEXT("ToolTip"), TEXT("Flag to identify internal/external curve"));
			MetaData->SetValue(NewProp_TrackName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
			MetaData->SetValue(NewProp_TrackName, TEXT("ToolTip"), TEXT("Name of this track"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTTTrackBase_CRC() { return 2801120506U; }
	UClass* Z_Construct_UClass_UTimelineTemplate_NoRegister()
	{
		return UTimelineTemplate::StaticClass();
	}
	UClass* Z_Construct_UClass_UTimelineTemplate()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTimelineTemplate::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_TimelineGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimelineGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TimelineGuid, UTimelineTemplate), 0x0010000000200000, Z_Construct_UScriptStruct_FGuid());
				UProperty* NewProp_MetaDataArray = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MetaDataArray, UTimelineTemplate), 0x0010000000000001);
				UProperty* NewProp_MetaDataArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MetaDataArray, TEXT("MetaDataArray"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBPVariableMetaDataEntry());
				UProperty* NewProp_LinearColorTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LinearColorTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LinearColorTracks, UTimelineTemplate), 0x0010000000000000);
				UProperty* NewProp_LinearColorTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LinearColorTracks, TEXT("LinearColorTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTLinearColorTrack());
				UProperty* NewProp_VectorTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VectorTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(VectorTracks, UTimelineTemplate), 0x0010000000000000);
				UProperty* NewProp_VectorTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_VectorTracks, TEXT("VectorTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTVectorTrack());
				UProperty* NewProp_FloatTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FloatTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(FloatTracks, UTimelineTemplate), 0x0010000000000000);
				UProperty* NewProp_FloatTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FloatTracks, TEXT("FloatTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTFloatTrack());
				UProperty* NewProp_EventTracks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EventTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(EventTracks, UTimelineTemplate), 0x0010000000000000);
				UProperty* NewProp_EventTracks_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EventTracks, TEXT("EventTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTTEventTrack());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreTimeDilation, UTimelineTemplate, uint8);
				UProperty* NewProp_bIgnoreTimeDilation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIgnoreTimeDilation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreTimeDilation, UTimelineTemplate), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIgnoreTimeDilation, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bValidatedAsWired, UTimelineTemplate, uint8);
				UProperty* NewProp_bValidatedAsWired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bValidatedAsWired"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bValidatedAsWired, UTimelineTemplate), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bValidatedAsWired, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReplicated, UTimelineTemplate, uint8);
				UProperty* NewProp_bReplicated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReplicated"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReplicated, UTimelineTemplate), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bReplicated, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, UTimelineTemplate, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, UTimelineTemplate), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, UTimelineTemplate), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, UTimelineTemplate, uint8);
				UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, UTimelineTemplate), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, UTimelineTemplate), sizeof(uint8), false);
				UProperty* NewProp_LengthMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LengthMode, UTimelineTemplate), 0x0010000000000001, Z_Construct_UEnum_Engine_ETimelineLengthMode());
				UProperty* NewProp_TimelineLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimelineLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimelineLength, UTimelineTemplate), 0x0010000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/TimelineTemplate.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_TimelineGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("Category"), TEXT("BPVariableDescription"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_MetaDataArray, TEXT("ToolTip"), TEXT("Metadata information for this timeline"));
				MetaData->SetValue(NewProp_LinearColorTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_LinearColorTracks, TEXT("ToolTip"), TEXT("Set of linear color interpolation tracks"));
				MetaData->SetValue(NewProp_VectorTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_VectorTracks, TEXT("ToolTip"), TEXT("Set of vector interpolation tracks"));
				MetaData->SetValue(NewProp_FloatTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_FloatTracks, TEXT("ToolTip"), TEXT("Set of float interpolation tracks"));
				MetaData->SetValue(NewProp_EventTracks, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_EventTracks, TEXT("ToolTip"), TEXT("Set of event tracks"));
				MetaData->SetValue(NewProp_bIgnoreTimeDilation, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bIgnoreTimeDilation, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bIgnoreTimeDilation, TEXT("ToolTip"), TEXT("If we want the timeline to ignore global time dilation"));
				MetaData->SetValue(NewProp_bValidatedAsWired, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bValidatedAsWired, TEXT("ToolTip"), TEXT("Compiler Validated As Wired up"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bReplicated, TEXT("ToolTip"), TEXT("If we want the timeline to loop"));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("If we want the timeline to loop"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_bAutoPlay, TEXT("ToolTip"), TEXT("If we want the timeline to auto-play"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_LengthMode, TEXT("ToolTip"), TEXT("How we want the timeline to determine its own length (e.g. specified length, last keyframe)"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("Category"), TEXT("TimelineTemplate"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/TimelineTemplate.h"));
				MetaData->SetValue(NewProp_TimelineLength, TEXT("ToolTip"), TEXT("Length of this timeline"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTimelineTemplate(Z_Construct_UClass_UTimelineTemplate, &UTimelineTemplate::StaticClass, TEXT("UTimelineTemplate"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTimelineTemplate);
	UScriptStruct* Z_Construct_UScriptStruct_FTouchInputControl()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TouchInputControl"), sizeof(FTouchInputControl), Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TouchInputControl"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTouchInputControl>, EStructFlags(0x00000001));
			UProperty* NewProp_AltInputKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AltInputKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AltInputKey, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_MainInputKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MainInputKey"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MainInputKey, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_InputScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InputScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InputScale, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InteractionSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InteractionSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InteractionSize, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ThumbSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ThumbSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ThumbSize, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_VisualSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VisualSize"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VisualSize, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, FTouchInputControl), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Image2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Image2"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Image2, FTouchInputControl), 0x0010000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Image1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Image1"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Image1, FTouchInputControl), 0x0010000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_AltInputKey, TEXT("ToolTip"), TEXT("The alternate input to send from this control (for sticks, this is the vertical axis)"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_MainInputKey, TEXT("ToolTip"), TEXT("The main input to send from this control (for sticks, this is the horizontal axis)"));
			MetaData->SetValue(NewProp_InputScale, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_InputScale, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_InputScale, TEXT("ToolTip"), TEXT("The scale for control input"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_InteractionSize, TEXT("ToolTip"), TEXT("The interactive size of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_ThumbSize, TEXT("ToolTip"), TEXT("For sticks, the size of the thumb (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_VisualSize, TEXT("ToolTip"), TEXT("The size of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_Center, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Center, TEXT("ToolTip"), TEXT("The center point of the control (if <= 1.0, it's relative to screen, > 1.0 is absolute)"));
			MetaData->SetValue(NewProp_Image2, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Image2, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Image2, TEXT("ToolTip"), TEXT("For sticks, this is the Background"));
			MetaData->SetValue(NewProp_Image1, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(NewProp_Image1, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
			MetaData->SetValue(NewProp_Image1, TEXT("ToolTip"), TEXT("For sticks, this is the Thumb"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTouchInputControl_CRC() { return 3906345791U; }
	UClass* Z_Construct_UClass_UTouchInterface_NoRegister()
	{
		return UTouchInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UTouchInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UTouchInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_StartupDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartupDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartupDelay, UTouchInterface), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPreventRecenter, UTouchInterface, bool);
				UProperty* NewProp_bPreventRecenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPreventRecenter"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPreventRecenter, UTouchInterface), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bPreventRecenter, UTouchInterface), sizeof(bool), true);
				UProperty* NewProp_ActivationDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActivationDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ActivationDelay, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_TimeUntilReset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeUntilReset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeUntilReset, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_TimeUntilDeactive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeUntilDeactive"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeUntilDeactive, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_InactiveOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InactiveOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InactiveOpacity, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_ActiveOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ActiveOpacity, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_Controls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Controls"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Controls, UTouchInterface), 0x0010000000000001);
				UProperty* NewProp_Controls_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Controls, TEXT("Controls"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTouchInputControl());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GameFramework/TouchInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Defines an interface by which touch input can be controlled using any number of buttons and virtual joysticks"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_StartupDelay, TEXT("ToolTip"), TEXT("Delay at startup before virtual joystick is drawn"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_bPreventRecenter, TEXT("ToolTip"), TEXT("Whether to prevent joystick re-center"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_ActivationDelay, TEXT("ToolTip"), TEXT("How long after joystick enabled for touch (0.0 will disable this feature)"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_TimeUntilReset, TEXT("ToolTip"), TEXT("How long after going inactive will controls reset/recenter themselves (0.0 will disable this feature)"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_TimeUntilDeactive, TEXT("ToolTip"), TEXT("How long after user interaction will all controls fade out to Inactive Opacity"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_InactiveOpacity, TEXT("ToolTip"), TEXT("Opacity (0.0 - 1.0) of all controls while no controls are active"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
				MetaData->SetValue(NewProp_ActiveOpacity, TEXT("ToolTip"), TEXT("Opacity (0.0 - 1.0) of all controls while any control is active"));
				MetaData->SetValue(NewProp_Controls, TEXT("Category"), TEXT("TouchInterface"));
				MetaData->SetValue(NewProp_Controls, TEXT("ModuleRelativePath"), TEXT("Classes/GameFramework/TouchInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTouchInterface(Z_Construct_UClass_UTouchInterface, &UTouchInterface::StaticClass, TEXT("UTouchInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTouchInterface);
	UClass* Z_Construct_UClass_UUserDefinedEnum_NoRegister()
	{
		return UUserDefinedEnum::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserDefinedEnum()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UEnum::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UUserDefinedEnum::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DisplayNameMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DisplayNameMap"), RF_Public|RF_Transient|RF_MarkAsNative) UMapProperty(CPP_PROPERTY_BASE(DisplayNameMap, UUserDefinedEnum), 0x0010000000000000);
				UProperty* NewProp_DisplayNameMap_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_DisplayNameMap, TEXT("DisplayNameMap_Key"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_DisplayNameMap_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_DisplayNameMap, TEXT("DisplayNameMap"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000000000000);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_UniqueNameIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UniqueNameIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(UniqueNameIndex, UUserDefinedEnum), 0x0010000800000000);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/UserDefinedEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An Enumeration is a list of named values."));
				MetaData->SetValue(NewProp_DisplayNameMap, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
				MetaData->SetValue(NewProp_DisplayNameMap, TEXT("ToolTip"), TEXT("De-facto display names for enum entries mapped against their raw enum name (UEnum::GetEnumName).\nTo sync DisplayNameMap use FEnumEditorUtils::EnsureAllDisplayNamesExist."));
				MetaData->SetValue(NewProp_UniqueNameIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedEnum.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserDefinedEnum(Z_Construct_UClass_UUserDefinedEnum, &UUserDefinedEnum::StaticClass, TEXT("UUserDefinedEnum"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserDefinedEnum);
	UEnum* Z_Construct_UEnum_Engine_EUserDefinedStructureStatus()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EUserDefinedStructureStatus"), 0, Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUserDefinedStructureStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("UDSS_UpToDate")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("UDSS_Dirty")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("UDSS_Error")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("UDSS_Duplicate")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("UDSS_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EUserDefinedStructureStatus");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Dirty.ToolTip"), TEXT("Struct has been modified but not recompiled."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Duplicate.ToolTip"), TEXT("Struct is a duplicate, the original one was changed."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_Error.ToolTip"), TEXT("Struct tried but failed to be compiled."));
			MetaData->SetValue(ReturnEnum, TEXT("UDSS_UpToDate.ToolTip"), TEXT("Struct is in an unknown state."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EUserDefinedStructureStatus_CRC() { return 3060868411U; }
	UClass* Z_Construct_UClass_UUserDefinedStruct_NoRegister()
	{
		return UUserDefinedStruct::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserDefinedStruct()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UScriptStruct::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UUserDefinedStruct::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Guid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Guid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Guid, UUserDefinedStruct), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_EditorData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EditorData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(EditorData, UUserDefinedStruct), 0x0010000800000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ErrorMessage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ErrorMessage"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ErrorMessage, UUserDefinedStruct), 0x0010000800000000);
				UProperty* NewProp_PrimaryStruct = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(CPP_PROPERTY_BASE(PrimaryStruct, UUserDefinedStruct), 0x0014000800002000, Z_Construct_UClass_UUserDefinedStruct_NoRegister());
				UProperty* NewProp_Status = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Status"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Status, UUserDefinedStruct), 0x0010000800000000, Z_Construct_UEnum_Engine_EUserDefinedStructureStatus());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/UserDefinedStruct.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_Guid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_EditorData, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_ErrorMessage, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_PrimaryStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
				MetaData->SetValue(NewProp_PrimaryStruct, TEXT("ToolTip"), TEXT("the original struct, when current struct isn't a temporary duplicate, the field should be null"));
				MetaData->SetValue(NewProp_Status, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/UserDefinedStruct.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserDefinedStruct(Z_Construct_UClass_UUserDefinedStruct, &UUserDefinedStruct::StaticClass, TEXT("UUserDefinedStruct"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserDefinedStruct);
	UClass* Z_Construct_UClass_UVectorField_NoRegister()
	{
		return UVectorField::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorField()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVectorField::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Intensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Intensity, UVectorField), 0x0010000000000001);
				UProperty* NewProp_Bounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bounds"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Bounds, UVectorField), 0x0010000000000001, Z_Construct_UScriptStruct_FBox());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorField.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("Category"), TEXT("VectorField"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Intensity, TEXT("ToolTip"), TEXT("The intensity with which to multiplie vectors in this field."));
				MetaData->SetValue(NewProp_Bounds, TEXT("Category"), TEXT("VectorFieldBounds"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorField.h"));
				MetaData->SetValue(NewProp_Bounds, TEXT("ToolTip"), TEXT("Bounds of the volume in local space."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorField(Z_Construct_UClass_UVectorField, &UVectorField::StaticClass, TEXT("UVectorField"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorField);
	UEnum* Z_Construct_UEnum_Engine_EVectorFieldConstructionOp()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVectorFieldConstructionOp"), 0, Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVectorFieldConstructionOp"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VFCO_Extrude")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VFCO_Revolve")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("VFCO_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVectorFieldConstructionOp");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Operation used to construct the vector field from a 2D texture."));
			MetaData->SetValue(ReturnEnum, TEXT("VFCO_Extrude.DisplayName"), TEXT("Extrude"));
			MetaData->SetValue(ReturnEnum, TEXT("VFCO_Revolve.DisplayName"), TEXT("Revolve"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVectorFieldConstructionOp_CRC() { return 3980575130U; }
	UClass* Z_Construct_UClass_UVectorFieldAnimated_NoRegister()
	{
		return UVectorFieldAnimated::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorFieldAnimated()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVectorField();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVectorFieldAnimated::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NoiseMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NoiseMax, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_NoiseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NoiseScale, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_NoiseField = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NoiseField"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NoiseField, UVectorFieldAnimated), 0x0010000000000001, Z_Construct_UClass_UVectorFieldStatic_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, UVectorFieldAnimated, uint8);
				UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, UVectorFieldAnimated), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bLoop, UVectorFieldAnimated), sizeof(uint8), false);
				UProperty* NewProp_FramesPerSecond = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FramesPerSecond"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FramesPerSecond, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_FrameCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FrameCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FrameCount, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_SubImagesY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImagesY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImagesY, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_SubImagesX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SubImagesX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SubImagesX, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_VolumeSizeZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeZ, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_VolumeSizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeY, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_VolumeSizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VolumeSizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VolumeSizeX, UVectorFieldAnimated), 0x0010000000000001);
				UProperty* NewProp_ConstructionOp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConstructionOp"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ConstructionOp, UVectorFieldAnimated), 0x0010000000000001, Z_Construct_UEnum_Engine_EVectorFieldConstructionOp());
				UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Texture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Texture, UVectorFieldAnimated), 0x0010000000000001, Z_Construct_UClass_UTexture2D_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseMax, TEXT("ToolTip"), TEXT("The maximum magnitude of noise vectors to apply."));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseScale, TEXT("ToolTip"), TEXT("Scale to apply to vectors in the noise field."));
				MetaData->SetValue(NewProp_NoiseField, TEXT("Category"), TEXT("Noise"));
				MetaData->SetValue(NewProp_NoiseField, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_NoiseField, TEXT("ToolTip"), TEXT("A static vector field used to add noise."));
				MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("Whether or not the simulation should loop."));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_FramesPerSecond, TEXT("ToolTip"), TEXT("The rate at which to interpolate between frames."));
				MetaData->SetValue(NewProp_FrameCount, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_FrameCount, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_FrameCount, TEXT("ToolTip"), TEXT("The number of frames in the atlas."));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_SubImagesY, TEXT("ToolTip"), TEXT("The number of vertical subimages in the texture atlas."));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_SubImagesX, TEXT("ToolTip"), TEXT("The number of horizontal subimages in the texture atlas."));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeZ, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeY, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_VolumeSizeX, TEXT("ToolTip"), TEXT("The size of the volume. Valid sizes: 16, 32, 64."));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_ConstructionOp, TEXT("ToolTip"), TEXT("The operation used to construct the vector field."));
				MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("Reconstruction"));
				MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldAnimated.h"));
				MetaData->SetValue(NewProp_Texture, TEXT("ToolTip"), TEXT("The texture from which to create the vector field."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorFieldAnimated(Z_Construct_UClass_UVectorFieldAnimated, &UVectorFieldAnimated::StaticClass, TEXT("UVectorFieldAnimated"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorFieldAnimated);
	UClass* Z_Construct_UClass_UVectorFieldStatic_NoRegister()
	{
		return UVectorFieldStatic::StaticClass();
	}
	UClass* Z_Construct_UClass_UVectorFieldStatic()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVectorField();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVectorFieldStatic::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UVectorFieldStatic), 0x00120008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
				UProperty* NewProp_SourceFilePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SourceFilePath_DEPRECATED, UVectorFieldStatic), 0x0010000820000000);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_SizeZ = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeZ, UVectorFieldStatic), 0x0010000000020001);
				UProperty* NewProp_SizeY = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeY, UVectorFieldStatic), 0x0010000000020001);
				UProperty* NewProp_SizeX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SizeX, UVectorFieldStatic), 0x0010000000020001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("VectorFieldBounds"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SourceFilePath, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeZ, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
				MetaData->SetValue(NewProp_SizeY, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeY, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
				MetaData->SetValue(NewProp_SizeX, TEXT("Category"), TEXT("VectorFieldStatic"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ModuleRelativePath"), TEXT("Classes/VectorField/VectorFieldStatic.h"));
				MetaData->SetValue(NewProp_SizeX, TEXT("ToolTip"), TEXT("Size of the vector field volume."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVectorFieldStatic(Z_Construct_UClass_UVectorFieldStatic, &UVectorFieldStatic::StaticClass, TEXT("UVectorFieldStatic"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVectorFieldStatic);
	UClass* Z_Construct_UClass_UVisualLoggerAutomationTests_NoRegister()
	{
		return UVisualLoggerAutomationTests::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisualLoggerAutomationTests()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVisualLoggerAutomationTests::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000288;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("UObject"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VisualLogger/VisualLoggerAutomationTests.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/VisualLogger/VisualLoggerAutomationTests.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisualLoggerAutomationTests(Z_Construct_UClass_UVisualLoggerAutomationTests, &UVisualLoggerAutomationTests::StaticClass, TEXT("UVisualLoggerAutomationTests"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisualLoggerAutomationTests);
	UClass* Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface_NoRegister()
	{
		return UVisualLoggerDebugSnapshotInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UVisualLoggerDebugSnapshotInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VisualLogger/VisualLoggerDebugSnapshotInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisualLoggerDebugSnapshotInterface(Z_Construct_UClass_UVisualLoggerDebugSnapshotInterface, &UVisualLoggerDebugSnapshotInterface::StaticClass, TEXT("UVisualLoggerDebugSnapshotInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisualLoggerDebugSnapshotInterface);
	UClass* Z_Construct_UClass_UWorldComposition_NoRegister()
	{
		return UWorldComposition::StaticClass();
	}
	UClass* Z_Construct_UClass_UWorldComposition()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_Engine();
			OuterClass = UWorldComposition::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RebaseOriginDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RebaseOriginDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RebaseOriginDistance, UWorldComposition), 0x0010000000004000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRebaseOriginIn3DSpace, UWorldComposition, bool);
				UProperty* NewProp_bRebaseOriginIn3DSpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRebaseOriginIn3DSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRebaseOriginIn3DSpace, UWorldComposition), 0x0010000000004000, CPP_BOOL_PROPERTY_BITMASK(bRebaseOriginIn3DSpace, UWorldComposition), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoadAllTilesDuringCinematic, UWorldComposition, bool);
				UProperty* NewProp_bLoadAllTilesDuringCinematic = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoadAllTilesDuringCinematic"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoadAllTilesDuringCinematic, UWorldComposition), 0x0010000000004000, CPP_BOOL_PROPERTY_BITMASK(bLoadAllTilesDuringCinematic, UWorldComposition), sizeof(bool), true);
				UProperty* NewProp_TilesStreamingTimeThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilesStreamingTimeThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UDoubleProperty(CPP_PROPERTY_BASE(TilesStreamingTimeThreshold, UWorldComposition), 0x0010000000004000);
				UProperty* NewProp_TilesStreaming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TilesStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(TilesStreaming, UWorldComposition), 0x0010000000002000);
				UProperty* NewProp_TilesStreaming_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TilesStreaming, TEXT("TilesStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_ULevelStreaming_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Engine/WorldComposition.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("WorldComposition represents world structure:\n    - Holds list of all level packages participating in this world and theirs base parameters (bounding boxes, offset from origin)\n    - Holds list of streaming level objects to stream in and out based on distance from current view point\n - Handles properly levels repositioning during level loading and saving"));
				MetaData->SetValue(NewProp_RebaseOriginDistance, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_RebaseOriginDistance, TEXT("ToolTip"), TEXT("Maximum distance to current view point where we should initiate origin rebasing"));
				MetaData->SetValue(NewProp_bRebaseOriginIn3DSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_bRebaseOriginIn3DSpace, TEXT("ToolTip"), TEXT("Whether to rebase origin in 3D space, otherwise only on XY plane"));
				MetaData->SetValue(NewProp_bLoadAllTilesDuringCinematic, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_bLoadAllTilesDuringCinematic, TEXT("ToolTip"), TEXT("Whether all distance dependent tiles should be loaded and visible during cinematic"));
				MetaData->SetValue(NewProp_TilesStreamingTimeThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_TilesStreamingTimeThreshold, TEXT("ToolTip"), TEXT("Time threshold between tile streaming state changes"));
				MetaData->SetValue(NewProp_TilesStreaming, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/WorldComposition.h"));
				MetaData->SetValue(NewProp_TilesStreaming, TEXT("ToolTip"), TEXT("Streaming level objects for each tile"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWorldComposition(Z_Construct_UClass_UWorldComposition, &UWorldComposition::StaticClass, TEXT("UWorldComposition"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWorldComposition);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationRecordingSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationRecordingSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimationRecordingSettings"), sizeof(FAnimationRecordingSettings), Get_Z_Construct_UScriptStruct_FAnimationRecordingSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationRecordingSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationRecordingSettings>, EStructFlags(0x00000201));
			UProperty* NewProp_Length = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Length"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Length, FAnimationRecordingSettings), 0x0010000000000001);
			UProperty* NewProp_SampleRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SampleRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SampleRate, FAnimationRecordingSettings), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoSaveAsset, FAnimationRecordingSettings, bool);
			UProperty* NewProp_bAutoSaveAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAutoSaveAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoSaveAsset, FAnimationRecordingSettings), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoSaveAsset, FAnimationRecordingSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveRootAnimation, FAnimationRecordingSettings, bool);
			UProperty* NewProp_bRemoveRootAnimation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRemoveRootAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveRootAnimation, FAnimationRecordingSettings), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRemoveRootAnimation, FAnimationRecordingSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRecordInWorldSpace, FAnimationRecordingSettings, bool);
			UProperty* NewProp_bRecordInWorldSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRecordInWorldSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRecordInWorldSpace, FAnimationRecordingSettings), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRecordInWorldSpace, FAnimationRecordingSettings), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Settings describing how to record an animation"));
			MetaData->SetValue(NewProp_Length, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Length, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(NewProp_Length, TEXT("ToolTip"), TEXT("Maximum length of the animation recorded (in seconds). If zero the animation will keep on recording until stopped."));
			MetaData->SetValue(NewProp_SampleRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_SampleRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(NewProp_SampleRate, TEXT("ToolTip"), TEXT("Sample rate of the recorded animation (in Hz)"));
			MetaData->SetValue(NewProp_bAutoSaveAsset, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bAutoSaveAsset, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(NewProp_bAutoSaveAsset, TEXT("ToolTip"), TEXT("Whether to auto-save asset when recording is completed. Defaults to false"));
			MetaData->SetValue(NewProp_bRemoveRootAnimation, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bRemoveRootAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(NewProp_bRemoveRootAnimation, TEXT("ToolTip"), TEXT("Whether to remove the root bone transform from the animation"));
			MetaData->SetValue(NewProp_bRecordInWorldSpace, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bRecordInWorldSpace, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimationRecordingSettings.h"));
			MetaData->SetValue(NewProp_bRecordInWorldSpace, TEXT("ToolTip"), TEXT("Whether to record animation in world space, defaults to true"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationRecordingSettings_CRC() { return 324005562U; }
	UEnum* Z_Construct_UEnum_Engine_EPostCopyOperation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPostCopyOperation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPostCopyOperation"), 0, Get_Z_Construct_UEnum_Engine_EPostCopyOperation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPostCopyOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPostCopyOperation::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPostCopyOperation::LogicalNegateBool")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPostCopyOperation::EPostCopyOperation_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPostCopyOperation");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPostCopyOperation_CRC() { return 300094622U; }
	UEnum* Z_Construct_UEnum_Engine_EPinHidingMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPinHidingMode"), 0, Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPinHidingMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPinHidingMode::NeverAsPin")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPinHidingMode::PinHiddenByDefault")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPinHidingMode::PinShownByDefault")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPinHidingMode::AlwaysAsPin")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPinHidingMode::EPinHidingMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EPinHidingMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AlwaysAsPin.ToolTip"), TEXT("Always show this property as a pin; it never makes sense to edit it in the details panel (default for FPoseLink properties)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NeverAsPin.ToolTip"), TEXT("Never show this property as a pin, it is only editable in the details panel (default for everything but FPoseLink properties)."));
			MetaData->SetValue(ReturnEnum, TEXT("PinHiddenByDefault.ToolTip"), TEXT("Hide this property by default, but allow the user to expose it as a pin via the details panel."));
			MetaData->SetValue(ReturnEnum, TEXT("PinShownByDefault.ToolTip"), TEXT("Show this property as a pin by default, but allow the user to hide it via the details panel."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The display mode of editable values on an animation node."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EPinHidingMode_CRC() { return 4257227472U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_Base"), sizeof(FAnimNode_Base), Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Base"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimNode_Base>, EStructFlags(0x00000201));
			UProperty* NewProp_EvaluateGraphExposedInputs = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvaluateGraphExposedInputs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EvaluateGraphExposedInputs, FAnimNode_Base), 0x0010000000000000, Z_Construct_UScriptStruct_FExposedValueHandler());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is the base of all runtime animation nodes\n\nTo create a new animation node:\n  Create a struct derived from FAnimNode_Base - this is your runtime node\n  Create a class derived from UAnimGraphNode_Base, containing an instance of your runtime node as a member - this is your visual/editor-only node"));
			MetaData->SetValue(NewProp_EvaluateGraphExposedInputs, TEXT("BlueprintCompilerGeneratedDefaults"), TEXT(""));
			MetaData->SetValue(NewProp_EvaluateGraphExposedInputs, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_EvaluateGraphExposedInputs, TEXT("ToolTip"), TEXT("The default handler for graph-exposed inputs"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Base_CRC() { return 1726361516U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExposedValueHandler()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ExposedValueHandler"), sizeof(FExposedValueHandler), Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExposedValueHandler"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FExposedValueHandler>, EStructFlags(0x00000201));
			UProperty* NewProp_CopyRecords = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CopyRecords"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CopyRecords, FExposedValueHandler), 0x0010000000000000);
			UProperty* NewProp_CopyRecords_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CopyRecords, TEXT("CopyRecords"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FExposedValueCopyRecord());
			UProperty* NewProp_BoundFunction = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(BoundFunction, FExposedValueHandler), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An exposed value updater"));
			MetaData->SetValue(NewProp_CopyRecords, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_CopyRecords, TEXT("ToolTip"), TEXT("Direct data access to property in anim instance"));
			MetaData->SetValue(NewProp_BoundFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_BoundFunction, TEXT("ToolTip"), TEXT("The function to call to update associated properties (can be NULL)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExposedValueHandler_CRC() { return 3083732376U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExposedValueCopyRecord()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FExposedValueCopyRecord_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ExposedValueCopyRecord"), sizeof(FExposedValueCopyRecord), Get_Z_Construct_UScriptStruct_FExposedValueCopyRecord_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExposedValueCopyRecord"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FExposedValueCopyRecord>, EStructFlags(0x00000001));
			UProperty* NewProp_CachedStructDestProperty = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachedStructDestProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CachedStructDestProperty, FExposedValueCopyRecord), 0x0010000000002000, UStructProperty::StaticClass());
			UProperty* NewProp_CachedBoolDestProperty = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachedBoolDestProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CachedBoolDestProperty, FExposedValueCopyRecord), 0x0010000000002000, UBoolProperty::StaticClass());
			UProperty* NewProp_CachedBoolSourceProperty = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachedBoolSourceProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CachedBoolSourceProperty, FExposedValueCopyRecord), 0x0010000000002000, UBoolProperty::StaticClass());
			UProperty* NewProp_PostCopyOperation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PostCopyOperation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(PostCopyOperation, FExposedValueCopyRecord), 0x0010000000000000, Z_Construct_UEnum_Engine_EPostCopyOperation());
			UProperty* NewProp_PostCopyOperation_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_PostCopyOperation, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInstanceIsTarget, FExposedValueCopyRecord, bool);
			UProperty* NewProp_bInstanceIsTarget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInstanceIsTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInstanceIsTarget, FExposedValueCopyRecord), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bInstanceIsTarget, FExposedValueCopyRecord), sizeof(bool), true);
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Size, FExposedValueCopyRecord), 0x0010000000000000);
			UProperty* NewProp_DestArrayIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DestArrayIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DestArrayIndex, FExposedValueCopyRecord), 0x0010000000000000);
			UProperty* NewProp_DestProperty = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DestProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DestProperty, FExposedValueCopyRecord), 0x0010000000000000, UProperty::StaticClass());
			UProperty* NewProp_SourceArrayIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceArrayIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SourceArrayIndex, FExposedValueCopyRecord), 0x0010000000000000);
			UProperty* NewProp_SourceSubPropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceSubPropertyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourceSubPropertyName, FExposedValueCopyRecord), 0x0010000000000000);
			UProperty* NewProp_SourcePropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePropertyName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourcePropertyName, FExposedValueCopyRecord), 0x0010000000000000);
			UProperty* NewProp_SourceProperty = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SourceProperty_DEPRECATED, FExposedValueCopyRecord), 0x0010000020000000, UProperty::StaticClass());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_CachedStructDestProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_CachedStructDestProperty, TEXT("ToolTip"), TEXT("Cached dest property for copying structs"));
			MetaData->SetValue(NewProp_CachedBoolDestProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_CachedBoolDestProperty, TEXT("ToolTip"), TEXT("cached dest property for performing boolean operations"));
			MetaData->SetValue(NewProp_CachedBoolSourceProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_CachedBoolSourceProperty, TEXT("ToolTip"), TEXT("cached source property for performing boolean operations"));
			MetaData->SetValue(NewProp_PostCopyOperation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_bInstanceIsTarget, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_bInstanceIsTarget, TEXT("ToolTip"), TEXT("Whether or not the anim instance object is the target for the copy instead of a node."));
			MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_DestArrayIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_DestProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourceArrayIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourceSubPropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourcePropertyName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourceProperty, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExposedValueCopyRecord_CRC() { return 1147784983U; }
	UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ComponentSpacePoseLink"), sizeof(FComponentSpacePoseLink), Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentSpacePoseLink"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FPoseLinkBase(), new UScriptStruct::TCppStructOps<FComponentSpacePoseLink>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A component-space pose link to another node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComponentSpacePoseLink_CRC() { return 2193412712U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPoseLink()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPoseLink_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PoseLink"), sizeof(FPoseLink), Get_Z_Construct_UScriptStruct_FPoseLink_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PoseLink"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FPoseLinkBase(), new UScriptStruct::TCppStructOps<FPoseLink>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A local-space pose link to another node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPoseLink_CRC() { return 1839305130U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPoseLinkBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PoseLinkBase"), sizeof(FPoseLinkBase), Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PoseLinkBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPoseLinkBase>, EStructFlags(0x00000201));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_SourceLinkID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceLinkID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SourceLinkID, FPoseLinkBase), 0x0010000800000000);
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_LinkID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinkID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LinkID, FPoseLinkBase), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A pose link to another node"));
			MetaData->SetValue(NewProp_SourceLinkID, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_SourceLinkID, TEXT("ToolTip"), TEXT("The source link ID, used for debug visualization."));
			MetaData->SetValue(NewProp_LinkID, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeBase.h"));
			MetaData->SetValue(NewProp_LinkID, TEXT("ToolTip"), TEXT("Serialized link ID, used to build the non-serialized pointer map."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPoseLinkBase_CRC() { return 1014319327U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("InputScaleBias"), sizeof(FInputScaleBias), Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputScaleBias>, EStructFlags(0x00000201));
			UProperty* NewProp_Bias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Bias, FInputScaleBias), 0x0010000000000005);
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Scale, FInputScaleBias), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Input scaling struct"));
			MetaData->SetValue(NewProp_Bias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Bias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/InputScaleBias.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputScaleBias_CRC() { return 3718584197U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyMeshSpaceAdditive()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyMeshSpaceAdditive_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ApplyMeshSpaceAdditive"), sizeof(FAnimNode_ApplyMeshSpaceAdditive), Get_Z_Construct_UScriptStruct_FAnimNode_ApplyMeshSpaceAdditive_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ApplyMeshSpaceAdditive"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ApplyMeshSpaceAdditive>, EStructFlags(0x00000201));
			UProperty* NewProp_ActualAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActualAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ActualAlpha, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000002000);
			UProperty* NewProp_LODThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODThreshold, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000000005);
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000000005);
			UProperty* NewProp_Additive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Additive"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Additive, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Base"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Base, FAnimNode_ApplyMeshSpaceAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_ActualAlpha, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("Category"), TEXT("Performance"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("DisplayName"), TEXT("LOD Threshold"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ToolTip"), TEXT("* Max LOD that this node is allowed to run\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\n* when the component LOD becomes 3, it will stop update/evaluate\n* currently transition would be issue and that has to be re-visited"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Additive, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Additive, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
			MetaData->SetValue(NewProp_Base, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_ApplyMeshSpaceAdditive.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyMeshSpaceAdditive_CRC() { return 1924030438U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_AssetPlayerBase"), sizeof(FAnimNode_AssetPlayerBase), Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_AssetPlayerBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_AssetPlayerBase>, EStructFlags(0x00000201));
			UProperty* NewProp_InternalTimeAccumulator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InternalTimeAccumulator"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InternalTimeAccumulator, FAnimNode_AssetPlayerBase), 0x0020080000002004);
			UProperty* NewProp_BlendWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BlendWeight, FAnimNode_AssetPlayerBase), 0x0020080000002004);
			UProperty* NewProp_GroupRole = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupRole"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GroupRole, FAnimNode_AssetPlayerBase), 0x0010000000000000, Z_Construct_UEnum_Engine_EAnimGroupRole());
			UProperty* NewProp_GroupIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GroupIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(GroupIndex, FAnimNode_AssetPlayerBase), 0x0010000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase, bool);
			UProperty* NewProp_bIgnoreForRelevancyTest = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIgnoreForRelevancyTest"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIgnoreForRelevancyTest, FAnimNode_AssetPlayerBase), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base class for any asset playing anim node"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("Category"), TEXT("DoNotEdit"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_InternalTimeAccumulator, TEXT("ToolTip"), TEXT("Accumulated time used to reference the asset in this node"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("Category"), TEXT("DoNotEdit"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_BlendWeight, TEXT("ToolTip"), TEXT("Last encountered blendweight for this node"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_GroupRole, TEXT("ToolTip"), TEXT("The role this player can assume within the group (ignored if GroupIndex is INDEX_NONE)"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_GroupIndex, TEXT("ToolTip"), TEXT("The group index, assigned at compile time based on the editoronly GroupName (or INDEX_NONE if it is not part of any group)"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("Category"), TEXT("Relevancy"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_AssetPlayerBase.h"));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bIgnoreForRelevancyTest, TEXT("ToolTip"), TEXT("If true, \"Relevant anim\" nodes that look for the highest weighted animation in a state will ignore\nthis node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase_CRC() { return 1563465000U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SaveCachedPose"), sizeof(FAnimNode_SaveCachedPose), Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SaveCachedPose"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SaveCachedPose>, EStructFlags(0x00000201));
			UProperty* NewProp_GlobalWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlobalWeight, FAnimNode_SaveCachedPose), 0x0010000000002000);
			UProperty* NewProp_CachePoseName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachePoseName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CachePoseName, FAnimNode_SaveCachedPose), 0x0010000000000000);
			UProperty* NewProp_Pose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Pose, FAnimNode_SaveCachedPose), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_GlobalWeight, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_CachePoseName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
			MetaData->SetValue(NewProp_CachePoseName, TEXT("ToolTip"), TEXT("Intentionally not exposed, set by AnimBlueprintCompiler"));
			MetaData->SetValue(NewProp_Pose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Pose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SaveCachedPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SaveCachedPose_CRC() { return 3587770523U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequencePlayer()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SequencePlayer"), sizeof(FAnimNode_SequencePlayer), Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SequencePlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_SequencePlayer>, EStructFlags(0x00000201));
			UProperty* NewProp_StartPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartPosition, FAnimNode_SequencePlayer), 0x0010000000000005);
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FAnimNode_SequencePlayer), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopAnimation, FAnimNode_SequencePlayer, bool);
			UProperty* NewProp_bLoopAnimation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLoopAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopAnimation, FAnimNode_SequencePlayer), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLoopAnimation, FAnimNode_SequencePlayer), sizeof(bool), true);
			UProperty* NewProp_Sequence = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sequence"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Sequence, FAnimNode_SequencePlayer), 0x0010000000000005, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Sequence player node"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ToolTip"), TEXT("The start up position, it only applies when reinitialized\nif you loop, it will still start from 0.f after finishing the round"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("The play rate multiplier. Can be negative, which will cause the animation to play in reverse."));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bLoopAnimation, TEXT("ToolTip"), TEXT("Should the animation continue looping when it reaches the end?"));
			MetaData->SetValue(NewProp_Sequence, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SequencePlayer.h"));
			MetaData->SetValue(NewProp_Sequence, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Sequence, TEXT("ToolTip"), TEXT("The animation sequence asset to play"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequencePlayer_CRC() { return 915566916U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_StateMachine()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_StateMachine"), sizeof(FAnimNode_StateMachine), Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_StateMachine"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_StateMachine>, EStructFlags(0x00000201));
			UProperty* NewProp_ElapsedTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ElapsedTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ElapsedTime, FAnimNode_StateMachine), 0x0020080000000000);
			UProperty* NewProp_CurrentState = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurrentState"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CurrentState, FAnimNode_StateMachine), 0x0020080000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkipFirstUpdateTransition, FAnimNode_StateMachine, bool);
			UProperty* NewProp_bSkipFirstUpdateTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSkipFirstUpdateTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkipFirstUpdateTransition, FAnimNode_StateMachine), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bSkipFirstUpdateTransition, FAnimNode_StateMachine), sizeof(bool), true);
			UProperty* NewProp_MaxTransitionsPerFrame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxTransitionsPerFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxTransitionsPerFrame, FAnimNode_StateMachine), 0x0010000000000001);
			UProperty* NewProp_StateMachineIndexInClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StateMachineIndexInClass"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StateMachineIndexInClass, FAnimNode_StateMachine), 0x0010000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("State machine node"));
			MetaData->SetValue(NewProp_ElapsedTime, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_ElapsedTime, TEXT("ToolTip"), TEXT("Elapsed time since entering the current state"));
			MetaData->SetValue(NewProp_CurrentState, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_CurrentState, TEXT("ToolTip"), TEXT("The current state within the state machine"));
			MetaData->SetValue(NewProp_bSkipFirstUpdateTransition, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bSkipFirstUpdateTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_bSkipFirstUpdateTransition, TEXT("ToolTip"), TEXT("Skip transition from entry state on first update?\ndefault is true, we throw away transition data on first update"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_MaxTransitionsPerFrame, TEXT("ToolTip"), TEXT("The maximum number of transitions that can be taken by this machine 'simultaneously' in a single frame"));
			MetaData->SetValue(NewProp_StateMachineIndexInClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_StateMachineIndexInClass, TEXT("ToolTip"), TEXT("Index into the BakedStateMachines array in the owning UAnimBlueprintGeneratedClass"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_StateMachine_CRC() { return 1074483739U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationPotentialTransition()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimationPotentialTransition"), sizeof(FAnimationPotentialTransition), Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationPotentialTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationPotentialTransition>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationPotentialTransition_CRC() { return 161462282U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimationActiveTransitionEntry"), sizeof(FAnimationActiveTransitionEntry), Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimationActiveTransitionEntry"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimationActiveTransitionEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_BlendProfile = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BlendProfile, FAnimationActiveTransitionEntry), 0x0010000000000000, Z_Construct_UClass_UBlendProfile_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Information about an active transition on the transition stack"));
			MetaData->SetValue(NewProp_BlendProfile, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_StateMachine.h"));
			MetaData->SetValue(NewProp_BlendProfile, TEXT("ToolTip"), TEXT("Blend profile to use for this transition. Specifying this will make the transition evaluate per-bone"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimationActiveTransitionEntry_CRC() { return 4256059929U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SubInput()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SubInput_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SubInput"), sizeof(FAnimNode_SubInput), Get_Z_Construct_UScriptStruct_FAnimNode_SubInput_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SubInput"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SubInput>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInput.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SubInput_CRC() { return 1662839183U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SubInstance()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SubInstance_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SubInstance"), sizeof(FAnimNode_SubInstance), Get_Z_Construct_UScriptStruct_FAnimNode_SubInstance_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SubInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SubInstance>, EStructFlags(0x00000201));
			UProperty* NewProp_DestPropertyNames = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DestPropertyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DestPropertyNames, FAnimNode_SubInstance), 0x0010000000000000);
			UProperty* NewProp_DestPropertyNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DestPropertyNames, TEXT("DestPropertyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourcePropertyNames = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePropertyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SourcePropertyNames, FAnimNode_SubInstance), 0x0010000000000000);
			UProperty* NewProp_SourcePropertyNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SourcePropertyNames, TEXT("SourcePropertyNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SubInstanceProperties = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubInstanceProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SubInstanceProperties, FAnimNode_SubInstance), 0x0010000000002000);
			UProperty* NewProp_SubInstanceProperties_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubInstanceProperties, TEXT("SubInstanceProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, UProperty::StaticClass());
			UProperty* NewProp_InstanceProperties = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InstanceProperties, FAnimNode_SubInstance), 0x0010000000002000);
			UProperty* NewProp_InstanceProperties_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InstanceProperties, TEXT("InstanceProperties"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, UProperty::StaticClass());
			UProperty* NewProp_InstanceToRun = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceToRun"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InstanceToRun, FAnimNode_SubInstance), 0x0010000000002000, Z_Construct_UClass_UAnimInstance_NoRegister());
			UProperty* NewProp_InstanceClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InstanceClass"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(InstanceClass, FAnimNode_SubInstance), 0x0014000000000005, Z_Construct_UClass_UAnimInstance_NoRegister(), UClass::StaticClass());
			UProperty* NewProp_InPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InPose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InPose, FAnimNode_SubInstance), 0x0010000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_DestPropertyNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_DestPropertyNames, TEXT("ToolTip"), TEXT("List of destination properties to use, 1-1 with Source names above, built by the compiler"));
			MetaData->SetValue(NewProp_SourcePropertyNames, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_SourcePropertyNames, TEXT("ToolTip"), TEXT("List of source properties to use, 1-1 with Dest names below, built by the compiler"));
			MetaData->SetValue(NewProp_SubInstanceProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_SubInstanceProperties, TEXT("ToolTip"), TEXT("List of properties on the sub instance to push to, built from name list when initialised"));
			MetaData->SetValue(NewProp_InstanceProperties, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_InstanceProperties, TEXT("ToolTip"), TEXT("List of properties on the calling instance to push from"));
			MetaData->SetValue(NewProp_InstanceToRun, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_InstanceToRun, TEXT("ToolTip"), TEXT("This is the actual instance allocated at runtime that will run"));
			MetaData->SetValue(NewProp_InstanceClass, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_InstanceClass, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_InPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_SubInstance.h"));
			MetaData->SetValue(NewProp_InPose, TEXT("ToolTip"), TEXT("Input pose for the node, intentionally not accessible because if there's no input\nNode in the target class we don't want to show this as a pin"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SubInstance_CRC() { return 2111239955U; }
	UEnum* Z_Construct_UEnum_Engine_EEvaluatorMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEvaluatorMode"), 0, Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEvaluatorMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorMode::EM_Standard")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorMode::EM_Freeze")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorMode::EM_DelayedFreeze")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorMode::EM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEvaluatorMode::Mode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EM_DelayedFreeze.DisplayName"), TEXT("Delayed Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_DelayedFreeze.ToolTip"), TEXT("DataSource is ticked and evaluated for a given number of frames, then freezes after and uses the cached pose for future frames."));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Freeze.DisplayName"), TEXT("Freeze"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Freeze.ToolTip"), TEXT("DataSource is never ticked and only evaluated on the first frame. Every frame after uses the cached pose from the first frame."));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Standard.DisplayName"), TEXT("Standard"));
			MetaData->SetValue(ReturnEnum, TEXT("EM_Standard.ToolTip"), TEXT("DataSource is ticked and evaluated every frame."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Determines the behavior this node will use when updating and evaluating."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorMode_CRC() { return 148895905U; }
	UEnum* Z_Construct_UEnum_Engine_EEvaluatorDataSource()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEvaluatorDataSource"), 0, Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEvaluatorDataSource"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorDataSource::EDS_SourcePose")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorDataSource::EDS_DestinationPose")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EEvaluatorDataSource::EDS_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EEvaluatorDataSource::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("EDS_DestinationPose.DisplayName"), TEXT("Destination Pose"));
			MetaData->SetValue(ReturnEnum, TEXT("EDS_SourcePose.DisplayName"), TEXT("Source Pose"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Indicates which state is being evaluated by this node (source or destination)."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EEvaluatorDataSource_CRC() { return 1658137597U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_TransitionPoseEvaluator"), sizeof(FAnimNode_TransitionPoseEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TransitionPoseEvaluator"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_TransitionPoseEvaluator>, EStructFlags(0x00000201));
			UProperty* NewProp_CacheFramesRemaining = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CacheFramesRemaining"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CacheFramesRemaining, FAnimNode_TransitionPoseEvaluator), 0x0010000000002000);
			UProperty* NewProp_FramesToCachePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FramesToCachePose"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FramesToCachePose, FAnimNode_TransitionPoseEvaluator), 0x0010000000000005);
			UProperty* NewProp_EvaluatorMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvaluatorMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EvaluatorMode, FAnimNode_TransitionPoseEvaluator), 0x0010000000000005, Z_Construct_UEnum_Engine_EEvaluatorMode());
			UProperty* NewProp_DataSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DataSource"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DataSource, FAnimNode_TransitionPoseEvaluator), 0x0010000000000005, Z_Construct_UEnum_Engine_EEvaluatorDataSource());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Animation data node for state machine transitions.\nCan be set to supply either the animation data from the transition source (From State) or the transition destination (To State)."));
			MetaData->SetValue(NewProp_CacheFramesRemaining, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("NeverAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_FramesToCachePose, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_EvaluatorMode, TEXT("NeverAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_DataSource, TEXT("Category"), TEXT("Pose"));
			MetaData->SetValue(NewProp_DataSource, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionPoseEvaluator.h"));
			MetaData->SetValue(NewProp_DataSource, TEXT("NeverAsPin"), TEXT(""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionPoseEvaluator_CRC() { return 801032472U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TransitionResult()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_TransitionResult"), sizeof(FAnimNode_TransitionResult), Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TransitionResult"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_TransitionResult>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanEnterTransition, FAnimNode_TransitionResult, bool);
			UProperty* NewProp_bCanEnterTransition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCanEnterTransition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanEnterTransition, FAnimNode_TransitionResult), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCanEnterTransition, FAnimNode_TransitionResult), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionResult.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Root node of a state machine transition graph"));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("Category"), TEXT("Result"));
			MetaData->SetValue(NewProp_bCanEnterTransition, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_TransitionResult.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TransitionResult_CRC() { return 2926995949U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_UseCachedPose()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_UseCachedPose"), sizeof(FAnimNode_UseCachedPose), Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_UseCachedPose"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_UseCachedPose>, EStructFlags(0x00000201));
			UProperty* NewProp_CachePoseName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CachePoseName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CachePoseName, FAnimNode_UseCachedPose), 0x0010000000000000);
			UProperty* NewProp_LinkToCachingNode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinkToCachingNode"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinkToCachingNode, FAnimNode_UseCachedPose), 0x0010000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_UseCachedPose.h"));
			MetaData->SetValue(NewProp_CachePoseName, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_UseCachedPose.h"));
			MetaData->SetValue(NewProp_CachePoseName, TEXT("ToolTip"), TEXT("Intentionally not exposed, set by AnimBlueprintCompiler"));
			MetaData->SetValue(NewProp_LinkToCachingNode, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNode_UseCachedPose.h"));
			MetaData->SetValue(NewProp_LinkToCachingNode, TEXT("ToolTip"), TEXT("Note: This link is intentionally not public; it's wired up during compilation"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_UseCachedPose_CRC() { return 3696037134U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ConvertLocalToComponentSpace"), sizeof(FAnimNode_ConvertLocalToComponentSpace), Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ConvertLocalToComponentSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ConvertLocalToComponentSpace>, EStructFlags(0x00000201));
			UProperty* NewProp_LocalPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalPose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocalPose, FAnimNode_ConvertLocalToComponentSpace), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
			MetaData->SetValue(NewProp_LocalPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_LocalPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertLocalToComponentSpace_CRC() { return 393952167U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ConvertComponentToLocalSpace"), sizeof(FAnimNode_ConvertComponentToLocalSpace), Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ConvertComponentToLocalSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ConvertComponentToLocalSpace>, EStructFlags(0x00000201));
			UProperty* NewProp_ComponentPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentPose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ComponentPose, FAnimNode_ConvertComponentToLocalSpace), 0x0010000000000005, Z_Construct_UScriptStruct_FComponentSpacePoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ModuleRelativePath"), TEXT("Classes/Animation/AnimNodeSpaceConversions.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ConvertComponentToLocalSpace_CRC() { return 3440727320U; }
	UEnum* Z_Construct_UEnum_Engine_ECameraAlphaBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ECameraAlphaBlendMode"), 0, Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECameraAlphaBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ECameraAlphaBlendMode::CABM_Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ECameraAlphaBlendMode::CABM_Cubic")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ECameraAlphaBlendMode::CABM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ECameraAlphaBlendMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CABM_Cubic.DisplayName"), TEXT("Cubic"));
			MetaData->SetValue(ReturnEnum, TEXT("CABM_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraStackTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("@TODO: Document"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_ECameraAlphaBlendMode_CRC() { return 3639776115U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDummySpacerCameraTypes()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DummySpacerCameraTypes"), sizeof(FDummySpacerCameraTypes), Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DummySpacerCameraTypes"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDummySpacerCameraTypes>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Camera/CameraStackTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("NOTE:\nThis code is work in progress - do not use these types until this comment is removed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDummySpacerCameraTypes_CRC() { return 4217550914U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIntegralCurve()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FIntegralCurve_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("IntegralCurve"), sizeof(FIntegralCurve), Get_Z_Construct_UScriptStruct_FIntegralCurve_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IntegralCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FIndexedCurve(), new UScriptStruct::TCppStructOps<FIntegralCurve>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDefaultValueBeforeFirstKey, FIntegralCurve, bool);
			UProperty* NewProp_bUseDefaultValueBeforeFirstKey = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseDefaultValueBeforeFirstKey"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDefaultValueBeforeFirstKey, FIntegralCurve), 0x0040000000000000, CPP_BOOL_PROPERTY_BITMASK(bUseDefaultValueBeforeFirstKey, FIntegralCurve), sizeof(bool), true);
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DefaultValue, FIntegralCurve), 0x0040000000000001);
			UProperty* NewProp_Keys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Keys, FIntegralCurve), 0x0040000000000001);
			UProperty* NewProp_Keys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Keys, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FIntegralKey());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An integral curve, which holds the key time and the key value"));
			MetaData->SetValue(NewProp_bUseDefaultValueBeforeFirstKey, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Curve"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ToolTip"), TEXT("Default value"));
			MetaData->SetValue(NewProp_Keys, TEXT("Category"), TEXT("Curve"));
			MetaData->SetValue(NewProp_Keys, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(NewProp_Keys, TEXT("ToolTip"), TEXT("The keys, ordered by time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIntegralCurve_CRC() { return 320291888U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIntegralKey()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FIntegralKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("IntegralKey"), sizeof(FIntegralKey), Get_Z_Construct_UScriptStruct_FIntegralKey_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IntegralKey"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FIntegralKey>, EStructFlags(0x00000001));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Value, FIntegralKey), 0x0010000000000001);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, FIntegralKey), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An integral key, which holds the key time and the key value"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The keyed integral value"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/IntegralCurve.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("The keyed time"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIntegralKey_CRC() { return 2285919077U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNameCurve()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNameCurve_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NameCurve"), sizeof(FNameCurve), Get_Z_Construct_UScriptStruct_FNameCurve_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NameCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FIndexedCurve(), new UScriptStruct::TCppStructOps<FNameCurve>, EStructFlags(0x00000201));
			UProperty* NewProp_Keys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Keys, FNameCurve), 0x0010000000000041);
			UProperty* NewProp_Keys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Keys, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNameCurveKey());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/NameCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a curve of FNames."));
			MetaData->SetValue(NewProp_Keys, TEXT("Category"), TEXT("Curve"));
			MetaData->SetValue(NewProp_Keys, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/NameCurve.h"));
			MetaData->SetValue(NewProp_Keys, TEXT("ToolTip"), TEXT("Sorted array of keys"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNameCurve_CRC() { return 643312609U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNameCurveKey()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FNameCurveKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("NameCurveKey"), sizeof(FNameCurveKey), Get_Z_Construct_UScriptStruct_FNameCurveKey_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NameCurveKey"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNameCurveKey>, EStructFlags(0x00000201));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Value, FNameCurveKey), 0x0010000000000001);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, FNameCurveKey), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/NameCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("One key in a curve of FNames."));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/NameCurve.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Value at this key"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/NameCurve.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Time at this key"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNameCurveKey_CRC() { return 2195384989U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStringCurve()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStringCurve_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StringCurve"), sizeof(FStringCurve), Get_Z_Construct_UScriptStruct_FStringCurve_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StringCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FIndexedCurve(), new UScriptStruct::TCppStructOps<FStringCurve>, EStructFlags(0x00000201));
			UProperty* NewProp_Keys = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Keys, FStringCurve), 0x0010000000000041);
			UProperty* NewProp_Keys_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Keys, TEXT("Keys"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FStringCurveKey());
			UProperty* NewProp_DefaultValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DefaultValue, FStringCurve), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a curve of FStrings."));
			MetaData->SetValue(NewProp_Keys, TEXT("Category"), TEXT("Curve"));
			MetaData->SetValue(NewProp_Keys, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(NewProp_Keys, TEXT("ToolTip"), TEXT("Sorted array of keys"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("Category"), TEXT("Curve"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(NewProp_DefaultValue, TEXT("ToolTip"), TEXT("Default value"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStringCurve_CRC() { return 993604602U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStringCurveKey()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStringCurveKey_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StringCurveKey"), sizeof(FStringCurveKey), Get_Z_Construct_UScriptStruct_FStringCurveKey_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StringCurveKey"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStringCurveKey>, EStructFlags(0x00000201));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Value, FStringCurveKey), 0x0010000000000001);
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, FStringCurveKey), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("One key in a curve of FStrings."));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Value at this key"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("Key"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Classes/Curves/StringCurve.h"));
			MetaData->SetValue(NewProp_Time, TEXT("ToolTip"), TEXT("Time at this key"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStringCurveKey_CRC() { return 3576109222U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMemberReference()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FMemberReference_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MemberReference"), sizeof(FMemberReference), Get_Z_Construct_UScriptStruct_FMemberReference_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MemberReference"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMemberReference>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWasDeprecated, FMemberReference, bool);
			UProperty* NewProp_bWasDeprecated = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bWasDeprecated"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWasDeprecated, FMemberReference), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bWasDeprecated, FMemberReference), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelfContext, FMemberReference, bool);
			UProperty* NewProp_bSelfContext = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSelfContext"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelfContext, FMemberReference), 0x0020080000000000, CPP_BOOL_PROPERTY_BITMASK(bSelfContext, FMemberReference), sizeof(bool), true);
			UProperty* NewProp_MemberGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MemberGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MemberGuid, FMemberReference), 0x0020080000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_MemberName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MemberName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(MemberName, FMemberReference), 0x0020080000000000);
			UProperty* NewProp_MemberScope = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MemberScope"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MemberScope, FMemberReference), 0x0020080000000000);
			UProperty* NewProp_MemberParent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MemberParent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MemberParent, FMemberReference), 0x0020080000000000, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: this can encapsulate globally defined fields as well (like with native\n       delegate signatures); consider renaming to FFieldReference"));
			MetaData->SetValue(NewProp_bWasDeprecated, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_bWasDeprecated, TEXT("ToolTip"), TEXT("Whether or not this property has been deprecated"));
			MetaData->SetValue(NewProp_bSelfContext, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_bSelfContext, TEXT("ToolTip"), TEXT("Whether or not this should be a \"self\" context"));
			MetaData->SetValue(NewProp_MemberGuid, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_MemberGuid, TEXT("ToolTip"), TEXT("The Guid of the variable"));
			MetaData->SetValue(NewProp_MemberName, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_MemberName, TEXT("ToolTip"), TEXT("Name of variable"));
			MetaData->SetValue(NewProp_MemberScope, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_MemberParent, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/MemberReference.h"));
			MetaData->SetValue(NewProp_MemberParent, TEXT("ToolTip"), TEXT("Most often the Class that this member is defined in. Could be a UPackage\nif it is a native delegate signature function (declared globally). Should\nbe NULL if bSelfContext is true."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMemberReference_CRC() { return 1992149702U; }
	UScriptStruct* Z_Construct_UScriptStruct_FStreamableManager()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FStreamableManager_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("StreamableManager"), sizeof(FStreamableManager), Get_Z_Construct_UScriptStruct_FStreamableManager_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StreamableManager"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FStreamableManager>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Engine/StreamableManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FStreamableManager_CRC() { return 3672461024U; }
	UEnum* Z_Construct_UEnum_Engine_EVertexPaintAxis()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EVertexPaintAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVertexPaintAxis"), 0, Get_Z_Construct_UEnum_Engine_EVertexPaintAxis_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVertexPaintAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EVertexPaintAxis::X")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EVertexPaintAxis::Y")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EVertexPaintAxis::Z")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EVertexPaintAxis::EVertexPaintAxis_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EVertexPaintAxis");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/MeshVertexPainter/MeshVertexPainter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EVertexPaintAxis_CRC() { return 19850368U; }
	UEnum* Z_Construct_UEnum_Engine_EDrawDebugItemType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_EDrawDebugItemType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDrawDebugItemType"), 0, Get_Z_Construct_UEnum_Engine_EDrawDebugItemType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDrawDebugItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrawDebugItemType::DirectionalArrow")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrawDebugItemType::Sphere")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrawDebugItemType::Line")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrawDebugItemType::OnScreenMessage")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrawDebugItemType::EDrawDebugItemType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EDrawDebugItemType::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_EDrawDebugItemType_CRC() { return 683910799U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimInstanceProxy()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimInstanceProxy_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimInstanceProxy"), sizeof(FAnimInstanceProxy), Get_Z_Construct_UScriptStruct_FAnimInstanceProxy_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimInstanceProxy"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimInstanceProxy>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("DisplayName"), TEXT("Native Variables"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Proxy object passed around during animation tree update in lieu of a UAnimInstance"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimInstanceProxy_CRC() { return 1722088790U; }
	UScriptStruct* Z_Construct_UScriptStruct_FQueuedDrawDebugItem()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FQueuedDrawDebugItem_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("QueuedDrawDebugItem"), sizeof(FQueuedDrawDebugItem), Get_Z_Construct_UScriptStruct_FQueuedDrawDebugItem_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("QueuedDrawDebugItem"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FQueuedDrawDebugItem>, EStructFlags(0x00000001));
			UProperty* NewProp_TextScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TextScale, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Message = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Message"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Message, FQueuedDrawDebugItem), 0x0010000000002000);
			UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Thickness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Thickness, FQueuedDrawDebugItem), 0x0010000000002000);
			UProperty* NewProp_LifeTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LifeTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LifeTime, FQueuedDrawDebugItem), 0x0010000000002000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPersistentLines, FQueuedDrawDebugItem, bool);
			UProperty* NewProp_bPersistentLines = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bPersistentLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPersistentLines, FQueuedDrawDebugItem), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bPersistentLines, FQueuedDrawDebugItem), sizeof(bool), true);
			UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Color"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Color, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_Segments = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Segments"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Segments, FQueuedDrawDebugItem), 0x0010000000002000);
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Size"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Size, FQueuedDrawDebugItem), 0x0010000000002000);
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Radius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Radius, FQueuedDrawDebugItem), 0x0010000000002000);
			UProperty* NewProp_Center = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Center"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Center, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_EndLoc = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EndLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndLoc, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StartLoc = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartLoc, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ItemType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ItemType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ItemType, FQueuedDrawDebugItem), 0x0010000000002000, Z_Construct_UEnum_Engine_EDrawDebugItemType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_TextScale, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Message, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Thickness, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_LifeTime, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_bPersistentLines, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Color, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Segments, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_Center, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_EndLoc, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_StartLoc, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
			MetaData->SetValue(NewProp_ItemType, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimInstanceProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FQueuedDrawDebugItem_CRC() { return 2827316793U; }
	UEnum* Z_Construct_UEnum_Engine_AnimPhysCollisionType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_AnimPhysCollisionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("AnimPhysCollisionType"), 0, Get_Z_Construct_UEnum_Engine_AnimPhysCollisionType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysCollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysCollisionType::CoM")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysCollisionType::CustomSphere")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysCollisionType::InnerSphere")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysCollisionType::OuterSphere")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysCollisionType::AnimPhysCollisionType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("AnimPhysCollisionType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CoM.DisplayName"), TEXT("CoM"));
			MetaData->SetValue(ReturnEnum, TEXT("CoM.DisplayValue"), TEXT("CoM"));
			MetaData->SetValue(ReturnEnum, TEXT("CoM.ToolTip"), TEXT("Only limit the center of mass from crossing planes."));
			MetaData->SetValue(ReturnEnum, TEXT("CustomSphere.ToolTip"), TEXT("Use the specified sphere radius to collide with planes."));
			MetaData->SetValue(ReturnEnum, TEXT("InnerSphere.ToolTip"), TEXT("Use the largest sphere that fits entirely within the body extents to collide with planes."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimPhysicsSolver.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OuterSphere.ToolTip"), TEXT("Use the smallest sphere that wholely contains the body extents to collide with planes."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_AnimPhysCollisionType_CRC() { return 296411812U; }
	UEnum* Z_Construct_UEnum_Engine_AnimPhysTwistAxis()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UEnum_Engine_AnimPhysTwistAxis_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("AnimPhysTwistAxis"), 0, Get_Z_Construct_UEnum_Engine_AnimPhysTwistAxis_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysTwistAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysTwistAxis::AxisX")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysTwistAxis::AxisY")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysTwistAxis::AxisZ")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysTwistAxis::AnimPhysTwistAxis_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("AnimPhysTwistAxis");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimPhysicsSolver.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum for picking current angular twist axis"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Engine_AnimPhysTwistAxis_CRC() { return 4191071454U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimSingleNodeInstanceProxy()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimSingleNodeInstanceProxy_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimSingleNodeInstanceProxy"), sizeof(FAnimSingleNodeInstanceProxy), Get_Z_Construct_UScriptStruct_FAnimSingleNodeInstanceProxy_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimSingleNodeInstanceProxy"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimInstanceProxy(), new UScriptStruct::TCppStructOps<FAnimSingleNodeInstanceProxy>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimSingleNodeInstanceProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Proxy override for this UAnimInstance-derived class"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimSingleNodeInstanceProxy_CRC() { return 1398881935U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SingleNode()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_Engine();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SingleNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SingleNode"), sizeof(FAnimNode_SingleNode), Get_Z_Construct_UScriptStruct_FAnimNode_SingleNode_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SingleNode"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SingleNode>, EStructFlags(0x00000001));
			UProperty* NewProp_SourcePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePose, FAnimNode_SingleNode), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimSingleNodeInstanceProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Local anim node for extensible processing.\nCant be used outside of this context as it has no graph node counterpart"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("ModuleRelativePath"), TEXT("Public/Animation/AnimSingleNodeInstanceProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SingleNode_CRC() { return 2441349528U; }
	UPackage* Z_Construct_UPackage__Script_Engine()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Engine")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x9A66BD87;
			Guid.B = 0xE041B191;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UScriptStruct_FDistributionLookupTable();
			Z_Construct_UScriptStruct_FRawDistribution();
			Z_Construct_UScriptStruct_FFloatDistribution();
			Z_Construct_UScriptStruct_FVectorDistribution();
			Z_Construct_UScriptStruct_FVector4Distribution();
			Z_Construct_UScriptStruct_FFormatArgumentData();
			Z_Construct_UScriptStruct_FExpressionInput();
			Z_Construct_UScriptStruct_FMaterialAttributesInput();
			Z_Construct_UScriptStruct_FExpressionOutput();
			Z_Construct_UScriptStruct_FMaterialInput();
			Z_Construct_UScriptStruct_FColorMaterialInput();
			Z_Construct_UScriptStruct_FScalarMaterialInput();
			Z_Construct_UScriptStruct_FVectorMaterialInput();
			Z_Construct_UScriptStruct_FVector2MaterialInput();
			Z_Construct_UDelegateFunction_Engine_TimerDynamicDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ConstraintBrokenSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorComponentActivatedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorComponentDeactivateSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PhysicsVolumeChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_TakeAnyDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_TakePointDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorHitSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnClickedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnReleasedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchBeginSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorOnInputTouchEndSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorBeginTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorDestroyedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorEndPlaySignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnNavigationPathUpdated__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnNavDataGenerigEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentHitSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndOverlapSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentWakeSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentSleepSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndCursorOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnClickedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnReleasedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchBeginSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentOnInputTouchEndSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentBeginTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentEndTouchOverSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_SmartLinkReachedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageStartedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageEndedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnAllMontageInstancesEndedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMontageBlendingOutStartedMCDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PostEvaluateAnimEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnAudioFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnQueueSubtitles__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnAudioPlaybackPercent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ComponentFractureSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnForceFeedbackFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputActionHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputTouchHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputAxisHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputVectorAxisHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InputGestureHandlerDynamicSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineFloat__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineVector__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnTimelineLinearColor__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnCanvasRenderTargetUpdate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_PlatformInterfaceDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_InstigatedAnyDamageSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnUserClickedBanner__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnUserClosedAdvertisement__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_LevelStreamingLoadedStatus__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_LevelStreamingVisibilityStatus__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_MovementModeChangedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_CharacterMovementUpdatedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_CharacterReachedApexSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_LandedSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnGameUserSettingsUINeedsUpdate__DelegateSignature();
			Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformRegisteredForUserNotificationsDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformReceivedRemoteNotificationDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformReceivedLocalNotificationDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UPlatformGameInstance_PlatformScreenOrientationChangedDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetLoaded__DelegateSignature();
			Z_Construct_UDelegateFunction_UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnMatineeEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleSpawnSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleBurstSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleDeathSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ParticleCollisionSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_OnSystemFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_ActorFractureSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_Engine_EmptyOnlineDelegate__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
