// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "MovieSceneCapture.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1MovieSceneCapture() {}
class UScriptStruct* FMovieSceneCaptureSettings::StaticStruct()
{
	extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMovieSceneCaptureSettings, Z_Construct_UPackage__Script_MovieSceneCapture(), TEXT("MovieSceneCaptureSettings"), sizeof(FMovieSceneCaptureSettings), Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMovieSceneCaptureSettings(FMovieSceneCaptureSettings::StaticStruct, TEXT("/Script/MovieSceneCapture"), TEXT("MovieSceneCaptureSettings"), false, nullptr, nullptr);
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MovieSceneCaptureSettings")),new UScriptStruct::TCppStructOps<FMovieSceneCaptureSettings>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFMovieSceneCaptureSettings;
class UScriptStruct* FCaptureResolution::StaticStruct()
{
	extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCaptureResolution, Z_Construct_UPackage__Script_MovieSceneCapture(), TEXT("CaptureResolution"), sizeof(FCaptureResolution), Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCaptureResolution(FCaptureResolution::StaticStruct, TEXT("/Script/MovieSceneCapture"), TEXT("CaptureResolution"), false, nullptr, nullptr);
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CaptureResolution")),new UScriptStruct::TCppStructOps<FCaptureResolution>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureResolution;
	void UMovieSceneCaptureInterface::StaticRegisterNativesUMovieSceneCaptureInterface()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneCaptureInterface, 2792491008);
	void UMovieSceneCaptureProtocolSettings::StaticRegisterNativesUMovieSceneCaptureProtocolSettings()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneCaptureProtocolSettings, 1765646087);
class UScriptStruct* FCaptureProtocolID::StaticStruct()
{
	extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureProtocolID();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FCaptureProtocolID_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCaptureProtocolID, Z_Construct_UPackage__Script_MovieSceneCapture(), TEXT("CaptureProtocolID"), sizeof(FCaptureProtocolID), Get_Z_Construct_UScriptStruct_FCaptureProtocolID_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCaptureProtocolID(FCaptureProtocolID::StaticStruct, TEXT("/Script/MovieSceneCapture"), TEXT("CaptureProtocolID"), false, nullptr, nullptr);
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureProtocolID
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureProtocolID()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CaptureProtocolID")),new UScriptStruct::TCppStructOps<FCaptureProtocolID>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFCaptureProtocolID;
	void UMovieSceneCapture::StaticRegisterNativesUMovieSceneCapture()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneCapture, 2195460492);
	void UAutomatedLevelSequenceCapture::StaticRegisterNativesUAutomatedLevelSequenceCapture()
	{
	}
	IMPLEMENT_CLASS(UAutomatedLevelSequenceCapture, 2151761647);
	void ULevelCapture::StaticRegisterNativesULevelCapture()
	{
	}
	IMPLEMENT_CLASS(ULevelCapture, 84983224);
	void UMovieSceneCaptureEnvironment::StaticRegisterNativesUMovieSceneCaptureEnvironment()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMovieSceneCaptureEnvironment::StaticClass(), "GetCaptureElapsedTime",(Native)&UMovieSceneCaptureEnvironment::execGetCaptureElapsedTime);
		FNativeFunctionRegistrar::RegisterFunction(UMovieSceneCaptureEnvironment::StaticClass(), "GetCaptureFrameNumber",(Native)&UMovieSceneCaptureEnvironment::execGetCaptureFrameNumber);
	}
	IMPLEMENT_CLASS(UMovieSceneCaptureEnvironment, 1842181046);
	void UFrameGrabberProtocolSettings::StaticRegisterNativesUFrameGrabberProtocolSettings()
	{
	}
	IMPLEMENT_CLASS(UFrameGrabberProtocolSettings, 4136049402);
	void UBmpImageCaptureSettings::StaticRegisterNativesUBmpImageCaptureSettings()
	{
	}
	IMPLEMENT_CLASS(UBmpImageCaptureSettings, 2185018275);
	void UImageCaptureSettings::StaticRegisterNativesUImageCaptureSettings()
	{
	}
	IMPLEMENT_CLASS(UImageCaptureSettings, 1512457279);
static class UEnum* EHDRCaptureGamut_StaticEnum()
{
	extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UEnum* Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut();
		Singleton = GetStaticEnum(Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut, Z_Construct_UPackage__Script_MovieSceneCapture(), TEXT("EHDRCaptureGamut"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHDRCaptureGamut(EHDRCaptureGamut_StaticEnum, TEXT("/Script/MovieSceneCapture"), TEXT("EHDRCaptureGamut"), false, nullptr, nullptr);
class UScriptStruct* FCompositionGraphCapturePasses::StaticStruct()
{
	extern MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositionGraphCapturePasses();
		extern MOVIESCENECAPTURE_API uint32 Get_Z_Construct_UScriptStruct_FCompositionGraphCapturePasses_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCompositionGraphCapturePasses, Z_Construct_UPackage__Script_MovieSceneCapture(), TEXT("CompositionGraphCapturePasses"), sizeof(FCompositionGraphCapturePasses), Get_Z_Construct_UScriptStruct_FCompositionGraphCapturePasses_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCompositionGraphCapturePasses(FCompositionGraphCapturePasses::StaticStruct, TEXT("/Script/MovieSceneCapture"), TEXT("CompositionGraphCapturePasses"), false, nullptr, nullptr);
static struct FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCompositionGraphCapturePasses
{
	FScriptStruct_MovieSceneCapture_StaticRegisterNativesFCompositionGraphCapturePasses()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CompositionGraphCapturePasses")),new UScriptStruct::TCppStructOps<FCompositionGraphCapturePasses>);
	}
} ScriptStruct_MovieSceneCapture_StaticRegisterNativesFCompositionGraphCapturePasses;
	void UCompositionGraphCaptureSettings::StaticRegisterNativesUCompositionGraphCaptureSettings()
	{
	}
	IMPLEMENT_CLASS(UCompositionGraphCaptureSettings, 1353459482);
	void UVideoCaptureSettings::StaticRegisterNativesUVideoCaptureSettings()
	{
	}
	IMPLEMENT_CLASS(UVideoCaptureSettings, 2654162432);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AGameModeBase_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ALevelSequenceActor_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FStringAssetReference();
	LEVELSEQUENCE_API class UClass* Z_Construct_UClass_ULevelSequenceBurnInOptions_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();

	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings();
	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureInterface();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureProtocolSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureProtocolSettings();
	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureProtocolID();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCapture();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_ULevelCapture_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_ULevelCapture();
	MOVIESCENECAPTURE_API class UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime();
	MOVIESCENECAPTURE_API class UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UFrameGrabberProtocolSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UFrameGrabberProtocolSettings();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UBmpImageCaptureSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UBmpImageCaptureSettings();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UImageCaptureSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UImageCaptureSettings();
	MOVIESCENECAPTURE_API class UEnum* Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut();
	MOVIESCENECAPTURE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositionGraphCapturePasses();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UCompositionGraphCaptureSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UCompositionGraphCaptureSettings();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UVideoCaptureSettings_NoRegister();
	MOVIESCENECAPTURE_API class UClass* Z_Construct_UClass_UVideoCaptureSettings();
	MOVIESCENECAPTURE_API class UPackage* Z_Construct_UPackage__Script_MovieSceneCapture();
	UScriptStruct* Z_Construct_UScriptStruct_FMovieSceneCaptureSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("MovieSceneCaptureSettings"), sizeof(FMovieSceneCaptureSettings), Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MovieSceneCaptureSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMovieSceneCaptureSettings>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowHUD, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bShowHUD = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShowHUD"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowHUD, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bShowHUD, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowPlayer, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bShowPlayer = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShowPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowPlayer, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bShowPlayer, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowTurning, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bAllowTurning = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowTurning"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowTurning, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bAllowTurning, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowMovement, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bAllowMovement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowMovement, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bAllowMovement, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCinematicMode, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bCinematicMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCinematicMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCinematicMode, FMovieSceneCaptureSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bCinematicMode, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCinematicEngineScalability, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bCinematicEngineScalability = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCinematicEngineScalability"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCinematicEngineScalability, FMovieSceneCaptureSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bCinematicEngineScalability, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableTextureStreaming, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bEnableTextureStreaming = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableTextureStreaming"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableTextureStreaming, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableTextureStreaming, FMovieSceneCaptureSettings), sizeof(bool), true);
			UProperty* NewProp_Resolution = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Resolution"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Resolution, FMovieSceneCaptureSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FCaptureResolution());
			UProperty* NewProp_FrameRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FrameRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FrameRate, FMovieSceneCaptureSettings), 0x0010000000004001);
			UProperty* NewProp_ZeroPadFrameNumbers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ZeroPadFrameNumbers"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ZeroPadFrameNumbers, FMovieSceneCaptureSettings), 0x0010000000004000);
			UProperty* NewProp_HandleFrames = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HandleFrames"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(HandleFrames, FMovieSceneCaptureSettings), 0x0010040000004001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRelativeFrameNumbers, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bUseRelativeFrameNumbers = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseRelativeFrameNumbers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRelativeFrameNumbers, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bUseRelativeFrameNumbers, FMovieSceneCaptureSettings), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverwriteExisting, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bOverwriteExisting = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverwriteExisting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverwriteExisting, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bOverwriteExisting, FMovieSceneCaptureSettings), sizeof(bool), true);
			UProperty* NewProp_OutputFormat = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(OutputFormat, FMovieSceneCaptureSettings), 0x0010000000004001);
			UProperty* NewProp_GameModeOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GameModeOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(GameModeOverride, FMovieSceneCaptureSettings), 0x0014040000004001, Z_Construct_UClass_AGameModeBase_NoRegister(), UClass::StaticClass());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCreateTemporaryCopiesOfLevels, FMovieSceneCaptureSettings, bool);
			UProperty* NewProp_bCreateTemporaryCopiesOfLevels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCreateTemporaryCopiesOfLevels"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCreateTemporaryCopiesOfLevels, FMovieSceneCaptureSettings), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bCreateTemporaryCopiesOfLevels, FMovieSceneCaptureSettings), sizeof(bool), true);
			UProperty* NewProp_OutputDirectory = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutputDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutputDirectory, FMovieSceneCaptureSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FDirectoryPath());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Common movie-scene capture settings"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("EditCondition"), TEXT("bCinematicMode"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bShowHUD, TEXT("ToolTip"), TEXT("Whether to show the in-game HUD whilst capturing"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("EditCondition"), TEXT("bCinematicMode"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bShowPlayer, TEXT("ToolTip"), TEXT("Whether to show the local player whilst capturing"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("EditCondition"), TEXT("bCinematicMode"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bAllowTurning, TEXT("ToolTip"), TEXT("Whether to allow player rotation whilst capturing"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("EditCondition"), TEXT("bCinematicMode"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bAllowMovement, TEXT("ToolTip"), TEXT("Whether to allow player movement whilst capturing"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bCinematicMode, TEXT("ToolTip"), TEXT("Whether to enable cinematic mode whilst capturing"));
			MetaData->SetValue(NewProp_bCinematicEngineScalability, TEXT("Category"), TEXT("Cinematic"));
			MetaData->SetValue(NewProp_bCinematicEngineScalability, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bCinematicEngineScalability, TEXT("ToolTip"), TEXT("Whether to enable cinematic engine scalability settings"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bEnableTextureStreaming, TEXT("ToolTip"), TEXT("Whether to texture streaming should be enabled while capturing.  Turning off texture streaming may cause much more memory to be used, but also reduces the chance of blurry textures in your captured video."));
			MetaData->SetValue(NewProp_Resolution, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_Resolution, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_Resolution, TEXT("ShowOnlyInnerProperties"), TEXT(""));
			MetaData->SetValue(NewProp_Resolution, TEXT("ToolTip"), TEXT("The resolution at which to capture"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("Category"), TEXT("CaptureSettings"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ClampMax"), TEXT("200"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("ToolTip"), TEXT("The frame rate at which to capture"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("UIMax"), TEXT("200"));
			MetaData->SetValue(NewProp_FrameRate, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_ZeroPadFrameNumbers, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_ZeroPadFrameNumbers, TEXT("ToolTip"), TEXT("How much to zero-pad frame numbers on filenames"));
			MetaData->SetValue(NewProp_HandleFrames, TEXT("Category"), TEXT("Sequence"));
			MetaData->SetValue(NewProp_HandleFrames, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_HandleFrames, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_HandleFrames, TEXT("ToolTip"), TEXT("Number of frame handles to include for each shot"));
			MetaData->SetValue(NewProp_HandleFrames, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bUseRelativeFrameNumbers, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_bUseRelativeFrameNumbers, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bUseRelativeFrameNumbers, TEXT("ToolTip"), TEXT("True if frame numbers in the output files should be relative to zero, rather than the actual frame numbers in the originating animation content"));
			MetaData->SetValue(NewProp_bOverwriteExisting, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_bOverwriteExisting, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bOverwriteExisting, TEXT("ToolTip"), TEXT("Whether to overwrite existing files or not"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("DisplayName"), TEXT("Filename Format"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_OutputFormat, TEXT("ToolTip"), TEXT("The format to use for the resulting filename. Extension will be added automatically. Any tokens of the form {token} will be replaced with the corresponding value:\n{fps}                - The captured framerate\n{frame}              - The current frame number (only relevant for image sequences)\n{width}              - The width of the captured frames\n{height}             - The height of the captured frames\n{world}              - The name of the current world\n{quality}    - The image compression quality setting\n{material}   - The material/render pass\n{shot}       - The name of the level sequence asset shot being played"));
			MetaData->SetValue(NewProp_GameModeOverride, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_GameModeOverride, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_GameModeOverride, TEXT("ToolTip"), TEXT("Optional game mode to override the map's default game mode with.  This can be useful if the game's normal mode displays UI elements or loading screens that you don't want captured."));
			MetaData->SetValue(NewProp_bCreateTemporaryCopiesOfLevels, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_bCreateTemporaryCopiesOfLevels, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_bCreateTemporaryCopiesOfLevels, TEXT("ToolTip"), TEXT("Whether to save temporary copies of all of the levels before capturing the movie.  This allows you to record movies of temporary work, or work that isn't yet saved, but it will take much longer for capturing to begin."));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("Category"), TEXT("General"));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("RelativePath"), TEXT(""));
			MetaData->SetValue(NewProp_OutputDirectory, TEXT("ToolTip"), TEXT("The directory to output the captured file(s) in"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMovieSceneCaptureSettings_CRC() { return 2965533616U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCaptureResolution()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CaptureResolution"), sizeof(FCaptureResolution), Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureResolution"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCaptureResolution>, EStructFlags(0x00000201));
			UProperty* NewProp_ResY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResY"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ResY, FCaptureResolution), 0x0010000000004001);
			UProperty* NewProp_ResX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResX"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(ResX, FCaptureResolution), 0x0010000000004001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure representing a capture resolution"));
			MetaData->SetValue(NewProp_ResY, TEXT("Category"), TEXT("Resolution"));
			MetaData->SetValue(NewProp_ResY, TEXT("ClampMax"), TEXT("7680"));
			MetaData->SetValue(NewProp_ResY, TEXT("ClampMin"), TEXT("16"));
			MetaData->SetValue(NewProp_ResY, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
			MetaData->SetValue(NewProp_ResX, TEXT("Category"), TEXT("Resolution"));
			MetaData->SetValue(NewProp_ResX, TEXT("ClampMax"), TEXT("7680"));
			MetaData->SetValue(NewProp_ResX, TEXT("ClampMin"), TEXT("16"));
			MetaData->SetValue(NewProp_ResX, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureSettings.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCaptureResolution_CRC() { return 3424162582U; }
	UClass* Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister()
	{
		return UMovieSceneCaptureInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UMovieSceneCaptureInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/IMovieSceneCapture.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCaptureInterface(Z_Construct_UClass_UMovieSceneCaptureInterface, &UMovieSceneCaptureInterface::StaticClass, TEXT("UMovieSceneCaptureInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCaptureInterface);
	UClass* Z_Construct_UClass_UMovieSceneCaptureProtocolSettings_NoRegister()
	{
		return UMovieSceneCaptureProtocolSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureProtocolSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UMovieSceneCaptureProtocolSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneCaptureProtocolSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureProtocolSettings.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCaptureProtocolSettings(Z_Construct_UClass_UMovieSceneCaptureProtocolSettings, &UMovieSceneCaptureProtocolSettings::StaticClass, TEXT("UMovieSceneCaptureProtocolSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCaptureProtocolSettings);
	UScriptStruct* Z_Construct_UScriptStruct_FCaptureProtocolID()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FCaptureProtocolID_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CaptureProtocolID"), sizeof(FCaptureProtocolID), Get_Z_Construct_UScriptStruct_FCaptureProtocolID_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureProtocolID"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCaptureProtocolID>, EStructFlags(0x00000001));
			UProperty* NewProp_Identifier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Identifier"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Identifier, FCaptureProtocolID), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureProtocolRegistry.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Structure used to uniquely identify a specific capture protocol"));
			MetaData->SetValue(NewProp_Identifier, TEXT("Category"), TEXT("ID"));
			MetaData->SetValue(NewProp_Identifier, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureProtocolRegistry.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCaptureProtocolID_CRC() { return 3942899851U; }
	UClass* Z_Construct_UClass_UMovieSceneCapture_NoRegister()
	{
		return UMovieSceneCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UMovieSceneCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InheritedCommandLineArguments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InheritedCommandLineArguments"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InheritedCommandLineArguments, UMovieSceneCapture), 0x0010040000002001);
				UProperty* NewProp_AdditionalCommandLineArguments = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalCommandLineArguments"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(AdditionalCommandLineArguments, UMovieSceneCapture), 0x0010040000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCloseEditorWhenCaptureStarts, UMovieSceneCapture, bool);
				UProperty* NewProp_bCloseEditorWhenCaptureStarts = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCloseEditorWhenCaptureStarts"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCloseEditorWhenCaptureStarts, UMovieSceneCapture), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bCloseEditorWhenCaptureStarts, UMovieSceneCapture), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSeparateProcess, UMovieSceneCapture, bool);
				UProperty* NewProp_bUseSeparateProcess = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseSeparateProcess"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSeparateProcess, UMovieSceneCapture), 0x0010040000004001, CPP_BOOL_PROPERTY_BITMASK(bUseSeparateProcess, UMovieSceneCapture), sizeof(bool), true);
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Settings, UMovieSceneCapture), 0x0010000000004001, Z_Construct_UScriptStruct_FMovieSceneCaptureSettings());
				UProperty* NewProp_ProtocolSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProtocolSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ProtocolSettings, UMovieSceneCapture), 0x0010000000000001, Z_Construct_UClass_UMovieSceneCaptureProtocolSettings_NoRegister());
				UProperty* NewProp_CaptureType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaptureType"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CaptureType, UMovieSceneCapture), 0x0010000000004001, Z_Construct_UScriptStruct_FCaptureProtocolID());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UMovieSceneCaptureInterface_NoRegister(), VTABLE_OFFSET(UMovieSceneCapture, IMovieSceneCaptureInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Class responsible for capturing scene data"));
				MetaData->SetValue(NewProp_InheritedCommandLineArguments, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_InheritedCommandLineArguments, TEXT("EditCondition"), TEXT("bUseSeparateProcess"));
				MetaData->SetValue(NewProp_InheritedCommandLineArguments, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_InheritedCommandLineArguments, TEXT("ToolTip"), TEXT("Command line arguments inherited from this process"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("EditCondition"), TEXT("bUseSeparateProcess"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_AdditionalCommandLineArguments, TEXT("ToolTip"), TEXT("Additional command line arguments to pass to the external process when capturing"));
				MetaData->SetValue(NewProp_bCloseEditorWhenCaptureStarts, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_bCloseEditorWhenCaptureStarts, TEXT("EditCondition"), TEXT("bUseSeparateProcess"));
				MetaData->SetValue(NewProp_bCloseEditorWhenCaptureStarts, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_bCloseEditorWhenCaptureStarts, TEXT("ToolTip"), TEXT("When enabled, the editor will shutdown when the capture starts"));
				MetaData->SetValue(NewProp_bUseSeparateProcess, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_bUseSeparateProcess, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_bUseSeparateProcess, TEXT("ToolTip"), TEXT("Whether to capture the movie in a separate process or not"));
				MetaData->SetValue(NewProp_Settings, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_Settings, TEXT("ToolTip"), TEXT("Settings that define how to capture"));
				MetaData->SetValue(NewProp_ProtocolSettings, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_ProtocolSettings, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_ProtocolSettings, TEXT("ToolTip"), TEXT("Settings specific to the capture protocol"));
				MetaData->SetValue(NewProp_CaptureType, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_CaptureType, TEXT("DisplayName"), TEXT("Output Format"));
				MetaData->SetValue(NewProp_CaptureType, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCapture.h"));
				MetaData->SetValue(NewProp_CaptureType, TEXT("ToolTip"), TEXT("The type of capture protocol to use"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCapture(Z_Construct_UClass_UMovieSceneCapture, &UMovieSceneCapture::StaticClass, TEXT("UMovieSceneCapture"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCapture);
	UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture_NoRegister()
	{
		return UAutomatedLevelSequenceCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_UAutomatedLevelSequenceCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCapture();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UAutomatedLevelSequenceCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_LevelSequenceActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequenceActor"), RF_Public|RF_Transient|RF_MarkAsNative) UWeakObjectProperty(CPP_PROPERTY_BASE(LevelSequenceActor, UAutomatedLevelSequenceCapture), 0x0044000800000000, Z_Construct_UClass_ALevelSequenceActor_NoRegister());
				UProperty* NewProp_LevelSequenceAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelSequenceAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LevelSequenceAsset, UAutomatedLevelSequenceCapture), 0x0040000800000000, Z_Construct_UScriptStruct_FStringAssetReference());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWriteEditDecisionList, UAutomatedLevelSequenceCapture, bool);
				UProperty* NewProp_bWriteEditDecisionList = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWriteEditDecisionList"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWriteEditDecisionList, UAutomatedLevelSequenceCapture), 0x0010000800004001, CPP_BOOL_PROPERTY_BITMASK(bWriteEditDecisionList, UAutomatedLevelSequenceCapture), sizeof(bool), true);
				UProperty* NewProp_BurnInOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurnInOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BurnInOptions, UAutomatedLevelSequenceCapture), 0x0010040800080009, Z_Construct_UClass_ULevelSequenceBurnInOptions_NoRegister());
				UProperty* NewProp_DelayBeforeWarmUp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayBeforeWarmUp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DelayBeforeWarmUp, UAutomatedLevelSequenceCapture), 0x0010040800004001);
				UProperty* NewProp_WarmUpFrameCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WarmUpFrameCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(WarmUpFrameCount, UAutomatedLevelSequenceCapture), 0x0010040800004001);
				UProperty* NewProp_EndFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EndFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(EndFrame, UAutomatedLevelSequenceCapture), 0x0010040800004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCustomEndFrame, UAutomatedLevelSequenceCapture, bool);
				UProperty* NewProp_bUseCustomEndFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCustomEndFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCustomEndFrame, UAutomatedLevelSequenceCapture), 0x0010040800004001, CPP_BOOL_PROPERTY_BITMASK(bUseCustomEndFrame, UAutomatedLevelSequenceCapture), sizeof(bool), true);
				UProperty* NewProp_StartFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StartFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StartFrame, UAutomatedLevelSequenceCapture), 0x0010040800004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCustomStartFrame, UAutomatedLevelSequenceCapture, bool);
				UProperty* NewProp_bUseCustomStartFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCustomStartFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCustomStartFrame, UAutomatedLevelSequenceCapture), 0x0010040800004001, CPP_BOOL_PROPERTY_BITMASK(bUseCustomStartFrame, UAutomatedLevelSequenceCapture), sizeof(bool), true);
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_LevelSequenceActor, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_LevelSequenceActor, TEXT("ToolTip"), TEXT("The pre-existing level sequence actor to use for capture that specifies playback settings"));
				MetaData->SetValue(NewProp_LevelSequenceAsset, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_LevelSequenceAsset, TEXT("ToolTip"), TEXT("A level sequence asset to playback at runtime - used where the level sequence does not already exist in the world."));
				MetaData->SetValue(NewProp_bWriteEditDecisionList, TEXT("Category"), TEXT("Sequence"));
				MetaData->SetValue(NewProp_bWriteEditDecisionList, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_bWriteEditDecisionList, TEXT("ToolTip"), TEXT("Whether to write edit decision lists (EDLs) if the sequence contains shots"));
				MetaData->SetValue(NewProp_BurnInOptions, TEXT("Category"), TEXT("CaptureSettings"));
				MetaData->SetValue(NewProp_BurnInOptions, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BurnInOptions, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_DelayBeforeWarmUp, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_DelayBeforeWarmUp, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DelayBeforeWarmUp, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_DelayBeforeWarmUp, TEXT("ToolTip"), TEXT("The number of seconds to wait (in real-time) before we start playing back the warm up frames.  Useful for allowing post processing effects to settle down before capturing the animation."));
				MetaData->SetValue(NewProp_DelayBeforeWarmUp, TEXT("Units"), TEXT("Seconds"));
				MetaData->SetValue(NewProp_WarmUpFrameCount, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_WarmUpFrameCount, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_WarmUpFrameCount, TEXT("ToolTip"), TEXT("The number of extra frames to play before the sequence's start frame, to \"warm up\" the animation.  This is useful if your\n          animation contains particles or other runtime effects that are spawned into the scene earlier than your capture start frame"));
				MetaData->SetValue(NewProp_EndFrame, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_EndFrame, TEXT("EditCondition"), TEXT("bUseCustomEndFrame"));
				MetaData->SetValue(NewProp_EndFrame, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_EndFrame, TEXT("ToolTip"), TEXT("Frame number to end capturing.  The frame number range depends on whether the bUseRelativeFrameNumbers option is enabled."));
				MetaData->SetValue(NewProp_bUseCustomEndFrame, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bUseCustomEndFrame, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_bUseCustomEndFrame, TEXT("ToolTip"), TEXT("When enabled, the EndFrame setting will override the default ending frame number"));
				MetaData->SetValue(NewProp_StartFrame, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_StartFrame, TEXT("EditCondition"), TEXT("bUseCustomStartFrame"));
				MetaData->SetValue(NewProp_StartFrame, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_StartFrame, TEXT("ToolTip"), TEXT("Frame number to start capturing.  The frame number range depends on whether the bUseRelativeFrameNumbers option is enabled."));
				MetaData->SetValue(NewProp_bUseCustomStartFrame, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bUseCustomStartFrame, TEXT("ModuleRelativePath"), TEXT("Public/AutomatedLevelSequenceCapture.h"));
				MetaData->SetValue(NewProp_bUseCustomStartFrame, TEXT("ToolTip"), TEXT("When enabled, the StartFrame setting will override the default starting frame number"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAutomatedLevelSequenceCapture(Z_Construct_UClass_UAutomatedLevelSequenceCapture, &UAutomatedLevelSequenceCapture::StaticClass, TEXT("UAutomatedLevelSequenceCapture"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAutomatedLevelSequenceCapture);
	UClass* Z_Construct_UClass_ULevelCapture_NoRegister()
	{
		return ULevelCapture::StaticClass();
	}
	UClass* Z_Construct_UClass_ULevelCapture()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCapture();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = ULevelCapture::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PrerequisiteActorId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrerequisiteActorId"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PrerequisiteActorId, ULevelCapture), 0x0040000000000000, Z_Construct_UScriptStruct_FGuid());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoStartCapture, ULevelCapture, bool);
				UProperty* NewProp_bAutoStartCapture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoStartCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoStartCapture, ULevelCapture), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoStartCapture, ULevelCapture), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LevelCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LevelCapture.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_PrerequisiteActorId, TEXT("ModuleRelativePath"), TEXT("Public/LevelCapture.h"));
				MetaData->SetValue(NewProp_PrerequisiteActorId, TEXT("ToolTip"), TEXT("Copy of the ID from PrerequisiteActor. Required because JSON serialization exports the path of the object, rather that its GUID"));
				MetaData->SetValue(NewProp_bAutoStartCapture, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_bAutoStartCapture, TEXT("ModuleRelativePath"), TEXT("Public/LevelCapture.h"));
				MetaData->SetValue(NewProp_bAutoStartCapture, TEXT("ToolTip"), TEXT("Specifies whether the capture should start immediately, or whether it will be invoked externally (through StartMovieCapture/StopMovieCapture exec commands)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULevelCapture(Z_Construct_UClass_ULevelCapture, &ULevelCapture::StaticClass, TEXT("ULevelCapture"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULevelCapture);
	UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime()
	{
		struct MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMovieSceneCaptureEnvironment();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCaptureElapsedTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MovieSceneCaptureEnvironment_eventGetCaptureElapsedTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Cinematics|Capture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the total elapsed time of the current capture in seconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber()
	{
		struct MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMovieSceneCaptureEnvironment();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCaptureFrameNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, MovieSceneCaptureEnvironment_eventGetCaptureFrameNumber_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Cinematics|Capture"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the frame number of the current capture"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment_NoRegister()
	{
		return UMovieSceneCaptureEnvironment::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneCaptureEnvironment()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UMovieSceneCaptureEnvironment::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureElapsedTime(), "GetCaptureElapsedTime"); // 897875960
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMovieSceneCaptureEnvironment_GetCaptureFrameNumber(), "GetCaptureFrameNumber"); // 3304798586
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovieSceneCaptureEnvironment.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MovieSceneCaptureEnvironment.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneCaptureEnvironment(Z_Construct_UClass_UMovieSceneCaptureEnvironment, &UMovieSceneCaptureEnvironment::StaticClass, TEXT("UMovieSceneCaptureEnvironment"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneCaptureEnvironment);
	UClass* Z_Construct_UClass_UFrameGrabberProtocolSettings_NoRegister()
	{
		return UFrameGrabberProtocolSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UFrameGrabberProtocolSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCaptureProtocolSettings();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UFrameGrabberProtocolSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Protocols/FrameGrabberProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/FrameGrabberProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFrameGrabberProtocolSettings(Z_Construct_UClass_UFrameGrabberProtocolSettings, &UFrameGrabberProtocolSettings::StaticClass, TEXT("UFrameGrabberProtocolSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFrameGrabberProtocolSettings);
	UClass* Z_Construct_UClass_UBmpImageCaptureSettings_NoRegister()
	{
		return UBmpImageCaptureSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UBmpImageCaptureSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCaptureProtocolSettings();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UBmpImageCaptureSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Image Encoding"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Protocols/ImageSequenceProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/ImageSequenceProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBmpImageCaptureSettings(Z_Construct_UClass_UBmpImageCaptureSettings, &UBmpImageCaptureSettings::StaticClass, TEXT("UBmpImageCaptureSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBmpImageCaptureSettings);
	UClass* Z_Construct_UClass_UImageCaptureSettings_NoRegister()
	{
		return UImageCaptureSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UImageCaptureSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFrameGrabberProtocolSettings();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UImageCaptureSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CompressionQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionQuality"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CompressionQuality, UImageCaptureSettings), 0x0010000000004001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Image Encoding"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Protocols/ImageSequenceProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/ImageSequenceProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("Category"), TEXT("ImageSettings"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMax"), TEXT("100"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/ImageSequenceProtocol.h"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ToolTip"), TEXT("Level of compression to apply to the image, between 1 (worst quality, best compression) and 100 (best quality, worst compression)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UImageCaptureSettings(Z_Construct_UClass_UImageCaptureSettings, &UImageCaptureSettings::StaticClass, TEXT("UImageCaptureSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UImageCaptureSettings);
	UEnum* Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EHDRCaptureGamut"), 0, Get_Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHDRCaptureGamut"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_Rec709")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_P3DCI")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_Rec2020")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_ACES")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_ACEScg")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("HCGM_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EHDRCaptureGamut");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("HCGM_ACES.DisplayName"), TEXT("ACES"));
			MetaData->SetValue(ReturnEnum, TEXT("HCGM_ACEScg.DisplayName"), TEXT("ACEScg"));
			MetaData->SetValue(ReturnEnum, TEXT("HCGM_P3DCI.DisplayName"), TEXT("P3 D65"));
			MetaData->SetValue(ReturnEnum, TEXT("HCGM_Rec2020.DisplayName"), TEXT("Rec.2020"));
			MetaData->SetValue(ReturnEnum, TEXT("HCGM_Rec709.DisplayName"), TEXT("Rec.709 / sRGB"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Used by UCompositionGraphCaptureSettings. Matches gamut oreder in TonemapCommon.usf OuputGamutMappingMatrix()"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut_CRC() { return 1258577632U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompositionGraphCapturePasses()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_MovieSceneCapture();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompositionGraphCapturePasses_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CompositionGraphCapturePasses"), sizeof(FCompositionGraphCapturePasses), Get_Z_Construct_UScriptStruct_FCompositionGraphCapturePasses_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompositionGraphCapturePasses"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCompositionGraphCapturePasses>, EStructFlags(0x00000201));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Value, FCompositionGraphCapturePasses), 0x0010000000000001);
			UProperty* NewProp_Value_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Value, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Composition Graph Settings"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompositionGraphCapturePasses_CRC() { return 2385675453U; }
	UClass* Z_Construct_UClass_UCompositionGraphCaptureSettings_NoRegister()
	{
		return UCompositionGraphCaptureSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UCompositionGraphCaptureSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneCaptureProtocolSettings();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UCompositionGraphCaptureSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PostProcessingMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PostProcessingMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PostProcessingMaterial, UCompositionGraphCaptureSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FStringAssetReference());
				UProperty* NewProp_CaptureGamut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaptureGamut"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CaptureGamut, UCompositionGraphCaptureSettings), 0x0010000000004001, Z_Construct_UEnum_MovieSceneCapture_EHDRCaptureGamut());
				UProperty* NewProp_HDRCompressionQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HDRCompressionQuality"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(HDRCompressionQuality, UCompositionGraphCaptureSettings), 0x0010000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCaptureFramesInHDR, UCompositionGraphCaptureSettings, bool);
				UProperty* NewProp_bCaptureFramesInHDR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCaptureFramesInHDR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCaptureFramesInHDR, UCompositionGraphCaptureSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bCaptureFramesInHDR, UCompositionGraphCaptureSettings), sizeof(bool), true);
				UProperty* NewProp_IncludeRenderPasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IncludeRenderPasses"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IncludeRenderPasses, UCompositionGraphCaptureSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FCompositionGraphCapturePasses());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Composition Graph Options"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_PostProcessingMaterial, TEXT("AllowedClasses"), TEXT(""));
				MetaData->SetValue(NewProp_PostProcessingMaterial, TEXT("Category"), TEXT("Composition Graph Options"));
				MetaData->SetValue(NewProp_PostProcessingMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_PostProcessingMaterial, TEXT("ToolTip"), TEXT("Custom post processing material to use for rendering"));
				MetaData->SetValue(NewProp_CaptureGamut, TEXT("Category"), TEXT("Composition Graph Options"));
				MetaData->SetValue(NewProp_CaptureGamut, TEXT("EditCondition"), TEXT("bCaptureFramesInHDR"));
				MetaData->SetValue(NewProp_CaptureGamut, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_CaptureGamut, TEXT("ToolTip"), TEXT("The color gamut to use when storing HDR captured data. The gamut depends on whether the bCaptureFramesInHDR option is enabled."));
				MetaData->SetValue(NewProp_HDRCompressionQuality, TEXT("Category"), TEXT("Composition Graph Options"));
				MetaData->SetValue(NewProp_HDRCompressionQuality, TEXT("EditCondition"), TEXT("bCaptureFramesInHDR"));
				MetaData->SetValue(NewProp_HDRCompressionQuality, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_HDRCompressionQuality, TEXT("ToolTip"), TEXT("Compression Quality for HDR Frames (0 for no compression, 1 for default compression which can be slow)"));
				MetaData->SetValue(NewProp_bCaptureFramesInHDR, TEXT("Category"), TEXT("Composition Graph Options"));
				MetaData->SetValue(NewProp_bCaptureFramesInHDR, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_bCaptureFramesInHDR, TEXT("ToolTip"), TEXT("Whether to capture the frames as HDR textures (*.exr format)"));
				MetaData->SetValue(NewProp_IncludeRenderPasses, TEXT("Category"), TEXT("Composition Graph Options"));
				MetaData->SetValue(NewProp_IncludeRenderPasses, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/CompositionGraphCaptureProtocol.h"));
				MetaData->SetValue(NewProp_IncludeRenderPasses, TEXT("ToolTip"), TEXT("A list of render passes to include in the capture. Leave empty to export all available passes."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCompositionGraphCaptureSettings(Z_Construct_UClass_UCompositionGraphCaptureSettings, &UCompositionGraphCaptureSettings::StaticClass, TEXT("UCompositionGraphCaptureSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCompositionGraphCaptureSettings);
	UClass* Z_Construct_UClass_UVideoCaptureSettings_NoRegister()
	{
		return UVideoCaptureSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UVideoCaptureSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFrameGrabberProtocolSettings();
			Z_Construct_UPackage__Script_MovieSceneCapture();
			OuterClass = UVideoCaptureSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VideoCodec = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VideoCodec"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(VideoCodec, UVideoCaptureSettings), 0x0010040000004001);
				UProperty* NewProp_CompressionQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CompressionQuality"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CompressionQuality, UVideoCaptureSettings), 0x0010000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCompression, UVideoCaptureSettings, bool);
				UProperty* NewProp_bUseCompression = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCompression"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCompression, UVideoCaptureSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bUseCompression, UVideoCaptureSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Video Encoding"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Protocols/VideoCaptureProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/VideoCaptureProtocol.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_VideoCodec, TEXT("Category"), TEXT("VideoSettings"));
				MetaData->SetValue(NewProp_VideoCodec, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/VideoCaptureProtocol.h"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("Category"), TEXT("VideoSettings"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMax"), TEXT("100"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("EditCondition"), TEXT("bUseCompression"));
				MetaData->SetValue(NewProp_CompressionQuality, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/VideoCaptureProtocol.h"));
				MetaData->SetValue(NewProp_bUseCompression, TEXT("Category"), TEXT("VideoSettings"));
				MetaData->SetValue(NewProp_bUseCompression, TEXT("ModuleRelativePath"), TEXT("Public/Protocols/VideoCaptureProtocol.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVideoCaptureSettings(Z_Construct_UClass_UVideoCaptureSettings, &UVideoCaptureSettings::StaticClass, TEXT("UVideoCaptureSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVideoCaptureSettings);
	UPackage* Z_Construct_UPackage__Script_MovieSceneCapture()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MovieSceneCapture")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x7D441E11;
			Guid.B = 0x2ECFC01A;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
