// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "AnimGraphRuntime.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1AnimGraphRuntime() {}
	void UAnimSequencerInstance::StaticRegisterNativesUAnimSequencerInstance()
	{
	}
	IMPLEMENT_CLASS(UAnimSequencerInstance, 3504493110);
class UScriptStruct* FAnimNode_BlendSpacePlayer::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendSpacePlayer"), sizeof(FAnimNode_BlendSpacePlayer), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendSpacePlayer(FAnimNode_BlendSpacePlayer::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendSpacePlayer"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpacePlayer
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpacePlayer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendSpacePlayer")),new UScriptStruct::TCppStructOps<FAnimNode_BlendSpacePlayer>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpacePlayer;
class UScriptStruct* FAnimNode_AimOffsetLookAt::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_AimOffsetLookAt"), sizeof(FAnimNode_AimOffsetLookAt), Get_Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_AimOffsetLookAt(FAnimNode_AimOffsetLookAt::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_AimOffsetLookAt"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AimOffsetLookAt
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AimOffsetLookAt()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_AimOffsetLookAt")),new UScriptStruct::TCppStructOps<FAnimNode_AimOffsetLookAt>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AimOffsetLookAt;
class UScriptStruct* FAnimNode_ApplyAdditive::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_ApplyAdditive"), sizeof(FAnimNode_ApplyAdditive), Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ApplyAdditive(FAnimNode_ApplyAdditive::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_ApplyAdditive"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ApplyAdditive
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ApplyAdditive()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ApplyAdditive")),new UScriptStruct::TCppStructOps<FAnimNode_ApplyAdditive>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ApplyAdditive;
class UScriptStruct* FAnimNode_BlendListBase::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendListBase, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendListBase"), sizeof(FAnimNode_BlendListBase), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendListBase(FAnimNode_BlendListBase::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendListBase"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListBase
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListBase()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendListBase")),new UScriptStruct::TCppStructOps<FAnimNode_BlendListBase>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListBase;
class UScriptStruct* FAnimNode_BlendListByBool::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendListByBool, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendListByBool"), sizeof(FAnimNode_BlendListByBool), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendListByBool(FAnimNode_BlendListByBool::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendListByBool"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByBool
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByBool()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendListByBool")),new UScriptStruct::TCppStructOps<FAnimNode_BlendListByBool>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByBool;
class UScriptStruct* FAnimNode_BlendListByEnum::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendListByEnum"), sizeof(FAnimNode_BlendListByEnum), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendListByEnum(FAnimNode_BlendListByEnum::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendListByEnum"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByEnum
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByEnum()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendListByEnum")),new UScriptStruct::TCppStructOps<FAnimNode_BlendListByEnum>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByEnum;
class UScriptStruct* FAnimNode_BlendListByInt::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendListByInt, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendListByInt"), sizeof(FAnimNode_BlendListByInt), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendListByInt(FAnimNode_BlendListByInt::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendListByInt"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByInt
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByInt()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendListByInt")),new UScriptStruct::TCppStructOps<FAnimNode_BlendListByInt>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendListByInt;
class UScriptStruct* FAnimNode_BlendSpaceEvaluator::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BlendSpaceEvaluator"), sizeof(FAnimNode_BlendSpaceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BlendSpaceEvaluator(FAnimNode_BlendSpaceEvaluator::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BlendSpaceEvaluator"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpaceEvaluator
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpaceEvaluator()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BlendSpaceEvaluator")),new UScriptStruct::TCppStructOps<FAnimNode_BlendSpaceEvaluator>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BlendSpaceEvaluator;
class UScriptStruct* FAnimNode_CopyPoseFromMesh::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_CopyPoseFromMesh"), sizeof(FAnimNode_CopyPoseFromMesh), Get_Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_CopyPoseFromMesh(FAnimNode_CopyPoseFromMesh::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_CopyPoseFromMesh"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyPoseFromMesh
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyPoseFromMesh()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_CopyPoseFromMesh")),new UScriptStruct::TCppStructOps<FAnimNode_CopyPoseFromMesh>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyPoseFromMesh;
class UScriptStruct* FAnimNode_CurveSource::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CurveSource();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CurveSource_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_CurveSource, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_CurveSource"), sizeof(FAnimNode_CurveSource), Get_Z_Construct_UScriptStruct_FAnimNode_CurveSource_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_CurveSource(FAnimNode_CurveSource::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_CurveSource"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CurveSource
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CurveSource()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_CurveSource")),new UScriptStruct::TCppStructOps<FAnimNode_CurveSource>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CurveSource;
class UScriptStruct* FAnimNode_LayeredBoneBlend::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_LayeredBoneBlend"), sizeof(FAnimNode_LayeredBoneBlend), Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_LayeredBoneBlend(FAnimNode_LayeredBoneBlend::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_LayeredBoneBlend"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LayeredBoneBlend
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LayeredBoneBlend()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_LayeredBoneBlend")),new UScriptStruct::TCppStructOps<FAnimNode_LayeredBoneBlend>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LayeredBoneBlend;
static class UEnum* EModifyCurveApplyMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EModifyCurveApplyMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EModifyCurveApplyMode(EModifyCurveApplyMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EModifyCurveApplyMode"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_ModifyCurve::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyCurve();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyCurve_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ModifyCurve, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_ModifyCurve"), sizeof(FAnimNode_ModifyCurve), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyCurve_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ModifyCurve(FAnimNode_ModifyCurve::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_ModifyCurve"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyCurve
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyCurve()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ModifyCurve")),new UScriptStruct::TCppStructOps<FAnimNode_ModifyCurve>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyCurve;
class UScriptStruct* FAnimNode_MultiWayBlend::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_MultiWayBlend"), sizeof(FAnimNode_MultiWayBlend), Get_Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_MultiWayBlend(FAnimNode_MultiWayBlend::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_MultiWayBlend"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MultiWayBlend
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MultiWayBlend()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_MultiWayBlend")),new UScriptStruct::TCppStructOps<FAnimNode_MultiWayBlend>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MultiWayBlend;
class UScriptStruct* FAnimNode_PoseHandler::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseHandler();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseHandler_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_PoseHandler, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_PoseHandler"), sizeof(FAnimNode_PoseHandler), Get_Z_Construct_UScriptStruct_FAnimNode_PoseHandler_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_PoseHandler(FAnimNode_PoseHandler::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_PoseHandler"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseHandler
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseHandler()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_PoseHandler")),new UScriptStruct::TCppStructOps<FAnimNode_PoseHandler>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseHandler;
class UScriptStruct* FAnimNode_PoseBlendNode::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_PoseBlendNode"), sizeof(FAnimNode_PoseBlendNode), Get_Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_PoseBlendNode(FAnimNode_PoseBlendNode::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_PoseBlendNode"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseBlendNode
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseBlendNode()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_PoseBlendNode")),new UScriptStruct::TCppStructOps<FAnimNode_PoseBlendNode>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseBlendNode;
class UScriptStruct* FAnimNode_PoseByName::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseByName();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseByName_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_PoseByName, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_PoseByName"), sizeof(FAnimNode_PoseByName), Get_Z_Construct_UScriptStruct_FAnimNode_PoseByName_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_PoseByName(FAnimNode_PoseByName::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_PoseByName"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseByName
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseByName()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_PoseByName")),new UScriptStruct::TCppStructOps<FAnimNode_PoseByName>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseByName;
static class UEnum* EPoseDriverType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EPoseDriverType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPoseDriverType(EPoseDriverType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EPoseDriverType"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_PoseDriver::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseDriver();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseDriver_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_PoseDriver, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_PoseDriver"), sizeof(FAnimNode_PoseDriver), Get_Z_Construct_UScriptStruct_FAnimNode_PoseDriver_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_PoseDriver(FAnimNode_PoseDriver::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_PoseDriver"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseDriver
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseDriver()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_PoseDriver")),new UScriptStruct::TCppStructOps<FAnimNode_PoseDriver>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseDriver;
static class UEnum* ESnapshotSourceMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("ESnapshotSourceMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESnapshotSourceMode(ESnapshotSourceMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("ESnapshotSourceMode"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_PoseSnapshot::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_PoseSnapshot"), sizeof(FAnimNode_PoseSnapshot), Get_Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_PoseSnapshot(FAnimNode_PoseSnapshot::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_PoseSnapshot"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseSnapshot
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseSnapshot()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_PoseSnapshot")),new UScriptStruct::TCppStructOps<FAnimNode_PoseSnapshot>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_PoseSnapshot;
class UScriptStruct* FAnimNode_RandomPlayer::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RandomPlayer();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RandomPlayer_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RandomPlayer, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_RandomPlayer"), sizeof(FAnimNode_RandomPlayer), Get_Z_Construct_UScriptStruct_FAnimNode_RandomPlayer_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RandomPlayer(FAnimNode_RandomPlayer::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_RandomPlayer"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RandomPlayer
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RandomPlayer()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RandomPlayer")),new UScriptStruct::TCppStructOps<FAnimNode_RandomPlayer>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RandomPlayer;
class UScriptStruct* FRandomPlayerSequenceEntry::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("RandomPlayerSequenceEntry"), sizeof(FRandomPlayerSequenceEntry), Get_Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FRandomPlayerSequenceEntry(FRandomPlayerSequenceEntry::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("RandomPlayerSequenceEntry"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFRandomPlayerSequenceEntry
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFRandomPlayerSequenceEntry()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("RandomPlayerSequenceEntry")),new UScriptStruct::TCppStructOps<FRandomPlayerSequenceEntry>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFRandomPlayerSequenceEntry;
static class UEnum* ERefPoseType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("ERefPoseType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ERefPoseType(ERefPoseType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("ERefPoseType"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_MeshSpaceRefPose::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_MeshSpaceRefPose"), sizeof(FAnimNode_MeshSpaceRefPose), Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_MeshSpaceRefPose(FAnimNode_MeshSpaceRefPose::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_MeshSpaceRefPose"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MeshSpaceRefPose
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MeshSpaceRefPose()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_MeshSpaceRefPose")),new UScriptStruct::TCppStructOps<FAnimNode_MeshSpaceRefPose>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_MeshSpaceRefPose;
class UScriptStruct* FAnimNode_RefPose::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RefPose, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_RefPose"), sizeof(FAnimNode_RefPose), Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RefPose(FAnimNode_RefPose::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_RefPose"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RefPose
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RefPose()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RefPose")),new UScriptStruct::TCppStructOps<FAnimNode_RefPose>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RefPose;
class UScriptStruct* FAnimNode_Root::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Root, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_Root"), sizeof(FAnimNode_Root), Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Root(FAnimNode_Root::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_Root"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Root
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Root()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Root")),new UScriptStruct::TCppStructOps<FAnimNode_Root>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Root;
class UScriptStruct* FAnimNode_RotateRootBone::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RotateRootBone, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_RotateRootBone"), sizeof(FAnimNode_RotateRootBone), Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RotateRootBone(FAnimNode_RotateRootBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_RotateRootBone"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotateRootBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotateRootBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RotateRootBone")),new UScriptStruct::TCppStructOps<FAnimNode_RotateRootBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotateRootBone;
class UScriptStruct* FAnimNode_RotationOffsetBlendSpace::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_RotationOffsetBlendSpace"), sizeof(FAnimNode_RotationOffsetBlendSpace), Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace(FAnimNode_RotationOffsetBlendSpace::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_RotationOffsetBlendSpace"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationOffsetBlendSpace
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationOffsetBlendSpace()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RotationOffsetBlendSpace")),new UScriptStruct::TCppStructOps<FAnimNode_RotationOffsetBlendSpace>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationOffsetBlendSpace;
static class UEnum* ESequenceEvalReinit_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("ESequenceEvalReinit"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESequenceEvalReinit(ESequenceEvalReinit_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("ESequenceEvalReinit"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_SequenceEvaluator::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_SequenceEvaluator"), sizeof(FAnimNode_SequenceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SequenceEvaluator(FAnimNode_SequenceEvaluator::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_SequenceEvaluator"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SequenceEvaluator
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SequenceEvaluator()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SequenceEvaluator")),new UScriptStruct::TCppStructOps<FAnimNode_SequenceEvaluator>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SequenceEvaluator;
class UScriptStruct* FAnimNode_Slot::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Slot, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_Slot"), sizeof(FAnimNode_Slot), Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Slot(FAnimNode_Slot::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_Slot"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Slot
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Slot()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Slot")),new UScriptStruct::TCppStructOps<FAnimNode_Slot>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Slot;
class UScriptStruct* FAnimNode_TwoWayBlend::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_TwoWayBlend"), sizeof(FAnimNode_TwoWayBlend), Get_Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_TwoWayBlend(FAnimNode_TwoWayBlend::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_TwoWayBlend"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoWayBlend
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoWayBlend()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_TwoWayBlend")),new UScriptStruct::TCppStructOps<FAnimNode_TwoWayBlend>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoWayBlend;
class UScriptStruct* FAnimSequencerInstanceProxy::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimSequencerInstanceProxy"), sizeof(FAnimSequencerInstanceProxy), Get_Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimSequencerInstanceProxy(FAnimSequencerInstanceProxy::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimSequencerInstanceProxy"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimSequencerInstanceProxy
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimSequencerInstanceProxy()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimSequencerInstanceProxy")),new UScriptStruct::TCppStructOps<FAnimSequencerInstanceProxy>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimSequencerInstanceProxy;
class UScriptStruct* FAnimNode_SkeletalControlBase::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_SkeletalControlBase"), sizeof(FAnimNode_SkeletalControlBase), Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SkeletalControlBase(FAnimNode_SkeletalControlBase::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_SkeletalControlBase"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SkeletalControlBase")),new UScriptStruct::TCppStructOps<FAnimNode_SkeletalControlBase>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SkeletalControlBase;
static class UEnum* ESphericalLimitType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("ESphericalLimitType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESphericalLimitType(ESphericalLimitType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("ESphericalLimitType"), false, nullptr, nullptr);
static class UEnum* AnimPhysSimSpaceType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysSimSpaceType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_AnimPhysSimSpaceType(AnimPhysSimSpaceType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysSimSpaceType"), false, nullptr, nullptr);
static class UEnum* AnimPhysLinearConstraintType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysLinearConstraintType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_AnimPhysLinearConstraintType(AnimPhysLinearConstraintType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysLinearConstraintType"), false, nullptr, nullptr);
static class UEnum* AnimPhysAngularConstraintType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysAngularConstraintType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_AnimPhysAngularConstraintType(AnimPhysAngularConstraintType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysAngularConstraintType"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_AnimDynamics::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AnimDynamics();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AnimDynamics_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_AnimDynamics, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_AnimDynamics"), sizeof(FAnimNode_AnimDynamics), Get_Z_Construct_UScriptStruct_FAnimNode_AnimDynamics_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_AnimDynamics(FAnimNode_AnimDynamics::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_AnimDynamics"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AnimDynamics
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AnimDynamics()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_AnimDynamics")),new UScriptStruct::TCppStructOps<FAnimNode_AnimDynamics>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_AnimDynamics;
class UScriptStruct* FAnimPhysSphericalLimit::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysSphericalLimit();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimPhysSphericalLimit_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimPhysSphericalLimit, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysSphericalLimit"), sizeof(FAnimPhysSphericalLimit), Get_Z_Construct_UScriptStruct_FAnimPhysSphericalLimit_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimPhysSphericalLimit(FAnimPhysSphericalLimit::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysSphericalLimit"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysSphericalLimit
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysSphericalLimit()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimPhysSphericalLimit")),new UScriptStruct::TCppStructOps<FAnimPhysSphericalLimit>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysSphericalLimit;
class UScriptStruct* FAnimPhysPlanarLimit::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysPlanarLimit();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimPhysPlanarLimit_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimPhysPlanarLimit, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysPlanarLimit"), sizeof(FAnimPhysPlanarLimit), Get_Z_Construct_UScriptStruct_FAnimPhysPlanarLimit_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimPhysPlanarLimit(FAnimPhysPlanarLimit::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysPlanarLimit"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysPlanarLimit
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysPlanarLimit()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimPhysPlanarLimit")),new UScriptStruct::TCppStructOps<FAnimPhysPlanarLimit>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysPlanarLimit;
class UScriptStruct* FAnimPhysConstraintSetup::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysConstraintSetup();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimPhysConstraintSetup_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimPhysConstraintSetup, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimPhysConstraintSetup"), sizeof(FAnimPhysConstraintSetup), Get_Z_Construct_UScriptStruct_FAnimPhysConstraintSetup_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimPhysConstraintSetup(FAnimPhysConstraintSetup::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimPhysConstraintSetup"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysConstraintSetup
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysConstraintSetup()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimPhysConstraintSetup")),new UScriptStruct::TCppStructOps<FAnimPhysConstraintSetup>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimPhysConstraintSetup;
static class UEnum* EDrivenDestinationMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EDrivenDestinationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDrivenDestinationMode(EDrivenDestinationMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EDrivenDestinationMode"), false, nullptr, nullptr);
static class UEnum* EDrivenBoneModificationMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EDrivenBoneModificationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDrivenBoneModificationMode(EDrivenBoneModificationMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EDrivenBoneModificationMode"), false, nullptr, nullptr);
static class UEnum* EComponentType_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EComponentType, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EComponentType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EComponentType(EComponentType_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EComponentType"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_BoneDrivenController::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_BoneDrivenController"), sizeof(FAnimNode_BoneDrivenController), Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_BoneDrivenController(FAnimNode_BoneDrivenController::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_BoneDrivenController"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_BoneDrivenController")),new UScriptStruct::TCppStructOps<FAnimNode_BoneDrivenController>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_BoneDrivenController;
class UScriptStruct* FAnimNode_CopyBone::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_CopyBone, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_CopyBone"), sizeof(FAnimNode_CopyBone), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_CopyBone(FAnimNode_CopyBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_CopyBone"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_CopyBone")),new UScriptStruct::TCppStructOps<FAnimNode_CopyBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBone;
static class UEnum* CopyBoneDeltaMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("CopyBoneDeltaMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_CopyBoneDeltaMode(CopyBoneDeltaMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("CopyBoneDeltaMode"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_CopyBoneDelta::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_CopyBoneDelta"), sizeof(FAnimNode_CopyBoneDelta), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_CopyBoneDelta(FAnimNode_CopyBoneDelta::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_CopyBoneDelta"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBoneDelta
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBoneDelta()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_CopyBoneDelta")),new UScriptStruct::TCppStructOps<FAnimNode_CopyBoneDelta>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_CopyBoneDelta;
class UScriptStruct* FAnimNode_Fabrik::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Fabrik, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_Fabrik"), sizeof(FAnimNode_Fabrik), Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Fabrik(FAnimNode_Fabrik::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_Fabrik"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Fabrik")),new UScriptStruct::TCppStructOps<FAnimNode_Fabrik>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Fabrik;
class UScriptStruct* FAnimNode_HandIKRetargeting::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_HandIKRetargeting"), sizeof(FAnimNode_HandIKRetargeting), Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_HandIKRetargeting(FAnimNode_HandIKRetargeting::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_HandIKRetargeting"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_HandIKRetargeting")),new UScriptStruct::TCppStructOps<FAnimNode_HandIKRetargeting>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_HandIKRetargeting;
class UScriptStruct* FAnimNode_LegIK::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LegIK();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LegIK_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_LegIK, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_LegIK"), sizeof(FAnimNode_LegIK), Get_Z_Construct_UScriptStruct_FAnimNode_LegIK_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_LegIK(FAnimNode_LegIK::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_LegIK"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LegIK
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LegIK()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_LegIK")),new UScriptStruct::TCppStructOps<FAnimNode_LegIK>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LegIK;
class UScriptStruct* FIKChain::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FIKChain();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FIKChain_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FIKChain, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("IKChain"), sizeof(FIKChain), Get_Z_Construct_UScriptStruct_FIKChain_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FIKChain(FIKChain::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("IKChain"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChain
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChain()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("IKChain")),new UScriptStruct::TCppStructOps<FIKChain>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChain;
class UScriptStruct* FIKChainLink::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FIKChainLink();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FIKChainLink_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FIKChainLink, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("IKChainLink"), sizeof(FIKChainLink), Get_Z_Construct_UScriptStruct_FIKChainLink_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FIKChainLink(FIKChainLink::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("IKChainLink"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChainLink
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChainLink()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("IKChainLink")),new UScriptStruct::TCppStructOps<FIKChainLink>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFIKChainLink;
class UScriptStruct* FAnimLegIKData::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKData();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimLegIKData, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimLegIKData"), sizeof(FAnimLegIKData), Get_Z_Construct_UScriptStruct_FAnimLegIKData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimLegIKData(FAnimLegIKData::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimLegIKData"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKData
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimLegIKData")),new UScriptStruct::TCppStructOps<FAnimLegIKData>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKData;
class UScriptStruct* FAnimLegIKDefinition::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKDefinition();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKDefinition_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimLegIKDefinition, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimLegIKDefinition"), sizeof(FAnimLegIKDefinition), Get_Z_Construct_UScriptStruct_FAnimLegIKDefinition_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimLegIKDefinition(FAnimLegIKDefinition::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimLegIKDefinition"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKDefinition
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKDefinition()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimLegIKDefinition")),new UScriptStruct::TCppStructOps<FAnimLegIKDefinition>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimLegIKDefinition;
static class UEnum* EInterpolationBlend_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EInterpolationBlend"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EInterpolationBlend(EInterpolationBlend_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EInterpolationBlend"), false, nullptr, nullptr);
static class UEnum* EAxisOption_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EAxisOption, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EAxisOption"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAxisOption(EAxisOption_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EAxisOption"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_LookAt::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_LookAt, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_LookAt"), sizeof(FAnimNode_LookAt), Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_LookAt(FAnimNode_LookAt::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_LookAt"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_LookAt")),new UScriptStruct::TCppStructOps<FAnimNode_LookAt>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_LookAt;
static class UEnum* EBoneModificationMode_StaticEnum()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("EBoneModificationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBoneModificationMode(EBoneModificationMode_StaticEnum, TEXT("/Script/AnimGraphRuntime"), TEXT("EBoneModificationMode"), false, nullptr, nullptr);
class UScriptStruct* FAnimNode_ModifyBone::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ModifyBone, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_ModifyBone"), sizeof(FAnimNode_ModifyBone), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ModifyBone(FAnimNode_ModifyBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_ModifyBone"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ModifyBone")),new UScriptStruct::TCppStructOps<FAnimNode_ModifyBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ModifyBone;
class UScriptStruct* FAnimNode_ObserveBone::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_ObserveBone, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_ObserveBone"), sizeof(FAnimNode_ObserveBone), Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_ObserveBone(FAnimNode_ObserveBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_ObserveBone"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_ObserveBone")),new UScriptStruct::TCppStructOps<FAnimNode_ObserveBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_ObserveBone;
class UScriptStruct* FAnimNode_RotationMultiplier::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_RotationMultiplier"), sizeof(FAnimNode_RotationMultiplier), Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_RotationMultiplier(FAnimNode_RotationMultiplier::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_RotationMultiplier"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_RotationMultiplier")),new UScriptStruct::TCppStructOps<FAnimNode_RotationMultiplier>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_RotationMultiplier;
class UScriptStruct* FAnimNode_SpringBone::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SpringBone, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_SpringBone"), sizeof(FAnimNode_SpringBone), Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SpringBone(FAnimNode_SpringBone::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_SpringBone"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SpringBone")),new UScriptStruct::TCppStructOps<FAnimNode_SpringBone>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_SpringBone;
class UScriptStruct* FAnimNode_Trail::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_Trail, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_Trail"), sizeof(FAnimNode_Trail), Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_Trail(FAnimNode_Trail::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_Trail"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_Trail")),new UScriptStruct::TCppStructOps<FAnimNode_Trail>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_Trail;
class UScriptStruct* FAnimNode_TwistCorrectiveNode::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_TwistCorrectiveNode"), sizeof(FAnimNode_TwistCorrectiveNode), Get_Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_TwistCorrectiveNode(FAnimNode_TwistCorrectiveNode::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_TwistCorrectiveNode"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwistCorrectiveNode
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwistCorrectiveNode()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_TwistCorrectiveNode")),new UScriptStruct::TCppStructOps<FAnimNode_TwistCorrectiveNode>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwistCorrectiveNode;
class UScriptStruct* FReferenceBoneFrame::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FReferenceBoneFrame();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FReferenceBoneFrame_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FReferenceBoneFrame, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("ReferenceBoneFrame"), sizeof(FReferenceBoneFrame), Get_Z_Construct_UScriptStruct_FReferenceBoneFrame_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FReferenceBoneFrame(FReferenceBoneFrame::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("ReferenceBoneFrame"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFReferenceBoneFrame
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFReferenceBoneFrame()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ReferenceBoneFrame")),new UScriptStruct::TCppStructOps<FReferenceBoneFrame>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFReferenceBoneFrame;
class UScriptStruct* FAxis::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAxis();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAxis_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAxis, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("Axis"), sizeof(FAxis), Get_Z_Construct_UScriptStruct_FAxis_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAxis(FAxis::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("Axis"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAxis
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAxis()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("Axis")),new UScriptStruct::TCppStructOps<FAxis>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAxis;
class UScriptStruct* FAnimNode_TwoBoneIK::StaticStruct()
{
	extern ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK();
		extern ANIMGRAPHRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK, Z_Construct_UPackage__Script_AnimGraphRuntime(), TEXT("AnimNode_TwoBoneIK"), sizeof(FAnimNode_TwoBoneIK), Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_TwoBoneIK(FAnimNode_TwoBoneIK::StaticStruct, TEXT("/Script/AnimGraphRuntime"), TEXT("AnimNode_TwoBoneIK"), false, nullptr, nullptr);
static struct FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK
{
	FScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_TwoBoneIK")),new UScriptStruct::TCppStructOps<FAnimNode_TwoBoneIK>);
	}
} ScriptStruct_AnimGraphRuntime_StaticRegisterNativesFAnimNode_TwoBoneIK;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UAnimInstance();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendSpaceBase_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendSampleData();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlendFilter();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseLink();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Base();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputScaleBias();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAlphaBlend();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendProfile_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAlphaBlendOption();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveSourceInterface_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECurveBlendOption();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputBlendPose();
	ENGINE_API class UClass* Z_Construct_UClass_UPoseAsset_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPoseSnapshot();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequence_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimSequenceBase_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimInstanceProxy();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FComponentSpacePoseLink();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimPhysCollisionType();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_AnimPhysTwistAxis();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneControlSpace();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EBoneRotationSource();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EAxis();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimCurveParam();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();

	ANIMGRAPHRUNTIME_API class UClass* Z_Construct_UClass_UAnimSequencerInstance_NoRegister();
	ANIMGRAPHRUNTIME_API class UClass* Z_Construct_UClass_UAnimSequencerInstance();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CurveSource();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyCurve();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseHandler();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseByName();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseDriver();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RandomPlayer();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AnimDynamics();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysSphericalLimit();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysPlanarLimit();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysConstraintSetup();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LegIK();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FIKChain();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FIKChainLink();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKData();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKDefinition();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt();
	ANIMGRAPHRUNTIME_API class UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FReferenceBoneFrame();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAxis();
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK();
	ANIMGRAPHRUNTIME_API class UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime();
	UClass* Z_Construct_UClass_UAnimSequencerInstance_NoRegister()
	{
		return UAnimSequencerInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UAnimSequencerInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UAnimInstance();
			Z_Construct_UPackage__Script_AnimGraphRuntime();
			OuterClass = UAnimSequencerInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900088;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("AnimInstance"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("AnimSequencerInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("false"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/AnimSequencerInstance.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAnimSequencerInstance(Z_Construct_UClass_UAnimSequencerInstance, &UAnimSequencerInstance::StaticClass, TEXT("UAnimSequencerInstance"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAnimSequencerInstance);
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendSpacePlayer"), sizeof(FAnimNode_BlendSpacePlayer), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendSpacePlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendSpacePlayer>, EStructFlags(0x00000201));
			UProperty* NewProp_PreviousBlendSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PreviousBlendSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PreviousBlendSpace, FAnimNode_BlendSpacePlayer), 0x0020080000002000, Z_Construct_UClass_UBlendSpaceBase_NoRegister());
			UProperty* NewProp_BlendSampleDataCache = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendSampleDataCache"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendSampleDataCache, FAnimNode_BlendSpacePlayer), 0x0020080000000000);
			UProperty* NewProp_BlendSampleDataCache_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendSampleDataCache, TEXT("BlendSampleDataCache"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlendSampleData());
			UProperty* NewProp_BlendFilter = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendFilter"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlendFilter, FAnimNode_BlendSpacePlayer), 0x0020080000000000, Z_Construct_UScriptStruct_FBlendFilter());
			UProperty* NewProp_BlendSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BlendSpace, FAnimNode_BlendSpacePlayer), 0x0010000000000005, Z_Construct_UClass_UBlendSpaceBase_NoRegister());
			UProperty* NewProp_StartPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartPosition, FAnimNode_BlendSpacePlayer), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoop, FAnimNode_BlendSpacePlayer, bool);
			UProperty* NewProp_bLoop = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoop, FAnimNode_BlendSpacePlayer), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLoop, FAnimNode_BlendSpacePlayer), sizeof(bool), true);
			UProperty* NewProp_PlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PlayRate, FAnimNode_BlendSpacePlayer), 0x0010000000000005);
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Z, FAnimNode_BlendSpacePlayer), 0x0010000000000005);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Y, FAnimNode_BlendSpacePlayer), 0x0010000000000005);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(X, FAnimNode_BlendSpacePlayer), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_PreviousBlendSpace, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendSampleDataCache, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendFilter, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BlendSpace, TEXT("ToolTip"), TEXT("The blendspace asset to play"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("DefaultValue"), TEXT("0.f"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ToolTip"), TEXT("The start up position in [0, 1], it only applies when reinitialized\nif you loop, it will still start from 0.f after finishing the round"));
			MetaData->SetValue(NewProp_bLoop, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bLoop, TEXT("DefaultValue"), TEXT("true"));
			MetaData->SetValue(NewProp_bLoop, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_bLoop, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bLoop, TEXT("ToolTip"), TEXT("Should the animation continue looping when it reaches the end?"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("DefaultValue"), TEXT("1.0"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_PlayRate, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PlayRate, TEXT("ToolTip"), TEXT("The play rate multiplier. Can be negative, which will cause the animation to play in reverse."));
			MetaData->SetValue(NewProp_Z, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_Z, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_Z, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Z, TEXT("ToolTip"), TEXT("The Z coordinate to sample in the blendspace"));
			MetaData->SetValue(NewProp_Y, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_Y, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_Y, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Y, TEXT("ToolTip"), TEXT("The Y coordinate to sample in the blendspace"));
			MetaData->SetValue(NewProp_X, TEXT("Category"), TEXT("Coordinates"));
			MetaData->SetValue(NewProp_X, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpacePlayer.h"));
			MetaData->SetValue(NewProp_X, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_X, TEXT("ToolTip"), TEXT("The X coordinate to sample in the blendspace"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer_CRC() { return 475806784U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_AimOffsetLookAt"), sizeof(FAnimNode_AimOffsetLookAt), Get_Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_AimOffsetLookAt"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer(), new UScriptStruct::TCppStructOps<FAnimNode_AimOffsetLookAt>, EStructFlags(0x00000201));
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_AimOffsetLookAt), 0x0010000000000005);
			UProperty* NewProp_SourceSocketName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourceSocketName, FAnimNode_AimOffsetLookAt), 0x0010000000000005);
			UProperty* NewProp_LookAtLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LookAtLocation, FAnimNode_AimOffsetLookAt), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLODEnabled, FAnimNode_AimOffsetLookAt, bool);
			UProperty* NewProp_bIsLODEnabled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsLODEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLODEnabled, FAnimNode_AimOffsetLookAt), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsLODEnabled, FAnimNode_AimOffsetLookAt), sizeof(bool), true);
			UProperty* NewProp_LODThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODThreshold, FAnimNode_AimOffsetLookAt), 0x0010000000000005);
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_AimOffsetLookAt), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("LookAt"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("Category"), TEXT("LookAt"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(NewProp_SourceSocketName, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("Category"), TEXT("LookAt"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bIsLODEnabled, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("Category"), TEXT("Performance"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("DisplayName"), TEXT("LOD Threshold"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ToolTip"), TEXT("* Max LOD that this node is allowed to run\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\n* when the component LOD becomes 3, it will stop update/evaluate\n* currently transition would be issue and that has to be re-visited"));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_AimOffsetLookAt.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AimOffsetLookAt_CRC() { return 1181817130U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ApplyAdditive"), sizeof(FAnimNode_ApplyAdditive), Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ApplyAdditive"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ApplyAdditive>, EStructFlags(0x00000201));
			UProperty* NewProp_ActualAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActualAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ActualAlpha, FAnimNode_ApplyAdditive), 0x0010000000002000);
			UProperty* NewProp_LODThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODThreshold, FAnimNode_ApplyAdditive), 0x0010000000000005);
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_ApplyAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_ApplyAdditive), 0x0010000000000005);
			UProperty* NewProp_Additive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Additive"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Additive, FAnimNode_ApplyAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_Base = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Base"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Base, FAnimNode_ApplyAdditive), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_ActualAlpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("Category"), TEXT("Performance"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("DisplayName"), TEXT("LOD Threshold"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ToolTip"), TEXT("* Max LOD that this node is allowed to run\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\n* when the component LOD becomes 3, it will stop update/evaluate\n* currently transition would be issue and that has to be re-visited"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Additive, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Additive, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
			MetaData->SetValue(NewProp_Base, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Base, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ApplyAdditive.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ApplyAdditive_CRC() { return 3302727598U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendListBase"), sizeof(FAnimNode_BlendListBase), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListBase>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResetChildOnActivation, FAnimNode_BlendListBase, bool);
			UProperty* NewProp_bResetChildOnActivation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bResetChildOnActivation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResetChildOnActivation, FAnimNode_BlendListBase), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bResetChildOnActivation, FAnimNode_BlendListBase), sizeof(bool), true);
			UProperty* NewProp_PerBoneSampleData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PerBoneSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PerBoneSampleData, FAnimNode_BlendListBase), 0x0020080000000000);
			UProperty* NewProp_PerBoneSampleData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PerBoneSampleData, TEXT("PerBoneSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBlendSampleData());
			UProperty* NewProp_LastActiveChildIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastActiveChildIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LastActiveChildIndex, FAnimNode_BlendListBase), 0x0020080000000000);
			UProperty* NewProp_RemainingBlendTimes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemainingBlendTimes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RemainingBlendTimes, FAnimNode_BlendListBase), 0x0020080000000000);
			UProperty* NewProp_RemainingBlendTimes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RemainingBlendTimes, TEXT("RemainingBlendTimes"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_BlendWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendWeights, FAnimNode_BlendListBase), 0x0020080000000000);
			UProperty* NewProp_BlendWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendWeights, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Blends = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Blends"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Blends, FAnimNode_BlendListBase), 0x0010000000000000);
			UProperty* NewProp_Blends_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Blends, TEXT("Blends"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAlphaBlend());
			UProperty* NewProp_BlendProfile = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendProfile"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(BlendProfile, FAnimNode_BlendListBase), 0x0010000000000001, Z_Construct_UClass_UBlendProfile_NoRegister());
			UProperty* NewProp_CustomBlendCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomBlendCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CustomBlendCurve, FAnimNode_BlendListBase), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_BlendType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(BlendType, FAnimNode_BlendListBase), 0x0010000000000001, Z_Construct_UEnum_Engine_EAlphaBlendOption());
			UProperty* NewProp_BlendType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_BlendType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_BlendTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendTime"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendTime, FAnimNode_BlendListBase), 0x0010000000000045);
			UProperty* NewProp_BlendTime_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendTime, TEXT("BlendTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_BlendPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendPose"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendPose, FAnimNode_BlendListBase), 0x0010000000000045);
			UProperty* NewProp_BlendPose_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendPose, TEXT("BlendPose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend list node; has many children"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("Category"), TEXT("Option"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("ToolTip"), TEXT("This reinitializes child pose when re-activated. For example, when active child changes"));
			MetaData->SetValue(NewProp_PerBoneSampleData, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_LastActiveChildIndex, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_RemainingBlendTimes, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_Blends, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendProfile, TEXT("Category"), TEXT("BlendType"));
			MetaData->SetValue(NewProp_BlendProfile, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_CustomBlendCurve, TEXT("Category"), TEXT("BlendType"));
			MetaData->SetValue(NewProp_CustomBlendCurve, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendType, TEXT("Category"), TEXT("BlendType"));
			MetaData->SetValue(NewProp_BlendType, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
			MetaData->SetValue(NewProp_BlendTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BlendPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BlendPose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListBase.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListBase_CRC() { return 1445842432U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByBool()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendListByBool"), sizeof(FAnimNode_BlendListByBool), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByBool"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByBool>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActiveValue, FAnimNode_BlendListByBool, bool);
			UProperty* NewProp_bActiveValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bActiveValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActiveValue, FAnimNode_BlendListByBool), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bActiveValue, FAnimNode_BlendListByBool), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByBool.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This node is effectively a 'branch', picking one of two input poses based on an input Boolean value"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByBool.h"));
			MetaData->SetValue(NewProp_bActiveValue, TEXT("ToolTip"), TEXT("Which input should be connected to the output?"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByBool_CRC() { return 361287644U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendListByEnum"), sizeof(FAnimNode_BlendListByEnum), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByEnum>, EStructFlags(0x00000201));
			UProperty* NewProp_ActiveEnumValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveEnumValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ActiveEnumValue, FAnimNode_BlendListByEnum), 0x0010000000000005);
			UProperty* NewProp_EnumToPoseIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnumToPoseIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(EnumToPoseIndex, FAnimNode_BlendListByEnum), 0x0010000000000000);
			UProperty* NewProp_EnumToPoseIndex_Inner = new(EC_InternalUseOnlyConstructor, NewProp_EnumToPoseIndex, TEXT("EnumToPoseIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend List by Enum, it changes based on enum input that enters"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(NewProp_ActiveEnumValue, TEXT("ToolTip"), TEXT("The currently selected pose (as an enum value)"));
			MetaData->SetValue(NewProp_EnumToPoseIndex, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByEnum.h"));
			MetaData->SetValue(NewProp_EnumToPoseIndex, TEXT("ToolTip"), TEXT("Mapping from enum value to BlendPose index; there will be one entry per entry in the enum; entries out of range always map to pose index 0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByEnum_CRC() { return 2160975239U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendListByInt()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendListByInt"), sizeof(FAnimNode_BlendListByInt), Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendListByInt"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendListBase(), new UScriptStruct::TCppStructOps<FAnimNode_BlendListByInt>, EStructFlags(0x00000201));
			UProperty* NewProp_ActiveChildIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveChildIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ActiveChildIndex, FAnimNode_BlendListByInt), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByInt.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Blend list node; has many children"));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("AlwaysAsPin"), TEXT(""));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_ActiveChildIndex, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendListByInt.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendListByInt_CRC() { return 144092473U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BlendSpaceEvaluator"), sizeof(FAnimNode_BlendSpaceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BlendSpaceEvaluator"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer(), new UScriptStruct::TCppStructOps<FAnimNode_BlendSpaceEvaluator>, EStructFlags(0x00000201));
			UProperty* NewProp_NormalizedTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalizedTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NormalizedTime, FAnimNode_BlendSpaceEvaluator), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpaceEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in a blendspace, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_BlendSpaceEvaluator.h"));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_NormalizedTime, TEXT("ToolTip"), TEXT("Normalized time between [0,1]. The actual length of a blendspace is dynamic based on the coordinate, so it is exposed as a normalized value."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BlendSpaceEvaluator_CRC() { return 2081204427U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_CopyPoseFromMesh"), sizeof(FAnimNode_CopyPoseFromMesh), Get_Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_CopyPoseFromMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_CopyPoseFromMesh>, EStructFlags(0x00000205));
			UProperty* NewProp_SourceMeshComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceMeshComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SourceMeshComponent, FAnimNode_CopyPoseFromMesh), 0x001000000008000d, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CopyPoseFromMesh.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller to copy a bone's transform to another one."));
			MetaData->SetValue(NewProp_SourceMeshComponent, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_SourceMeshComponent, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_SourceMeshComponent, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CopyPoseFromMesh.h"));
			MetaData->SetValue(NewProp_SourceMeshComponent, TEXT("PinShownByDefault"), TEXT(""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyPoseFromMesh_CRC() { return 1668241948U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CurveSource()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CurveSource_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_CurveSource"), sizeof(FAnimNode_CurveSource), Get_Z_Construct_UScriptStruct_FAnimNode_CurveSource_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_CurveSource"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_CurveSource>, EStructFlags(0x00000201));
			UProperty* NewProp_CurveSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveSource"), RF_Public|RF_Transient|RF_MarkAsNative) UInterfaceProperty(CPP_PROPERTY_BASE(CurveSource, FAnimNode_CurveSource), 0x0014000000002000, Z_Construct_UClass_UCurveSourceInterface_NoRegister());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_CurveSource), 0x0010000000000005);
			UProperty* NewProp_SourceBinding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBinding"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SourceBinding, FAnimNode_CurveSource), 0x0010000000000005);
			UProperty* NewProp_SourcePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePose, FAnimNode_CurveSource), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CurveSource.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Supply curves from some external source (e.g. audio)"));
			MetaData->SetValue(NewProp_CurveSource, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CurveSource.h"));
			MetaData->SetValue(NewProp_CurveSource, TEXT("ToolTip"), TEXT("Our bound source"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("CurveSource"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CurveSource.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("How much we wan to blend the curve in by"));
			MetaData->SetValue(NewProp_SourceBinding, TEXT("Category"), TEXT("CurveSource"));
			MetaData->SetValue(NewProp_SourceBinding, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CurveSource.h"));
			MetaData->SetValue(NewProp_SourceBinding, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_SourceBinding, TEXT("ToolTip"), TEXT("The binding of the curve source we want to bind to.\nWe will bind to an object that implements ICurveSourceInterface. First we check\nthe actor that owns this (if any), then we check each of its components to see if we should\nbind to the source that matches this name."));
			MetaData->SetValue(NewProp_SourcePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_CurveSource.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CurveSource_CRC() { return 3856098270U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_LayeredBoneBlend"), sizeof(FAnimNode_LayeredBoneBlend), Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_LayeredBoneBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_LayeredBoneBlend>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasRelevantPoses, FAnimNode_LayeredBoneBlend, bool);
			UProperty* NewProp_bHasRelevantPoses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHasRelevantPoses"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasRelevantPoses, FAnimNode_LayeredBoneBlend), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bHasRelevantPoses, FAnimNode_LayeredBoneBlend), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlendRootMotionBasedOnRootBone, FAnimNode_LayeredBoneBlend, bool);
			UProperty* NewProp_bBlendRootMotionBasedOnRootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bBlendRootMotionBasedOnRootBone"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlendRootMotionBasedOnRootBone, FAnimNode_LayeredBoneBlend), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bBlendRootMotionBasedOnRootBone, FAnimNode_LayeredBoneBlend), sizeof(bool), true);
			UProperty* NewProp_CurveBlendOption = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveBlendOption"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CurveBlendOption, FAnimNode_LayeredBoneBlend), 0x0010000000000005, Z_Construct_UEnum_Engine_ECurveBlendOption());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend, bool);
			UProperty* NewProp_bMeshSpaceRotationBlend = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bMeshSpaceRotationBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bMeshSpaceRotationBlend, FAnimNode_LayeredBoneBlend), sizeof(bool), true);
			UProperty* NewProp_BlendWeights = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendWeights, FAnimNode_LayeredBoneBlend), 0x0010000000000045);
			UProperty* NewProp_BlendWeights_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendWeights, TEXT("BlendWeights"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LayerSetup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LayerSetup"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LayerSetup, FAnimNode_LayeredBoneBlend), 0x0010000000000045);
			UProperty* NewProp_LayerSetup_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LayerSetup, TEXT("LayerSetup"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FInputBlendPose());
			UProperty* NewProp_BlendPoses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BlendPoses, FAnimNode_LayeredBoneBlend), 0x0010000000000045);
			UProperty* NewProp_BlendPoses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BlendPoses, TEXT("BlendPoses"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_LayeredBoneBlend), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Layered blend (per bone); has dynamic number of blendposes that can blend per different bone sets"));
			MetaData->SetValue(NewProp_bHasRelevantPoses, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_bBlendRootMotionBasedOnRootBone, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_bBlendRootMotionBasedOnRootBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_CurveBlendOption, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_CurveBlendOption, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_bMeshSpaceRotationBlend, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_bMeshSpaceRotationBlend, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("Category"), TEXT("Runtime"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendWeights, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LayerSetup, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_LayerSetup, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
			MetaData->SetValue(NewProp_BlendPoses, TEXT("ToolTip"), TEXT("@TODO: Anim: Comment these members"));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_LayeredBoneBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LayeredBoneBlend_CRC() { return 3286389439U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EModifyCurveApplyMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EModifyCurveApplyMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EModifyCurveApplyMode::Add")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EModifyCurveApplyMode::Scale")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EModifyCurveApplyMode::Blend")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EModifyCurveApplyMode::EModifyCurveApplyMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EModifyCurveApplyMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Add.ToolTip"), TEXT("Add new value to input curve value"));
			MetaData->SetValue(ReturnEnum, TEXT("Blend.ToolTip"), TEXT("Blend input with new curve value, using Alpha setting on the node"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scale.ToolTip"), TEXT("Scale input value by new value"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode_CRC() { return 2846366561U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyCurve()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyCurve_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ModifyCurve"), sizeof(FAnimNode_ModifyCurve), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyCurve_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ModifyCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_ModifyCurve>, EStructFlags(0x00000201));
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_ModifyCurve), 0x0010000000000005);
			UProperty* NewProp_CurveNames = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CurveNames, FAnimNode_ModifyCurve), 0x0010000000000000);
			UProperty* NewProp_CurveNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CurveNames, TEXT("CurveNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_CurveValues = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CurveValues"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CurveValues, FAnimNode_ModifyCurve), 0x0010000000000045);
			UProperty* NewProp_CurveValues_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CurveValues, TEXT("CurveValues"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_ApplyMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ApplyMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ApplyMode, FAnimNode_ModifyCurve), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EModifyCurveApplyMode());
			UProperty* NewProp_ApplyMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ApplyMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourcePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePose, FAnimNode_ModifyCurve), 0x0010000000000045, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Easy way to modify curve values on a pose"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("ModifyCurve"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_CurveNames, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(NewProp_CurveValues, TEXT("Category"), TEXT("ModifyCurve"));
			MetaData->SetValue(NewProp_CurveValues, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(NewProp_CurveValues, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_ApplyMode, TEXT("Category"), TEXT("ModifyCurve"));
			MetaData->SetValue(NewProp_ApplyMode, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_ModifyCurve.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyCurve_CRC() { return 3726784887U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_MultiWayBlend"), sizeof(FAnimNode_MultiWayBlend), Get_Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_MultiWayBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_MultiWayBlend>, EStructFlags(0x00000201));
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_MultiWayBlend), 0x0010000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNormalizeAlpha, FAnimNode_MultiWayBlend, bool);
			UProperty* NewProp_bNormalizeAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bNormalizeAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNormalizeAlpha, FAnimNode_MultiWayBlend), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bNormalizeAlpha, FAnimNode_MultiWayBlend), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAdditiveNode, FAnimNode_MultiWayBlend, bool);
			UProperty* NewProp_bAdditiveNode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAdditiveNode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAdditiveNode, FAnimNode_MultiWayBlend), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAdditiveNode, FAnimNode_MultiWayBlend), sizeof(bool), true);
			UProperty* NewProp_DesiredAlphas = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DesiredAlphas"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DesiredAlphas, FAnimNode_MultiWayBlend), 0x0010000000000005);
			UProperty* NewProp_DesiredAlphas_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DesiredAlphas, TEXT("DesiredAlphas"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_Poses = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Poses"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Poses, FAnimNode_MultiWayBlend), 0x0010000000000005);
			UProperty* NewProp_Poses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Poses, TEXT("Poses"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This represents a baked transition"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
			MetaData->SetValue(NewProp_bNormalizeAlpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bNormalizeAlpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
			MetaData->SetValue(NewProp_bAdditiveNode, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bAdditiveNode, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
			MetaData->SetValue(NewProp_DesiredAlphas, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_DesiredAlphas, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
			MetaData->SetValue(NewProp_DesiredAlphas, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Poses, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Poses, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_MultiWayBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MultiWayBlend_CRC() { return 2784187597U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseHandler()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseHandler_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_PoseHandler"), sizeof(FAnimNode_PoseHandler), Get_Z_Construct_UScriptStruct_FAnimNode_PoseHandler_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_PoseHandler"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_PoseHandler>, EStructFlags(0x00000201));
			UProperty* NewProp_PoseAsset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PoseAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PoseAsset, FAnimNode_PoseHandler), 0x0010000000000005, Z_Construct_UClass_UPoseAsset_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseHandler.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in an anim sequence, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_PoseAsset, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PoseAsset, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseHandler.h"));
			MetaData->SetValue(NewProp_PoseAsset, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PoseAsset, TEXT("ToolTip"), TEXT("The animation sequence asset to evaluate"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseHandler_CRC() { return 165509271U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_PoseBlendNode"), sizeof(FAnimNode_PoseBlendNode), Get_Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_PoseBlendNode"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_PoseHandler(), new UScriptStruct::TCppStructOps<FAnimNode_PoseBlendNode>, EStructFlags(0x00000201));
			UProperty* NewProp_CustomCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CustomCurve, FAnimNode_PoseBlendNode), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_BlendOption = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendOption"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(BlendOption, FAnimNode_PoseBlendNode), 0x0010000000000001, Z_Construct_UEnum_Engine_EAlphaBlendOption());
			UProperty* NewProp_BlendOption_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_BlendOption, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SourcePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePose, FAnimNode_PoseBlendNode), 0x0010000000000045, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseBlendNode.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in an anim sequence, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_CustomCurve, TEXT("Category"), TEXT("Blend"));
			MetaData->SetValue(NewProp_CustomCurve, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseBlendNode.h"));
			MetaData->SetValue(NewProp_CustomCurve, TEXT("ToolTip"), TEXT("If you're using Custom BlendOption, you can specify curve"));
			MetaData->SetValue(NewProp_BlendOption, TEXT("Category"), TEXT("Blend"));
			MetaData->SetValue(NewProp_BlendOption, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseBlendNode.h"));
			MetaData->SetValue(NewProp_BlendOption, TEXT("ToolTip"), TEXT("Type of blending used (Linear, Cubic, etc.)"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseBlendNode.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseBlendNode_CRC() { return 3363591967U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseByName()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseByName_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_PoseByName"), sizeof(FAnimNode_PoseByName), Get_Z_Construct_UScriptStruct_FAnimNode_PoseByName_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_PoseByName"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_PoseHandler(), new UScriptStruct::TCppStructOps<FAnimNode_PoseByName>, EStructFlags(0x00000201));
			UProperty* NewProp_PoseWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PoseWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PoseWeight, FAnimNode_PoseByName), 0x0010000000000005);
			UProperty* NewProp_PoseName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PoseName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(PoseName, FAnimNode_PoseByName), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseByName.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in an anim sequence, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_PoseWeight, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PoseWeight, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseByName.h"));
			MetaData->SetValue(NewProp_PoseWeight, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_PoseName, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_PoseName, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseByName.h"));
			MetaData->SetValue(NewProp_PoseName, TEXT("PinHiddenByDefault"), TEXT(""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseByName_CRC() { return 2710763896U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPoseDriverType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPoseDriverType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPoseDriverType::SwingAndTwist")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPoseDriverType::SwingOnly")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPoseDriverType::Translation")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EPoseDriverType::EPoseDriverType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPoseDriverType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SwingAndTwist.ToolTip"), TEXT("Consider full rotation for interpolation"));
			MetaData->SetValue(ReturnEnum, TEXT("SwingOnly.ToolTip"), TEXT("Consider only swing for interpolation"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Orientation aspect used to drive interpolation"));
			MetaData->SetValue(ReturnEnum, TEXT("Translation.ToolTip"), TEXT("Consider translation relative to parent"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType_CRC() { return 2419477541U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseDriver()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseDriver_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_PoseDriver"), sizeof(FAnimNode_PoseDriver), Get_Z_Construct_UScriptStruct_FAnimNode_PoseDriver_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_PoseDriver"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_PoseHandler(), new UScriptStruct::TCppStructOps<FAnimNode_PoseDriver>, EStructFlags(0x00000201));
			UProperty* NewProp_TwistAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwistAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TwistAxis, FAnimNode_PoseDriver), 0x0010000000000001, Z_Construct_UEnum_Engine_EBoneAxis());
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Type, FAnimNode_PoseDriver), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_EPoseDriverType());
			UProperty* NewProp_Type_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Type, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludeRefPoseAsNeutralPose, FAnimNode_PoseDriver, bool);
			UProperty* NewProp_bIncludeRefPoseAsNeutralPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIncludeRefPoseAsNeutralPose"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludeRefPoseAsNeutralPose, FAnimNode_PoseDriver), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIncludeRefPoseAsNeutralPose, FAnimNode_PoseDriver), sizeof(bool), true);
			UProperty* NewProp_RadialScaling = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadialScaling"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RadialScaling, FAnimNode_PoseDriver), 0x0010000000000001);
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_PoseDriver), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_SourcePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourcePose, FAnimNode_PoseDriver), 0x0010000000000045, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("RBF based orientation driver"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("Category"), TEXT("PoseDriver"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("ToolTip"), TEXT("Axis to use when Type is SwingOnly"));
			MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("PoseDriver"));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Type of orientation for driving parameter"));
			MetaData->SetValue(NewProp_bIncludeRefPoseAsNeutralPose, TEXT("Category"), TEXT("PoseDriver"));
			MetaData->SetValue(NewProp_bIncludeRefPoseAsNeutralPose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(NewProp_bIncludeRefPoseAsNeutralPose, TEXT("ToolTip"), TEXT("Should we consider the mesh ref pose of SourceBone as a 'neutral' pose (zero curves)"));
			MetaData->SetValue(NewProp_RadialScaling, TEXT("Category"), TEXT("PoseDriver"));
			MetaData->SetValue(NewProp_RadialScaling, TEXT("ClampMin"), TEXT("0.01"));
			MetaData->SetValue(NewProp_RadialScaling, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(NewProp_RadialScaling, TEXT("ToolTip"), TEXT("Scaling of radial basis, applied to max distance between poses"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("PoseDriver"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Bone to use for driving parameters based on its orientation"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_SourcePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseDriver.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseDriver_CRC() { return 1158121363U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESnapshotSourceMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESnapshotSourceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESnapshotSourceMode::NamedSnapshot")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESnapshotSourceMode::SnapshotPin")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESnapshotSourceMode::ESnapshotSourceMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESnapshotSourceMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseSnapshot.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NamedSnapshot.ToolTip"), TEXT("Refer to an internal snapshot by name (previously stored with SavePoseSnapshot).\nThis can be more efficient than access via pin."));
			MetaData->SetValue(ReturnEnum, TEXT("SnapshotPin.ToolTip"), TEXT("Use a snapshot variable (previously populated using SnapshotPose).\nThis is more flexible and allows poses to be modified and managed externally to the animation blueprint."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("How to access the snapshot"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode_CRC() { return 4071554399U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_PoseSnapshot"), sizeof(FAnimNode_PoseSnapshot), Get_Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_PoseSnapshot"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_PoseSnapshot>, EStructFlags(0x00000201));
			UProperty* NewProp_Snapshot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Snapshot"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Snapshot, FAnimNode_PoseSnapshot), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseSnapshot());
			UProperty* NewProp_SnapshotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SnapshotName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SnapshotName, FAnimNode_PoseSnapshot), 0x0010000000000005);
			UProperty* NewProp_Mode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(Mode, FAnimNode_PoseSnapshot), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_ESnapshotSourceMode());
			UProperty* NewProp_Mode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_Mode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseSnapshot.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Provide a snapshot pose, either from the internal named pose cache or via a supplied snapshot"));
			MetaData->SetValue(NewProp_Snapshot, TEXT("Category"), TEXT("Snapshot"));
			MetaData->SetValue(NewProp_Snapshot, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseSnapshot.h"));
			MetaData->SetValue(NewProp_Snapshot, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Snapshot, TEXT("ToolTip"), TEXT("Snapshot to use. This should be populated at first by calling SnapshotPose"));
			MetaData->SetValue(NewProp_SnapshotName, TEXT("Category"), TEXT("Snapshot"));
			MetaData->SetValue(NewProp_SnapshotName, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseSnapshot.h"));
			MetaData->SetValue(NewProp_SnapshotName, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_SnapshotName, TEXT("ToolTip"), TEXT("The name of the snapshot previously stored with SavePoseSnapshot"));
			MetaData->SetValue(NewProp_Mode, TEXT("Category"), TEXT("Snapshot"));
			MetaData->SetValue(NewProp_Mode, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_PoseSnapshot.h"));
			MetaData->SetValue(NewProp_Mode, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Mode, TEXT("ToolTip"), TEXT("How to access the snapshot"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_PoseSnapshot_CRC() { return 879514496U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RandomPlayer()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RandomPlayer_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_RandomPlayer"), sizeof(FAnimNode_RandomPlayer), Get_Z_Construct_UScriptStruct_FAnimNode_RandomPlayer_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RandomPlayer"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_RandomPlayer>, EStructFlags(0x00000201));
			UProperty* NewProp_Entries = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Entries"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Entries, FAnimNode_RandomPlayer), 0x0010000000000005);
			UProperty* NewProp_Entries_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Entries, TEXT("Entries"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShuffleMode, FAnimNode_RandomPlayer, bool);
			UProperty* NewProp_bShuffleMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShuffleMode"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShuffleMode, FAnimNode_RandomPlayer), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShuffleMode, FAnimNode_RandomPlayer), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_Entries, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Entries, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_Entries, TEXT("ToolTip"), TEXT("List of sequences to randomly step through"));
			MetaData->SetValue(NewProp_bShuffleMode, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bShuffleMode, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_bShuffleMode, TEXT("ToolTip"), TEXT("When shuffle mode is active we will never loop a sequence beyond MaxLoopCount\nwithout visiting each sequence in turn (no repeats). Enabling this will ignore\nChanceToPlay for each entry"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RandomPlayer_CRC() { return 821824928U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("RandomPlayerSequenceEntry"), sizeof(FRandomPlayerSequenceEntry), Get_Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RandomPlayerSequenceEntry"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRandomPlayerSequenceEntry>, EStructFlags(0x00000001));
			UProperty* NewProp_BlendIn = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BlendIn"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BlendIn, FRandomPlayerSequenceEntry), 0x0010000000000005, Z_Construct_UScriptStruct_FAlphaBlend());
			UProperty* NewProp_MaxPlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxPlayRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxPlayRate, FRandomPlayerSequenceEntry), 0x0010000000000005);
			UProperty* NewProp_MinPlayRate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinPlayRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinPlayRate, FRandomPlayerSequenceEntry), 0x0010000000000005);
			UProperty* NewProp_MaxLoopCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxLoopCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxLoopCount, FRandomPlayerSequenceEntry), 0x0010000000000005);
			UProperty* NewProp_MinLoopCount = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinLoopCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MinLoopCount, FRandomPlayerSequenceEntry), 0x0010000000000005);
			UProperty* NewProp_ChanceToPlay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChanceToPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ChanceToPlay, FRandomPlayerSequenceEntry), 0x0010000000000005);
			UProperty* NewProp_Sequence = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sequence"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Sequence, FRandomPlayerSequenceEntry), 0x0010000000000005, Z_Construct_UClass_UAnimSequence_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The random player node holds a list of sequences and parameter ranges which will be played continuously\nIn a random order. If shuffle mode is enabled then each entry will be played once before repeating any"));
			MetaData->SetValue(NewProp_BlendIn, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_BlendIn, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_BlendIn, TEXT("ToolTip"), TEXT("Blending properties used when this entry is blending in ontop of another entry"));
			MetaData->SetValue(NewProp_MaxPlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MaxPlayRate, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MaxPlayRate, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_MaxPlayRate, TEXT("ToolTip"), TEXT("Maximum playrate for this entry"));
			MetaData->SetValue(NewProp_MaxPlayRate, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MinPlayRate, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MinPlayRate, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MinPlayRate, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_MinPlayRate, TEXT("ToolTip"), TEXT("Minimum playrate for this entry"));
			MetaData->SetValue(NewProp_MinPlayRate, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MaxLoopCount, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MaxLoopCount, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MaxLoopCount, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_MaxLoopCount, TEXT("ToolTip"), TEXT("Maximum number of times this entry will loop before ending"));
			MetaData->SetValue(NewProp_MaxLoopCount, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MinLoopCount, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MinLoopCount, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_MinLoopCount, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_MinLoopCount, TEXT("ToolTip"), TEXT("Minimum number of times this entry will loop before ending"));
			MetaData->SetValue(NewProp_MinLoopCount, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ChanceToPlay, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ChanceToPlay, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_ChanceToPlay, TEXT("ToolTip"), TEXT("When not in shuffle mode, this is the chance this entry will play (normalized against all other sample chances)"));
			MetaData->SetValue(NewProp_Sequence, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RandomPlayer.h"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ToolTip"), TEXT("Sequence to play when this entry is picked"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRandomPlayerSequenceEntry_CRC() { return 3996836803U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ERefPoseType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ERefPoseType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EIT_LocalSpace")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EIT_Additive")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EIT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("ERefPoseType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RefPose.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType_CRC() { return 509994630U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_MeshSpaceRefPose"), sizeof(FAnimNode_MeshSpaceRefPose), Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_MeshSpaceRefPose"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_MeshSpaceRefPose>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RefPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_MeshSpaceRefPose_CRC() { return 3408032978U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RefPose()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_RefPose"), sizeof(FAnimNode_RefPose), Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RefPose"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_RefPose>, EStructFlags(0x00000201));
			UProperty* NewProp_RefPoseType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RefPoseType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RefPoseType, FAnimNode_RefPose), 0x0010000000000000, Z_Construct_UEnum_AnimGraphRuntime_ERefPoseType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RefPose.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("RefPose pose nodes - ref pose or additive RefPose pose"));
			MetaData->SetValue(NewProp_RefPoseType, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RefPose.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RefPose_CRC() { return 187822989U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Root()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_Root"), sizeof(FAnimNode_Root), Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Root"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_Root>, EStructFlags(0x00000201));
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Result"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Result, FAnimNode_Root), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_Root.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Root node of an animation tree (sink)"));
			MetaData->SetValue(NewProp_Result, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Result, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_Root.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Root_CRC() { return 2789269580U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotateRootBone()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_RotateRootBone"), sizeof(FAnimNode_RotateRootBone), Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotateRootBone"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_RotateRootBone>, EStructFlags(0x00000201));
			UProperty* NewProp_MeshToComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MeshToComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(MeshToComponent, FAnimNode_RotateRootBone), 0x0010000000000005, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Yaw"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Yaw, FAnimNode_RotateRootBone), 0x0010000000000005);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FAnimNode_RotateRootBone), 0x0010000000000005);
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_RotateRootBone), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_MeshToComponent, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Yaw, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Yaw, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_Yaw, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Pitch, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Pitch, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotateRootBone.h"));
			MetaData->SetValue(NewProp_Pitch, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotateRootBone.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotateRootBone_CRC() { return 534776298U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_RotationOffsetBlendSpace"), sizeof(FAnimNode_RotationOffsetBlendSpace), Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotationOffsetBlendSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_BlendSpacePlayer(), new UScriptStruct::TCppStructOps<FAnimNode_RotationOffsetBlendSpace>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLODEnabled, FAnimNode_RotationOffsetBlendSpace, bool);
			UProperty* NewProp_bIsLODEnabled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsLODEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLODEnabled, FAnimNode_RotationOffsetBlendSpace), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bIsLODEnabled, FAnimNode_RotationOffsetBlendSpace), sizeof(bool), true);
			UProperty* NewProp_LODThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODThreshold, FAnimNode_RotationOffsetBlendSpace), 0x0010000000000005);
			UProperty* NewProp_BasePose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BasePose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BasePose, FAnimNode_RotationOffsetBlendSpace), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotationOffsetBlendSpace.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("@TODO: Comment"));
			MetaData->SetValue(NewProp_bIsLODEnabled, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotationOffsetBlendSpace.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("Category"), TEXT("Performance"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("DisplayName"), TEXT("LOD Threshold"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotationOffsetBlendSpace.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ToolTip"), TEXT("* Max LOD that this node is allowed to run\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\n* when the component LOD becomes 3, it will stop update/evaluate\n* currently transition would be issue and that has to be re-visited"));
			MetaData->SetValue(NewProp_BasePose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_BasePose, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_RotationOffsetBlendSpace.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationOffsetBlendSpace_CRC() { return 2381088735U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESequenceEvalReinit"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESequenceEvalReinit"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESequenceEvalReinit::NoReset")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESequenceEvalReinit::StartPosition")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESequenceEvalReinit::ExplicitTime")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESequenceEvalReinit::ESequenceEvalReinit_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ESequenceEvalReinit::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ExplicitTime.ToolTip"), TEXT("Reset InternalTimeAccumulator to ExplicitTime"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoReset.ToolTip"), TEXT("Do not reset InternalTimeAccumulator"));
			MetaData->SetValue(ReturnEnum, TEXT("StartPosition.ToolTip"), TEXT("Reset InternalTimeAccumulator to StartPosition"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit_CRC() { return 3394220841U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SequenceEvaluator"), sizeof(FAnimNode_SequenceEvaluator), Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SequenceEvaluator"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_AssetPlayerBase(), new UScriptStruct::TCppStructOps<FAnimNode_SequenceEvaluator>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReinitialized, FAnimNode_SequenceEvaluator, bool);
			UProperty* NewProp_bReinitialized = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bReinitialized"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReinitialized, FAnimNode_SequenceEvaluator), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bReinitialized, FAnimNode_SequenceEvaluator), sizeof(bool), true);
			UProperty* NewProp_ReinitializationBehavior = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReinitializationBehavior"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReinitializationBehavior, FAnimNode_SequenceEvaluator), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_ESequenceEvalReinit());
			UProperty* NewProp_StartPosition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartPosition, FAnimNode_SequenceEvaluator), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTeleportToExplicitTime, FAnimNode_SequenceEvaluator, bool);
			UProperty* NewProp_bTeleportToExplicitTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTeleportToExplicitTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTeleportToExplicitTime, FAnimNode_SequenceEvaluator), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTeleportToExplicitTime, FAnimNode_SequenceEvaluator), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldLoopWhenInSyncGroup, FAnimNode_SequenceEvaluator, bool);
			UProperty* NewProp_bShouldLoopWhenInSyncGroup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShouldLoopWhenInSyncGroup"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldLoopWhenInSyncGroup, FAnimNode_SequenceEvaluator), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShouldLoopWhenInSyncGroup, FAnimNode_SequenceEvaluator), sizeof(bool), true);
			UProperty* NewProp_ExplicitTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExplicitTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ExplicitTime, FAnimNode_SequenceEvaluator), 0x0010000000000005);
			UProperty* NewProp_Sequence = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Sequence"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Sequence, FAnimNode_SequenceEvaluator), 0x0010000000000005, Z_Construct_UClass_UAnimSequenceBase_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Evaluates a point in an anim sequence, using a specific time input rather than advancing time internally.\nTypically the playback position of the animation for this node will represent something other than time, like jump height.\nThis node will not trigger any notifies present in the associated sequence."));
			MetaData->SetValue(NewProp_bReinitialized, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_ReinitializationBehavior, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ReinitializationBehavior, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_ReinitializationBehavior, TEXT("ToolTip"), TEXT("What to do when SequenceEvaluator is reinitialized"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_StartPosition, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_StartPosition, TEXT("ToolTip"), TEXT("The start up position, it only applies when ReinitializationBehavior == StartPosition. Only used when bTeleportToExplicitTime is false."));
			MetaData->SetValue(NewProp_bTeleportToExplicitTime, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bTeleportToExplicitTime, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_bTeleportToExplicitTime, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bTeleportToExplicitTime, TEXT("ToolTip"), TEXT("If true, teleport to explicit time, does NOT advance time (does not trigger notifies, does not extract Root Motion, etc.)\n      If false, will advance time (will trigger notifies, extract root motion if applicable, etc.)\n      Note: using a sync group forces advancing time regardless of what this option is set to."));
			MetaData->SetValue(NewProp_bShouldLoopWhenInSyncGroup, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bShouldLoopWhenInSyncGroup, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_bShouldLoopWhenInSyncGroup, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_ExplicitTime, TEXT("ToolTip"), TEXT("The time at which to evaluate the associated sequence"));
			MetaData->SetValue(NewProp_Sequence, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Sequence, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_SequenceEvaluator.h"));
			MetaData->SetValue(NewProp_Sequence, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Sequence, TEXT("ToolTip"), TEXT("The animation sequence asset to evaluate"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SequenceEvaluator_CRC() { return 108638760U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Slot()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_Slot"), sizeof(FAnimNode_Slot), Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Slot"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_Slot>, EStructFlags(0x00000201));
			UProperty* NewProp_SlotName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SlotName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(SlotName, FAnimNode_Slot), 0x0010000000000005);
			UProperty* NewProp_Source = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Source"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Source, FAnimNode_Slot), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_Slot.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An animation slot node normally acts as a passthru, but a montage or PlaySlotAnimation call from\ngame code can cause an animation to blend in and be played on the slot temporarily, overriding the\nSource input."));
			MetaData->SetValue(NewProp_SlotName, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_SlotName, TEXT("CustomizeProperty"), TEXT(""));
			MetaData->SetValue(NewProp_SlotName, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_Slot.h"));
			MetaData->SetValue(NewProp_SlotName, TEXT("ToolTip"), TEXT("The name of this slot, exposed to gameplay code, etc..."));
			MetaData->SetValue(NewProp_Source, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_Source, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_Slot.h"));
			MetaData->SetValue(NewProp_Source, TEXT("ToolTip"), TEXT("The source input, passed thru to the output unless a montage or slot animation is currently playing"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Slot_CRC() { return 4278882586U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_TwoWayBlend"), sizeof(FAnimNode_TwoWayBlend), Get_Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TwoWayBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_TwoWayBlend>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResetChildOnActivation, FAnimNode_TwoWayBlend, bool);
			UProperty* NewProp_bResetChildOnActivation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bResetChildOnActivation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResetChildOnActivation, FAnimNode_TwoWayBlend), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(bResetChildOnActivation, FAnimNode_TwoWayBlend), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBIsRelevant, FAnimNode_TwoWayBlend, bool);
			UProperty* NewProp_bBIsRelevant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bBIsRelevant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBIsRelevant, FAnimNode_TwoWayBlend), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bBIsRelevant, FAnimNode_TwoWayBlend), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAIsRelevant, FAnimNode_TwoWayBlend, bool);
			UProperty* NewProp_bAIsRelevant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAIsRelevant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAIsRelevant, FAnimNode_TwoWayBlend), 0x0020080000002000, CPP_BOOL_PROPERTY_BITMASK(bAIsRelevant, FAnimNode_TwoWayBlend), sizeof(bool), true);
			UProperty* NewProp_InternalBlendAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InternalBlendAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InternalBlendAlpha, FAnimNode_TwoWayBlend), 0x0020080000002000);
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_TwoWayBlend), 0x0010000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_TwoWayBlend), 0x0010000000000005);
			UProperty* NewProp_B = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("B"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(B, FAnimNode_TwoWayBlend), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			UProperty* NewProp_A = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("A"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(A, FAnimNode_TwoWayBlend), 0x0010000000000005, Z_Construct_UScriptStruct_FPoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This represents a baked transition"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("Category"), TEXT("Option"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_bResetChildOnActivation, TEXT("ToolTip"), TEXT("This reinitializes child pose when re-activated. For example, when active child changes"));
			MetaData->SetValue(NewProp_bBIsRelevant, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_bAIsRelevant, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_InternalBlendAlpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_B, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_B, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
			MetaData->SetValue(NewProp_A, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_A, TEXT("ModuleRelativePath"), TEXT("Public/AnimNodes/AnimNode_TwoWayBlend.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoWayBlend_CRC() { return 2538543384U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimSequencerInstanceProxy"), sizeof(FAnimSequencerInstanceProxy), Get_Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimSequencerInstanceProxy"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimInstanceProxy(), new UScriptStruct::TCppStructOps<FAnimSequencerInstanceProxy>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/AnimSequencerInstanceProxy.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Proxy override for this UAnimInstance-derived class"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimSequencerInstanceProxy_CRC() { return 2599500601U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SkeletalControlBase"), sizeof(FAnimNode_SkeletalControlBase), Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SkeletalControlBase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_Base(), new UScriptStruct::TCppStructOps<FAnimNode_SkeletalControlBase>, EStructFlags(0x00000201));
			UProperty* NewProp_ActualAlpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActualAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ActualAlpha, FAnimNode_SkeletalControlBase), 0x0010000000002000);
			UProperty* NewProp_LODThreshold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LODThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LODThreshold, FAnimNode_SkeletalControlBase), 0x0010000000000005);
			UProperty* NewProp_AlphaScaleBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AlphaScaleBias"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AlphaScaleBias, FAnimNode_SkeletalControlBase), 0x0010000000000005, Z_Construct_UScriptStruct_FInputScaleBias());
			UProperty* NewProp_Alpha = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Alpha, FAnimNode_SkeletalControlBase), 0x0010000000000005);
			UProperty* NewProp_ComponentPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComponentPose"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ComponentPose, FAnimNode_SkeletalControlBase), 0x0010000000000005, Z_Construct_UScriptStruct_FComponentSpacePoseLink());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_ActualAlpha, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("Category"), TEXT("Performance"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("DisplayName"), TEXT("LOD Threshold"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_LODThreshold, TEXT("ToolTip"), TEXT("* Max LOD that this node is allowed to run\n* For example if you have LODThreadhold to be 2, it will run until LOD 2 (based on 0 index)\n* when the component LOD becomes 3, it will stop update/evaluate\n* currently transition would be issue and that has to be re-visited"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_AlphaScaleBias, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_Alpha, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_Alpha, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Alpha, TEXT("ToolTip"), TEXT("Current strength of the skeletal control"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("Category"), TEXT("Links"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SkeletalControlBase.h"));
			MetaData->SetValue(NewProp_ComponentPose, TEXT("ToolTip"), TEXT("Input link"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase_CRC() { return 2926894437U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESphericalLimitType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESphericalLimitType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESphericalLimitType::Inner")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESphericalLimitType::Outer")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("ESphericalLimitType::ESphericalLimitType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESphericalLimitType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Whether spheres keep bodies inside, or outside of their shape"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType_CRC() { return 1497229965U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("AnimPhysSimSpaceType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysSimSpaceType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::Component")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::Actor")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::World")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::RootRelative")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::BoneRelative")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysSimSpaceType::AnimPhysSimSpaceType_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("AnimPhysSimSpaceType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Actor.ToolTip"), TEXT("Sim origin is the location/orientation of the actor containing the skeletal mesh component."));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("BoneRelative.ToolTip"), TEXT("Sim origin is the location/orientation of the bone specified in RelativeSpaceBone"));
			MetaData->SetValue(ReturnEnum, TEXT("Component.ToolTip"), TEXT("Sim origin is the location/orientation of the skeletal mesh component."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RootRelative.ToolTip"), TEXT("Sim origin is the location/orientation of the root bone."));
			MetaData->SetValue(ReturnEnum, TEXT("World.ToolTip"), TEXT("Sim origin is the world origin. Teleporting characters is not recommended in this mode."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType_CRC() { return 1407878167U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("AnimPhysLinearConstraintType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysLinearConstraintType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysLinearConstraintType::Free")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysLinearConstraintType::Limited")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysLinearConstraintType::AnimPhysLinearConstraintType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("AnimPhysLinearConstraintType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Supported linear axis constraints"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType_CRC() { return 1061857838U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("AnimPhysAngularConstraintType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysAngularConstraintType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysAngularConstraintType::Angular")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysAngularConstraintType::Cone")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("AnimPhysAngularConstraintType::AnimPhysAngularConstraintType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("AnimPhysAngularConstraintType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Supported angular constraint types"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType_CRC() { return 2821984215U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_AnimDynamics()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AnimDynamics_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_AnimDynamics"), sizeof(FAnimNode_AnimDynamics), Get_Z_Construct_UScriptStruct_FAnimNode_AnimDynamics_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_AnimDynamics"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_AnimDynamics>, EStructFlags(0x00000201));
			UProperty* NewProp_ExternalForce = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExternalForce"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ExternalForce, FAnimNode_AnimDynamics), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SphereCollisionRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SphereCollisionRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereCollisionRadius, FAnimNode_AnimDynamics), 0x0010000000000001);
			UProperty* NewProp_CollisionType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(CollisionType, FAnimNode_AnimDynamics), 0x0010000000000001, Z_Construct_UEnum_Engine_AnimPhysCollisionType());
			UProperty* NewProp_CollisionType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_CollisionType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_SphericalLimits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SphericalLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SphericalLimits, FAnimNode_AnimDynamics), 0x0010000000000005);
			UProperty* NewProp_SphericalLimits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SphericalLimits, TEXT("SphericalLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimPhysSphericalLimit());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseSphericalLimits, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bUseSphericalLimits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseSphericalLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseSphericalLimits, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseSphericalLimits, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_PlanarLimits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlanarLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PlanarLimits, FAnimNode_AnimDynamics), 0x0010000000000005);
			UProperty* NewProp_PlanarLimits_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PlanarLimits, TEXT("PlanarLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimPhysPlanarLimit());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePlanarLimit, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bUsePlanarLimit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUsePlanarLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePlanarLimit, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUsePlanarLimit, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_ConstraintSetup = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConstraintSetup"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ConstraintSetup, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FAnimPhysConstraintSetup());
			UProperty* NewProp_NumSolverIterationsPostUpdate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumSolverIterationsPostUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumSolverIterationsPostUpdate, FAnimNode_AnimDynamics), 0x0010040000000001);
			UProperty* NewProp_NumSolverIterationsPreUpdate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumSolverIterationsPreUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumSolverIterationsPreUpdate, FAnimNode_AnimDynamics), 0x0010040000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoEval, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bDoEval = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDoEval"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoEval, FAnimNode_AnimDynamics), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bDoEval, FAnimNode_AnimDynamics), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDoUpdate, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bDoUpdate = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDoUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDoUpdate, FAnimNode_AnimDynamics), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bDoUpdate, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_AngularBiasOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularBiasOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularBiasOverride, FAnimNode_AnimDynamics), 0x0010040000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAngularBias, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bOverrideAngularBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverrideAngularBias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAngularBias, FAnimNode_AnimDynamics), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideAngularBias, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_AngularDampingOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularDampingOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularDampingOverride, FAnimNode_AnimDynamics), 0x0010040000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAngularDamping, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bOverrideAngularDamping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverrideAngularDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAngularDamping, FAnimNode_AnimDynamics), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideAngularDamping, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_LinearDampingOverride = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearDampingOverride"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearDampingOverride, FAnimNode_AnimDynamics), 0x0010040000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideLinearDamping, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bOverrideLinearDamping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverrideLinearDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideLinearDamping, FAnimNode_AnimDynamics), 0x0010040000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideLinearDamping, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_WindScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WindScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WindScale, FAnimNode_AnimDynamics), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWindWasEnabled, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bWindWasEnabled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bWindWasEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWindWasEnabled, FAnimNode_AnimDynamics), 0x0010000000002000, CPP_BOOL_PROPERTY_BITMASK(bWindWasEnabled, FAnimNode_AnimDynamics), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableWind, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bEnableWind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableWind"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableWind, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnableWind, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_AngularSpringConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularSpringConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularSpringConstant, FAnimNode_AnimDynamics), 0x0010000000000005);
			UProperty* NewProp_LinearSpringConstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearSpringConstant"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LinearSpringConstant, FAnimNode_AnimDynamics), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAngularSpring, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bAngularSpring = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAngularSpring"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAngularSpring, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAngularSpring, FAnimNode_AnimDynamics), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearSpring, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bLinearSpring = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLinearSpring"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearSpring, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLinearSpring, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_GravityScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GravityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravityScale, FAnimNode_AnimDynamics), 0x0010000000000005);
			UProperty* NewProp_LocalJointOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LocalJointOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LocalJointOffset, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoxExtents = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoxExtents"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoxExtents, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_ChainEnd = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChainEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ChainEnd, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_BoundBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundBone, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bChain, FAnimNode_AnimDynamics, bool);
			UProperty* NewProp_bChain = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bChain"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bChain, FAnimNode_AnimDynamics), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bChain, FAnimNode_AnimDynamics), sizeof(bool), true);
			UProperty* NewProp_RelativeSpaceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RelativeSpaceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeSpaceBone, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_SimulationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(SimulationSpace, FAnimNode_AnimDynamics), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_AnimPhysSimSpaceType());
			UProperty* NewProp_SimulationSpace_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_SimulationSpace, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_ExternalForce, TEXT("Category"), TEXT("Forces"));
			MetaData->SetValue(NewProp_ExternalForce, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_ExternalForce, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_ExternalForce, TEXT("ToolTip"), TEXT("An external force to apply to all bodies in the simulation when ticked, specified in world space"));
			MetaData->SetValue(NewProp_SphereCollisionRadius, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(NewProp_SphereCollisionRadius, TEXT("ClampMin"), TEXT("1"));
			MetaData->SetValue(NewProp_SphereCollisionRadius, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_SphereCollisionRadius, TEXT("ToolTip"), TEXT("Radius to use if CollisionType is set to CustomSphere"));
			MetaData->SetValue(NewProp_SphereCollisionRadius, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_CollisionType, TEXT("Category"), TEXT("Collision"));
			MetaData->SetValue(NewProp_CollisionType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_CollisionType, TEXT("ToolTip"), TEXT("Resolution method for planar limits"));
			MetaData->SetValue(NewProp_SphericalLimits, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_SphericalLimits, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_SphericalLimits, TEXT("ToolTip"), TEXT("List of available spherical limits for this node"));
			MetaData->SetValue(NewProp_bUseSphericalLimits, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_bUseSphericalLimits, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bUseSphericalLimits, TEXT("ToolTip"), TEXT("Whether to evaluate spherical limits"));
			MetaData->SetValue(NewProp_PlanarLimits, TEXT("Category"), TEXT("PlanarLimit"));
			MetaData->SetValue(NewProp_PlanarLimits, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_PlanarLimits, TEXT("ToolTip"), TEXT("List of available planar limits for this node"));
			MetaData->SetValue(NewProp_bUsePlanarLimit, TEXT("Category"), TEXT("PlanarLimit"));
			MetaData->SetValue(NewProp_bUsePlanarLimit, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bUsePlanarLimit, TEXT("ToolTip"), TEXT("Whether to evaluate planar limits"));
			MetaData->SetValue(NewProp_ConstraintSetup, TEXT("Category"), TEXT("Constraint"));
			MetaData->SetValue(NewProp_ConstraintSetup, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_ConstraintSetup, TEXT("ToolTip"), TEXT("Data describing the constraints we will apply to the body"));
			MetaData->SetValue(NewProp_NumSolverIterationsPostUpdate, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_NumSolverIterationsPostUpdate, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_NumSolverIterationsPostUpdate, TEXT("ToolTip"), TEXT("Number of update passes on the linear and angular limits after we solve the position of the bodies, recommended to be around a quarter of NumSolverIterationsPreUpdate"));
			MetaData->SetValue(NewProp_NumSolverIterationsPreUpdate, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_NumSolverIterationsPreUpdate, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_NumSolverIterationsPreUpdate, TEXT("ToolTip"), TEXT("Number of update passes on the linear and angular limits before we solve the position of the bodies recommended to be four times the value of NumSolverIterationsPostUpdate"));
			MetaData->SetValue(NewProp_bDoEval, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bDoEval, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bDoEval, TEXT("ToolTip"), TEXT("If true we will perform bone transform evaluation, otherwise skip - allows visualisation of the initial anim state compared to the physics sim"));
			MetaData->SetValue(NewProp_bDoUpdate, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bDoUpdate, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bDoUpdate, TEXT("ToolTip"), TEXT("If true we will perform physics update, otherwise skip - allows visualisation of the initial state of the bodies"));
			MetaData->SetValue(NewProp_AngularBiasOverride, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_AngularBiasOverride, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularBiasOverride, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_AngularBiasOverride, TEXT("ToolTip"), TEXT("Overridden angular bias value\nAngular bias is essentially a twist reduction for chain forces and defaults to a value to keep chains stability\nin check. When using single-body systems sometimes angular forces will look like they are \"catching-up\" with\nthe mesh, if that's the case override this and push it towards 1.0f until it settles correctly"));
			MetaData->SetValue(NewProp_bOverrideAngularBias, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bOverrideAngularBias, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bOverrideAngularBias, TEXT("ToolTip"), TEXT("If true, the override value will be used for the angular bias for bodies in this node.\nAngular bias is essentially a twist reduction for chain forces and defaults to a value to keep chains stability\nin check. When using single-body systems sometimes angular forces will look like they are \"catching-up\" with\nthe mesh, if that's the case override this and push it towards 1.0f until it settles correctly"));
			MetaData->SetValue(NewProp_AngularDampingOverride, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_AngularDampingOverride, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularDampingOverride, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_AngularDampingOverride, TEXT("ToolTip"), TEXT("Overridden angular damping value"));
			MetaData->SetValue(NewProp_bOverrideAngularDamping, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bOverrideAngularDamping, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bOverrideAngularDamping, TEXT("ToolTip"), TEXT("If true, the override value will be used for angular damping"));
			MetaData->SetValue(NewProp_LinearDampingOverride, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_LinearDampingOverride, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearDampingOverride, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LinearDampingOverride, TEXT("ToolTip"), TEXT("Overridden linear damping value"));
			MetaData->SetValue(NewProp_bOverrideLinearDamping, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bOverrideLinearDamping, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bOverrideLinearDamping, TEXT("ToolTip"), TEXT("If true, the override value will be used for linear damping"));
			MetaData->SetValue(NewProp_WindScale, TEXT("Category"), TEXT("Wind"));
			MetaData->SetValue(NewProp_WindScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_WindScale, TEXT("ToolTip"), TEXT("Scale to apply to calculated wind velocities in the solver"));
			MetaData->SetValue(NewProp_bWindWasEnabled, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bEnableWind, TEXT("Category"), TEXT("Wind"));
			MetaData->SetValue(NewProp_bEnableWind, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bEnableWind, TEXT("ToolTip"), TEXT("Whether or not wind is enabled for the bodies in this simulation"));
			MetaData->SetValue(NewProp_AngularSpringConstant, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_AngularSpringConstant, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularSpringConstant, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_AngularSpringConstant, TEXT("ToolTip"), TEXT("Spring constant to use when calculating angular springs, higher values mean a stronger spring"));
			MetaData->SetValue(NewProp_LinearSpringConstant, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_LinearSpringConstant, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearSpringConstant, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LinearSpringConstant, TEXT("ToolTip"), TEXT("Spring constant to use when calculating linear springs, higher values mean a stronger spring."));
			MetaData->SetValue(NewProp_bAngularSpring, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bAngularSpring, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bAngularSpring, TEXT("ToolTip"), TEXT("If true the body will attempt to align itself with the specified angular target"));
			MetaData->SetValue(NewProp_bLinearSpring, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bLinearSpring, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bLinearSpring, TEXT("ToolTip"), TEXT("If true the body will attempt to spring back to its initial position"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_GravityScale, TEXT("ToolTip"), TEXT("Scale for gravity, higher values increase forces due to gravity"));
			MetaData->SetValue(NewProp_LocalJointOffset, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_LocalJointOffset, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LocalJointOffset, TEXT("ToolTip"), TEXT("Vector relative to the body being simulated to attach the constraint to"));
			MetaData->SetValue(NewProp_BoxExtents, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_BoxExtents, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_BoxExtents, TEXT("ToolTip"), TEXT("Extents of the box to use for simulation"));
			MetaData->SetValue(NewProp_ChainEnd, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_ChainEnd, TEXT("EditCondition"), TEXT("bChain"));
			MetaData->SetValue(NewProp_ChainEnd, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_ChainEnd, TEXT("ToolTip"), TEXT("If bChain is true this is the bottom of the chain, otherwise ignored"));
			MetaData->SetValue(NewProp_BoundBone, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_BoundBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_BoundBone, TEXT("ToolTip"), TEXT("The bone to attach the physics body to, if bChain is true this is the top of the chain"));
			MetaData->SetValue(NewProp_bChain, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_bChain, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bChain, TEXT("ToolTip"), TEXT("Set to true to use the solver to simulate a connected chain"));
			MetaData->SetValue(NewProp_RelativeSpaceBone, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_RelativeSpaceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_RelativeSpaceBone, TEXT("ToolTip"), TEXT("When in BoneRelative sim space, the simulation will use this bone as the origin"));
			MetaData->SetValue(NewProp_SimulationSpace, TEXT("Category"), TEXT("Setup"));
			MetaData->SetValue(NewProp_SimulationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_SimulationSpace, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_SimulationSpace, TEXT("ToolTip"), TEXT("The space used to run the simulation"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_AnimDynamics_CRC() { return 3686271411U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysSphericalLimit()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimPhysSphericalLimit_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimPhysSphericalLimit"), sizeof(FAnimPhysSphericalLimit), Get_Z_Construct_UScriptStruct_FAnimPhysSphericalLimit_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysSphericalLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimPhysSphericalLimit>, EStructFlags(0x00000001));
			UProperty* NewProp_LimitType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LimitType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(LimitType, FAnimPhysSphericalLimit), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_ESphericalLimitType());
			UProperty* NewProp_LimitType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_LimitType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LimitRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LimitRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LimitRadius, FAnimPhysSphericalLimit), 0x0010000000000001);
			UProperty* NewProp_SphereLocalOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SphereLocalOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SphereLocalOffset, FAnimPhysSphericalLimit), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DrivingBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrivingBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DrivingBone, FAnimPhysSphericalLimit), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LimitType, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_LimitType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LimitType, TEXT("ToolTip"), TEXT("Whether to lock bodies inside or outside of the sphere"));
			MetaData->SetValue(NewProp_LimitRadius, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_LimitRadius, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LimitRadius, TEXT("ToolTip"), TEXT("Radius of the sphere"));
			MetaData->SetValue(NewProp_SphereLocalOffset, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_SphereLocalOffset, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_SphereLocalOffset, TEXT("ToolTip"), TEXT("Local offset for the sphere, if no driving bone is set this is in node space, otherwise bone space"));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("Category"), TEXT("SphericalLimit"));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("ToolTip"), TEXT("Bone to attach the sphere to"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimPhysSphericalLimit_CRC() { return 2552933071U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysPlanarLimit()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimPhysPlanarLimit_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimPhysPlanarLimit"), sizeof(FAnimPhysPlanarLimit), Get_Z_Construct_UScriptStruct_FAnimPhysPlanarLimit_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysPlanarLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimPhysPlanarLimit>, EStructFlags(0x00000001));
			UProperty* NewProp_PlaneTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlaneTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlaneTransform, FAnimPhysPlanarLimit), 0x0010000000000001, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_DrivingBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrivingBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DrivingBone, FAnimPhysPlanarLimit), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_PlaneTransform, TEXT("Category"), TEXT("PlanarLimit"));
			MetaData->SetValue(NewProp_PlaneTransform, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_PlaneTransform, TEXT("ToolTip"), TEXT("Transform of the plane, this is either in component-space if no DrivinBone is specified\nor in bone-space if a driving bone is present."));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("Category"), TEXT("PlanarLimit"));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_DrivingBone, TEXT("ToolTip"), TEXT("When using a driving bone, the plane transform will be relative to the bone transform"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimPhysPlanarLimit_CRC() { return 1252978449U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimPhysConstraintSetup()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimPhysConstraintSetup_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimPhysConstraintSetup"), sizeof(FAnimPhysConstraintSetup), Get_Z_Construct_UScriptStruct_FAnimPhysConstraintSetup_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimPhysConstraintSetup"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimPhysConstraintSetup>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLinearFullyLocked, FAnimPhysConstraintSetup, bool);
			UProperty* NewProp_bLinearFullyLocked = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLinearFullyLocked"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLinearFullyLocked, FAnimPhysConstraintSetup), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bLinearFullyLocked, FAnimPhysConstraintSetup), sizeof(bool), true);
			UProperty* NewProp_AngularTarget = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularTarget, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularTargetAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularTargetAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(AngularTargetAxis, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_Engine_AnimPhysTwistAxis());
			UProperty* NewProp_AngularTargetAxis_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_AngularTargetAxis, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_AngularLimitsMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularLimitsMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularLimitsMax, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularLimitsMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularLimitsMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularLimitsMin, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularZAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularZAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularZAngle_DEPRECATED, FAnimPhysConstraintSetup), 0x0010000020000000);
			UProperty* NewProp_AngularYAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularYAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularYAngle_DEPRECATED, FAnimPhysConstraintSetup), 0x0010000020000000);
			UProperty* NewProp_AngularXAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularXAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AngularXAngle_DEPRECATED, FAnimPhysConstraintSetup), 0x0010000020000000);
			UProperty* NewProp_ConeAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ConeAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ConeAngle, FAnimPhysConstraintSetup), 0x0010000000000001);
			UProperty* NewProp_TwistAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwistAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(TwistAxis, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_Engine_AnimPhysTwistAxis());
			UProperty* NewProp_TwistAxis_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_TwistAxis, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_AngularConstraintType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularConstraintType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(AngularConstraintType, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_AnimPhysAngularConstraintType());
			UProperty* NewProp_AngularConstraintType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_AngularConstraintType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LinearAxesMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearAxesMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinearAxesMax, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LinearAxesMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearAxesMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinearAxesMin, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LinearZLimitType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearZLimitType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(LinearZLimitType, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType());
			UProperty* NewProp_LinearZLimitType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_LinearZLimitType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LinearYLimitType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearYLimitType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(LinearYLimitType, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType());
			UProperty* NewProp_LinearYLimitType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_LinearYLimitType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_LinearXLimitType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LinearXLimitType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(LinearXLimitType, FAnimPhysConstraintSetup), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_AnimPhysLinearConstraintType());
			UProperty* NewProp_LinearXLimitType_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_LinearXLimitType, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Constraint setup struct, holds data required to build a physics constraint"));
			MetaData->SetValue(NewProp_bLinearFullyLocked, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_bLinearFullyLocked, TEXT("ToolTip"), TEXT("If all axes are locked we can use 3 linear limits instead of the 6 needed for limited axes"));
			MetaData->SetValue(NewProp_AngularTarget, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_AngularTarget, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularTarget, TEXT("ToolTip"), TEXT("Target direction to face for body1 (in body0 local space)"));
			MetaData->SetValue(NewProp_AngularTargetAxis, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_AngularTargetAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularTargetAxis, TEXT("ToolTip"), TEXT("Axis on body1 to match to the angular target direction."));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("ClampMax"), TEXT("180"));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("ClampMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("UIMax"), TEXT("180"));
			MetaData->SetValue(NewProp_AngularLimitsMax, TEXT("UIMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("ClampMax"), TEXT("180"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("ClampMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("UIMax"), TEXT("180"));
			MetaData->SetValue(NewProp_AngularLimitsMin, TEXT("UIMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_AngularZAngle, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularZAngle, TEXT("ToolTip"), TEXT("Z-axis limit for angular motion when using the \"Angular\" constraint type (Set to 0 to lock, or 180 to remain free)"));
			MetaData->SetValue(NewProp_AngularYAngle, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularYAngle, TEXT("ToolTip"), TEXT("Y-axis limit for angular motion when using the \"Angular\" constraint type (Set to 0 to lock, or 180 to remain free)"));
			MetaData->SetValue(NewProp_AngularXAngle, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularXAngle, TEXT("ToolTip"), TEXT("X-axis limit for angular motion when using the \"Angular\" constraint type (Set to 0 to lock, or 180 to remain free)"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("ClampMax"), TEXT("90"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("ToolTip"), TEXT("Angle to use when constraining using a cone"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("UIMax"), TEXT("90"));
			MetaData->SetValue(NewProp_ConeAngle, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_TwistAxis, TEXT("ToolTip"), TEXT("Axis to consider for twist when constraining angular motion (forward axis)"));
			MetaData->SetValue(NewProp_AngularConstraintType, TEXT("Category"), TEXT("Angular"));
			MetaData->SetValue(NewProp_AngularConstraintType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_AngularConstraintType, TEXT("ToolTip"), TEXT("Method to use when constraining angular motion"));
			MetaData->SetValue(NewProp_LinearAxesMax, TEXT("Category"), TEXT("Linear"));
			MetaData->SetValue(NewProp_LinearAxesMax, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LinearAxesMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearAxesMax, TEXT("ToolTip"), TEXT("Maximum linear movement per-axis (Set zero here and in the min limit to lock)"));
			MetaData->SetValue(NewProp_LinearAxesMax, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LinearAxesMin, TEXT("Category"), TEXT("Linear"));
			MetaData->SetValue(NewProp_LinearAxesMin, TEXT("ClampMax"), TEXT("0"));
			MetaData->SetValue(NewProp_LinearAxesMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearAxesMin, TEXT("ToolTip"), TEXT("Minimum linear movement per-axis (Set zero here and in the max limit to lock)"));
			MetaData->SetValue(NewProp_LinearAxesMin, TEXT("UIMax"), TEXT("0"));
			MetaData->SetValue(NewProp_LinearZLimitType, TEXT("Category"), TEXT("Linear"));
			MetaData->SetValue(NewProp_LinearZLimitType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearZLimitType, TEXT("ToolTip"), TEXT("Whether to limit the linear Z axis"));
			MetaData->SetValue(NewProp_LinearYLimitType, TEXT("Category"), TEXT("Linear"));
			MetaData->SetValue(NewProp_LinearYLimitType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearYLimitType, TEXT("ToolTip"), TEXT("Whether to limit the linear Y axis"));
			MetaData->SetValue(NewProp_LinearXLimitType, TEXT("Category"), TEXT("Linear"));
			MetaData->SetValue(NewProp_LinearXLimitType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_AnimDynamics.h"));
			MetaData->SetValue(NewProp_LinearXLimitType, TEXT("ToolTip"), TEXT("Whether to limit the linear X axis"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimPhysConstraintSetup_CRC() { return 1536722895U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDrivenDestinationMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDrivenDestinationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenDestinationMode::Bone")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenDestinationMode::MorphTarget")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenDestinationMode::MaterialParameter")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenDestinationMode::EDrivenDestinationMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDrivenDestinationMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Type of destination value to drive"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode_CRC() { return 2188820717U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDrivenBoneModificationMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDrivenBoneModificationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenBoneModificationMode::AddToInput")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenBoneModificationMode::ReplaceComponent")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenBoneModificationMode::AddToRefPose")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EDrivenBoneModificationMode::EDrivenBoneModificationMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDrivenBoneModificationMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AddToInput.ToolTip"), TEXT("Add the driven value to the input component value(s)"));
			MetaData->SetValue(ReturnEnum, TEXT("AddToRefPose.ToolTip"), TEXT("Add the driven value to the reference pose value"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ReplaceComponent.ToolTip"), TEXT("Replace the input component value(s) with the driven value"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The type of modification to make to the destination component(s)"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode_CRC() { return 2645243644U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EComponentType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EComponentType"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EComponentType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::None")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::TranslationX")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::TranslationY")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::TranslationZ")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::RotationX")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::RotationY")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::RotationZ")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::Scale")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::ScaleX")), 8));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::ScaleY")), 9));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::ScaleZ")), 10));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EComponentType::EComponentType_MAX")), 11));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EComponentType::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scale.DisplayName"), TEXT("Scale (largest component)"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The transform component (attribute) to read from"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EComponentType_CRC() { return 3075825011U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_BoneDrivenController"), sizeof(FAnimNode_BoneDrivenController), Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_BoneDrivenController"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_BoneDrivenController>, EStructFlags(0x00000201));
			UProperty* NewProp_ModificationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ModificationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(ModificationMode, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_EDrivenBoneModificationMode());
			UProperty* NewProp_ModificationMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_ModificationMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleZ, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleY, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetScaleX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetScaleX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetScaleX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetScaleX, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetScaleX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationZ, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationY, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetRotationX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetRotationX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetRotationX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetRotationX, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetRotationX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationZ, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationY, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationY, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationY, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAffectTargetTranslationX, FAnimNode_BoneDrivenController, uint8);
			UProperty* NewProp_bAffectTargetTranslationX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAffectTargetTranslationX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAffectTargetTranslationX, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bAffectTargetTranslationX, FAnimNode_BoneDrivenController), sizeof(uint8), false);
			UProperty* NewProp_TargetComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TargetComponent_DEPRECATED, FAnimNode_BoneDrivenController), 0x0040000020000000, Z_Construct_UEnum_AnimGraphRuntime_EComponentType());
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_ParameterName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ParameterName, FAnimNode_BoneDrivenController), 0x0010000000000001);
			UProperty* NewProp_DestinationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DestinationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(DestinationMode, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_EDrivenDestinationMode());
			UProperty* NewProp_DestinationMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_DestinationMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_RemappedMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RemappedMax, FAnimNode_BoneDrivenController), 0x0010000000000001);
			UProperty* NewProp_RemappedMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RemappedMin, FAnimNode_BoneDrivenController), 0x0010000000000001);
			UProperty* NewProp_RangeMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RangeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RangeMax, FAnimNode_BoneDrivenController), 0x0010000000000001);
			UProperty* NewProp_RangeMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RangeMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RangeMin, FAnimNode_BoneDrivenController), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseRange, FAnimNode_BoneDrivenController, bool);
			UProperty* NewProp_bUseRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseRange"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseRange, FAnimNode_BoneDrivenController), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bUseRange, FAnimNode_BoneDrivenController), sizeof(bool), true);
			UProperty* NewProp_Multiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Multiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Multiplier, FAnimNode_BoneDrivenController), 0x0010000000000001);
			UProperty* NewProp_DrivingCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrivingCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DrivingCurve, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
			UProperty* NewProp_SourceComponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SourceComponent, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UEnum_AnimGraphRuntime_EComponentType());
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_BoneDrivenController), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is the runtime version of a bone driven controller, which maps part of the state from one bone to another (e.g., 2 * source.x -> target.z)"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_ModificationMode, TEXT("ToolTip"), TEXT("The type of modification to make to the destination component(s)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleZ, TEXT("ToolTip"), TEXT("Affect the Z component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleY, TEXT("ToolTip"), TEXT("Affect the Y component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetScaleX, TEXT("ToolTip"), TEXT("Affect the X component of scale on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationZ, TEXT("ToolTip"), TEXT("Affect the Z component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationY, TEXT("ToolTip"), TEXT("Affect the Y component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetRotationX, TEXT("ToolTip"), TEXT("Affect the X component of rotation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("DisplayName"), TEXT("Z"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationZ, TEXT("ToolTip"), TEXT("Affect the Z component of translation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("DisplayName"), TEXT("Y"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationY, TEXT("ToolTip"), TEXT("Affect the Y component of translation on the target bone"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("DisplayName"), TEXT("X"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bAffectTargetTranslationX, TEXT("ToolTip"), TEXT("Affect the X component of translation on the target bone"));
			MetaData->SetValue(NewProp_TargetComponent, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Bone to drive using controller input"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_ParameterName, TEXT("ToolTip"), TEXT("Name of Morph Target to drive using the source attribute"));
			MetaData->SetValue(NewProp_DestinationMode, TEXT("Category"), TEXT("Destination (driven)"));
			MetaData->SetValue(NewProp_DestinationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_DestinationMode, TEXT("ToolTip"), TEXT("Type of destination to drive, currently either bone or morph target"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("DisplayName"), TEXT("Mapped Range Max"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ToolTip"), TEXT("Maximum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("DisplayName"), TEXT("Mapped Range Min"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ToolTip"), TEXT("Minimum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("DisplayName"), TEXT("Source Range Max"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ToolTip"), TEXT("Maximum limit of the input value (mapped to RemappedMax, only used when limiting the source range)"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("DisplayName"), TEXT("Source Range Min"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_RangeMin, TEXT("ToolTip"), TEXT("Minimum limit of the input value (mapped to RemappedMin, only used when limiting the source range)"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("DisplayName"), TEXT("Remap Source"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_bUseRange, TEXT("ToolTip"), TEXT("Whether or not to clamp the driver value and remap it before scaling it"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ToolTip"), TEXT("Multiplier to apply to the input value (Note: Ignored when a curve is used)"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_DrivingCurve, TEXT("ToolTip"), TEXT("Curve used to map from the source attribute to the driven attributes if present (otherwise the Multiplier will be used)"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("Category"), TEXT("Source (driver)"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_SourceComponent, TEXT("ToolTip"), TEXT("Transform component to use as input"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Source (driver)"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_BoneDrivenController.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Bone to use as controller input"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_BoneDrivenController_CRC() { return 19367115U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBone()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_CopyBone"), sizeof(FAnimNode_CopyBone), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_CopyBone"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_CopyBone>, EStructFlags(0x00000201));
			UProperty* NewProp_ControlSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ControlSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ControlSpace, FAnimNode_CopyBone), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyScale, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyScale, FAnimNode_CopyBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyScale, FAnimNode_CopyBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyRotation, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyRotation, FAnimNode_CopyBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyRotation, FAnimNode_CopyBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyTranslation, FAnimNode_CopyBone, bool);
			UProperty* NewProp_bCopyTranslation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyTranslation, FAnimNode_CopyBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyTranslation, FAnimNode_CopyBone), sizeof(bool), true);
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_CopyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_CopyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller to copy a bone's transform to another one."));
			MetaData->SetValue(NewProp_ControlSpace, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_ControlSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_ControlSpace, TEXT("ToolTip"), TEXT("Space to convert transforms into prior to copying components"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("ToolTip"), TEXT("If Scale should be copied"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("ToolTip"), TEXT("If Rotation should be copied"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("ToolTip"), TEXT("If Translation should be copied"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Copy"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBone.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Source Bone Name to get transform from"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBone_CRC() { return 3065948247U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("CopyBoneDeltaMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CopyBoneDeltaMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CopyBoneDeltaMode::Accumulate")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CopyBoneDeltaMode::Copy")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("CopyBoneDeltaMode::CopyBoneDeltaMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("CopyBoneDeltaMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode_CRC() { return 319095027U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_CopyBoneDelta"), sizeof(FAnimNode_CopyBoneDelta), Get_Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_CopyBoneDelta"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_CopyBoneDelta>, EStructFlags(0x00000201));
			UProperty* NewProp_ScaleMultiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleMultiplier, FAnimNode_CopyBoneDelta), 0x0010000000000005);
			UProperty* NewProp_RotationMultiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationMultiplier, FAnimNode_CopyBoneDelta), 0x0010000000000005);
			UProperty* NewProp_TranslationMultiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranslationMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TranslationMultiplier, FAnimNode_CopyBoneDelta), 0x0010000000000005);
			UProperty* NewProp_CopyMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CopyMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnumProperty(CPP_PROPERTY_BASE(CopyMode, FAnimNode_CopyBoneDelta), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_CopyBoneDeltaMode());
			UProperty* NewProp_CopyMode_Underlying = new(EC_InternalUseOnlyConstructor, NewProp_CopyMode, TEXT("UnderlyingType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyScale, FAnimNode_CopyBoneDelta, bool);
			UProperty* NewProp_bCopyScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyScale, FAnimNode_CopyBoneDelta), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyScale, FAnimNode_CopyBoneDelta), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyRotation, FAnimNode_CopyBoneDelta, bool);
			UProperty* NewProp_bCopyRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyRotation, FAnimNode_CopyBoneDelta), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyRotation, FAnimNode_CopyBoneDelta), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCopyTranslation, FAnimNode_CopyBoneDelta, bool);
			UProperty* NewProp_bCopyTranslation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bCopyTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCopyTranslation, FAnimNode_CopyBoneDelta), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCopyTranslation, FAnimNode_CopyBoneDelta), sizeof(bool), true);
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_CopyBoneDelta), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_CopyBoneDelta), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller to copy a transform relative to the ref pose to the target bone,\ninstead of the copy bone node which copies the absolute transform"));
			MetaData->SetValue(NewProp_ScaleMultiplier, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ScaleMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_ScaleMultiplier, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_RotationMultiplier, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_RotationMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_RotationMultiplier, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_TranslationMultiplier, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_TranslationMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_TranslationMultiplier, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_CopyMode, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_CopyMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_bCopyScale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_bCopyRotation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_bCopyTranslation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_CopyBoneDelta.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_CopyBoneDelta_CRC() { return 664870499U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Fabrik()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_Fabrik"), sizeof(FAnimNode_Fabrik), Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Fabrik"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_Fabrik>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebugDraw, FAnimNode_Fabrik, bool);
			UProperty* NewProp_bEnableDebugDraw = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebugDraw"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebugDraw, FAnimNode_Fabrik), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnableDebugDraw, FAnimNode_Fabrik), sizeof(bool), true);
			UProperty* NewProp_MaxIterations = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxIterations"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxIterations, FAnimNode_Fabrik), 0x0010000000000005);
			UProperty* NewProp_Precision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Precision"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Precision, FAnimNode_Fabrik), 0x0010000000000005);
			UProperty* NewProp_RootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RootBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RootBone, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_TipBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TipBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TipBone, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_EffectorRotationSource = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorRotationSource"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EffectorRotationSource, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneRotationSource());
			UProperty* NewProp_EffectorTransformBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransformBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EffectorTransformBone, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_EffectorTransformSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransformSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EffectorTransformSpace, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_EffectorTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EffectorTransform, FAnimNode_Fabrik), 0x0010000000000005, Z_Construct_UScriptStruct_FTransform());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_bEnableDebugDraw, TEXT("ToolTip"), TEXT("Toggle drawing of axes to debug joint rotation"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ToolTip"), TEXT("Maximum number of iterations allowed, to control performance."));
			MetaData->SetValue(NewProp_Precision, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_Precision, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_Precision, TEXT("ToolTip"), TEXT("Tolerance for final tip location delta from EffectorLocation"));
			MetaData->SetValue(NewProp_RootBone, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ToolTip"), TEXT("Name of the root bone"));
			MetaData->SetValue(NewProp_TipBone, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ToolTip"), TEXT("Name of tip bone"));
			MetaData->SetValue(NewProp_EffectorRotationSource, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorRotationSource, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformBone, TEXT("ToolTip"), TEXT("If EffectorTransformSpace is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransformSpace, TEXT("ToolTip"), TEXT("Reference frame of Effector Transform."));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Fabrik.h"));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_EffectorTransform, TEXT("ToolTip"), TEXT("Coordinates for target location of tip bone - if EffectorLocationSpace is bone, this is the offset from Target Bone to use as target location"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Fabrik_CRC() { return 3824381201U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_HandIKRetargeting"), sizeof(FAnimNode_HandIKRetargeting), Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_HandIKRetargeting"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_HandIKRetargeting>, EStructFlags(0x00000201));
			UProperty* NewProp_HandFKWeight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HandFKWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HandFKWeight, FAnimNode_HandIKRetargeting), 0x0010000000000005);
			UProperty* NewProp_IKBonesToMove = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IKBonesToMove"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(IKBonesToMove, FAnimNode_HandIKRetargeting), 0x0010000000000005);
			UProperty* NewProp_IKBonesToMove_Inner = new(EC_InternalUseOnlyConstructor, NewProp_IKBonesToMove, TEXT("IKBonesToMove"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_LeftHandIK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftHandIK"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LeftHandIK, FAnimNode_HandIKRetargeting), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RightHandIK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightHandIK"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RightHandIK, FAnimNode_HandIKRetargeting), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_LeftHandFK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftHandFK"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LeftHandFK, FAnimNode_HandIKRetargeting), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RightHandFK = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightHandFK"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RightHandFK, FAnimNode_HandIKRetargeting), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Node to handle re-targeting of Hand IK bone chain.\nIt looks at position in Mesh Space of Left and Right IK bones, and moves Left and Right IK bones to those.\nbased on HandFKWeight. (0 = favor left hand, 1 = favor right hand, 0.5 = equal weight).\nThis is used so characters of different proportions can handle the same props."));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_HandFKWeight, TEXT("ToolTip"), TEXT("Which hand to favor. 0.5 is equal weight for both, 1 = right hand, 0 = left hand."));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_IKBonesToMove, TEXT("ToolTip"), TEXT("IK Bones to move."));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_LeftHandIK, TEXT("ToolTip"), TEXT("Bone for Left Hand IK"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_RightHandIK, TEXT("ToolTip"), TEXT("Bone for Right Hand IK"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_LeftHandFK, TEXT("ToolTip"), TEXT("Bone for Left Hand FK"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("Category"), TEXT("HandIKRetargeting"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_HandIKRetargeting.h"));
			MetaData->SetValue(NewProp_RightHandFK, TEXT("ToolTip"), TEXT("Bone for Right Hand FK"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_HandIKRetargeting_CRC() { return 2512096530U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LegIK()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LegIK_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_LegIK"), sizeof(FAnimNode_LegIK), Get_Z_Construct_UScriptStruct_FAnimNode_LegIK_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_LegIK"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_LegIK>, EStructFlags(0x00000201));
			UProperty* NewProp_LegsData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LegsData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LegsData, FAnimNode_LegIK), 0x0010000000002000);
			UProperty* NewProp_LegsData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LegsData, TEXT("LegsData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimLegIKData());
			UProperty* NewProp_LegsDefinition = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LegsDefinition"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(LegsDefinition, FAnimNode_LegIK), 0x0010000000000001);
			UProperty* NewProp_LegsDefinition_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LegsDefinition, TEXT("LegsDefinition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FAnimLegIKDefinition());
			UProperty* NewProp_MaxIterations = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxIterations"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxIterations, FAnimNode_LegIK), 0x0010000000000001);
			UProperty* NewProp_ReachPrecision = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReachPrecision"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReachPrecision, FAnimNode_LegIK), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_LegsData, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_LegsDefinition, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_LegsDefinition, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_MaxIterations, TEXT("ToolTip"), TEXT("Max Number of Iterations."));
			MetaData->SetValue(NewProp_ReachPrecision, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_ReachPrecision, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_ReachPrecision, TEXT("ToolTip"), TEXT("Tolerance for reaching IK Target, in unreal units."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LegIK_CRC() { return 4040342126U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIKChain()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FIKChain_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("IKChain"), sizeof(FIKChain), Get_Z_Construct_UScriptStruct_FIKChain_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IKChain"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FIKChain>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIKChain_CRC() { return 1789279109U; }
	UScriptStruct* Z_Construct_UScriptStruct_FIKChainLink()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FIKChainLink_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("IKChainLink"), sizeof(FIKChainLink), Get_Z_Construct_UScriptStruct_FIKChainLink_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IKChainLink"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FIKChainLink>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FIKChainLink_CRC() { return 2684131216U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimLegIKData"), sizeof(FAnimLegIKData), Get_Z_Construct_UScriptStruct_FAnimLegIKData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimLegIKData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimLegIKData>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Runtime foot data after validation, we guarantee these bones to exist"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKData_CRC() { return 3800366556U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimLegIKDefinition()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKDefinition_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimLegIKDefinition"), sizeof(FAnimLegIKDefinition), Get_Z_Construct_UScriptStruct_FAnimLegIKDefinition_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimLegIKDefinition"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnimLegIKDefinition>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableKneeTwistCorrection, FAnimLegIKDefinition, bool);
			UProperty* NewProp_bEnableKneeTwistCorrection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableKneeTwistCorrection"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableKneeTwistCorrection, FAnimLegIKDefinition), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableKneeTwistCorrection, FAnimLegIKDefinition), sizeof(bool), true);
			UProperty* NewProp_MinRotationAngle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinRotationAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinRotationAngle, FAnimLegIKDefinition), 0x0010000000000001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableRotationLimit, FAnimLegIKDefinition, bool);
			UProperty* NewProp_bEnableRotationLimit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableRotationLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableRotationLimit, FAnimLegIKDefinition), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableRotationLimit, FAnimLegIKDefinition), sizeof(bool), true);
			UProperty* NewProp_FootBoneForwardAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FootBoneForwardAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FootBoneForwardAxis, FAnimLegIKDefinition), 0x0010000000000001, Z_Construct_UEnum_CoreUObject_EAxis());
			UProperty* NewProp_NumBonesInLimb = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NumBonesInLimb"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumBonesInLimb, FAnimLegIKDefinition), 0x0010000000000001);
			UProperty* NewProp_FKFootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FKFootBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FKFootBone, FAnimLegIKDefinition), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_IKFootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IKFootBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IKFootBone, FAnimLegIKDefinition), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Per foot definitions"));
			MetaData->SetValue(NewProp_bEnableKneeTwistCorrection, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bEnableKneeTwistCorrection, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_bEnableKneeTwistCorrection, TEXT("ToolTip"), TEXT("Enable Knee Twist correction, by comparing Foot FK with Foot IK orientation."));
			MetaData->SetValue(NewProp_MinRotationAngle, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_MinRotationAngle, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_MinRotationAngle, TEXT("ToolTip"), TEXT("Only used if bEnableRotationLimit is enabled. Prevents the leg from folding onto itself,\nand forces at least this angle between Parent and Child bone."));
			MetaData->SetValue(NewProp_bEnableRotationLimit, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_bEnableRotationLimit, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_bEnableRotationLimit, TEXT("ToolTip"), TEXT("If enabled, we prevent the leg from bending backwards and enforce a min compression angle"));
			MetaData->SetValue(NewProp_FootBoneForwardAxis, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_FootBoneForwardAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_FootBoneForwardAxis, TEXT("ToolTip"), TEXT("Forward Axis for Foot bone."));
			MetaData->SetValue(NewProp_NumBonesInLimb, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_NumBonesInLimb, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_FKFootBone, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_FKFootBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
			MetaData->SetValue(NewProp_IKFootBone, TEXT("Category"), TEXT("Settings"));
			MetaData->SetValue(NewProp_IKFootBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LegIK.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimLegIKDefinition_CRC() { return 835657971U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EInterpolationBlend"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInterpolationBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::Linear")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::Cubic")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::Sinusoidal")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::EaseInOutExponent2")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::EaseInOutExponent3")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::EaseInOutExponent4")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::EaseInOutExponent5")), 6));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::MAX")), 7));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EInterpolationBlend::EInterpolationBlend_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EInterpolationBlend::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Various ways to interpolate TAlphaBlend."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend_CRC() { return 2075291649U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EAxisOption()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAxisOption"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAxisOption"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::X")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::Y")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::Z")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::X_Neg")), 3));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::Y_Neg")), 4));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::Z_Neg")), 5));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("EAxisOption::EAxisOption_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EAxisOption::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EAxisOption_CRC() { return 3400007622U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_LookAt()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_LookAt"), sizeof(FAnimNode_LookAt), Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_LookAt"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_LookAt>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableDebug, FAnimNode_LookAt, bool);
			UProperty* NewProp_bEnableDebug = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bEnableDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableDebug, FAnimNode_LookAt), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableDebug, FAnimNode_LookAt), sizeof(bool), true);
			UProperty* NewProp_InterpolationTriggerThreashold = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationTriggerThreashold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTriggerThreashold, FAnimNode_LookAt), 0x0010000000000005);
			UProperty* NewProp_InterpolationTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTime, FAnimNode_LookAt), 0x0010000000000005);
			UProperty* NewProp_InterpolationType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterpolationType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InterpolationType, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EInterpolationBlend());
			UProperty* NewProp_LookAtClamp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtClamp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LookAtClamp, FAnimNode_LookAt), 0x0010000000000005);
			UProperty* NewProp_LookUpAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookUpAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LookUpAxis, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EAxisOption());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLookUpAxis, FAnimNode_LookAt, bool);
			UProperty* NewProp_bUseLookUpAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseLookUpAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLookUpAxis, FAnimNode_LookAt), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseLookUpAxis, FAnimNode_LookAt), sizeof(bool), true);
			UProperty* NewProp_LookAtAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LookAtAxis, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EAxisOption());
			UProperty* NewProp_LookAtLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LookAtLocation, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_LookAtSocket = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(LookAtSocket, FAnimNode_LookAt), 0x0010000000000005);
			UProperty* NewProp_LookAtBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LookAtBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LookAtBone, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_BoneToModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToModify"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoneToModify, FAnimNode_LookAt), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that make a bone to look at the point or another bone"));
			MetaData->SetValue(NewProp_bEnableDebug, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bEnableDebug, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTriggerThreashold, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationTime, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_InterpolationType, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtClamp, TEXT("ToolTip"), TEXT("Look at Clamp value in degree - if you're look at axis is Z, only X, Y degree of clamp will be used"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookUpAxis, TEXT("ToolTip"), TEXT("Look up axis in local space"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_bUseLookUpAxis, TEXT("ToolTip"), TEXT("Whether or not to use Look up axis"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtAxis, TEXT("ToolTip"), TEXT("Look at axis, which axis to align to look at point"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("Category"), TEXT("Target"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_LookAtLocation, TEXT("ToolTip"), TEXT("Target Location in world space if LookAtBone is empty"));
			MetaData->SetValue(NewProp_LookAtSocket, TEXT("Category"), TEXT("Target"));
			MetaData->SetValue(NewProp_LookAtSocket, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("Category"), TEXT("Target"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_LookAtBone, TEXT("ToolTip"), TEXT("Target Bone to look at - you can't use LookAtLocation as alternative as you'll get a delay on bone location if you query directly *"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_LookAt.h"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_LookAt_CRC() { return 1472946978U; }
	UEnum* Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBoneModificationMode"), 0, Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBoneModificationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, int64>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BMM_Ignore")), 0));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BMM_Replace")), 1));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BMM_Additive")), 2));
			EnumNames.Add(TPairInitializer<FName, int64>(FName(TEXT("BMM_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EBoneModificationMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Additive.DisplayName"), TEXT("Add to Existing"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Additive.ToolTip"), TEXT("The modifier adds to the existing translation, rotation, or scale."));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Ignore.DisplayName"), TEXT("Ignore"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Ignore.ToolTip"), TEXT("The modifier ignores this channel (keeps the existing bone translation, rotation, or scale)."));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Replace.DisplayName"), TEXT("Replace Existing"));
			MetaData->SetValue(ReturnEnum, TEXT("BMM_Replace.ToolTip"), TEXT("The modifier replaces the existing translation, rotation, or scale."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode_CRC() { return 3371451043U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ModifyBone()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ModifyBone"), sizeof(FAnimNode_ModifyBone), Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ModifyBone"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_ModifyBone>, EStructFlags(0x00000201));
			UProperty* NewProp_ScaleSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScaleSpace, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_RotationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RotationSpace, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_TranslationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranslationSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TranslationSpace, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_ScaleMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScaleMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ScaleMode, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_RotationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RotationMode, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_TranslationMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TranslationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TranslationMode, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UEnum_AnimGraphRuntime_EBoneModificationMode());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Scale, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Translation, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoneToModify = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToModify"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoneToModify, FAnimNode_ModifyBone), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that replaces or adds to the translation/rotation of a single bone."));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_ScaleSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Scale in."));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_RotationSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Rotation in."));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_TranslationSpace, TEXT("ToolTip"), TEXT("Reference frame to apply Translation in."));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_ScaleMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_RotationMode, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_RotationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_RotationMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_TranslationMode, TEXT("ToolTip"), TEXT("Whether and how to modify the translation of this bone."));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Scale"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("New Scale of bone to apply. This is only worldspace."));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("Rotation"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("New rotation of bone to apply."));
			MetaData->SetValue(NewProp_Translation, TEXT("Category"), TEXT("Translation"));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("New translation of bone to apply."));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ModifyBone.h"));
			MetaData->SetValue(NewProp_BoneToModify, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ModifyBone_CRC() { return 2947440859U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_ObserveBone()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_ObserveBone"), sizeof(FAnimNode_ObserveBone), Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_ObserveBone"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_ObserveBone>, EStructFlags(0x00000201));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Scale, FAnimNode_ObserveBone), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FAnimNode_ObserveBone), 0x0010000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Translation, FAnimNode_ObserveBone), 0x0010000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRelativeToRefPose, FAnimNode_ObserveBone, bool);
			UProperty* NewProp_bRelativeToRefPose = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRelativeToRefPose"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRelativeToRefPose, FAnimNode_ObserveBone), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bRelativeToRefPose, FAnimNode_ObserveBone), sizeof(bool), true);
			UProperty* NewProp_DisplaySpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisplaySpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DisplaySpace, FAnimNode_ObserveBone), 0x0010000000000001, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_BoneToObserve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoneToObserve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoneToObserve, FAnimNode_ObserveBone), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Debugging node that displays the current value of a bone in a specific space."));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Scale of the bone being observed."));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation of the bone being observed."));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("Translation of the bone being observed."));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_bRelativeToRefPose, TEXT("ToolTip"), TEXT("Show the difference from the reference pose?"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_DisplaySpace, TEXT("ToolTip"), TEXT("Reference frame to display the bone transform in."));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("Category"), TEXT("SkeletalControl"));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_ObserveBone.h"));
			MetaData->SetValue(NewProp_BoneToObserve, TEXT("ToolTip"), TEXT("Name of bone to observe."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_ObserveBone_CRC() { return 3520552613U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_RotationMultiplier"), sizeof(FAnimNode_RotationMultiplier), Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_RotationMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_RotationMultiplier>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsAdditive, FAnimNode_RotationMultiplier, bool);
			UProperty* NewProp_bIsAdditive = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsAdditive"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsAdditive, FAnimNode_RotationMultiplier), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsAdditive, FAnimNode_RotationMultiplier), sizeof(bool), true);
			UProperty* NewProp_RotationAxisToRefer = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationAxisToRefer"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RotationAxisToRefer, FAnimNode_RotationMultiplier), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneAxis());
			UProperty* NewProp_Multiplier = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Multiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Multiplier, FAnimNode_RotationMultiplier), 0x0010000000000005);
			UProperty* NewProp_SourceBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourceBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SourceBone, FAnimNode_RotationMultiplier), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_TargetBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetBone, FAnimNode_RotationMultiplier), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that multiplies scalar value to the translation/rotation/scale of a single bone."));
			MetaData->SetValue(NewProp_bIsAdditive, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_bIsAdditive, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_RotationAxisToRefer, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_RotationAxisToRefer, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_Multiplier, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Multiplier, TEXT("ToolTip"), TEXT("To make these to be easily pin-hookable, I'm not making it struct, but each variable\n0.f is invalid, and default"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_SourceBone, TEXT("ToolTip"), TEXT("Source to get transform from"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("Category"), TEXT("Multiplier"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_RotationMultiplier.h"));
			MetaData->SetValue(NewProp_TargetBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_RotationMultiplier_CRC() { return 884434161U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SpringBone()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_SpringBone"), sizeof(FAnimNode_SpringBone), Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SpringBone"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_SpringBone>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateZ, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateZ, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateZ, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateY, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateY, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateY, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateX, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bRotateX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bRotateX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateX, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateX, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateZ, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateZ"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateZ, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateZ, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateY, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateY, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateY, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTranslateX, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bTranslateX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTranslateX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTranslateX, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTranslateX, FAnimNode_SpringBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNoZSpring_DEPRECATED, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bNoZSpring = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bNoZSpring"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNoZSpring_DEPRECATED, FAnimNode_SpringBone), 0x0010000020000000, CPP_BOOL_PROPERTY_BITMASK(bNoZSpring_DEPRECATED, FAnimNode_SpringBone), sizeof(bool), true);
			UProperty* NewProp_ErrorResetThresh = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ErrorResetThresh"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ErrorResetThresh, FAnimNode_SpringBone), 0x0010000000000005);
			UProperty* NewProp_SpringDamping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpringDamping, FAnimNode_SpringBone), 0x0010000000000005);
			UProperty* NewProp_SpringStiffness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpringStiffness, FAnimNode_SpringBone), 0x0010000000000005);
			UProperty* NewProp_MaxDisplacement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxDisplacement, FAnimNode_SpringBone), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLimitDisplacement, FAnimNode_SpringBone, bool);
			UProperty* NewProp_bLimitDisplacement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLimitDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLimitDisplacement, FAnimNode_SpringBone), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLimitDisplacement, FAnimNode_SpringBone), sizeof(bool), true);
			UProperty* NewProp_SpringBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpringBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpringBone, FAnimNode_SpringBone), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple controller that replaces or adds to the translation/rotation of a single bone."));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateZ, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in Z"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateY, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in Y"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bRotateX, TEXT("ToolTip"), TEXT("If true take the spring calculation for rotation in X"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateZ, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in Z"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateY, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in Y"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("Category"), TEXT("FilterChannels"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bTranslateX, TEXT("ToolTip"), TEXT("If true take the spring calculation for translation in X"));
			MetaData->SetValue(NewProp_bNoZSpring, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bNoZSpring, TEXT("ToolTip"), TEXT("If true, Z position is always correct, no spring applied"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_ErrorResetThresh, TEXT("ToolTip"), TEXT("If spring stretches more than this, reset it. Useful for catching teleports etc"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringDamping, TEXT("ToolTip"), TEXT("Damping of spring"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringStiffness, TEXT("ToolTip"), TEXT("Stiffness of spring"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("EditCondition"), TEXT("bLimitDisplacement"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_MaxDisplacement, TEXT("ToolTip"), TEXT("If bLimitDisplacement is true, this indicates how long a bone can stretch beyond its length in the ref-pose."));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_bLimitDisplacement, TEXT("ToolTip"), TEXT("Limit the amount that a bone can stretch from its ref-pose length."));
			MetaData->SetValue(NewProp_SpringBone, TEXT("Category"), TEXT("Spring"));
			MetaData->SetValue(NewProp_SpringBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_SpringBone.h"));
			MetaData->SetValue(NewProp_SpringBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SpringBone_CRC() { return 3480457139U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_Trail()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_Trail"), sizeof(FAnimNode_Trail), Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_Trail"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_Trail>, EStructFlags(0x00000201));
			UProperty* NewProp_BaseJoint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BaseJoint"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BaseJoint, FAnimNode_Trail), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bActorSpaceFakeVel, FAnimNode_Trail, bool);
			UProperty* NewProp_bActorSpaceFakeVel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bActorSpaceFakeVel"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bActorSpaceFakeVel, FAnimNode_Trail), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bActorSpaceFakeVel, FAnimNode_Trail), sizeof(bool), true);
			UProperty* NewProp_FakeVelocity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FakeVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FakeVelocity, FAnimNode_Trail), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StretchLimit = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StretchLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StretchLimit, FAnimNode_Trail), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLimitStretch, FAnimNode_Trail, bool);
			UProperty* NewProp_bLimitStretch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLimitStretch"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLimitStretch, FAnimNode_Trail), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLimitStretch, FAnimNode_Trail), sizeof(bool), true);
			UProperty* NewProp_TrailRelaxationSpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrailRelaxationSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TrailRelaxationSpeed, FAnimNode_Trail), 0x0010000000000005, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
			UProperty* NewProp_TrailRelaxation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrailRelaxation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TrailRelaxation_DEPRECATED, FAnimNode_Trail), 0x0010000020000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInvertChainBoneAxis, FAnimNode_Trail, bool);
			UProperty* NewProp_bInvertChainBoneAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInvertChainBoneAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInvertChainBoneAxis, FAnimNode_Trail), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bInvertChainBoneAxis, FAnimNode_Trail), sizeof(bool), true);
			UProperty* NewProp_ChainBoneAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChainBoneAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ChainBoneAxis, FAnimNode_Trail), 0x0010000000000005, Z_Construct_UEnum_CoreUObject_EAxis());
			UProperty* NewProp_ChainLength = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChainLength"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ChainLength, FAnimNode_Trail), 0x0010000000000005);
			UProperty* NewProp_TrailBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TrailBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TrailBone, FAnimNode_Trail), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Trail Controller"));
			MetaData->SetValue(NewProp_BaseJoint, TEXT("Category"), TEXT("Velocity"));
			MetaData->SetValue(NewProp_BaseJoint, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_BaseJoint, TEXT("ToolTip"), TEXT("Base Joint to calculate velocity from. If none, it will use Component's World Transform. ."));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("Category"), TEXT("Velocity"));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bActorSpaceFakeVel, TEXT("ToolTip"), TEXT("Whether 'fake' velocity should be applied in actor or world space."));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("Category"), TEXT("Velocity"));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_FakeVelocity, TEXT("ToolTip"), TEXT("'Fake' velocity applied to bones."));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("Category"), TEXT("Limit"));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_StretchLimit, TEXT("ToolTip"), TEXT("If bLimitStretch is true, this indicates how long a bone can stretch beyond its length in the ref-pose."));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("Category"), TEXT("Limit"));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bLimitStretch, TEXT("ToolTip"), TEXT("Limit the amount that a bone can stretch from its ref-pose length."));
			MetaData->SetValue(NewProp_TrailRelaxationSpeed, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_TrailRelaxationSpeed, TEXT("CustomizeProperty"), TEXT(""));
			MetaData->SetValue(NewProp_TrailRelaxationSpeed, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_TrailRelaxationSpeed, TEXT("ToolTip"), TEXT("How quickly we 'relax' the bones to their animated positions. Time 0 will map to top root joint, time 1 will map to the bottom joint."));
			MetaData->SetValue(NewProp_TrailRelaxation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_TrailRelaxation, TEXT("ToolTip"), TEXT("How quickly we 'relax' the bones to their animated positions. Deprecated. Replaced to TrailRelaxationCurve"));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_bInvertChainBoneAxis, TEXT("ToolTip"), TEXT("Invert the direction specified in ChainBoneAxis."));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_ChainBoneAxis, TEXT("ToolTip"), TEXT("Axis of the bones to point along trail."));
			MetaData->SetValue(NewProp_ChainLength, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ClampMin"), TEXT("2"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_ChainLength, TEXT("ToolTip"), TEXT("Number of bones above the active one in the hierarchy to modify. ChainLength should be at least 2."));
			MetaData->SetValue(NewProp_ChainLength, TEXT("UIMin"), TEXT("2"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("Category"), TEXT("Trail"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_Trail.h"));
			MetaData->SetValue(NewProp_TrailBone, TEXT("ToolTip"), TEXT("Reference to the active bone in the hierarchy to modify."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_Trail_CRC() { return 3548738237U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_TwistCorrectiveNode"), sizeof(FAnimNode_TwistCorrectiveNode), Get_Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TwistCorrectiveNode"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_TwistCorrectiveNode>, EStructFlags(0x00000201));
			UProperty* NewProp_Curve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Curve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Curve, FAnimNode_TwistCorrectiveNode), 0x0010000000000001, Z_Construct_UScriptStruct_FAnimCurveParam());
			UProperty* NewProp_RemappedMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RemappedMax, FAnimNode_TwistCorrectiveNode), 0x0010000000000001);
			UProperty* NewProp_RemappedMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RemappedMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RemappedMin, FAnimNode_TwistCorrectiveNode), 0x0010000000000001);
			UProperty* NewProp_RangeMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RangeMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RangeMax, FAnimNode_TwistCorrectiveNode), 0x0010000000000001);
			UProperty* NewProp_TwistPlaneNormalAxis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwistPlaneNormalAxis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TwistPlaneNormalAxis, FAnimNode_TwistCorrectiveNode), 0x0010000000000001, Z_Construct_UScriptStruct_FAxis());
			UProperty* NewProp_TwistFrame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TwistFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TwistFrame, FAnimNode_TwistCorrectiveNode), 0x0010000000000001, Z_Construct_UScriptStruct_FReferenceBoneFrame());
			UProperty* NewProp_BaseFrame = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BaseFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BaseFrame, FAnimNode_TwistCorrectiveNode), 0x0010000000000001, Z_Construct_UScriptStruct_FReferenceBoneFrame());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("This is the node that apply corrective morphtarget for twist\nGood example is that if you twist your neck too far right or left, you're going to see odd stretch shape of neck,\nThis node can detect the angle and apply morphtarget curve\nThis isn't the twist control node for bone twist"));
			MetaData->SetValue(NewProp_Curve, TEXT("Category"), TEXT("Output Curve"));
			MetaData->SetValue(NewProp_Curve, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("DisplayName"), TEXT("Mapped Range Max"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_RemappedMax, TEXT("ToolTip"), TEXT("Maximum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("DisplayName"), TEXT("Mapped Range Min"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_RemappedMin, TEXT("ToolTip"), TEXT("Minimum value to apply to the destination (remapped from the input range)"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("Category"), TEXT("Mapping"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ClampMax"), TEXT("90.000000"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ClampMin"), TEXT("0.000000"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("DisplayName"), TEXT("Max Angle In Degree"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("EditCondition"), TEXT("bUseRange"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("ToolTip"), TEXT("Maximum limit of the input value (mapped to RemappedMax, only used when limiting the source range)\nWe can't go more than 180 right now because this is dot product driver"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("UIMax"), TEXT("90.000000"));
			MetaData->SetValue(NewProp_RangeMax, TEXT("UIMin"), TEXT("0.000000"));
			MetaData->SetValue(NewProp_TwistPlaneNormalAxis, TEXT("Category"), TEXT("Reference Frame"));
			MetaData->SetValue(NewProp_TwistPlaneNormalAxis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_TwistPlaneNormalAxis, TEXT("ToolTip"), TEXT("Normal of the Plane that we'd like to calculate angle calculation from in BaseFrame. Please note we're looking for Normal Axis"));
			MetaData->SetValue(NewProp_TwistFrame, TEXT("Category"), TEXT("Reference Frame"));
			MetaData->SetValue(NewProp_TwistFrame, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_TwistFrame, TEXT("ToolTip"), TEXT("Transform component to use as input"));
			MetaData->SetValue(NewProp_BaseFrame, TEXT("Category"), TEXT("Reference Frame"));
			MetaData->SetValue(NewProp_BaseFrame, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_BaseFrame, TEXT("ToolTip"), TEXT("Base Frame of the reference for the twist node"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwistCorrectiveNode_CRC() { return 475002145U; }
	UScriptStruct* Z_Construct_UScriptStruct_FReferenceBoneFrame()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FReferenceBoneFrame_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ReferenceBoneFrame"), sizeof(FReferenceBoneFrame), Get_Z_Construct_UScriptStruct_FReferenceBoneFrame_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReferenceBoneFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FReferenceBoneFrame>, EStructFlags(0x00000001));
			UProperty* NewProp_Axis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Axis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Axis, FReferenceBoneFrame), 0x0010000000000001, Z_Construct_UScriptStruct_FAxis());
			UProperty* NewProp_Bone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Bone, FReferenceBoneFrame), 0x0010000000000001, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Reference Bone Frame"));
			MetaData->SetValue(NewProp_Axis, TEXT("Category"), TEXT("FReferenceBoneFrame"));
			MetaData->SetValue(NewProp_Axis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_Bone, TEXT("Category"), TEXT("FReferenceBoneFrame"));
			MetaData->SetValue(NewProp_Bone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FReferenceBoneFrame_CRC() { return 3588463168U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAxis()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAxis_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("Axis"), sizeof(FAxis), Get_Z_Construct_UScriptStruct_FAxis_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Axis"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAxis>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInLocalSpace, FAxis, bool);
			UProperty* NewProp_bInLocalSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInLocalSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInLocalSpace, FAxis), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bInLocalSpace, FAxis), sizeof(bool), true);
			UProperty* NewProp_Axis = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Axis"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Axis, FAxis), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Axis to represent direction"));
			MetaData->SetValue(NewProp_bInLocalSpace, TEXT("Category"), TEXT("FAxis"));
			MetaData->SetValue(NewProp_bInLocalSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
			MetaData->SetValue(NewProp_Axis, TEXT("Category"), TEXT("FAxis"));
			MetaData->SetValue(NewProp_Axis, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwistCorrectiveNode.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAxis_CRC() { return 2273083320U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_AnimGraphRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AnimNode_TwoBoneIK"), sizeof(FAnimNode_TwoBoneIK), Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_TwoBoneIK"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_TwoBoneIK>, EStructFlags(0x00000201));
			UProperty* NewProp_JointTargetSpaceBoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetSpaceBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(JointTargetSpaceBoneName, FAnimNode_TwoBoneIK), 0x0010000000000005);
			UProperty* NewProp_JointTargetLocationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetLocationSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(JointTargetLocationSpace, FAnimNode_TwoBoneIK), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_EffectorLocationSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorLocationSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(EffectorLocationSpace, FAnimNode_TwoBoneIK), 0x0010000000000005, Z_Construct_UEnum_Engine_EBoneControlSpace());
			UProperty* NewProp_MaxStretchScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxStretchScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxStretchScale, FAnimNode_TwoBoneIK), 0x0010000000000005);
			UProperty* NewProp_StartStretchRatio = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartStretchRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StartStretchRatio, FAnimNode_TwoBoneIK), 0x0010000000000005);
			UProperty* NewProp_StretchLimits = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StretchLimits"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StretchLimits_DEPRECATED, FAnimNode_TwoBoneIK), 0x0010000020000000, Z_Construct_UScriptStruct_FVector2D());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowStretching, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bAllowStretching = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowStretching"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowStretching, FAnimNode_TwoBoneIK), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowStretching, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bMaintainEffectorRelRot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bMaintainEffectorRelRot"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bMaintainEffectorRelRot, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK, uint8);
			UProperty* NewProp_bTakeRotationFromEffectorSpace = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTakeRotationFromEffectorSpace"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTakeRotationFromEffectorSpace, FAnimNode_TwoBoneIK), sizeof(uint8), false);
			UProperty* NewProp_EffectorSpaceBoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorSpaceBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EffectorSpaceBoneName, FAnimNode_TwoBoneIK), 0x0010000000000005);
			UProperty* NewProp_JointTargetLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("JointTargetLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(JointTargetLocation, FAnimNode_TwoBoneIK), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_EffectorLocation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EffectorLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EffectorLocation, FAnimNode_TwoBoneIK), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_IKBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IKBone"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IKBone, FAnimNode_TwoBoneIK), 0x0010000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Simple 2 Bone IK Controller."));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetSpaceBoneName, TEXT("ToolTip"), TEXT("If JointTargetSpaceBoneName is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetLocationSpace, TEXT("ToolTip"), TEXT("Reference frame of Joint Target Location."));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorLocationSpace, TEXT("ToolTip"), TEXT("Reference frame of Effector Location."));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("editcondition"), TEXT("bAllowStretching"));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("ToolTip"), TEXT("Limits to use if stretching is allowed. This value determins what is the max stretch scale. For example, 1.5 means it will stretch until 150 % of the whole length of the limb."));
			MetaData->SetValue(NewProp_MaxStretchScale, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("ClampMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("editcondition"), TEXT("bAllowStretching"));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("ToolTip"), TEXT("Limits to use if stretching is allowed. This value determines when to start stretch. For example, 0.9 means once it reaches 90% of the whole length of the limb, it will start apply."));
			MetaData->SetValue(NewProp_StartStretchRatio, TEXT("UIMin"), TEXT("0.0"));
			MetaData->SetValue(NewProp_StretchLimits, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_StretchLimits, TEXT("ToolTip"), TEXT("Limits to use if stretching is allowed - old property DEPRECATED"));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bAllowStretching, TEXT("ToolTip"), TEXT("Should stretching be allowed, to be prevent over extension"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bMaintainEffectorRelRot, TEXT("ToolTip"), TEXT("Keep local rotation of end bone"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_bTakeRotationFromEffectorSpace, TEXT("ToolTip"), TEXT("Set end bone to use End Effector rotation"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorSpaceBoneName, TEXT("ToolTip"), TEXT("If EffectorLocationSpace is a bone, this is the bone to use. *"));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("Category"), TEXT("JointTarget"));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_JointTargetLocation, TEXT("ToolTip"), TEXT("Joint Target Location. Location used to orient Joint bone. *"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("Category"), TEXT("EndEffector"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_EffectorLocation, TEXT("ToolTip"), TEXT("Effector Location. Target Location to reach."));
			MetaData->SetValue(NewProp_IKBone, TEXT("Category"), TEXT("IK"));
			MetaData->SetValue(NewProp_IKBone, TEXT("ModuleRelativePath"), TEXT("Public/BoneControllers/AnimNode_TwoBoneIK.h"));
			MetaData->SetValue(NewProp_IKBone, TEXT("ToolTip"), TEXT("Name of bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_TwoBoneIK_CRC() { return 4231895459U; }
	UPackage* Z_Construct_UPackage__Script_AnimGraphRuntime()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/AnimGraphRuntime")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA86E6CB5;
			Guid.B = 0x1F2C1588;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
