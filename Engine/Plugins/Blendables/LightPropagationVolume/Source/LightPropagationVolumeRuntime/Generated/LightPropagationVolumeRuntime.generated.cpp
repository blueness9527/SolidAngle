// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "LightPropagationVolumeRuntime.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1LightPropagationVolumeRuntime() {}
class UScriptStruct* FLightPropagationVolumeSettings::StaticStruct()
{
	extern LIGHTPROPAGATIONVOLUMERUNTIME_API class UPackage* Z_Construct_UPackage__Script_LightPropagationVolumeRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LIGHTPROPAGATIONVOLUMERUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FLightPropagationVolumeSettings();
		extern LIGHTPROPAGATIONVOLUMERUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FLightPropagationVolumeSettings_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FLightPropagationVolumeSettings, Z_Construct_UPackage__Script_LightPropagationVolumeRuntime(), TEXT("LightPropagationVolumeSettings"), sizeof(FLightPropagationVolumeSettings), Get_Z_Construct_UScriptStruct_FLightPropagationVolumeSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FLightPropagationVolumeSettings(FLightPropagationVolumeSettings::StaticStruct, TEXT("/Script/LightPropagationVolumeRuntime"), TEXT("LightPropagationVolumeSettings"), false, nullptr, nullptr);
static struct FScriptStruct_LightPropagationVolumeRuntime_StaticRegisterNativesFLightPropagationVolumeSettings
{
	FScriptStruct_LightPropagationVolumeRuntime_StaticRegisterNativesFLightPropagationVolumeSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("LightPropagationVolumeSettings")),new UScriptStruct::TCppStructOps<FLightPropagationVolumeSettings>);
	}
} ScriptStruct_LightPropagationVolumeRuntime_StaticRegisterNativesFLightPropagationVolumeSettings;
	void ULightPropagationVolumeBlendable::StaticRegisterNativesULightPropagationVolumeBlendable()
	{
	}
	IMPLEMENT_CLASS(ULightPropagationVolumeBlendable, 3651515613);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UBlendableInterface_NoRegister();

	LIGHTPROPAGATIONVOLUMERUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FLightPropagationVolumeSettings();
	LIGHTPROPAGATIONVOLUMERUNTIME_API class UClass* Z_Construct_UClass_ULightPropagationVolumeBlendable_NoRegister();
	LIGHTPROPAGATIONVOLUMERUNTIME_API class UClass* Z_Construct_UClass_ULightPropagationVolumeBlendable();
	LIGHTPROPAGATIONVOLUMERUNTIME_API class UPackage* Z_Construct_UPackage__Script_LightPropagationVolumeRuntime();
	UScriptStruct* Z_Construct_UScriptStruct_FLightPropagationVolumeSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_LightPropagationVolumeRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FLightPropagationVolumeSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("LightPropagationVolumeSettings"), sizeof(FLightPropagationVolumeSettings), Get_Z_Construct_UScriptStruct_FLightPropagationVolumeSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LightPropagationVolumeSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FLightPropagationVolumeSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_LPVSpecularOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVSpecularOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVSpecularOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVDiffuseOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVDiffuseOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVDiffuseOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVSpecularOcclusionExponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVSpecularOcclusionExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVSpecularOcclusionExponent, FLightPropagationVolumeSettings), 0x0010000200000005);
			UProperty* NewProp_LPVDiffuseOcclusionExponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVDiffuseOcclusionExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVDiffuseOcclusionExponent, FLightPropagationVolumeSettings), 0x0010000200000005);
			UProperty* NewProp_LPVDirectionalOcclusionRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVDirectionalOcclusionRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVDirectionalOcclusionRadius, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVDirectionalOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVDirectionalOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVDirectionalOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000200000005);
			UProperty* NewProp_LPVEmissiveInjectionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVEmissiveInjectionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVEmissiveInjectionIntensity, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVGeometryVolumeBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVGeometryVolumeBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVGeometryVolumeBias, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVSecondaryBounceIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVSecondaryBounceIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVSecondaryBounceIntensity, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVSecondaryOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVSecondaryOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVSecondaryOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000200000005);
			UProperty* NewProp_LPVSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVSize, FLightPropagationVolumeSettings), 0x0010000000000005);
			UProperty* NewProp_LPVVplInjectionBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVVplInjectionBias"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVVplInjectionBias, FLightPropagationVolumeSettings), 0x0010040200000005);
			UProperty* NewProp_LPVIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LPVIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LPVIntensity, FLightPropagationVolumeSettings), 0x0010000200000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVEmissiveInjectionIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVEmissiveInjectionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVEmissiveInjectionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVEmissiveInjectionIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVEmissiveInjectionIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVVplInjectionBias, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVVplInjectionBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVVplInjectionBias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVVplInjectionBias, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVVplInjectionBias, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVGeometryVolumeBias, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVGeometryVolumeBias = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVGeometryVolumeBias"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVGeometryVolumeBias, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVGeometryVolumeBias, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVSecondaryBounceIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVSecondaryBounceIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVSecondaryBounceIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVSecondaryBounceIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVSecondaryBounceIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVSecondaryOcclusionIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVSecondaryOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVSecondaryOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVSecondaryOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVSecondaryOcclusionIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVSize, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVSize"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVSize, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVSize, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVSpecularOcclusionIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVSpecularOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVSpecularOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVSpecularOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVSpecularOcclusionIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVDiffuseOcclusionIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVDiffuseOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVDiffuseOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVDiffuseOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVDiffuseOcclusionIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVSpecularOcclusionExponent, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVSpecularOcclusionExponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVSpecularOcclusionExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVSpecularOcclusionExponent, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVSpecularOcclusionExponent, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVDiffuseOcclusionExponent, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVDiffuseOcclusionExponent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVDiffuseOcclusionExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVDiffuseOcclusionExponent, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVDiffuseOcclusionExponent, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVDirectionalOcclusionRadius, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVDirectionalOcclusionRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVDirectionalOcclusionRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVDirectionalOcclusionRadius, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVDirectionalOcclusionRadius, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVDirectionalOcclusionIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVDirectionalOcclusionIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVDirectionalOcclusionIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVDirectionalOcclusionIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVDirectionalOcclusionIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_LPVIntensity, FLightPropagationVolumeSettings, uint8);
			UProperty* NewProp_bOverride_LPVIntensity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOverride_LPVIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_LPVIntensity, FLightPropagationVolumeSettings), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverride_LPVIntensity, FLightPropagationVolumeSettings), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("DisplayName"), TEXT("Specular occlusion intensity"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("editcondition"), TEXT("bOverride_LPVSpecularOcclusionIntensity"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("ToolTip"), TEXT("Specular occlusion intensity - higher values provide increased specular occlusion."));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("UIMax"), TEXT("4"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("DisplayName"), TEXT("Diffuse occlusion intensity"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("editcondition"), TEXT("bOverride_LPVDiffuseOcclusionIntensity"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("ToolTip"), TEXT("Diffuse occlusion intensity - higher values provide increased diffuse occlusion."));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("UIMax"), TEXT("4"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("DisplayName"), TEXT("Specular occlusion exponent"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("editcondition"), TEXT("bOverride_LPVSpecularOcclusionExponent"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("ToolTip"), TEXT("Specular occlusion exponent - increase for more contrast. 6 to 9 is recommended"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("UIMax"), TEXT("16"));
			MetaData->SetValue(NewProp_LPVSpecularOcclusionExponent, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("DisplayName"), TEXT("Diffuse occlusion exponent"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("editcondition"), TEXT("bOverride_LPVDiffuseOcclusionExponent"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("ToolTip"), TEXT("Diffuse occlusion exponent - increase for more contrast. 1 to 2 is recommended"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("UIMax"), TEXT("5"));
			MetaData->SetValue(NewProp_LPVDiffuseOcclusionExponent, TEXT("UIMin"), TEXT("0.5"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("DisplayName"), TEXT("Occlusion Radius"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("editcondition"), TEXT("bOverride_LPVDirectionalOcclusionRadius"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("ToolTip"), TEXT("Occlusion Radius - 16 is recommended for most scenes"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("UIMax"), TEXT("16"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionRadius, TEXT("UIMin"), TEXT("1"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("DisplayName"), TEXT("Occlusion Intensity"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("editcondition"), TEXT("bOverride_LPVDirectionalOcclusionIntensity"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("ToolTip"), TEXT("Controls the amount of directional occlusion. Requires LPV. Values very close to 1.0 are recommended"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_LPVDirectionalOcclusionIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("DisplayName"), TEXT("Emissive Injection Intensity"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("editcondition"), TEXT("bOverride_LPVEmissiveInjectionIntensity"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("UIMax"), TEXT("20"));
			MetaData->SetValue(NewProp_LPVEmissiveInjectionIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("DisplayName"), TEXT("Geometry Volume Bias"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("editcondition"), TEXT("bOverride_LPVGeometryVolumeBias"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("ToolTip"), TEXT("Bias applied to the geometry volume in cell units. Increase to reduce darkening due to secondary occlusion"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("UIMax"), TEXT("2"));
			MetaData->SetValue(NewProp_LPVGeometryVolumeBias, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("DisplayName"), TEXT("Secondary Bounce Intensity"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("editcondition"), TEXT("bOverride_LPVSecondaryBounceIntensity"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("ToolTip"), TEXT("Secondary bounce light strength (bounce light shadows). Set to 0 to disable"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_LPVSecondaryBounceIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("DisplayName"), TEXT("Secondary Occlusion Intensity"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("editcondition"), TEXT("bOverride_LPVSecondaryOcclusionIntensity"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("ToolTip"), TEXT("Secondary occlusion strength (bounce light shadows). Set to 0 to disable"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_LPVSecondaryOcclusionIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("DisplayName"), TEXT("Size"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("editcondition"), TEXT("bOverride_LPVSize"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("ToolTip"), TEXT("The size of the LPV volume, in Unreal units"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("UIMax"), TEXT("20000"));
			MetaData->SetValue(NewProp_LPVSize, TEXT("UIMin"), TEXT("100"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("DisplayName"), TEXT("Light Injection Bias"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("editcondition"), TEXT("bOverride_LPVVplInjectionBias"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("ToolTip"), TEXT("Bias applied to light injected into the LPV in cell units. Increase to reduce bleeding through thin walls"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("UIMax"), TEXT("2"));
			MetaData->SetValue(NewProp_LPVVplInjectionBias, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("Category"), TEXT("LightPropagationVolume"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("DisplayName"), TEXT("Intensity"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("editcondition"), TEXT("bOverride_LPVIntensity"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("ToolTip"), TEXT("How strong the dynamic GI from the LPV should be. 0.0 is off, 1.0 is the \"normal\" value, but higher values can be used to boost the effect"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("UIMax"), TEXT("20"));
			MetaData->SetValue(NewProp_LPVIntensity, TEXT("UIMin"), TEXT("0"));
			MetaData->SetValue(NewProp_bOverride_LPVEmissiveInjectionIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVEmissiveInjectionIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVEmissiveInjectionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVEmissiveInjectionIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVVplInjectionBias, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVVplInjectionBias, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVVplInjectionBias, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVVplInjectionBias, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVGeometryVolumeBias, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVGeometryVolumeBias, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVGeometryVolumeBias, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVGeometryVolumeBias, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryBounceIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryBounceIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryBounceIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryBounceIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryOcclusionIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryOcclusionIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVSecondaryOcclusionIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSize, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVSize, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSize, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVSize, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionExponent, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionExponent, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionExponent, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVSpecularOcclusionExponent, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionExponent, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionExponent, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionExponent, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVDiffuseOcclusionExponent, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionRadius, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionRadius, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionRadius, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionRadius, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVDirectionalOcclusionIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVIntensity, TEXT("Category"), TEXT("Overrides"));
			MetaData->SetValue(NewProp_bOverride_LPVIntensity, TEXT("InlineEditConditionToggle"), TEXT(""));
			MetaData->SetValue(NewProp_bOverride_LPVIntensity, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
			MetaData->SetValue(NewProp_bOverride_LPVIntensity, TEXT("PinHiddenByDefault"), TEXT(""));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FLightPropagationVolumeSettings_CRC() { return 2614695683U; }
	UClass* Z_Construct_UClass_ULightPropagationVolumeBlendable_NoRegister()
	{
		return ULightPropagationVolumeBlendable::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightPropagationVolumeBlendable()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_LightPropagationVolumeRuntime();
			OuterClass = ULightPropagationVolumeBlendable::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BlendWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BlendWeight, ULightPropagationVolumeBlendable), 0x0010000200000005);
				UProperty* NewProp_Settings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Settings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Settings, ULightPropagationVolumeBlendable), 0x0010000200000005, Z_Construct_UScriptStruct_FLightPropagationVolumeSettings());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UBlendableInterface_NoRegister(), VTABLE_OFFSET(ULightPropagationVolumeBlendable, IBlendableInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LightPropagationVolumeBlendable.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("BlueprintType to make the object spawnable in blueprint"));
				MetaData->SetValue(NewProp_BlendWeight, TEXT("Category"), TEXT("LightPropagationVolumeBlendable"));
				MetaData->SetValue(NewProp_BlendWeight, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
				MetaData->SetValue(NewProp_BlendWeight, TEXT("ToolTip"), TEXT("0:no effect, 1:full effect"));
				MetaData->SetValue(NewProp_BlendWeight, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BlendWeight, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_Settings, TEXT("Category"), TEXT("LightPropagationVolumeBlendable"));
				MetaData->SetValue(NewProp_Settings, TEXT("ModuleRelativePath"), TEXT("Public/LightPropagationVolumeBlendable.h"));
				MetaData->SetValue(NewProp_Settings, TEXT("ShowOnlyInnerProperties"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightPropagationVolumeBlendable(Z_Construct_UClass_ULightPropagationVolumeBlendable, &ULightPropagationVolumeBlendable::StaticClass, TEXT("ULightPropagationVolumeBlendable"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightPropagationVolumeBlendable);
	UPackage* Z_Construct_UPackage__Script_LightPropagationVolumeRuntime()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LightPropagationVolumeRuntime")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xAF4A96C9;
			Guid.B = 0xC6E3B9AB;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
